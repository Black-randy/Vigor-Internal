#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Flame

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "FlameUI_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CloudManager_structs.hpp"
#include "UMG_structs.hpp"
#include "Slate_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function Flame.DropPlaneMovementComponent.StartFlight
// 0x0028 (0x0028 - 0x0000)
struct DropPlaneMovementComponent_StartFlight final
{
public:
	struct FVector                                DirXY;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DropLocation;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlightRadius;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlightSpeed;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartHeightOffset;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropHeightOffset;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropPlaneMovementComponent_StartFlight) == 0x000004, "Wrong alignment on DropPlaneMovementComponent_StartFlight");
static_assert(sizeof(DropPlaneMovementComponent_StartFlight) == 0x000028, "Wrong size on DropPlaneMovementComponent_StartFlight");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, DirXY) == 0x000000, "Member 'DropPlaneMovementComponent_StartFlight::DirXY' has a wrong offset!");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, DropLocation) == 0x00000C, "Member 'DropPlaneMovementComponent_StartFlight::DropLocation' has a wrong offset!");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, FlightRadius) == 0x000018, "Member 'DropPlaneMovementComponent_StartFlight::FlightRadius' has a wrong offset!");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, FlightSpeed) == 0x00001C, "Member 'DropPlaneMovementComponent_StartFlight::FlightSpeed' has a wrong offset!");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, StartHeightOffset) == 0x000020, "Member 'DropPlaneMovementComponent_StartFlight::StartHeightOffset' has a wrong offset!");
static_assert(offsetof(DropPlaneMovementComponent_StartFlight, DropHeightOffset) == 0x000024, "Member 'DropPlaneMovementComponent_StartFlight::DropHeightOffset' has a wrong offset!");

// Function Flame.DropPlaneMovementComponent.IsCloseToDropLocation
// 0x0001 (0x0001 - 0x0000)
struct DropPlaneMovementComponent_IsCloseToDropLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropPlaneMovementComponent_IsCloseToDropLocation) == 0x000001, "Wrong alignment on DropPlaneMovementComponent_IsCloseToDropLocation");
static_assert(sizeof(DropPlaneMovementComponent_IsCloseToDropLocation) == 0x000001, "Wrong size on DropPlaneMovementComponent_IsCloseToDropLocation");
static_assert(offsetof(DropPlaneMovementComponent_IsCloseToDropLocation, ReturnValue) == 0x000000, "Member 'DropPlaneMovementComponent_IsCloseToDropLocation::ReturnValue' has a wrong offset!");

// Function Flame.DropPlaneMovementComponent.IsCloseToEndPoint
// 0x0001 (0x0001 - 0x0000)
struct DropPlaneMovementComponent_IsCloseToEndPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DropPlaneMovementComponent_IsCloseToEndPoint) == 0x000001, "Wrong alignment on DropPlaneMovementComponent_IsCloseToEndPoint");
static_assert(sizeof(DropPlaneMovementComponent_IsCloseToEndPoint) == 0x000001, "Wrong size on DropPlaneMovementComponent_IsCloseToEndPoint");
static_assert(offsetof(DropPlaneMovementComponent_IsCloseToEndPoint, ReturnValue) == 0x000000, "Member 'DropPlaneMovementComponent_IsCloseToEndPoint::ReturnValue' has a wrong offset!");

// Function Flame.WeaponCollisionBuilder.AddReport
// 0x0038 (0x0038 - 0x0000)
struct WeaponCollisionBuilder_AddReport final
{
public:
	struct FWeaponCollisionEntry                  Entry;                                             // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponCollisionBuilder_AddReport) == 0x000008, "Wrong alignment on WeaponCollisionBuilder_AddReport");
static_assert(sizeof(WeaponCollisionBuilder_AddReport) == 0x000038, "Wrong size on WeaponCollisionBuilder_AddReport");
static_assert(offsetof(WeaponCollisionBuilder_AddReport, Entry) == 0x000000, "Member 'WeaponCollisionBuilder_AddReport::Entry' has a wrong offset!");

// Function Flame.AccessorComponent.ClientNotifyAboutAccess
// 0x0008 (0x0008 - 0x0000)
struct AccessorComponent_ClientNotifyAboutAccess final
{
public:
	class AActor*                                 ActorForAccess;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccessorComponent_ClientNotifyAboutAccess) == 0x000008, "Wrong alignment on AccessorComponent_ClientNotifyAboutAccess");
static_assert(sizeof(AccessorComponent_ClientNotifyAboutAccess) == 0x000008, "Wrong size on AccessorComponent_ClientNotifyAboutAccess");
static_assert(offsetof(AccessorComponent_ClientNotifyAboutAccess, ActorForAccess) == 0x000000, "Member 'AccessorComponent_ClientNotifyAboutAccess::ActorForAccess' has a wrong offset!");

// Function Flame.AccessorComponent.ClientReactionOnInteract
// 0x0008 (0x0008 - 0x0000)
struct AccessorComponent_ClientReactionOnInteract final
{
public:
	class AActor*                                 InteractedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AccessorComponent_ClientReactionOnInteract) == 0x000008, "Wrong alignment on AccessorComponent_ClientReactionOnInteract");
static_assert(sizeof(AccessorComponent_ClientReactionOnInteract) == 0x000008, "Wrong size on AccessorComponent_ClientReactionOnInteract");
static_assert(offsetof(AccessorComponent_ClientReactionOnInteract, InteractedActor) == 0x000000, "Member 'AccessorComponent_ClientReactionOnInteract::InteractedActor' has a wrong offset!");

// Function Flame.CanAimComponent.CanAim
// 0x0001 (0x0001 - 0x0000)
struct CanAimComponent_CanAim final
{
public:
	ECanAimState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CanAimComponent_CanAim) == 0x000001, "Wrong alignment on CanAimComponent_CanAim");
static_assert(sizeof(CanAimComponent_CanAim) == 0x000001, "Wrong size on CanAimComponent_CanAim");
static_assert(offsetof(CanAimComponent_CanAim, ReturnValue) == 0x000000, "Member 'CanAimComponent_CanAim::ReturnValue' has a wrong offset!");

// Function Flame.CanAimComponent.GetUpHeightAdjustment
// 0x0004 (0x0004 - 0x0000)
struct CanAimComponent_GetUpHeightAdjustment final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CanAimComponent_GetUpHeightAdjustment) == 0x000004, "Wrong alignment on CanAimComponent_GetUpHeightAdjustment");
static_assert(sizeof(CanAimComponent_GetUpHeightAdjustment) == 0x000004, "Wrong size on CanAimComponent_GetUpHeightAdjustment");
static_assert(offsetof(CanAimComponent_GetUpHeightAdjustment, ReturnValue) == 0x000000, "Member 'CanAimComponent_GetUpHeightAdjustment::ReturnValue' has a wrong offset!");

// Function Flame.Item.OnRep_ItemStateBringDown
// 0x0008 (0x0008 - 0x0000)
struct Item_OnRep_ItemStateBringDown final
{
public:
	class UItemStateBringDown*                    OldState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_OnRep_ItemStateBringDown) == 0x000008, "Wrong alignment on Item_OnRep_ItemStateBringDown");
static_assert(sizeof(Item_OnRep_ItemStateBringDown) == 0x000008, "Wrong size on Item_OnRep_ItemStateBringDown");
static_assert(offsetof(Item_OnRep_ItemStateBringDown, OldState) == 0x000000, "Member 'Item_OnRep_ItemStateBringDown::OldState' has a wrong offset!");

// Function Flame.Item.OnRep_ItemStateBringUp
// 0x0008 (0x0008 - 0x0000)
struct Item_OnRep_ItemStateBringUp final
{
public:
	class UItemStateBringUp*                      OldState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_OnRep_ItemStateBringUp) == 0x000008, "Wrong alignment on Item_OnRep_ItemStateBringUp");
static_assert(sizeof(Item_OnRep_ItemStateBringUp) == 0x000008, "Wrong size on Item_OnRep_ItemStateBringUp");
static_assert(offsetof(Item_OnRep_ItemStateBringUp, OldState) == 0x000000, "Member 'Item_OnRep_ItemStateBringUp::OldState' has a wrong offset!");

// Function Flame.Item.CanBeDestroyed
// 0x0001 (0x0001 - 0x0000)
struct Item_CanBeDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_CanBeDestroyed) == 0x000001, "Wrong alignment on Item_CanBeDestroyed");
static_assert(sizeof(Item_CanBeDestroyed) == 0x000001, "Wrong size on Item_CanBeDestroyed");
static_assert(offsetof(Item_CanBeDestroyed, ReturnValue) == 0x000000, "Member 'Item_CanBeDestroyed::ReturnValue' has a wrong offset!");

// Function Flame.Item.CanBeUsedImpl
// 0x0001 (0x0001 - 0x0000)
struct Item_CanBeUsedImpl final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_CanBeUsedImpl) == 0x000001, "Wrong alignment on Item_CanBeUsedImpl");
static_assert(sizeof(Item_CanBeUsedImpl) == 0x000001, "Wrong size on Item_CanBeUsedImpl");
static_assert(offsetof(Item_CanBeUsedImpl, ReturnValue) == 0x000000, "Member 'Item_CanBeUsedImpl::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetCardImage
// 0x0008 (0x0008 - 0x0000)
struct Item_GetCardImage final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetCardImage) == 0x000008, "Wrong alignment on Item_GetCardImage");
static_assert(sizeof(Item_GetCardImage) == 0x000008, "Wrong size on Item_GetCardImage");
static_assert(offsetof(Item_GetCardImage, ReturnValue) == 0x000000, "Member 'Item_GetCardImage::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetCardSoftImage
// 0x0028 (0x0028 - 0x0000)
struct Item_GetCardSoftImage final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetCardSoftImage) == 0x000008, "Wrong alignment on Item_GetCardSoftImage");
static_assert(sizeof(Item_GetCardSoftImage) == 0x000028, "Wrong size on Item_GetCardSoftImage");
static_assert(offsetof(Item_GetCardSoftImage, ReturnValue) == 0x000000, "Member 'Item_GetCardSoftImage::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetCategory
// 0x0001 (0x0001 - 0x0000)
struct Item_GetCategory final
{
public:
	EItemCategory                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetCategory) == 0x000001, "Wrong alignment on Item_GetCategory");
static_assert(sizeof(Item_GetCategory) == 0x000001, "Wrong size on Item_GetCategory");
static_assert(offsetof(Item_GetCategory, ReturnValue) == 0x000000, "Member 'Item_GetCategory::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetCategoryName
// 0x0018 (0x0018 - 0x0000)
struct Item_GetCategoryName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetCategoryName) == 0x000008, "Wrong alignment on Item_GetCategoryName");
static_assert(sizeof(Item_GetCategoryName) == 0x000018, "Wrong size on Item_GetCategoryName");
static_assert(offsetof(Item_GetCategoryName, ReturnValue) == 0x000000, "Member 'Item_GetCategoryName::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct Item_GetCharacter final
{
public:
	class AHumanCharacter*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetCharacter) == 0x000008, "Wrong alignment on Item_GetCharacter");
static_assert(sizeof(Item_GetCharacter) == 0x000008, "Wrong size on Item_GetCharacter");
static_assert(offsetof(Item_GetCharacter, ReturnValue) == 0x000000, "Member 'Item_GetCharacter::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetDebugInfo
// 0x0010 (0x0010 - 0x0000)
struct Item_GetDebugInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetDebugInfo) == 0x000008, "Wrong alignment on Item_GetDebugInfo");
static_assert(sizeof(Item_GetDebugInfo) == 0x000010, "Wrong size on Item_GetDebugInfo");
static_assert(offsetof(Item_GetDebugInfo, ReturnValue) == 0x000000, "Member 'Item_GetDebugInfo::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct Item_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetDescription) == 0x000008, "Wrong alignment on Item_GetDescription");
static_assert(sizeof(Item_GetDescription) == 0x000018, "Wrong size on Item_GetDescription");
static_assert(offsetof(Item_GetDescription, ReturnValue) == 0x000000, "Member 'Item_GetDescription::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetIcon
// 0x0010 (0x0010 - 0x0000)
struct Item_GetIcon final
{
public:
	EIconSize                                     IconSize;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetIcon) == 0x000008, "Wrong alignment on Item_GetIcon");
static_assert(sizeof(Item_GetIcon) == 0x000010, "Wrong size on Item_GetIcon");
static_assert(offsetof(Item_GetIcon, IconSize) == 0x000000, "Member 'Item_GetIcon::IconSize' has a wrong offset!");
static_assert(offsetof(Item_GetIcon, ReturnValue) == 0x000008, "Member 'Item_GetIcon::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetIconSoft
// 0x0030 (0x0030 - 0x0000)
struct Item_GetIconSoft final
{
public:
	EIconSize                                     IconSize;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetIconSoft) == 0x000008, "Wrong alignment on Item_GetIconSoft");
static_assert(sizeof(Item_GetIconSoft) == 0x000030, "Wrong size on Item_GetIconSoft");
static_assert(offsetof(Item_GetIconSoft, IconSize) == 0x000000, "Member 'Item_GetIconSoft::IconSize' has a wrong offset!");
static_assert(offsetof(Item_GetIconSoft, ReturnValue) == 0x000008, "Member 'Item_GetIconSoft::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetItemName
// 0x0018 (0x0018 - 0x0000)
struct Item_GetItemName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetItemName) == 0x000008, "Wrong alignment on Item_GetItemName");
static_assert(sizeof(Item_GetItemName) == 0x000018, "Wrong size on Item_GetItemName");
static_assert(offsetof(Item_GetItemName, ReturnValue) == 0x000000, "Member 'Item_GetItemName::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetRarity
// 0x0004 (0x0004 - 0x0000)
struct Item_GetRarity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetRarity) == 0x000004, "Wrong alignment on Item_GetRarity");
static_assert(sizeof(Item_GetRarity) == 0x000004, "Wrong size on Item_GetRarity");
static_assert(offsetof(Item_GetRarity, ReturnValue) == 0x000000, "Member 'Item_GetRarity::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetShelterPreviewSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct Item_GetShelterPreviewSkeletalMesh final
{
public:
	class USkeletalMesh*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetShelterPreviewSkeletalMesh) == 0x000008, "Wrong alignment on Item_GetShelterPreviewSkeletalMesh");
static_assert(sizeof(Item_GetShelterPreviewSkeletalMesh) == 0x000008, "Wrong size on Item_GetShelterPreviewSkeletalMesh");
static_assert(offsetof(Item_GetShelterPreviewSkeletalMesh, ReturnValue) == 0x000000, "Member 'Item_GetShelterPreviewSkeletalMesh::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetShelterPreviewStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct Item_GetShelterPreviewStaticMesh final
{
public:
	class UStaticMesh*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetShelterPreviewStaticMesh) == 0x000008, "Wrong alignment on Item_GetShelterPreviewStaticMesh");
static_assert(sizeof(Item_GetShelterPreviewStaticMesh) == 0x000008, "Wrong size on Item_GetShelterPreviewStaticMesh");
static_assert(offsetof(Item_GetShelterPreviewStaticMesh, ReturnValue) == 0x000000, "Member 'Item_GetShelterPreviewStaticMesh::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetUnitWeight
// 0x0004 (0x0004 - 0x0000)
struct Item_GetUnitWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetUnitWeight) == 0x000004, "Wrong alignment on Item_GetUnitWeight");
static_assert(sizeof(Item_GetUnitWeight) == 0x000004, "Wrong size on Item_GetUnitWeight");
static_assert(offsetof(Item_GetUnitWeight, ReturnValue) == 0x000000, "Member 'Item_GetUnitWeight::ReturnValue' has a wrong offset!");

// Function Flame.Item.GetWeight
// 0x0004 (0x0004 - 0x0000)
struct Item_GetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Item_GetWeight) == 0x000004, "Wrong alignment on Item_GetWeight");
static_assert(sizeof(Item_GetWeight) == 0x000004, "Wrong size on Item_GetWeight");
static_assert(offsetof(Item_GetWeight, ReturnValue) == 0x000000, "Member 'Item_GetWeight::ReturnValue' has a wrong offset!");

// Function Flame.ItemForBackpack.GetCost
// 0x0004 (0x0004 - 0x0000)
struct ItemForBackpack_GetCost final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemForBackpack_GetCost) == 0x000004, "Wrong alignment on ItemForBackpack_GetCost");
static_assert(sizeof(ItemForBackpack_GetCost) == 0x000004, "Wrong size on ItemForBackpack_GetCost");
static_assert(offsetof(ItemForBackpack_GetCost, ReturnValue) == 0x000000, "Member 'ItemForBackpack_GetCost::ReturnValue' has a wrong offset!");

// Function Flame.ItemForBackpack.GetStackSize
// 0x0004 (0x0004 - 0x0000)
struct ItemForBackpack_GetStackSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemForBackpack_GetStackSize) == 0x000004, "Wrong alignment on ItemForBackpack_GetStackSize");
static_assert(sizeof(ItemForBackpack_GetStackSize) == 0x000004, "Wrong size on ItemForBackpack_GetStackSize");
static_assert(offsetof(ItemForBackpack_GetStackSize, ReturnValue) == 0x000000, "Member 'ItemForBackpack_GetStackSize::ReturnValue' has a wrong offset!");

// Function Flame.FlameWidget.ListenForInputAxis
// 0x001C (0x001C - 0x0000)
struct FlameWidget_ListenForInputAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bConsume;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(float AxisValue)>              Callback;                                          // 0x000C(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_ListenForInputAxis) == 0x000004, "Wrong alignment on FlameWidget_ListenForInputAxis");
static_assert(sizeof(FlameWidget_ListenForInputAxis) == 0x00001C, "Wrong size on FlameWidget_ListenForInputAxis");
static_assert(offsetof(FlameWidget_ListenForInputAxis, AxisName) == 0x000000, "Member 'FlameWidget_ListenForInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(FlameWidget_ListenForInputAxis, bConsume) == 0x000008, "Member 'FlameWidget_ListenForInputAxis::bConsume' has a wrong offset!");
static_assert(offsetof(FlameWidget_ListenForInputAxis, Callback) == 0x00000C, "Member 'FlameWidget_ListenForInputAxis::Callback' has a wrong offset!");

// Function Flame.FlameWidget.OnChildFocusChange
// 0x0008 (0x0008 - 0x0000)
struct FlameWidget_OnChildFocusChange final
{
public:
	class UWidget*                                Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_OnChildFocusChange) == 0x000008, "Wrong alignment on FlameWidget_OnChildFocusChange");
static_assert(sizeof(FlameWidget_OnChildFocusChange) == 0x000008, "Wrong size on FlameWidget_OnChildFocusChange");
static_assert(offsetof(FlameWidget_OnChildFocusChange, Widget) == 0x000000, "Member 'FlameWidget_OnChildFocusChange::Widget' has a wrong offset!");

// Function Flame.FlameWidget.OnChildFocusLost
// 0x0008 (0x0008 - 0x0000)
struct FlameWidget_OnChildFocusLost final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_OnChildFocusLost) == 0x000008, "Wrong alignment on FlameWidget_OnChildFocusLost");
static_assert(sizeof(FlameWidget_OnChildFocusLost) == 0x000008, "Wrong size on FlameWidget_OnChildFocusLost");
static_assert(offsetof(FlameWidget_OnChildFocusLost, InWidget) == 0x000000, "Member 'FlameWidget_OnChildFocusLost::InWidget' has a wrong offset!");

// Function Flame.FlameWidget.OnChildFocusReceived
// 0x0008 (0x0008 - 0x0000)
struct FlameWidget_OnChildFocusReceived final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_OnChildFocusReceived) == 0x000008, "Wrong alignment on FlameWidget_OnChildFocusReceived");
static_assert(sizeof(FlameWidget_OnChildFocusReceived) == 0x000008, "Wrong size on FlameWidget_OnChildFocusReceived");
static_assert(offsetof(FlameWidget_OnChildFocusReceived, InWidget) == 0x000000, "Member 'FlameWidget_OnChildFocusReceived::InWidget' has a wrong offset!");

// Function Flame.FlameWidget.StopListeningForInputAxis
// 0x0008 (0x0008 - 0x0000)
struct FlameWidget_StopListeningForInputAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_StopListeningForInputAxis) == 0x000004, "Wrong alignment on FlameWidget_StopListeningForInputAxis");
static_assert(sizeof(FlameWidget_StopListeningForInputAxis) == 0x000008, "Wrong size on FlameWidget_StopListeningForInputAxis");
static_assert(offsetof(FlameWidget_StopListeningForInputAxis, AxisName) == 0x000000, "Member 'FlameWidget_StopListeningForInputAxis::AxisName' has a wrong offset!");

// Function Flame.FlameWidget.GetFocusedWidget
// 0x0008 (0x0008 - 0x0000)
struct FlameWidget_GetFocusedWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_GetFocusedWidget) == 0x000008, "Wrong alignment on FlameWidget_GetFocusedWidget");
static_assert(sizeof(FlameWidget_GetFocusedWidget) == 0x000008, "Wrong size on FlameWidget_GetFocusedWidget");
static_assert(offsetof(FlameWidget_GetFocusedWidget, ReturnValue) == 0x000000, "Member 'FlameWidget_GetFocusedWidget::ReturnValue' has a wrong offset!");

// Function Flame.FlameWidget.GetInputAxesToConsume
// 0x0010 (0x0010 - 0x0000)
struct FlameWidget_GetInputAxesToConsume final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameWidget_GetInputAxesToConsume) == 0x000008, "Wrong alignment on FlameWidget_GetInputAxesToConsume");
static_assert(sizeof(FlameWidget_GetInputAxesToConsume) == 0x000010, "Wrong size on FlameWidget_GetInputAxesToConsume");
static_assert(offsetof(FlameWidget_GetInputAxesToConsume, ReturnValue) == 0x000000, "Member 'FlameWidget_GetInputAxesToConsume::ReturnValue' has a wrong offset!");

// Function Flame.FlameWidget.IsListeningForInputAxis
// 0x000C (0x000C - 0x0000)
struct FlameWidget_IsListeningForInputAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameWidget_IsListeningForInputAxis) == 0x000004, "Wrong alignment on FlameWidget_IsListeningForInputAxis");
static_assert(sizeof(FlameWidget_IsListeningForInputAxis) == 0x00000C, "Wrong size on FlameWidget_IsListeningForInputAxis");
static_assert(offsetof(FlameWidget_IsListeningForInputAxis, AxisName) == 0x000000, "Member 'FlameWidget_IsListeningForInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(FlameWidget_IsListeningForInputAxis, ReturnValue) == 0x000008, "Member 'FlameWidget_IsListeningForInputAxis::ReturnValue' has a wrong offset!");

// Function Flame.StoredItemsComponent.SotoreItems
// 0x0008 (0x0008 - 0x0000)
struct StoredItemsComponent_SotoreItems final
{
public:
	class UEquipmentStorageComponent*             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoredItemsComponent_SotoreItems) == 0x000008, "Wrong alignment on StoredItemsComponent_SotoreItems");
static_assert(sizeof(StoredItemsComponent_SotoreItems) == 0x000008, "Wrong size on StoredItemsComponent_SotoreItems");
static_assert(offsetof(StoredItemsComponent_SotoreItems, Target) == 0x000000, "Member 'StoredItemsComponent_SotoreItems::Target' has a wrong offset!");

// Function Flame.CanBeSelectedInterface.DoSelect
// 0x0001 (0x0001 - 0x0000)
struct CanBeSelectedInterface_DoSelect final
{
public:
	EInputIcon                                    InputAction;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CanBeSelectedInterface_DoSelect) == 0x000001, "Wrong alignment on CanBeSelectedInterface_DoSelect");
static_assert(sizeof(CanBeSelectedInterface_DoSelect) == 0x000001, "Wrong size on CanBeSelectedInterface_DoSelect");
static_assert(offsetof(CanBeSelectedInterface_DoSelect, InputAction) == 0x000000, "Member 'CanBeSelectedInterface_DoSelect::InputAction' has a wrong offset!");

// Function Flame.ActionMachineDebugWidget.GetItemStatesHistory
// 0x0010 (0x0010 - 0x0000)
struct ActionMachineDebugWidget_GetItemStatesHistory final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionMachineDebugWidget_GetItemStatesHistory) == 0x000008, "Wrong alignment on ActionMachineDebugWidget_GetItemStatesHistory");
static_assert(sizeof(ActionMachineDebugWidget_GetItemStatesHistory) == 0x000010, "Wrong size on ActionMachineDebugWidget_GetItemStatesHistory");
static_assert(offsetof(ActionMachineDebugWidget_GetItemStatesHistory, ReturnValue) == 0x000000, "Member 'ActionMachineDebugWidget_GetItemStatesHistory::ReturnValue' has a wrong offset!");

// Function Flame.CanvasFunctions.DrawMaterialQuads
// 0x0020 (0x0020 - 0x0000)
struct CanvasFunctions_DrawMaterialQuads final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     RenderMaterial;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCanvasUVQuad>                  Quads;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CanvasFunctions_DrawMaterialQuads) == 0x000008, "Wrong alignment on CanvasFunctions_DrawMaterialQuads");
static_assert(sizeof(CanvasFunctions_DrawMaterialQuads) == 0x000020, "Wrong size on CanvasFunctions_DrawMaterialQuads");
static_assert(offsetof(CanvasFunctions_DrawMaterialQuads, Canvas) == 0x000000, "Member 'CanvasFunctions_DrawMaterialQuads::Canvas' has a wrong offset!");
static_assert(offsetof(CanvasFunctions_DrawMaterialQuads, RenderMaterial) == 0x000008, "Member 'CanvasFunctions_DrawMaterialQuads::RenderMaterial' has a wrong offset!");
static_assert(offsetof(CanvasFunctions_DrawMaterialQuads, Quads) == 0x000010, "Member 'CanvasFunctions_DrawMaterialQuads::Quads' has a wrong offset!");

// Function Flame.EditorTools.GetRealTimeForUserInterface
// 0x0004 (0x0004 - 0x0000)
struct EditorTools_GetRealTimeForUserInterface final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorTools_GetRealTimeForUserInterface) == 0x000004, "Wrong alignment on EditorTools_GetRealTimeForUserInterface");
static_assert(sizeof(EditorTools_GetRealTimeForUserInterface) == 0x000004, "Wrong size on EditorTools_GetRealTimeForUserInterface");
static_assert(offsetof(EditorTools_GetRealTimeForUserInterface, ReturnValue) == 0x000000, "Member 'EditorTools_GetRealTimeForUserInterface::ReturnValue' has a wrong offset!");

// Function Flame.EditorTools.GetSelectedActors
// 0x0010 (0x0010 - 0x0000)
struct EditorTools_GetSelectedActors final
{
public:
	TArray<class AActor*>                         ActorList;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorTools_GetSelectedActors) == 0x000008, "Wrong alignment on EditorTools_GetSelectedActors");
static_assert(sizeof(EditorTools_GetSelectedActors) == 0x000010, "Wrong size on EditorTools_GetSelectedActors");
static_assert(offsetof(EditorTools_GetSelectedActors, ActorList) == 0x000000, "Member 'EditorTools_GetSelectedActors::ActorList' has a wrong offset!");

// Function Flame.EditorTools.IsPreviewActor
// 0x0010 (0x0010 - 0x0000)
struct EditorTools_IsPreviewActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorTools_IsPreviewActor) == 0x000008, "Wrong alignment on EditorTools_IsPreviewActor");
static_assert(sizeof(EditorTools_IsPreviewActor) == 0x000010, "Wrong size on EditorTools_IsPreviewActor");
static_assert(offsetof(EditorTools_IsPreviewActor, Actor) == 0x000000, "Member 'EditorTools_IsPreviewActor::Actor' has a wrong offset!");
static_assert(offsetof(EditorTools_IsPreviewActor, ReturnValue) == 0x000008, "Member 'EditorTools_IsPreviewActor::ReturnValue' has a wrong offset!");

// Function Flame.EditorTools.SelectActor
// 0x0010 (0x0010 - 0x0000)
struct EditorTools_SelectActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddToSelection;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorTools_SelectActor) == 0x000008, "Wrong alignment on EditorTools_SelectActor");
static_assert(sizeof(EditorTools_SelectActor) == 0x000010, "Wrong size on EditorTools_SelectActor");
static_assert(offsetof(EditorTools_SelectActor, Actor) == 0x000000, "Member 'EditorTools_SelectActor::Actor' has a wrong offset!");
static_assert(offsetof(EditorTools_SelectActor, AddToSelection) == 0x000008, "Member 'EditorTools_SelectActor::AddToSelection' has a wrong offset!");

// Function Flame.EditorTools.UnSelectActor
// 0x0008 (0x0008 - 0x0000)
struct EditorTools_UnSelectActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorTools_UnSelectActor) == 0x000008, "Wrong alignment on EditorTools_UnSelectActor");
static_assert(sizeof(EditorTools_UnSelectActor) == 0x000008, "Wrong size on EditorTools_UnSelectActor");
static_assert(offsetof(EditorTools_UnSelectActor, Actor) == 0x000000, "Member 'EditorTools_UnSelectActor::Actor' has a wrong offset!");

// Function Flame.Customization.GetMeshForGender
// 0x0010 (0x0010 - 0x0000)
struct Customization_GetMeshForGender final
{
public:
	TSubclassOf<class AGender>                    Gender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Customization_GetMeshForGender) == 0x000008, "Wrong alignment on Customization_GetMeshForGender");
static_assert(sizeof(Customization_GetMeshForGender) == 0x000010, "Wrong size on Customization_GetMeshForGender");
static_assert(offsetof(Customization_GetMeshForGender, Gender) == 0x000000, "Member 'Customization_GetMeshForGender::Gender' has a wrong offset!");
static_assert(offsetof(Customization_GetMeshForGender, ReturnValue) == 0x000008, "Member 'Customization_GetMeshForGender::ReturnValue' has a wrong offset!");

// Function Flame.Customization.IsCompatibleWithSlot
// 0x0010 (0x0010 - 0x0000)
struct Customization_IsCompatibleWithSlot final
{
public:
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Customization_IsCompatibleWithSlot) == 0x000008, "Wrong alignment on Customization_IsCompatibleWithSlot");
static_assert(sizeof(Customization_IsCompatibleWithSlot) == 0x000010, "Wrong size on Customization_IsCompatibleWithSlot");
static_assert(offsetof(Customization_IsCompatibleWithSlot, Slot) == 0x000000, "Member 'Customization_IsCompatibleWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(Customization_IsCompatibleWithSlot, ReturnValue) == 0x000008, "Member 'Customization_IsCompatibleWithSlot::ReturnValue' has a wrong offset!");

// Function Flame.AimAssistComponent.OnInputDetectorModeChanged
// 0x0008 (0x0008 - 0x0000)
struct AimAssistComponent_OnInputDetectorModeChanged final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputMode                                    NewMode;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AimAssistComponent_OnInputDetectorModeChanged) == 0x000004, "Wrong alignment on AimAssistComponent_OnInputDetectorModeChanged");
static_assert(sizeof(AimAssistComponent_OnInputDetectorModeChanged) == 0x000008, "Wrong size on AimAssistComponent_OnInputDetectorModeChanged");
static_assert(offsetof(AimAssistComponent_OnInputDetectorModeChanged, PlayerIndex) == 0x000000, "Member 'AimAssistComponent_OnInputDetectorModeChanged::PlayerIndex' has a wrong offset!");
static_assert(offsetof(AimAssistComponent_OnInputDetectorModeChanged, NewMode) == 0x000004, "Member 'AimAssistComponent_OnInputDetectorModeChanged::NewMode' has a wrong offset!");

// Function Flame.AmbienceAreaBase.AddProceduralSound
// 0x0010 (0x0010 - 0x0000)
struct AmbienceAreaBase_AddProceduralSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDelay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDelay;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbienceAreaBase_AddProceduralSound) == 0x000008, "Wrong alignment on AmbienceAreaBase_AddProceduralSound");
static_assert(sizeof(AmbienceAreaBase_AddProceduralSound) == 0x000010, "Wrong size on AmbienceAreaBase_AddProceduralSound");
static_assert(offsetof(AmbienceAreaBase_AddProceduralSound, Sound) == 0x000000, "Member 'AmbienceAreaBase_AddProceduralSound::Sound' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_AddProceduralSound, MinDelay) == 0x000008, "Member 'AmbienceAreaBase_AddProceduralSound::MinDelay' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_AddProceduralSound, MaxDelay) == 0x00000C, "Member 'AmbienceAreaBase_AddProceduralSound::MaxDelay' has a wrong offset!");

// Function Flame.AmbienceAreaBase.OnPlayProceduralSound
// 0x0010 (0x0010 - 0x0000)
struct AmbienceAreaBase_OnPlayProceduralSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaceOnGround;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbienceAreaBase_OnPlayProceduralSound) == 0x000008, "Wrong alignment on AmbienceAreaBase_OnPlayProceduralSound");
static_assert(sizeof(AmbienceAreaBase_OnPlayProceduralSound) == 0x000010, "Wrong size on AmbienceAreaBase_OnPlayProceduralSound");
static_assert(offsetof(AmbienceAreaBase_OnPlayProceduralSound, Sound) == 0x000000, "Member 'AmbienceAreaBase_OnPlayProceduralSound::Sound' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_OnPlayProceduralSound, PlaceOnGround) == 0x000008, "Member 'AmbienceAreaBase_OnPlayProceduralSound::PlaceOnGround' has a wrong offset!");

// Function Flame.AmbienceAreaBase.GetRelativeDistanceFromCenter
// 0x0014 (0x0014 - 0x0000)
struct AmbienceAreaBase_GetRelativeDistanceFromCenter final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInnerOnly;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamped;                                          // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbienceAreaBase_GetRelativeDistanceFromCenter) == 0x000004, "Wrong alignment on AmbienceAreaBase_GetRelativeDistanceFromCenter");
static_assert(sizeof(AmbienceAreaBase_GetRelativeDistanceFromCenter) == 0x000014, "Wrong size on AmbienceAreaBase_GetRelativeDistanceFromCenter");
static_assert(offsetof(AmbienceAreaBase_GetRelativeDistanceFromCenter, Location) == 0x000000, "Member 'AmbienceAreaBase_GetRelativeDistanceFromCenter::Location' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_GetRelativeDistanceFromCenter, bInnerOnly) == 0x00000C, "Member 'AmbienceAreaBase_GetRelativeDistanceFromCenter::bInnerOnly' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_GetRelativeDistanceFromCenter, bClamped) == 0x00000D, "Member 'AmbienceAreaBase_GetRelativeDistanceFromCenter::bClamped' has a wrong offset!");
static_assert(offsetof(AmbienceAreaBase_GetRelativeDistanceFromCenter, ReturnValue) == 0x000010, "Member 'AmbienceAreaBase_GetRelativeDistanceFromCenter::ReturnValue' has a wrong offset!");

// Function Flame.ItemsList.GetSlotsClassesConst
// 0x0010 (0x0010 - 0x0000)
struct ItemsList_GetSlotsClassesConst final
{
public:
	TArray<struct FBackpackItemSlot>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemsList_GetSlotsClassesConst) == 0x000008, "Wrong alignment on ItemsList_GetSlotsClassesConst");
static_assert(sizeof(ItemsList_GetSlotsClassesConst) == 0x000010, "Wrong size on ItemsList_GetSlotsClassesConst");
static_assert(offsetof(ItemsList_GetSlotsClassesConst, ReturnValue) == 0x000000, "Member 'ItemsList_GetSlotsClassesConst::ReturnValue' has a wrong offset!");

// Function Flame.CraftingList.GetMissingPartsFor
// 0x0018 (0x0018 - 0x0000)
struct CraftingList_GetMissingPartsFor final
{
public:
	TSubclassOf<class APlan>                      OnePlanClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class APartItem>>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingList_GetMissingPartsFor) == 0x000008, "Wrong alignment on CraftingList_GetMissingPartsFor");
static_assert(sizeof(CraftingList_GetMissingPartsFor) == 0x000018, "Wrong size on CraftingList_GetMissingPartsFor");
static_assert(offsetof(CraftingList_GetMissingPartsFor, OnePlanClass) == 0x000000, "Member 'CraftingList_GetMissingPartsFor::OnePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingList_GetMissingPartsFor, ReturnValue) == 0x000008, "Member 'CraftingList_GetMissingPartsFor::ReturnValue' has a wrong offset!");

// Function Flame.CraftingList.GetStashComponent
// 0x0008 (0x0008 - 0x0000)
struct CraftingList_GetStashComponent final
{
public:
	class UStashComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingList_GetStashComponent) == 0x000008, "Wrong alignment on CraftingList_GetStashComponent");
static_assert(sizeof(CraftingList_GetStashComponent) == 0x000008, "Wrong size on CraftingList_GetStashComponent");
static_assert(offsetof(CraftingList_GetStashComponent, ReturnValue) == 0x000000, "Member 'CraftingList_GetStashComponent::ReturnValue' has a wrong offset!");

// Function Flame.CraftingList.HasAllPartsFor
// 0x0010 (0x0010 - 0x0000)
struct CraftingList_HasAllPartsFor final
{
public:
	TSubclassOf<class APlan>                      OnePlanClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingList_HasAllPartsFor) == 0x000008, "Wrong alignment on CraftingList_HasAllPartsFor");
static_assert(sizeof(CraftingList_HasAllPartsFor) == 0x000010, "Wrong size on CraftingList_HasAllPartsFor");
static_assert(offsetof(CraftingList_HasAllPartsFor, OnePlanClass) == 0x000000, "Member 'CraftingList_HasAllPartsFor::OnePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingList_HasAllPartsFor, ReturnValue) == 0x000008, "Member 'CraftingList_HasAllPartsFor::ReturnValue' has a wrong offset!");

// Function Flame.CraftingList.IsPlanUnlocked
// 0x0010 (0x0010 - 0x0000)
struct CraftingList_IsPlanUnlocked final
{
public:
	TSubclassOf<class APlan>                      OnePlanClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingList_IsPlanUnlocked) == 0x000008, "Wrong alignment on CraftingList_IsPlanUnlocked");
static_assert(sizeof(CraftingList_IsPlanUnlocked) == 0x000010, "Wrong size on CraftingList_IsPlanUnlocked");
static_assert(offsetof(CraftingList_IsPlanUnlocked, OnePlanClass) == 0x000000, "Member 'CraftingList_IsPlanUnlocked::OnePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingList_IsPlanUnlocked, ReturnValue) == 0x000008, "Member 'CraftingList_IsPlanUnlocked::ReturnValue' has a wrong offset!");

// Function Flame.AmmoCraftingList.AssemblyAmmo
// 0x0010 (0x0010 - 0x0000)
struct AmmoCraftingList_AssemblyAmmo final
{
public:
	const class AAmmoPlan*                        OnePlan;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAmmoItem*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoCraftingList_AssemblyAmmo) == 0x000008, "Wrong alignment on AmmoCraftingList_AssemblyAmmo");
static_assert(sizeof(AmmoCraftingList_AssemblyAmmo) == 0x000010, "Wrong size on AmmoCraftingList_AssemblyAmmo");
static_assert(offsetof(AmmoCraftingList_AssemblyAmmo, OnePlan) == 0x000000, "Member 'AmmoCraftingList_AssemblyAmmo::OnePlan' has a wrong offset!");
static_assert(offsetof(AmmoCraftingList_AssemblyAmmo, ReturnValue) == 0x000008, "Member 'AmmoCraftingList_AssemblyAmmo::ReturnValue' has a wrong offset!");

// Function Flame.AmmoCraftingList.HasMaterialFor
// 0x0010 (0x0010 - 0x0000)
struct AmmoCraftingList_HasMaterialFor final
{
public:
	const class AAmmoPlan*                        OnePlan;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmmoCraftingList_HasMaterialFor) == 0x000008, "Wrong alignment on AmmoCraftingList_HasMaterialFor");
static_assert(sizeof(AmmoCraftingList_HasMaterialFor) == 0x000010, "Wrong size on AmmoCraftingList_HasMaterialFor");
static_assert(offsetof(AmmoCraftingList_HasMaterialFor, OnePlan) == 0x000000, "Member 'AmmoCraftingList_HasMaterialFor::OnePlan' has a wrong offset!");
static_assert(offsetof(AmmoCraftingList_HasMaterialFor, ReturnValue) == 0x000008, "Member 'AmmoCraftingList_HasMaterialFor::ReturnValue' has a wrong offset!");

// Function Flame.AmmoCraftingList.HowManyMaterialIsMissingFor
// 0x0010 (0x0010 - 0x0000)
struct AmmoCraftingList_HowManyMaterialIsMissingFor final
{
public:
	const class AAmmoPlan*                        OnePlan;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmmoCraftingList_HowManyMaterialIsMissingFor) == 0x000008, "Wrong alignment on AmmoCraftingList_HowManyMaterialIsMissingFor");
static_assert(sizeof(AmmoCraftingList_HowManyMaterialIsMissingFor) == 0x000010, "Wrong size on AmmoCraftingList_HowManyMaterialIsMissingFor");
static_assert(offsetof(AmmoCraftingList_HowManyMaterialIsMissingFor, OnePlan) == 0x000000, "Member 'AmmoCraftingList_HowManyMaterialIsMissingFor::OnePlan' has a wrong offset!");
static_assert(offsetof(AmmoCraftingList_HowManyMaterialIsMissingFor, ReturnValue) == 0x000008, "Member 'AmmoCraftingList_HowManyMaterialIsMissingFor::ReturnValue' has a wrong offset!");

// Function Flame.AnalyticsManager.SendEvent
// 0x0028 (0x0028 - 0x0000)
struct AnalyticsManager_SendEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            EventData;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnalyticsManager_SendEvent) == 0x000008, "Wrong alignment on AnalyticsManager_SendEvent");
static_assert(sizeof(AnalyticsManager_SendEvent) == 0x000028, "Wrong size on AnalyticsManager_SendEvent");
static_assert(offsetof(AnalyticsManager_SendEvent, WorldContextObject) == 0x000000, "Member 'AnalyticsManager_SendEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AnalyticsManager_SendEvent, EventName) == 0x000008, "Member 'AnalyticsManager_SendEvent::EventName' has a wrong offset!");
static_assert(offsetof(AnalyticsManager_SendEvent, EventData) == 0x000018, "Member 'AnalyticsManager_SendEvent::EventData' has a wrong offset!");
static_assert(offsetof(AnalyticsManager_SendEvent, ReturnValue) == 0x000020, "Member 'AnalyticsManager_SendEvent::ReturnValue' has a wrong offset!");

// Function Flame.AnalyticsManager.OnCloudStateChange
// 0x0002 (0x0002 - 0x0000)
struct AnalyticsManager_OnCloudStateChange final
{
public:
	ECloudManagerState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudManagerState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnalyticsManager_OnCloudStateChange) == 0x000001, "Wrong alignment on AnalyticsManager_OnCloudStateChange");
static_assert(sizeof(AnalyticsManager_OnCloudStateChange) == 0x000002, "Wrong size on AnalyticsManager_OnCloudStateChange");
static_assert(offsetof(AnalyticsManager_OnCloudStateChange, OldState) == 0x000000, "Member 'AnalyticsManager_OnCloudStateChange::OldState' has a wrong offset!");
static_assert(offsetof(AnalyticsManager_OnCloudStateChange, NewState) == 0x000001, "Member 'AnalyticsManager_OnCloudStateChange::NewState' has a wrong offset!");

// Function Flame.AudioComponentExtended.AdjustAttenuationExtended
// 0x03A0 (0x03A0 - 0x0000)
struct AudioComponentExtended_AdjustAttenuationExtended final
{
public:
	struct FSoundAttenuationSettings              InAttenuationSettings;                             // 0x0000(0x03A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_AdjustAttenuationExtended) == 0x000008, "Wrong alignment on AudioComponentExtended_AdjustAttenuationExtended");
static_assert(sizeof(AudioComponentExtended_AdjustAttenuationExtended) == 0x0003A0, "Wrong size on AudioComponentExtended_AdjustAttenuationExtended");
static_assert(offsetof(AudioComponentExtended_AdjustAttenuationExtended, InAttenuationSettings) == 0x000000, "Member 'AudioComponentExtended_AdjustAttenuationExtended::InAttenuationSettings' has a wrong offset!");

// Function Flame.AudioComponentExtended.FadeInDelayed
// 0x0010 (0x0010 - 0x0000)
struct AudioComponentExtended_FadeInDelayed final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInDuration;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_FadeInDelayed) == 0x000004, "Wrong alignment on AudioComponentExtended_FadeInDelayed");
static_assert(sizeof(AudioComponentExtended_FadeInDelayed) == 0x000010, "Wrong size on AudioComponentExtended_FadeInDelayed");
static_assert(offsetof(AudioComponentExtended_FadeInDelayed, Delay) == 0x000000, "Member 'AudioComponentExtended_FadeInDelayed::Delay' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_FadeInDelayed, FadeInDuration) == 0x000004, "Member 'AudioComponentExtended_FadeInDelayed::FadeInDuration' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_FadeInDelayed, FadeVolumeLevel) == 0x000008, "Member 'AudioComponentExtended_FadeInDelayed::FadeVolumeLevel' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_FadeInDelayed, StartTime) == 0x00000C, "Member 'AudioComponentExtended_FadeInDelayed::StartTime' has a wrong offset!");

// Function Flame.AudioComponentExtended.FadeOutDelayed
// 0x000C (0x000C - 0x0000)
struct AudioComponentExtended_FadeOutDelayed final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDuration;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeVolumeLevel;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_FadeOutDelayed) == 0x000004, "Wrong alignment on AudioComponentExtended_FadeOutDelayed");
static_assert(sizeof(AudioComponentExtended_FadeOutDelayed) == 0x00000C, "Wrong size on AudioComponentExtended_FadeOutDelayed");
static_assert(offsetof(AudioComponentExtended_FadeOutDelayed, Delay) == 0x000000, "Member 'AudioComponentExtended_FadeOutDelayed::Delay' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_FadeOutDelayed, FadeOutDuration) == 0x000004, "Member 'AudioComponentExtended_FadeOutDelayed::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_FadeOutDelayed, FadeVolumeLevel) == 0x000008, "Member 'AudioComponentExtended_FadeOutDelayed::FadeVolumeLevel' has a wrong offset!");

// Function Flame.AudioComponentExtended.PlayDelayed
// 0x0008 (0x0008 - 0x0000)
struct AudioComponentExtended_PlayDelayed final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_PlayDelayed) == 0x000004, "Wrong alignment on AudioComponentExtended_PlayDelayed");
static_assert(sizeof(AudioComponentExtended_PlayDelayed) == 0x000008, "Wrong size on AudioComponentExtended_PlayDelayed");
static_assert(offsetof(AudioComponentExtended_PlayDelayed, Delay) == 0x000000, "Member 'AudioComponentExtended_PlayDelayed::Delay' has a wrong offset!");
static_assert(offsetof(AudioComponentExtended_PlayDelayed, StartTime) == 0x000004, "Member 'AudioComponentExtended_PlayDelayed::StartTime' has a wrong offset!");

// Function Flame.AudioComponentExtended.SetApplyEnvironmentParameters
// 0x0001 (0x0001 - 0x0000)
struct AudioComponentExtended_SetApplyEnvironmentParameters final
{
public:
	bool                                          bApply;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_SetApplyEnvironmentParameters) == 0x000001, "Wrong alignment on AudioComponentExtended_SetApplyEnvironmentParameters");
static_assert(sizeof(AudioComponentExtended_SetApplyEnvironmentParameters) == 0x000001, "Wrong size on AudioComponentExtended_SetApplyEnvironmentParameters");
static_assert(offsetof(AudioComponentExtended_SetApplyEnvironmentParameters, bApply) == 0x000000, "Member 'AudioComponentExtended_SetApplyEnvironmentParameters::bApply' has a wrong offset!");

// Function Flame.AudioComponentExtended.SetApplyWeatherParameters
// 0x0001 (0x0001 - 0x0000)
struct AudioComponentExtended_SetApplyWeatherParameters final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_SetApplyWeatherParameters) == 0x000001, "Wrong alignment on AudioComponentExtended_SetApplyWeatherParameters");
static_assert(sizeof(AudioComponentExtended_SetApplyWeatherParameters) == 0x000001, "Wrong size on AudioComponentExtended_SetApplyWeatherParameters");
static_assert(offsetof(AudioComponentExtended_SetApplyWeatherParameters, bEnable) == 0x000000, "Member 'AudioComponentExtended_SetApplyWeatherParameters::bEnable' has a wrong offset!");

// Function Flame.AudioComponentExtended.GetSoundTravelTimeForListener
// 0x0004 (0x0004 - 0x0000)
struct AudioComponentExtended_GetSoundTravelTimeForListener final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioComponentExtended_GetSoundTravelTimeForListener) == 0x000004, "Wrong alignment on AudioComponentExtended_GetSoundTravelTimeForListener");
static_assert(sizeof(AudioComponentExtended_GetSoundTravelTimeForListener) == 0x000004, "Wrong size on AudioComponentExtended_GetSoundTravelTimeForListener");
static_assert(offsetof(AudioComponentExtended_GetSoundTravelTimeForListener, ReturnValue) == 0x000000, "Member 'AudioComponentExtended_GetSoundTravelTimeForListener::ReturnValue' has a wrong offset!");

// Function Flame.ItemState.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct ItemState_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemState_GetDebugString) == 0x000008, "Wrong alignment on ItemState_GetDebugString");
static_assert(sizeof(ItemState_GetDebugString) == 0x000010, "Wrong size on ItemState_GetDebugString");
static_assert(offsetof(ItemState_GetDebugString, ReturnValue) == 0x000000, "Member 'ItemState_GetDebugString::ReturnValue' has a wrong offset!");

// Function Flame.ItemState.GetPhase
// 0x0001 (0x0001 - 0x0000)
struct ItemState_GetPhase final
{
public:
	EStatePhase                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemState_GetPhase) == 0x000001, "Wrong alignment on ItemState_GetPhase");
static_assert(sizeof(ItemState_GetPhase) == 0x000001, "Wrong size on ItemState_GetPhase");
static_assert(offsetof(ItemState_GetPhase, ReturnValue) == 0x000000, "Member 'ItemState_GetPhase::ReturnValue' has a wrong offset!");

// Function Flame.ItemState.GetRunningTimeInSec
// 0x0004 (0x0004 - 0x0000)
struct ItemState_GetRunningTimeInSec final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemState_GetRunningTimeInSec) == 0x000004, "Wrong alignment on ItemState_GetRunningTimeInSec");
static_assert(sizeof(ItemState_GetRunningTimeInSec) == 0x000004, "Wrong size on ItemState_GetRunningTimeInSec");
static_assert(offsetof(ItemState_GetRunningTimeInSec, ReturnValue) == 0x000000, "Member 'ItemState_GetRunningTimeInSec::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.CalculateBoxAttenuationValue
// 0x0060 (0x0060 - 0x0000)
struct AudioFunctions_CalculateBoxAttenuationValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SourceLocation;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SourceRotation;                                    // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxOffset;                                         // 0x002C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadiusRatio;                                  // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AttenuationCurveX;                                 // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AttenuationCurveY;                                 // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AttenuationCurveZ;                                 // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x005C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_CalculateBoxAttenuationValue) == 0x000008, "Wrong alignment on AudioFunctions_CalculateBoxAttenuationValue");
static_assert(sizeof(AudioFunctions_CalculateBoxAttenuationValue) == 0x000060, "Wrong size on AudioFunctions_CalculateBoxAttenuationValue");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, WorldContextObject) == 0x000000, "Member 'AudioFunctions_CalculateBoxAttenuationValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, SourceLocation) == 0x000008, "Member 'AudioFunctions_CalculateBoxAttenuationValue::SourceLocation' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, SourceRotation) == 0x000014, "Member 'AudioFunctions_CalculateBoxAttenuationValue::SourceRotation' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, BoxExtent) == 0x000020, "Member 'AudioFunctions_CalculateBoxAttenuationValue::BoxExtent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, BoxOffset) == 0x00002C, "Member 'AudioFunctions_CalculateBoxAttenuationValue::BoxOffset' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, InnerRadiusRatio) == 0x000038, "Member 'AudioFunctions_CalculateBoxAttenuationValue::InnerRadiusRatio' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, AttenuationCurveX) == 0x000040, "Member 'AudioFunctions_CalculateBoxAttenuationValue::AttenuationCurveX' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, AttenuationCurveY) == 0x000048, "Member 'AudioFunctions_CalculateBoxAttenuationValue::AttenuationCurveY' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, AttenuationCurveZ) == 0x000050, "Member 'AudioFunctions_CalculateBoxAttenuationValue::AttenuationCurveZ' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, bDebug) == 0x000058, "Member 'AudioFunctions_CalculateBoxAttenuationValue::bDebug' has a wrong offset!");
static_assert(offsetof(AudioFunctions_CalculateBoxAttenuationValue, ReturnValue) == 0x00005C, "Member 'AudioFunctions_CalculateBoxAttenuationValue::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetAudioListenerLocation
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_GetAudioListenerLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListenerIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_GetAudioListenerLocation) == 0x000008, "Wrong alignment on AudioFunctions_GetAudioListenerLocation");
static_assert(sizeof(AudioFunctions_GetAudioListenerLocation) == 0x000018, "Wrong size on AudioFunctions_GetAudioListenerLocation");
static_assert(offsetof(AudioFunctions_GetAudioListenerLocation, WorldContextObject) == 0x000000, "Member 'AudioFunctions_GetAudioListenerLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetAudioListenerLocation, ListenerIndex) == 0x000008, "Member 'AudioFunctions_GetAudioListenerLocation::ListenerIndex' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetAudioListenerLocation, ReturnValue) == 0x00000C, "Member 'AudioFunctions_GetAudioListenerLocation::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetAudioRelativeZLevel
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_GetAudioRelativeZLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_GetAudioRelativeZLevel) == 0x000008, "Wrong alignment on AudioFunctions_GetAudioRelativeZLevel");
static_assert(sizeof(AudioFunctions_GetAudioRelativeZLevel) == 0x000018, "Wrong size on AudioFunctions_GetAudioRelativeZLevel");
static_assert(offsetof(AudioFunctions_GetAudioRelativeZLevel, WorldContextObject) == 0x000000, "Member 'AudioFunctions_GetAudioRelativeZLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetAudioRelativeZLevel, Location) == 0x000008, "Member 'AudioFunctions_GetAudioRelativeZLevel::Location' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetAudioRelativeZLevel, ReturnValue) == 0x000014, "Member 'AudioFunctions_GetAudioRelativeZLevel::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetAudioWeatherInfo
// 0x0020 (0x0020 - 0x0000)
struct AudioFunctions_GetAudioWeatherInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioWeatherInfo                      ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_GetAudioWeatherInfo) == 0x000008, "Wrong alignment on AudioFunctions_GetAudioWeatherInfo");
static_assert(sizeof(AudioFunctions_GetAudioWeatherInfo) == 0x000020, "Wrong size on AudioFunctions_GetAudioWeatherInfo");
static_assert(offsetof(AudioFunctions_GetAudioWeatherInfo, WorldContextObject) == 0x000000, "Member 'AudioFunctions_GetAudioWeatherInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetAudioWeatherInfo, ReturnValue) == 0x000008, "Member 'AudioFunctions_GetAudioWeatherInfo::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetBoolParameter
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_GetBoolParameter final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_GetBoolParameter) == 0x000008, "Wrong alignment on AudioFunctions_GetBoolParameter");
static_assert(sizeof(AudioFunctions_GetBoolParameter) == 0x000018, "Wrong size on AudioFunctions_GetBoolParameter");
static_assert(offsetof(AudioFunctions_GetBoolParameter, AudioComponent) == 0x000000, "Member 'AudioFunctions_GetBoolParameter::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetBoolParameter, ParameterName) == 0x000008, "Member 'AudioFunctions_GetBoolParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetBoolParameter, ReturnValue) == 0x000010, "Member 'AudioFunctions_GetBoolParameter::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetFloatParameter
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_GetFloatParameter final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_GetFloatParameter) == 0x000008, "Wrong alignment on AudioFunctions_GetFloatParameter");
static_assert(sizeof(AudioFunctions_GetFloatParameter) == 0x000018, "Wrong size on AudioFunctions_GetFloatParameter");
static_assert(offsetof(AudioFunctions_GetFloatParameter, AudioComponent) == 0x000000, "Member 'AudioFunctions_GetFloatParameter::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetFloatParameter, ParameterName) == 0x000008, "Member 'AudioFunctions_GetFloatParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetFloatParameter, ReturnValue) == 0x000010, "Member 'AudioFunctions_GetFloatParameter::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetIntParameter
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_GetIntParameter final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_GetIntParameter) == 0x000008, "Wrong alignment on AudioFunctions_GetIntParameter");
static_assert(sizeof(AudioFunctions_GetIntParameter) == 0x000018, "Wrong size on AudioFunctions_GetIntParameter");
static_assert(offsetof(AudioFunctions_GetIntParameter, AudioComponent) == 0x000000, "Member 'AudioFunctions_GetIntParameter::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetIntParameter, ParameterName) == 0x000008, "Member 'AudioFunctions_GetIntParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetIntParameter, ReturnValue) == 0x000010, "Member 'AudioFunctions_GetIntParameter::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetSoundByGender
// 0x0020 (0x0020 - 0x0000)
struct AudioFunctions_GetSoundByGender final
{
public:
	class USoundBase*                             MaleSound;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             FemaleSound;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ActorWithCustomizationComponent;                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_GetSoundByGender) == 0x000008, "Wrong alignment on AudioFunctions_GetSoundByGender");
static_assert(sizeof(AudioFunctions_GetSoundByGender) == 0x000020, "Wrong size on AudioFunctions_GetSoundByGender");
static_assert(offsetof(AudioFunctions_GetSoundByGender, MaleSound) == 0x000000, "Member 'AudioFunctions_GetSoundByGender::MaleSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetSoundByGender, FemaleSound) == 0x000008, "Member 'AudioFunctions_GetSoundByGender::FemaleSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetSoundByGender, ActorWithCustomizationComponent) == 0x000010, "Member 'AudioFunctions_GetSoundByGender::ActorWithCustomizationComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetSoundByGender, ReturnValue) == 0x000018, "Member 'AudioFunctions_GetSoundByGender::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.GetSoundClass
// 0x0010 (0x0010 - 0x0000)
struct AudioFunctions_GetSoundClass final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundClass*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_GetSoundClass) == 0x000008, "Wrong alignment on AudioFunctions_GetSoundClass");
static_assert(sizeof(AudioFunctions_GetSoundClass) == 0x000010, "Wrong size on AudioFunctions_GetSoundClass");
static_assert(offsetof(AudioFunctions_GetSoundClass, Sound) == 0x000000, "Member 'AudioFunctions_GetSoundClass::Sound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_GetSoundClass, ReturnValue) == 0x000008, "Member 'AudioFunctions_GetSoundClass::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.HandleVehicleRainSound
// 0x0020 (0x0020 - 0x0000)
struct AudioFunctions_HandleVehicleRainSound final
{
public:
	float                                         RainAmount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RainAmountCurve;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AudioComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_HandleVehicleRainSound) == 0x000008, "Wrong alignment on AudioFunctions_HandleVehicleRainSound");
static_assert(sizeof(AudioFunctions_HandleVehicleRainSound) == 0x000020, "Wrong size on AudioFunctions_HandleVehicleRainSound");
static_assert(offsetof(AudioFunctions_HandleVehicleRainSound, RainAmount) == 0x000000, "Member 'AudioFunctions_HandleVehicleRainSound::RainAmount' has a wrong offset!");
static_assert(offsetof(AudioFunctions_HandleVehicleRainSound, RainAmountCurve) == 0x000008, "Member 'AudioFunctions_HandleVehicleRainSound::RainAmountCurve' has a wrong offset!");
static_assert(offsetof(AudioFunctions_HandleVehicleRainSound, AudioComponent) == 0x000010, "Member 'AudioFunctions_HandleVehicleRainSound::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_HandleVehicleRainSound, FadeInTime) == 0x000018, "Member 'AudioFunctions_HandleVehicleRainSound::FadeInTime' has a wrong offset!");
static_assert(offsetof(AudioFunctions_HandleVehicleRainSound, FadeOutTime) == 0x00001C, "Member 'AudioFunctions_HandleVehicleRainSound::FadeOutTime' has a wrong offset!");

// Function Flame.AudioFunctions.SetAudioListener
// 0x0020 (0x0020 - 0x0000)
struct AudioFunctions_SetAudioListener final
{
public:
	class USceneComponent*                        ListenerComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SetAudioListener) == 0x000008, "Wrong alignment on AudioFunctions_SetAudioListener");
static_assert(sizeof(AudioFunctions_SetAudioListener) == 0x000020, "Wrong size on AudioFunctions_SetAudioListener");
static_assert(offsetof(AudioFunctions_SetAudioListener, ListenerComponent) == 0x000000, "Member 'AudioFunctions_SetAudioListener::ListenerComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetAudioListener, Location) == 0x000008, "Member 'AudioFunctions_SetAudioListener::Location' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetAudioListener, Rotation) == 0x000014, "Member 'AudioFunctions_SetAudioListener::Rotation' has a wrong offset!");

// Function Flame.AudioFunctions.SetAudioListenerToCamera
// 0x0008 (0x0008 - 0x0000)
struct AudioFunctions_SetAudioListenerToCamera final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SetAudioListenerToCamera) == 0x000008, "Wrong alignment on AudioFunctions_SetAudioListenerToCamera");
static_assert(sizeof(AudioFunctions_SetAudioListenerToCamera) == 0x000008, "Wrong size on AudioFunctions_SetAudioListenerToCamera");
static_assert(offsetof(AudioFunctions_SetAudioListenerToCamera, WorldContextObject) == 0x000000, "Member 'AudioFunctions_SetAudioListenerToCamera::WorldContextObject' has a wrong offset!");

// Function Flame.AudioFunctions.SetBoolParameterSafe
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_SetBoolParameterSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InBool;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_SetBoolParameterSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetBoolParameterSafe");
static_assert(sizeof(AudioFunctions_SetBoolParameterSafe) == 0x000018, "Wrong size on AudioFunctions_SetBoolParameterSafe");
static_assert(offsetof(AudioFunctions_SetBoolParameterSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetBoolParameterSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetBoolParameterSafe, InName) == 0x000008, "Member 'AudioFunctions_SetBoolParameterSafe::InName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetBoolParameterSafe, InBool) == 0x000010, "Member 'AudioFunctions_SetBoolParameterSafe::InBool' has a wrong offset!");

// Function Flame.AudioFunctions.SetDefaultAudioListener
// 0x0008 (0x0008 - 0x0000)
struct AudioFunctions_SetDefaultAudioListener final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SetDefaultAudioListener) == 0x000008, "Wrong alignment on AudioFunctions_SetDefaultAudioListener");
static_assert(sizeof(AudioFunctions_SetDefaultAudioListener) == 0x000008, "Wrong size on AudioFunctions_SetDefaultAudioListener");
static_assert(offsetof(AudioFunctions_SetDefaultAudioListener, WorldContextObject) == 0x000000, "Member 'AudioFunctions_SetDefaultAudioListener::WorldContextObject' has a wrong offset!");

// Function Flame.AudioFunctions.SetFloatParameterSafe
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_SetFloatParameterSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFloat;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_SetFloatParameterSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetFloatParameterSafe");
static_assert(sizeof(AudioFunctions_SetFloatParameterSafe) == 0x000018, "Wrong size on AudioFunctions_SetFloatParameterSafe");
static_assert(offsetof(AudioFunctions_SetFloatParameterSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetFloatParameterSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetFloatParameterSafe, InName) == 0x000008, "Member 'AudioFunctions_SetFloatParameterSafe::InName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetFloatParameterSafe, InFloat) == 0x000010, "Member 'AudioFunctions_SetFloatParameterSafe::InFloat' has a wrong offset!");

// Function Flame.AudioFunctions.SetIntParameterSafe
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_SetIntParameterSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InInt;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_SetIntParameterSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetIntParameterSafe");
static_assert(sizeof(AudioFunctions_SetIntParameterSafe) == 0x000018, "Wrong size on AudioFunctions_SetIntParameterSafe");
static_assert(offsetof(AudioFunctions_SetIntParameterSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetIntParameterSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetIntParameterSafe, InName) == 0x000008, "Member 'AudioFunctions_SetIntParameterSafe::InName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetIntParameterSafe, InInt) == 0x000010, "Member 'AudioFunctions_SetIntParameterSafe::InInt' has a wrong offset!");

// Function Flame.AudioFunctions.SetPitchMultiplierSafe
// 0x0010 (0x0010 - 0x0000)
struct AudioFunctions_SetPitchMultiplierSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPitchMultiplier;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_SetPitchMultiplierSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetPitchMultiplierSafe");
static_assert(sizeof(AudioFunctions_SetPitchMultiplierSafe) == 0x000010, "Wrong size on AudioFunctions_SetPitchMultiplierSafe");
static_assert(offsetof(AudioFunctions_SetPitchMultiplierSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetPitchMultiplierSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetPitchMultiplierSafe, NewPitchMultiplier) == 0x000008, "Member 'AudioFunctions_SetPitchMultiplierSafe::NewPitchMultiplier' has a wrong offset!");

// Function Flame.AudioFunctions.SetVolumeMultiplierSafe
// 0x0010 (0x0010 - 0x0000)
struct AudioFunctions_SetVolumeMultiplierSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVolumeMultiplier;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioFunctions_SetVolumeMultiplierSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetVolumeMultiplierSafe");
static_assert(sizeof(AudioFunctions_SetVolumeMultiplierSafe) == 0x000010, "Wrong size on AudioFunctions_SetVolumeMultiplierSafe");
static_assert(offsetof(AudioFunctions_SetVolumeMultiplierSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetVolumeMultiplierSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetVolumeMultiplierSafe, NewVolumeMultiplier) == 0x000008, "Member 'AudioFunctions_SetVolumeMultiplierSafe::NewVolumeMultiplier' has a wrong offset!");

// Function Flame.AudioFunctions.SetWaveParameterSafe
// 0x0018 (0x0018 - 0x0000)
struct AudioFunctions_SetWaveParameterSafe final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InName;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             InWave;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SetWaveParameterSafe) == 0x000008, "Wrong alignment on AudioFunctions_SetWaveParameterSafe");
static_assert(sizeof(AudioFunctions_SetWaveParameterSafe) == 0x000018, "Wrong size on AudioFunctions_SetWaveParameterSafe");
static_assert(offsetof(AudioFunctions_SetWaveParameterSafe, AudioComponent) == 0x000000, "Member 'AudioFunctions_SetWaveParameterSafe::AudioComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetWaveParameterSafe, InName) == 0x000008, "Member 'AudioFunctions_SetWaveParameterSafe::InName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SetWaveParameterSafe, InWave) == 0x000010, "Member 'AudioFunctions_SetWaveParameterSafe::InWave' has a wrong offset!");

// Function Flame.AudioFunctions.SpawnSoundAtLocationExtended
// 0x0060 (0x0060 - 0x0000)
struct AudioFunctions_SpawnSoundAtLocationExtended final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpeedOfSound;                                  // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponentExtended*                ReturnValue;                                       // 0x0058(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SpawnSoundAtLocationExtended) == 0x000008, "Wrong alignment on AudioFunctions_SpawnSoundAtLocationExtended");
static_assert(sizeof(AudioFunctions_SpawnSoundAtLocationExtended) == 0x000060, "Wrong size on AudioFunctions_SpawnSoundAtLocationExtended");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, WorldContextObject) == 0x000000, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, Sound) == 0x000008, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::Sound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, Location) == 0x000010, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::Location' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, Rotation) == 0x00001C, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::Rotation' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, VolumeMultiplier) == 0x000028, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, PitchMultiplier) == 0x00002C, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, StartTime) == 0x000030, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::StartTime' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, Delay) == 0x000034, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::Delay' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, bUseSpeedOfSound) == 0x000038, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::bUseSpeedOfSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, AttenuationSettings) == 0x000040, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, ConcurrencySettings) == 0x000048, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, bAutoDestroy) == 0x000050, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAtLocationExtended, ReturnValue) == 0x000058, "Member 'AudioFunctions_SpawnSoundAtLocationExtended::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.SpawnSoundAttachedExtended
// 0x0068 (0x0068 - 0x0000)
struct AudioFunctions_SpawnSoundAttachedExtended final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpeedOfSound;                                  // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponentExtended*                ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SpawnSoundAttachedExtended) == 0x000008, "Wrong alignment on AudioFunctions_SpawnSoundAttachedExtended");
static_assert(sizeof(AudioFunctions_SpawnSoundAttachedExtended) == 0x000068, "Wrong size on AudioFunctions_SpawnSoundAttachedExtended");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, Sound) == 0x000000, "Member 'AudioFunctions_SpawnSoundAttachedExtended::Sound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, AttachToComponent) == 0x000008, "Member 'AudioFunctions_SpawnSoundAttachedExtended::AttachToComponent' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, AttachPointName) == 0x000010, "Member 'AudioFunctions_SpawnSoundAttachedExtended::AttachPointName' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, Location) == 0x000018, "Member 'AudioFunctions_SpawnSoundAttachedExtended::Location' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, Rotation) == 0x000024, "Member 'AudioFunctions_SpawnSoundAttachedExtended::Rotation' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, LocationType) == 0x000030, "Member 'AudioFunctions_SpawnSoundAttachedExtended::LocationType' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, bStopWhenAttachedToDestroyed) == 0x000031, "Member 'AudioFunctions_SpawnSoundAttachedExtended::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, VolumeMultiplier) == 0x000034, "Member 'AudioFunctions_SpawnSoundAttachedExtended::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, PitchMultiplier) == 0x000038, "Member 'AudioFunctions_SpawnSoundAttachedExtended::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, StartTime) == 0x00003C, "Member 'AudioFunctions_SpawnSoundAttachedExtended::StartTime' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, Delay) == 0x000040, "Member 'AudioFunctions_SpawnSoundAttachedExtended::Delay' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, bUseSpeedOfSound) == 0x000044, "Member 'AudioFunctions_SpawnSoundAttachedExtended::bUseSpeedOfSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, AttenuationSettings) == 0x000048, "Member 'AudioFunctions_SpawnSoundAttachedExtended::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, ConcurrencySettings) == 0x000050, "Member 'AudioFunctions_SpawnSoundAttachedExtended::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, bAutoDestroy) == 0x000058, "Member 'AudioFunctions_SpawnSoundAttachedExtended::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnSoundAttachedExtended, ReturnValue) == 0x000060, "Member 'AudioFunctions_SpawnSoundAttachedExtended::ReturnValue' has a wrong offset!");

// Function Flame.AudioFunctions.SpawnVoiceSound
// 0x0058 (0x0058 - 0x0000)
struct AudioFunctions_SpawnVoiceSound final
{
public:
	class USoundBase*                             MaleSound;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             FemaleSound;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        OwnerCharacter;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VoiceSoundType;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepeatTimeSeconds;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistAcrossLevelTransition;                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponentExtended*                ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFunctions_SpawnVoiceSound) == 0x000008, "Wrong alignment on AudioFunctions_SpawnVoiceSound");
static_assert(sizeof(AudioFunctions_SpawnVoiceSound) == 0x000058, "Wrong size on AudioFunctions_SpawnVoiceSound");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, MaleSound) == 0x000000, "Member 'AudioFunctions_SpawnVoiceSound::MaleSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, FemaleSound) == 0x000008, "Member 'AudioFunctions_SpawnVoiceSound::FemaleSound' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, OwnerCharacter) == 0x000010, "Member 'AudioFunctions_SpawnVoiceSound::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, VoiceSoundType) == 0x000018, "Member 'AudioFunctions_SpawnVoiceSound::VoiceSoundType' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, RepeatTimeSeconds) == 0x000020, "Member 'AudioFunctions_SpawnVoiceSound::RepeatTimeSeconds' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, bStopWhenAttachedToDestroyed) == 0x000024, "Member 'AudioFunctions_SpawnVoiceSound::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, VolumeMultiplier) == 0x000028, "Member 'AudioFunctions_SpawnVoiceSound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, PitchMultiplier) == 0x00002C, "Member 'AudioFunctions_SpawnVoiceSound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, StartTime) == 0x000030, "Member 'AudioFunctions_SpawnVoiceSound::StartTime' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, AttenuationSettings) == 0x000038, "Member 'AudioFunctions_SpawnVoiceSound::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, ConcurrencySettings) == 0x000040, "Member 'AudioFunctions_SpawnVoiceSound::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, bPersistAcrossLevelTransition) == 0x000048, "Member 'AudioFunctions_SpawnVoiceSound::bPersistAcrossLevelTransition' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, bAutoDestroy) == 0x000049, "Member 'AudioFunctions_SpawnVoiceSound::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(AudioFunctions_SpawnVoiceSound, ReturnValue) == 0x000050, "Member 'AudioFunctions_SpawnVoiceSound::ReturnValue' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.CountIndexesFromTraceResults
// 0x0028 (0x0028 - 0x0000)
struct AudioOcclusionComponentBase_CountIndexesFromTraceResults final
{
public:
	struct FAudioOcclusionMainTraceResult         MainTrace;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FAudioOcclusionSideTraceResult> SideTraces;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         OcclusionIndex;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowPassIndex;                                      // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_CountIndexesFromTraceResults) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_CountIndexesFromTraceResults");
static_assert(sizeof(AudioOcclusionComponentBase_CountIndexesFromTraceResults) == 0x000028, "Wrong size on AudioOcclusionComponentBase_CountIndexesFromTraceResults");
static_assert(offsetof(AudioOcclusionComponentBase_CountIndexesFromTraceResults, MainTrace) == 0x000000, "Member 'AudioOcclusionComponentBase_CountIndexesFromTraceResults::MainTrace' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_CountIndexesFromTraceResults, SideTraces) == 0x000010, "Member 'AudioOcclusionComponentBase_CountIndexesFromTraceResults::SideTraces' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_CountIndexesFromTraceResults, OcclusionIndex) == 0x000020, "Member 'AudioOcclusionComponentBase_CountIndexesFromTraceResults::OcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_CountIndexesFromTraceResults, LowPassIndex) == 0x000024, "Member 'AudioOcclusionComponentBase_CountIndexesFromTraceResults::LowPassIndex' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.EaseIndexes
// 0x001C (0x001C - 0x0000)
struct AudioOcclusionComponentBase_EaseIndexes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentOcclusionIndex;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentLowPassIndex;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousOcclusionIndex;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousLowPassIndex;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EasedOcclusionIndex;                               // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EasedLowPassIndex;                                 // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_EaseIndexes) == 0x000004, "Wrong alignment on AudioOcclusionComponentBase_EaseIndexes");
static_assert(sizeof(AudioOcclusionComponentBase_EaseIndexes) == 0x00001C, "Wrong size on AudioOcclusionComponentBase_EaseIndexes");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, DeltaTime) == 0x000000, "Member 'AudioOcclusionComponentBase_EaseIndexes::DeltaTime' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, CurrentOcclusionIndex) == 0x000004, "Member 'AudioOcclusionComponentBase_EaseIndexes::CurrentOcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, CurrentLowPassIndex) == 0x000008, "Member 'AudioOcclusionComponentBase_EaseIndexes::CurrentLowPassIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, PreviousOcclusionIndex) == 0x00000C, "Member 'AudioOcclusionComponentBase_EaseIndexes::PreviousOcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, PreviousLowPassIndex) == 0x000010, "Member 'AudioOcclusionComponentBase_EaseIndexes::PreviousLowPassIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, EasedOcclusionIndex) == 0x000014, "Member 'AudioOcclusionComponentBase_EaseIndexes::EasedOcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_EaseIndexes, EasedLowPassIndex) == 0x000018, "Member 'AudioOcclusionComponentBase_EaseIndexes::EasedLowPassIndex' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.LowPassIndexToLowPassFrequency
// 0x0008 (0x0008 - 0x0000)
struct AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency final
{
public:
	float                                         LowPassIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency) == 0x000004, "Wrong alignment on AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency");
static_assert(sizeof(AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency) == 0x000008, "Wrong size on AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency");
static_assert(offsetof(AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency, LowPassIndex) == 0x000000, "Member 'AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency::LowPassIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency, ReturnValue) == 0x000004, "Member 'AudioOcclusionComponentBase_LowPassIndexToLowPassFrequency::ReturnValue' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.OcclusionIndexToVolumeMultiplier
// 0x0008 (0x0008 - 0x0000)
struct AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier final
{
public:
	float                                         OcclusionIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier) == 0x000004, "Wrong alignment on AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier");
static_assert(sizeof(AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier) == 0x000008, "Wrong size on AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier");
static_assert(offsetof(AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier, OcclusionIndex) == 0x000000, "Member 'AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier::OcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier, ReturnValue) == 0x000004, "Member 'AudioOcclusionComponentBase_OcclusionIndexToVolumeMultiplier::ReturnValue' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PerformMainTrace
// 0x0018 (0x0018 - 0x0000)
struct AudioOcclusionComponentBase_PerformMainTrace final
{
public:
	const class UAudioComponent*                  AudioSource;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioOcclusionMainTraceResult         Result;                                            // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_PerformMainTrace) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_PerformMainTrace");
static_assert(sizeof(AudioOcclusionComponentBase_PerformMainTrace) == 0x000018, "Wrong size on AudioOcclusionComponentBase_PerformMainTrace");
static_assert(offsetof(AudioOcclusionComponentBase_PerformMainTrace, AudioSource) == 0x000000, "Member 'AudioOcclusionComponentBase_PerformMainTrace::AudioSource' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformMainTrace, Result) == 0x000008, "Member 'AudioOcclusionComponentBase_PerformMainTrace::Result' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PerformSideTrace
// 0x0028 (0x0028 - 0x0000)
struct AudioOcclusionComponentBase_PerformSideTrace final
{
public:
	const class UAudioComponent*                  AudioSource;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RingIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TraceInRingIndex;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainOcclusionIndex;                                // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainLowPassIndex;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioOcclusionSideTraceResult         Result;                                            // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_PerformSideTrace) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_PerformSideTrace");
static_assert(sizeof(AudioOcclusionComponentBase_PerformSideTrace) == 0x000028, "Wrong size on AudioOcclusionComponentBase_PerformSideTrace");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, AudioSource) == 0x000000, "Member 'AudioOcclusionComponentBase_PerformSideTrace::AudioSource' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, RingIndex) == 0x000008, "Member 'AudioOcclusionComponentBase_PerformSideTrace::RingIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, TraceInRingIndex) == 0x00000C, "Member 'AudioOcclusionComponentBase_PerformSideTrace::TraceInRingIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, MainOcclusionIndex) == 0x000010, "Member 'AudioOcclusionComponentBase_PerformSideTrace::MainOcclusionIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, MainLowPassIndex) == 0x000014, "Member 'AudioOcclusionComponentBase_PerformSideTrace::MainLowPassIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PerformSideTrace, Result) == 0x000018, "Member 'AudioOcclusionComponentBase_PerformSideTrace::Result' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PlayDebugSound
// 0x0018 (0x0018 - 0x0000)
struct AudioOcclusionComponentBase_PlayDebugSound final
{
public:
	class USoundBase*                             SoundToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioOcclusionComponentBase_PlayDebugSound) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_PlayDebugSound");
static_assert(sizeof(AudioOcclusionComponentBase_PlayDebugSound) == 0x000018, "Wrong size on AudioOcclusionComponentBase_PlayDebugSound");
static_assert(offsetof(AudioOcclusionComponentBase_PlayDebugSound, SoundToPlay) == 0x000000, "Member 'AudioOcclusionComponentBase_PlayDebugSound::SoundToPlay' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PlayDebugSound, Location) == 0x000008, "Member 'AudioOcclusionComponentBase_PlayDebugSound::Location' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PrintDebugDepthTraceHitInfo
// 0x0018 (0x0018 - 0x0000)
struct AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Depth;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceIndex;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionIndex;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo) == 0x000004, "Wrong alignment on AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo");
static_assert(sizeof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo) == 0x000018, "Wrong size on AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, SurfaceType) == 0x000000, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::SurfaceType' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, Depth) == 0x000004, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::Depth' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, DepthIndex) == 0x000008, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::DepthIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, Distance) == 0x00000C, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::Distance' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, DistanceIndex) == 0x000010, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::DistanceIndex' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo, OcclusionIndex) == 0x000014, "Member 'AudioOcclusionComponentBase_PrintDebugDepthTraceHitInfo::OcclusionIndex' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PrintDebugFloat
// 0x0018 (0x0018 - 0x0000)
struct AudioOcclusionComponentBase_PrintDebugFloat final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioOcclusionComponentBase_PrintDebugFloat) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_PrintDebugFloat");
static_assert(sizeof(AudioOcclusionComponentBase_PrintDebugFloat) == 0x000018, "Wrong size on AudioOcclusionComponentBase_PrintDebugFloat");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugFloat, Name_0) == 0x000000, "Member 'AudioOcclusionComponentBase_PrintDebugFloat::Name_0' has a wrong offset!");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugFloat, Value) == 0x000010, "Member 'AudioOcclusionComponentBase_PrintDebugFloat::Value' has a wrong offset!");

// Function Flame.AudioOcclusionComponentBase.PrintDebugString
// 0x0010 (0x0010 - 0x0000)
struct AudioOcclusionComponentBase_PrintDebugString final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioOcclusionComponentBase_PrintDebugString) == 0x000008, "Wrong alignment on AudioOcclusionComponentBase_PrintDebugString");
static_assert(sizeof(AudioOcclusionComponentBase_PrintDebugString) == 0x000010, "Wrong size on AudioOcclusionComponentBase_PrintDebugString");
static_assert(offsetof(AudioOcclusionComponentBase_PrintDebugString, Text) == 0x000000, "Member 'AudioOcclusionComponentBase_PrintDebugString::Text' has a wrong offset!");

// Function Flame.AmmoPlan.GetAmmoClass
// 0x0008 (0x0008 - 0x0000)
struct AmmoPlan_GetAmmoClass final
{
public:
	TSubclassOf<class AAmmoItem>                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmmoPlan_GetAmmoClass) == 0x000008, "Wrong alignment on AmmoPlan_GetAmmoClass");
static_assert(sizeof(AmmoPlan_GetAmmoClass) == 0x000008, "Wrong size on AmmoPlan_GetAmmoClass");
static_assert(offsetof(AmmoPlan_GetAmmoClass, ReturnValue) == 0x000000, "Member 'AmmoPlan_GetAmmoClass::ReturnValue' has a wrong offset!");

// Function Flame.CustomisationMeshComponent.GetSlot
// 0x0008 (0x0008 - 0x0000)
struct CustomisationMeshComponent_GetSlot final
{
public:
	TSubclassOf<class ACustomizationSlot>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomisationMeshComponent_GetSlot) == 0x000008, "Wrong alignment on CustomisationMeshComponent_GetSlot");
static_assert(sizeof(CustomisationMeshComponent_GetSlot) == 0x000008, "Wrong size on CustomisationMeshComponent_GetSlot");
static_assert(offsetof(CustomisationMeshComponent_GetSlot, ReturnValue) == 0x000000, "Member 'CustomisationMeshComponent_GetSlot::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.ClaimBattlePassRewards
// 0x0020 (0x0020 - 0x0000)
struct BattlePassSystem_ClaimBattlePassRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudBattlePassSeasonClaim>    ClaimInfo;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_ClaimBattlePassRewards) == 0x000008, "Wrong alignment on BattlePassSystem_ClaimBattlePassRewards");
static_assert(sizeof(BattlePassSystem_ClaimBattlePassRewards) == 0x000020, "Wrong size on BattlePassSystem_ClaimBattlePassRewards");
static_assert(offsetof(BattlePassSystem_ClaimBattlePassRewards, Player) == 0x000000, "Member 'BattlePassSystem_ClaimBattlePassRewards::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_ClaimBattlePassRewards, ClaimInfo) == 0x000008, "Member 'BattlePassSystem_ClaimBattlePassRewards::ClaimInfo' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_ClaimBattlePassRewards, ReturnValue) == 0x000018, "Member 'BattlePassSystem_ClaimBattlePassRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.ClaimBattlePassRewardsDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudBattlePassRewardsClaim           Data;                                              // 0x0058(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature");
static_assert(sizeof(BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature) == 0x000078, "Wrong size on BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature");
static_assert(offsetof(BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'BattlePassSystem_ClaimBattlePassRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.BattlePassSystem.GetAllBattlePassSeasonsState
// 0x0010 (0x0010 - 0x0000)
struct BattlePassSystem_GetAllBattlePassSeasonsState final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_GetAllBattlePassSeasonsState) == 0x000008, "Wrong alignment on BattlePassSystem_GetAllBattlePassSeasonsState");
static_assert(sizeof(BattlePassSystem_GetAllBattlePassSeasonsState) == 0x000010, "Wrong size on BattlePassSystem_GetAllBattlePassSeasonsState");
static_assert(offsetof(BattlePassSystem_GetAllBattlePassSeasonsState, Player) == 0x000000, "Member 'BattlePassSystem_GetAllBattlePassSeasonsState::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetAllBattlePassSeasonsState, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetAllBattlePassSeasonsState::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.GetAllBattlePassSeasonsStateDelegate__DelegateSignature
// 0x00D0 (0x00D0 - 0x0000)
struct BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudBattlePassSeasonsState           Data;                                              // 0x0058(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature");
static_assert(sizeof(BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature) == 0x0000D0, "Wrong size on BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature");
static_assert(offsetof(BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature, Data) == 0x000058, "Member 'BattlePassSystem_GetAllBattlePassSeasonsStateDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.BattlePassSystem.GetCurrentBattlePassSeasonState
// 0x0010 (0x0010 - 0x0000)
struct BattlePassSystem_GetCurrentBattlePassSeasonState final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_GetCurrentBattlePassSeasonState) == 0x000008, "Wrong alignment on BattlePassSystem_GetCurrentBattlePassSeasonState");
static_assert(sizeof(BattlePassSystem_GetCurrentBattlePassSeasonState) == 0x000010, "Wrong size on BattlePassSystem_GetCurrentBattlePassSeasonState");
static_assert(offsetof(BattlePassSystem_GetCurrentBattlePassSeasonState, Player) == 0x000000, "Member 'BattlePassSystem_GetCurrentBattlePassSeasonState::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetCurrentBattlePassSeasonState, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetCurrentBattlePassSeasonState::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.GetCurrentBattlePassSeasonStateDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudBattlePassSeasonState            Data;                                              // 0x0058(0x001C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature");
static_assert(sizeof(BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature) == 0x000078, "Wrong size on BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature");
static_assert(offsetof(BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature, Data) == 0x000058, "Member 'BattlePassSystem_GetCurrentBattlePassSeasonStateDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.BattlePassSystem.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct BattlePassSystem_GetGameInstance final
{
public:
	class UFlameGameInstance*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetGameInstance) == 0x000008, "Wrong alignment on BattlePassSystem_GetGameInstance");
static_assert(sizeof(BattlePassSystem_GetGameInstance) == 0x000008, "Wrong size on BattlePassSystem_GetGameInstance");
static_assert(offsetof(BattlePassSystem_GetGameInstance, ReturnValue) == 0x000000, "Member 'BattlePassSystem_GetGameInstance::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetLevelInSeason
// 0x000C (0x000C - 0x0000)
struct BattlePassSystem_GetLevelInSeason final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetLevelInSeason) == 0x000004, "Wrong alignment on BattlePassSystem_GetLevelInSeason");
static_assert(sizeof(BattlePassSystem_GetLevelInSeason) == 0x00000C, "Wrong size on BattlePassSystem_GetLevelInSeason");
static_assert(offsetof(BattlePassSystem_GetLevelInSeason, SeasonName) == 0x000000, "Member 'BattlePassSystem_GetLevelInSeason::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetLevelInSeason, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetLevelInSeason::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetPremiumStatus
// 0x000C (0x000C - 0x0000)
struct BattlePassSystem_GetPremiumStatus final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_GetPremiumStatus) == 0x000004, "Wrong alignment on BattlePassSystem_GetPremiumStatus");
static_assert(sizeof(BattlePassSystem_GetPremiumStatus) == 0x00000C, "Wrong size on BattlePassSystem_GetPremiumStatus");
static_assert(offsetof(BattlePassSystem_GetPremiumStatus, SeasonName) == 0x000000, "Member 'BattlePassSystem_GetPremiumStatus::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetPremiumStatus, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetPremiumStatus::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetSeasonName
// 0x000C (0x000C - 0x0000)
struct BattlePassSystem_GetSeasonName final
{
public:
	EBattlePassSeasonType                         SeasonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetSeasonName) == 0x000004, "Wrong alignment on BattlePassSystem_GetSeasonName");
static_assert(sizeof(BattlePassSystem_GetSeasonName) == 0x00000C, "Wrong size on BattlePassSystem_GetSeasonName");
static_assert(offsetof(BattlePassSystem_GetSeasonName, SeasonType) == 0x000000, "Member 'BattlePassSystem_GetSeasonName::SeasonType' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetSeasonName, ReturnValue) == 0x000004, "Member 'BattlePassSystem_GetSeasonName::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetTotalXP
// 0x000C (0x000C - 0x0000)
struct BattlePassSystem_GetTotalXP final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetTotalXP) == 0x000004, "Wrong alignment on BattlePassSystem_GetTotalXP");
static_assert(sizeof(BattlePassSystem_GetTotalXP) == 0x00000C, "Wrong size on BattlePassSystem_GetTotalXP");
static_assert(offsetof(BattlePassSystem_GetTotalXP, SeasonName) == 0x000000, "Member 'BattlePassSystem_GetTotalXP::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetTotalXP, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetTotalXP::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetUnclaimedRewardsCode
// 0x0038 (0x0038 - 0x0000)
struct BattlePassSystem_GetUnclaimedRewardsCode final
{
public:
	bool                                          IsLegacy;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBattlePassLevelRewardFull>     FreeRewards;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBattlePassLevelRewardFull>     PremiumRewards;                                    // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetUnclaimedRewardsCode) == 0x000008, "Wrong alignment on BattlePassSystem_GetUnclaimedRewardsCode");
static_assert(sizeof(BattlePassSystem_GetUnclaimedRewardsCode) == 0x000038, "Wrong size on BattlePassSystem_GetUnclaimedRewardsCode");
static_assert(offsetof(BattlePassSystem_GetUnclaimedRewardsCode, IsLegacy) == 0x000000, "Member 'BattlePassSystem_GetUnclaimedRewardsCode::IsLegacy' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetUnclaimedRewardsCode, FreeRewards) == 0x000008, "Member 'BattlePassSystem_GetUnclaimedRewardsCode::FreeRewards' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetUnclaimedRewardsCode, PremiumRewards) == 0x000018, "Member 'BattlePassSystem_GetUnclaimedRewardsCode::PremiumRewards' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetUnclaimedRewardsCode, ReturnValue) == 0x000028, "Member 'BattlePassSystem_GetUnclaimedRewardsCode::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetXPBooster
// 0x0004 (0x0004 - 0x0000)
struct BattlePassSystem_GetXPBooster final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetXPBooster) == 0x000004, "Wrong alignment on BattlePassSystem_GetXPBooster");
static_assert(sizeof(BattlePassSystem_GetXPBooster) == 0x000004, "Wrong size on BattlePassSystem_GetXPBooster");
static_assert(offsetof(BattlePassSystem_GetXPBooster, ReturnValue) == 0x000000, "Member 'BattlePassSystem_GetXPBooster::ReturnValue' has a wrong offset!");

// Function Flame.BattlePassSystem.GetXPWithinLevel
// 0x000C (0x000C - 0x0000)
struct BattlePassSystem_GetXPWithinLevel final
{
public:
	class FName                                   SeasonName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_GetXPWithinLevel) == 0x000004, "Wrong alignment on BattlePassSystem_GetXPWithinLevel");
static_assert(sizeof(BattlePassSystem_GetXPWithinLevel) == 0x00000C, "Wrong size on BattlePassSystem_GetXPWithinLevel");
static_assert(offsetof(BattlePassSystem_GetXPWithinLevel, SeasonName) == 0x000000, "Member 'BattlePassSystem_GetXPWithinLevel::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_GetXPWithinLevel, ReturnValue) == 0x000008, "Member 'BattlePassSystem_GetXPWithinLevel::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.OnNewExperienceEvent__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct BattlePassSystem_OnNewExperienceEvent__DelegateSignature final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudBattlePassExperienceEvent        Event;                                             // 0x0008(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_OnNewExperienceEvent__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_OnNewExperienceEvent__DelegateSignature");
static_assert(sizeof(BattlePassSystem_OnNewExperienceEvent__DelegateSignature) == 0x000030, "Wrong size on BattlePassSystem_OnNewExperienceEvent__DelegateSignature");
static_assert(offsetof(BattlePassSystem_OnNewExperienceEvent__DelegateSignature, Player) == 0x000000, "Member 'BattlePassSystem_OnNewExperienceEvent__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_OnNewExperienceEvent__DelegateSignature, Event) == 0x000008, "Member 'BattlePassSystem_OnNewExperienceEvent__DelegateSignature::Event' has a wrong offset!");

// Function Flame.BattlePassSystem.PurchaseBattlePassLevel
// 0x0020 (0x0020 - 0x0000)
struct BattlePassSystem_PurchaseBattlePassLevel final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeasonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLevel;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetLevel;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_PurchaseBattlePassLevel) == 0x000008, "Wrong alignment on BattlePassSystem_PurchaseBattlePassLevel");
static_assert(sizeof(BattlePassSystem_PurchaseBattlePassLevel) == 0x000020, "Wrong size on BattlePassSystem_PurchaseBattlePassLevel");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, Player) == 0x000000, "Member 'BattlePassSystem_PurchaseBattlePassLevel::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, SeasonName) == 0x000008, "Member 'BattlePassSystem_PurchaseBattlePassLevel::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, CurrentLevel) == 0x000010, "Member 'BattlePassSystem_PurchaseBattlePassLevel::CurrentLevel' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, TargetLevel) == 0x000014, "Member 'BattlePassSystem_PurchaseBattlePassLevel::TargetLevel' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, Price) == 0x000018, "Member 'BattlePassSystem_PurchaseBattlePassLevel::Price' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevel, ReturnValue) == 0x00001C, "Member 'BattlePassSystem_PurchaseBattlePassLevel::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.PurchaseBattlePassLevelDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudBattlePassLevelPurchase          Data;                                              // 0x0058(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature");
static_assert(sizeof(BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature) == 0x000080, "Wrong size on BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature, Data) == 0x000058, "Member 'BattlePassSystem_PurchaseBattlePassLevelDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.BattlePassSystem.SelectLegacySeason
// 0x0018 (0x0018 - 0x0000)
struct BattlePassSystem_SelectLegacySeason final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SeasonName;                                        // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BattlePassSystem_SelectLegacySeason) == 0x000008, "Wrong alignment on BattlePassSystem_SelectLegacySeason");
static_assert(sizeof(BattlePassSystem_SelectLegacySeason) == 0x000018, "Wrong size on BattlePassSystem_SelectLegacySeason");
static_assert(offsetof(BattlePassSystem_SelectLegacySeason, Player) == 0x000000, "Member 'BattlePassSystem_SelectLegacySeason::Player' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_SelectLegacySeason, SeasonName) == 0x000008, "Member 'BattlePassSystem_SelectLegacySeason::SeasonName' has a wrong offset!");
static_assert(offsetof(BattlePassSystem_SelectLegacySeason, ReturnValue) == 0x000010, "Member 'BattlePassSystem_SelectLegacySeason::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.BattlePassSystem.SelectLegacySeasonDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature) == 0x000008, "Wrong alignment on BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature");
static_assert(sizeof(BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature) == 0x000058, "Wrong size on BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature");
static_assert(offsetof(BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'BattlePassSystem_SelectLegacySeasonDelegate__DelegateSignature::RequestResult' has a wrong offset!");

// Function Flame.BattlePassSystem.Tick
// 0x0004 (0x0004 - 0x0000)
struct BattlePassSystem_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BattlePassSystem_Tick) == 0x000004, "Wrong alignment on BattlePassSystem_Tick");
static_assert(sizeof(BattlePassSystem_Tick) == 0x000004, "Wrong size on BattlePassSystem_Tick");
static_assert(offsetof(BattlePassSystem_Tick, DeltaTime) == 0x000000, "Member 'BattlePassSystem_Tick::DeltaTime' has a wrong offset!");

// Function Flame.BiSignificanceManagerImpl.MyPostSignificanceFunctionBody
// 0x0010 (0x0010 - 0x0000)
struct BiSignificanceManagerImpl_MyPostSignificanceFunctionBody final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bucket;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BiSignificanceManagerImpl_MyPostSignificanceFunctionBody) == 0x000008, "Wrong alignment on BiSignificanceManagerImpl_MyPostSignificanceFunctionBody");
static_assert(sizeof(BiSignificanceManagerImpl_MyPostSignificanceFunctionBody) == 0x000010, "Wrong size on BiSignificanceManagerImpl_MyPostSignificanceFunctionBody");
static_assert(offsetof(BiSignificanceManagerImpl_MyPostSignificanceFunctionBody, Actor) == 0x000000, "Member 'BiSignificanceManagerImpl_MyPostSignificanceFunctionBody::Actor' has a wrong offset!");
static_assert(offsetof(BiSignificanceManagerImpl_MyPostSignificanceFunctionBody, Bucket) == 0x000008, "Member 'BiSignificanceManagerImpl_MyPostSignificanceFunctionBody::Bucket' has a wrong offset!");

// Function Flame.BitwiseBPFunctions.BitwiseShiftLeft
// 0x000C (0x000C - 0x0000)
struct BitwiseBPFunctions_BitwiseShiftLeft final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitwiseBPFunctions_BitwiseShiftLeft) == 0x000004, "Wrong alignment on BitwiseBPFunctions_BitwiseShiftLeft");
static_assert(sizeof(BitwiseBPFunctions_BitwiseShiftLeft) == 0x00000C, "Wrong size on BitwiseBPFunctions_BitwiseShiftLeft");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftLeft, A) == 0x000000, "Member 'BitwiseBPFunctions_BitwiseShiftLeft::A' has a wrong offset!");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftLeft, Bits) == 0x000004, "Member 'BitwiseBPFunctions_BitwiseShiftLeft::Bits' has a wrong offset!");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftLeft, ReturnValue) == 0x000008, "Member 'BitwiseBPFunctions_BitwiseShiftLeft::ReturnValue' has a wrong offset!");

// Function Flame.BitwiseBPFunctions.BitwiseShiftRight
// 0x000C (0x000C - 0x0000)
struct BitwiseBPFunctions_BitwiseShiftRight final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Bits;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BitwiseBPFunctions_BitwiseShiftRight) == 0x000004, "Wrong alignment on BitwiseBPFunctions_BitwiseShiftRight");
static_assert(sizeof(BitwiseBPFunctions_BitwiseShiftRight) == 0x00000C, "Wrong size on BitwiseBPFunctions_BitwiseShiftRight");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftRight, A) == 0x000000, "Member 'BitwiseBPFunctions_BitwiseShiftRight::A' has a wrong offset!");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftRight, Bits) == 0x000004, "Member 'BitwiseBPFunctions_BitwiseShiftRight::Bits' has a wrong offset!");
static_assert(offsetof(BitwiseBPFunctions_BitwiseShiftRight, ReturnValue) == 0x000008, "Member 'BitwiseBPFunctions_BitwiseShiftRight::ReturnValue' has a wrong offset!");

// Function Flame.ItemUseState.GetMode
// 0x0001 (0x0001 - 0x0000)
struct ItemUseState_GetMode final
{
public:
	EItemUseMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUseState_GetMode) == 0x000001, "Wrong alignment on ItemUseState_GetMode");
static_assert(sizeof(ItemUseState_GetMode) == 0x000001, "Wrong size on ItemUseState_GetMode");
static_assert(offsetof(ItemUseState_GetMode, ReturnValue) == 0x000000, "Member 'ItemUseState_GetMode::ReturnValue' has a wrong offset!");

// Function Flame.ItemUseState.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct ItemUseState_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUseState_GetProgress) == 0x000004, "Wrong alignment on ItemUseState_GetProgress");
static_assert(sizeof(ItemUseState_GetProgress) == 0x000004, "Wrong size on ItemUseState_GetProgress");
static_assert(offsetof(ItemUseState_GetProgress, ReturnValue) == 0x000000, "Member 'ItemUseState_GetProgress::ReturnValue' has a wrong offset!");

// Function Flame.ItemUseState.GetTargetUnderCursor
// 0x0008 (0x0008 - 0x0000)
struct ItemUseState_GetTargetUnderCursor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUseState_GetTargetUnderCursor) == 0x000008, "Wrong alignment on ItemUseState_GetTargetUnderCursor");
static_assert(sizeof(ItemUseState_GetTargetUnderCursor) == 0x000008, "Wrong size on ItemUseState_GetTargetUnderCursor");
static_assert(offsetof(ItemUseState_GetTargetUnderCursor, ReturnValue) == 0x000000, "Member 'ItemUseState_GetTargetUnderCursor::ReturnValue' has a wrong offset!");

// Function Flame.WorldLadder.Interact
// 0x0010 (0x0010 - 0x0000)
struct WorldLadder_Interact final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldLadder_Interact) == 0x000008, "Wrong alignment on WorldLadder_Interact");
static_assert(sizeof(WorldLadder_Interact) == 0x000010, "Wrong size on WorldLadder_Interact");
static_assert(offsetof(WorldLadder_Interact, Sender) == 0x000000, "Member 'WorldLadder_Interact::Sender' has a wrong offset!");
static_assert(offsetof(WorldLadder_Interact, InteractingActor) == 0x000008, "Member 'WorldLadder_Interact::InteractingActor' has a wrong offset!");

// Function Flame.OptionsElementWidget.SetValue
// 0x0030 (0x0030 - 0x0000)
struct OptionsElementWidget_SetValue final
{
public:
	struct FOptionsElementValue                   InValues;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementWidget_SetValue) == 0x000008, "Wrong alignment on OptionsElementWidget_SetValue");
static_assert(sizeof(OptionsElementWidget_SetValue) == 0x000030, "Wrong size on OptionsElementWidget_SetValue");
static_assert(offsetof(OptionsElementWidget_SetValue, InValues) == 0x000000, "Member 'OptionsElementWidget_SetValue::InValues' has a wrong offset!");

// Function Flame.OptionsElementWidget.CanModifyElement
// 0x0001 (0x0001 - 0x0000)
struct OptionsElementWidget_CanModifyElement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementWidget_CanModifyElement) == 0x000001, "Wrong alignment on OptionsElementWidget_CanModifyElement");
static_assert(sizeof(OptionsElementWidget_CanModifyElement) == 0x000001, "Wrong size on OptionsElementWidget_CanModifyElement");
static_assert(offsetof(OptionsElementWidget_CanModifyElement, ReturnValue) == 0x000000, "Member 'OptionsElementWidget_CanModifyElement::ReturnValue' has a wrong offset!");

// Function Flame.OptionsElementWidget.CanResetElementToDefault
// 0x0001 (0x0001 - 0x0000)
struct OptionsElementWidget_CanResetElementToDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementWidget_CanResetElementToDefault) == 0x000001, "Wrong alignment on OptionsElementWidget_CanResetElementToDefault");
static_assert(sizeof(OptionsElementWidget_CanResetElementToDefault) == 0x000001, "Wrong size on OptionsElementWidget_CanResetElementToDefault");
static_assert(offsetof(OptionsElementWidget_CanResetElementToDefault, ReturnValue) == 0x000000, "Member 'OptionsElementWidget_CanResetElementToDefault::ReturnValue' has a wrong offset!");

// Function Flame.OptionsElementWidget.IsElementVisible
// 0x0001 (0x0001 - 0x0000)
struct OptionsElementWidget_IsElementVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementWidget_IsElementVisible) == 0x000001, "Wrong alignment on OptionsElementWidget_IsElementVisible");
static_assert(sizeof(OptionsElementWidget_IsElementVisible) == 0x000001, "Wrong size on OptionsElementWidget_IsElementVisible");
static_assert(offsetof(OptionsElementWidget_IsElementVisible, ReturnValue) == 0x000000, "Member 'OptionsElementWidget_IsElementVisible::ReturnValue' has a wrong offset!");

// Function Flame.OptionsElementWidget.PopulateValues
// 0x0030 (0x0030 - 0x0000)
struct OptionsElementWidget_PopulateValues final
{
public:
	struct FOptionsElementValue                   ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementWidget_PopulateValues) == 0x000008, "Wrong alignment on OptionsElementWidget_PopulateValues");
static_assert(sizeof(OptionsElementWidget_PopulateValues) == 0x000030, "Wrong size on OptionsElementWidget_PopulateValues");
static_assert(offsetof(OptionsElementWidget_PopulateValues, ReturnValue) == 0x000000, "Member 'OptionsElementWidget_PopulateValues::ReturnValue' has a wrong offset!");

// Function Flame.OptionsElementPicker.OnNavigateIndex
// 0x0008 (0x0008 - 0x0000)
struct OptionsElementPicker_OnNavigateIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BypassConditions;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BroadcastValueChange;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsElementPicker_OnNavigateIndex) == 0x000004, "Wrong alignment on OptionsElementPicker_OnNavigateIndex");
static_assert(sizeof(OptionsElementPicker_OnNavigateIndex) == 0x000008, "Wrong size on OptionsElementPicker_OnNavigateIndex");
static_assert(offsetof(OptionsElementPicker_OnNavigateIndex, Index_0) == 0x000000, "Member 'OptionsElementPicker_OnNavigateIndex::Index_0' has a wrong offset!");
static_assert(offsetof(OptionsElementPicker_OnNavigateIndex, BypassConditions) == 0x000004, "Member 'OptionsElementPicker_OnNavigateIndex::BypassConditions' has a wrong offset!");
static_assert(offsetof(OptionsElementPicker_OnNavigateIndex, BroadcastValueChange) == 0x000005, "Member 'OptionsElementPicker_OnNavigateIndex::BroadcastValueChange' has a wrong offset!");

// Function Flame.OptionsElementPicker.OnNavigateVisualIndex
// 0x0004 (0x0004 - 0x0000)
struct OptionsElementPicker_OnNavigateVisualIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementPicker_OnNavigateVisualIndex) == 0x000004, "Wrong alignment on OptionsElementPicker_OnNavigateVisualIndex");
static_assert(sizeof(OptionsElementPicker_OnNavigateVisualIndex) == 0x000004, "Wrong size on OptionsElementPicker_OnNavigateVisualIndex");
static_assert(offsetof(OptionsElementPicker_OnNavigateVisualIndex, Index_0) == 0x000000, "Member 'OptionsElementPicker_OnNavigateVisualIndex::Index_0' has a wrong offset!");

// Function Flame.OptionsElementPicker.UpdateOptions
// 0x0010 (0x0010 - 0x0000)
struct OptionsElementPicker_UpdateOptions final
{
public:
	TArray<struct FOptionsPickerValue>            InOptions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementPicker_UpdateOptions) == 0x000008, "Wrong alignment on OptionsElementPicker_UpdateOptions");
static_assert(sizeof(OptionsElementPicker_UpdateOptions) == 0x000010, "Wrong size on OptionsElementPicker_UpdateOptions");
static_assert(offsetof(OptionsElementPicker_UpdateOptions, InOptions) == 0x000000, "Member 'OptionsElementPicker_UpdateOptions::InOptions' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.BinaryOperation
// 0x0068 (0x0068 - 0x0000)
struct InventoryOperationsComponent_BinaryOperation final
{
public:
	struct FInvetoryItemDescriptor                LootItemDsc;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInvetoryItemDescriptor                HumanItemDsc;                                      // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryOperationsComponent_BinaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_BinaryOperation");
static_assert(sizeof(InventoryOperationsComponent_BinaryOperation) == 0x000068, "Wrong size on InventoryOperationsComponent_BinaryOperation");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperation, LootItemDsc) == 0x000000, "Member 'InventoryOperationsComponent_BinaryOperation::LootItemDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperation, HumanItemDsc) == 0x000030, "Member 'InventoryOperationsComponent_BinaryOperation::HumanItemDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperation, Context) == 0x000060, "Member 'InventoryOperationsComponent_BinaryOperation::Context' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.BinaryOperationSwitch
// 0x0070 (0x0070 - 0x0000)
struct InventoryOperationsComponent_BinaryOperationSwitch final
{
public:
	struct FInvetoryItemDescriptor                FirstDsc;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInvetoryItemDescriptor                SecondDsc;                                         // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EOperationResult                              ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_BinaryOperationSwitch) == 0x000008, "Wrong alignment on InventoryOperationsComponent_BinaryOperationSwitch");
static_assert(sizeof(InventoryOperationsComponent_BinaryOperationSwitch) == 0x000070, "Wrong size on InventoryOperationsComponent_BinaryOperationSwitch");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperationSwitch, FirstDsc) == 0x000000, "Member 'InventoryOperationsComponent_BinaryOperationSwitch::FirstDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperationSwitch, SecondDsc) == 0x000030, "Member 'InventoryOperationsComponent_BinaryOperationSwitch::SecondDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperationSwitch, Context) == 0x000060, "Member 'InventoryOperationsComponent_BinaryOperationSwitch::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_BinaryOperationSwitch, ReturnValue) == 0x000068, "Member 'InventoryOperationsComponent_BinaryOperationSwitch::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.ClientConfirmOperation
// 0x0020 (0x0020 - 0x0000)
struct InventoryOperationsComponent_ClientConfirmOperation final
{
public:
	struct FInventoryOperationInfoServer          ResultFromServer;                                  // 0x0000(0x0020)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryOperationsComponent_ClientConfirmOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_ClientConfirmOperation");
static_assert(sizeof(InventoryOperationsComponent_ClientConfirmOperation) == 0x000020, "Wrong size on InventoryOperationsComponent_ClientConfirmOperation");
static_assert(offsetof(InventoryOperationsComponent_ClientConfirmOperation, ResultFromServer) == 0x000000, "Member 'InventoryOperationsComponent_ClientConfirmOperation::ResultFromServer' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.ServerAskForBinaryOperation
// 0x0070 (0x0070 - 0x0000)
struct InventoryOperationsComponent_ServerAskForBinaryOperation final
{
public:
	struct FInvetoryItemDescriptor                FirstDsc;                                          // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInvetoryItemDescriptor                SecondDsc;                                         // 0x0030(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0060(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_ServerAskForBinaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_ServerAskForBinaryOperation");
static_assert(sizeof(InventoryOperationsComponent_ServerAskForBinaryOperation) == 0x000070, "Wrong size on InventoryOperationsComponent_ServerAskForBinaryOperation");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForBinaryOperation, FirstDsc) == 0x000000, "Member 'InventoryOperationsComponent_ServerAskForBinaryOperation::FirstDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForBinaryOperation, SecondDsc) == 0x000030, "Member 'InventoryOperationsComponent_ServerAskForBinaryOperation::SecondDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForBinaryOperation, Context) == 0x000060, "Member 'InventoryOperationsComponent_ServerAskForBinaryOperation::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForBinaryOperation, ID) == 0x000068, "Member 'InventoryOperationsComponent_ServerAskForBinaryOperation::ID' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.ServerAskForUnaryOperation
// 0x0040 (0x0040 - 0x0000)
struct InventoryOperationsComponent_ServerAskForUnaryOperation final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0030(0x0008)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_ServerAskForUnaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_ServerAskForUnaryOperation");
static_assert(sizeof(InventoryOperationsComponent_ServerAskForUnaryOperation) == 0x000040, "Wrong size on InventoryOperationsComponent_ServerAskForUnaryOperation");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForUnaryOperation, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_ServerAskForUnaryOperation::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForUnaryOperation, Context) == 0x000030, "Member 'InventoryOperationsComponent_ServerAskForUnaryOperation::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_ServerAskForUnaryOperation, ID) == 0x000038, "Member 'InventoryOperationsComponent_ServerAskForUnaryOperation::ID' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.UnaryOperation
// 0x0038 (0x0038 - 0x0000)
struct InventoryOperationsComponent_UnaryOperation final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryOperationsComponent_UnaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_UnaryOperation");
static_assert(sizeof(InventoryOperationsComponent_UnaryOperation) == 0x000038, "Wrong size on InventoryOperationsComponent_UnaryOperation");
static_assert(offsetof(InventoryOperationsComponent_UnaryOperation, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_UnaryOperation::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_UnaryOperation, Context) == 0x000030, "Member 'InventoryOperationsComponent_UnaryOperation::Context' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.UnaryOperationSwitch
// 0x0040 (0x0040 - 0x0000)
struct InventoryOperationsComponent_UnaryOperationSwitch final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EOperationResult                              ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_UnaryOperationSwitch) == 0x000008, "Wrong alignment on InventoryOperationsComponent_UnaryOperationSwitch");
static_assert(sizeof(InventoryOperationsComponent_UnaryOperationSwitch) == 0x000040, "Wrong size on InventoryOperationsComponent_UnaryOperationSwitch");
static_assert(offsetof(InventoryOperationsComponent_UnaryOperationSwitch, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_UnaryOperationSwitch::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_UnaryOperationSwitch, Context) == 0x000030, "Member 'InventoryOperationsComponent_UnaryOperationSwitch::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_UnaryOperationSwitch, ReturnValue) == 0x000038, "Member 'InventoryOperationsComponent_UnaryOperationSwitch::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.CanProcessBinaryOperation
// 0x0070 (0x0070 - 0x0000)
struct InventoryOperationsComponent_CanProcessBinaryOperation final
{
public:
	struct FInvetoryItemDescriptor                FirstDsc;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInvetoryItemDescriptor                SecondDsc;                                         // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_CanProcessBinaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_CanProcessBinaryOperation");
static_assert(sizeof(InventoryOperationsComponent_CanProcessBinaryOperation) == 0x000070, "Wrong size on InventoryOperationsComponent_CanProcessBinaryOperation");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperation, FirstDsc) == 0x000000, "Member 'InventoryOperationsComponent_CanProcessBinaryOperation::FirstDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperation, SecondDsc) == 0x000030, "Member 'InventoryOperationsComponent_CanProcessBinaryOperation::SecondDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperation, Context) == 0x000060, "Member 'InventoryOperationsComponent_CanProcessBinaryOperation::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperation, ReturnValue) == 0x000068, "Member 'InventoryOperationsComponent_CanProcessBinaryOperation::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.CanProcessBinaryOperationSwitch
// 0x0070 (0x0070 - 0x0000)
struct InventoryOperationsComponent_CanProcessBinaryOperationSwitch final
{
public:
	struct FInvetoryItemDescriptor                FirstDsc;                                          // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInvetoryItemDescriptor                SecondDsc;                                         // 0x0030(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch) == 0x000008, "Wrong alignment on InventoryOperationsComponent_CanProcessBinaryOperationSwitch");
static_assert(sizeof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch) == 0x000070, "Wrong size on InventoryOperationsComponent_CanProcessBinaryOperationSwitch");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch, FirstDsc) == 0x000000, "Member 'InventoryOperationsComponent_CanProcessBinaryOperationSwitch::FirstDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch, SecondDsc) == 0x000030, "Member 'InventoryOperationsComponent_CanProcessBinaryOperationSwitch::SecondDsc' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch, Context) == 0x000060, "Member 'InventoryOperationsComponent_CanProcessBinaryOperationSwitch::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessBinaryOperationSwitch, ReturnValue) == 0x000068, "Member 'InventoryOperationsComponent_CanProcessBinaryOperationSwitch::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.CanProcessUnaryOperation
// 0x0040 (0x0040 - 0x0000)
struct InventoryOperationsComponent_CanProcessUnaryOperation final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_CanProcessUnaryOperation) == 0x000008, "Wrong alignment on InventoryOperationsComponent_CanProcessUnaryOperation");
static_assert(sizeof(InventoryOperationsComponent_CanProcessUnaryOperation) == 0x000040, "Wrong size on InventoryOperationsComponent_CanProcessUnaryOperation");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperation, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_CanProcessUnaryOperation::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperation, Context) == 0x000030, "Member 'InventoryOperationsComponent_CanProcessUnaryOperation::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperation, ReturnValue) == 0x000038, "Member 'InventoryOperationsComponent_CanProcessUnaryOperation::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.CanProcessUnaryOperationSwitch
// 0x0040 (0x0040 - 0x0000)
struct InventoryOperationsComponent_CanProcessUnaryOperationSwitch final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FInventoryOperationContext             Context;                                           // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryOperationsComponent_CanProcessUnaryOperationSwitch) == 0x000008, "Wrong alignment on InventoryOperationsComponent_CanProcessUnaryOperationSwitch");
static_assert(sizeof(InventoryOperationsComponent_CanProcessUnaryOperationSwitch) == 0x000040, "Wrong size on InventoryOperationsComponent_CanProcessUnaryOperationSwitch");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperationSwitch, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_CanProcessUnaryOperationSwitch::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperationSwitch, Context) == 0x000030, "Member 'InventoryOperationsComponent_CanProcessUnaryOperationSwitch::Context' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_CanProcessUnaryOperationSwitch, ReturnValue) == 0x000038, "Member 'InventoryOperationsComponent_CanProcessUnaryOperationSwitch::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.FindOpositeEquipment
// 0x0010 (0x0010 - 0x0000)
struct InventoryOperationsComponent_FindOpositeEquipment final
{
public:
	const class UEquipmentStorageComponent*       Storage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipmentStorageComponent*             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryOperationsComponent_FindOpositeEquipment) == 0x000008, "Wrong alignment on InventoryOperationsComponent_FindOpositeEquipment");
static_assert(sizeof(InventoryOperationsComponent_FindOpositeEquipment) == 0x000010, "Wrong size on InventoryOperationsComponent_FindOpositeEquipment");
static_assert(offsetof(InventoryOperationsComponent_FindOpositeEquipment, Storage) == 0x000000, "Member 'InventoryOperationsComponent_FindOpositeEquipment::Storage' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_FindOpositeEquipment, ReturnValue) == 0x000008, "Member 'InventoryOperationsComponent_FindOpositeEquipment::ReturnValue' has a wrong offset!");

// Function Flame.InventoryOperationsComponent.FindParentEquipment
// 0x0038 (0x0038 - 0x0000)
struct InventoryOperationsComponent_FindParentEquipment final
{
public:
	struct FInvetoryItemDescriptor                Descriptor;                                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UEquipmentStorageComponent*             ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryOperationsComponent_FindParentEquipment) == 0x000008, "Wrong alignment on InventoryOperationsComponent_FindParentEquipment");
static_assert(sizeof(InventoryOperationsComponent_FindParentEquipment) == 0x000038, "Wrong size on InventoryOperationsComponent_FindParentEquipment");
static_assert(offsetof(InventoryOperationsComponent_FindParentEquipment, Descriptor) == 0x000000, "Member 'InventoryOperationsComponent_FindParentEquipment::Descriptor' has a wrong offset!");
static_assert(offsetof(InventoryOperationsComponent_FindParentEquipment, ReturnValue) == 0x000030, "Member 'InventoryOperationsComponent_FindParentEquipment::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.GetBuildingAtPoint
// 0x0020 (0x0020 - 0x0000)
struct BuildingReferenceHelper_GetBuildingAtPoint final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABuilding*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingReferenceHelper_GetBuildingAtPoint) == 0x000008, "Wrong alignment on BuildingReferenceHelper_GetBuildingAtPoint");
static_assert(sizeof(BuildingReferenceHelper_GetBuildingAtPoint) == 0x000020, "Wrong size on BuildingReferenceHelper_GetBuildingAtPoint");
static_assert(offsetof(BuildingReferenceHelper_GetBuildingAtPoint, WorldContext) == 0x000000, "Member 'BuildingReferenceHelper_GetBuildingAtPoint::WorldContext' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_GetBuildingAtPoint, Point) == 0x000008, "Member 'BuildingReferenceHelper_GetBuildingAtPoint::Point' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_GetBuildingAtPoint, ReturnValue) == 0x000018, "Member 'BuildingReferenceHelper_GetBuildingAtPoint::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.ResolveDoorReference
// 0x0070 (0x0070 - 0x0000)
struct BuildingReferenceHelper_ResolveDoorReference final
{
public:
	struct FDoorReference                         Reference;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ADoor*                                  ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingReferenceHelper_ResolveDoorReference) == 0x000010, "Wrong alignment on BuildingReferenceHelper_ResolveDoorReference");
static_assert(sizeof(BuildingReferenceHelper_ResolveDoorReference) == 0x000070, "Wrong size on BuildingReferenceHelper_ResolveDoorReference");
static_assert(offsetof(BuildingReferenceHelper_ResolveDoorReference, Reference) == 0x000000, "Member 'BuildingReferenceHelper_ResolveDoorReference::Reference' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_ResolveDoorReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_ResolveDoorReference::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.ResolveWindowReference
// 0x0070 (0x0070 - 0x0000)
struct BuildingReferenceHelper_ResolveWindowReference final
{
public:
	struct FWindowReference                       Reference;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AWindow*                                ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingReferenceHelper_ResolveWindowReference) == 0x000010, "Wrong alignment on BuildingReferenceHelper_ResolveWindowReference");
static_assert(sizeof(BuildingReferenceHelper_ResolveWindowReference) == 0x000070, "Wrong size on BuildingReferenceHelper_ResolveWindowReference");
static_assert(offsetof(BuildingReferenceHelper_ResolveWindowReference, Reference) == 0x000000, "Member 'BuildingReferenceHelper_ResolveWindowReference::Reference' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_ResolveWindowReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_ResolveWindowReference::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.ResolveWindowSashSetReference
// 0x0068 (0x0068 - 0x0000)
struct BuildingReferenceHelper_ResolveWindowSashSetReference final
{
public:
	struct FWindowSashSetReference                Reference;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AWindowSashSet*                         ReturnValue;                                       // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildingReferenceHelper_ResolveWindowSashSetReference) == 0x000008, "Wrong alignment on BuildingReferenceHelper_ResolveWindowSashSetReference");
static_assert(sizeof(BuildingReferenceHelper_ResolveWindowSashSetReference) == 0x000068, "Wrong size on BuildingReferenceHelper_ResolveWindowSashSetReference");
static_assert(offsetof(BuildingReferenceHelper_ResolveWindowSashSetReference, Reference) == 0x000000, "Member 'BuildingReferenceHelper_ResolveWindowSashSetReference::Reference' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_ResolveWindowSashSetReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_ResolveWindowSashSetReference::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.UpdateDoorReference
// 0x0070 (0x0070 - 0x0000)
struct BuildingReferenceHelper_UpdateDoorReference final
{
public:
	struct FDoorReference                         RefToUpdate;                                       // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingReferenceHelper_UpdateDoorReference) == 0x000010, "Wrong alignment on BuildingReferenceHelper_UpdateDoorReference");
static_assert(sizeof(BuildingReferenceHelper_UpdateDoorReference) == 0x000070, "Wrong size on BuildingReferenceHelper_UpdateDoorReference");
static_assert(offsetof(BuildingReferenceHelper_UpdateDoorReference, RefToUpdate) == 0x000000, "Member 'BuildingReferenceHelper_UpdateDoorReference::RefToUpdate' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_UpdateDoorReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_UpdateDoorReference::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.UpdateWindowReference
// 0x0070 (0x0070 - 0x0000)
struct BuildingReferenceHelper_UpdateWindowReference final
{
public:
	struct FWindowReference                       RefToUpdate;                                       // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingReferenceHelper_UpdateWindowReference) == 0x000010, "Wrong alignment on BuildingReferenceHelper_UpdateWindowReference");
static_assert(sizeof(BuildingReferenceHelper_UpdateWindowReference) == 0x000070, "Wrong size on BuildingReferenceHelper_UpdateWindowReference");
static_assert(offsetof(BuildingReferenceHelper_UpdateWindowReference, RefToUpdate) == 0x000000, "Member 'BuildingReferenceHelper_UpdateWindowReference::RefToUpdate' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_UpdateWindowReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_UpdateWindowReference::ReturnValue' has a wrong offset!");

// Function Flame.BuildingReferenceHelper.UpdateWindowSashSetReference
// 0x0068 (0x0068 - 0x0000)
struct BuildingReferenceHelper_UpdateWindowSashSetReference final
{
public:
	struct FWindowSashSetReference                RefToUpdate;                                       // 0x0000(0x0060)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BuildingReferenceHelper_UpdateWindowSashSetReference) == 0x000008, "Wrong alignment on BuildingReferenceHelper_UpdateWindowSashSetReference");
static_assert(sizeof(BuildingReferenceHelper_UpdateWindowSashSetReference) == 0x000068, "Wrong size on BuildingReferenceHelper_UpdateWindowSashSetReference");
static_assert(offsetof(BuildingReferenceHelper_UpdateWindowSashSetReference, RefToUpdate) == 0x000000, "Member 'BuildingReferenceHelper_UpdateWindowSashSetReference::RefToUpdate' has a wrong offset!");
static_assert(offsetof(BuildingReferenceHelper_UpdateWindowSashSetReference, ReturnValue) == 0x000060, "Member 'BuildingReferenceHelper_UpdateWindowSashSetReference::ReturnValue' has a wrong offset!");

// Function Flame.Building.HideInterior
// 0x0001 (0x0001 - 0x0000)
struct Building_HideInterior final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Building_HideInterior) == 0x000001, "Wrong alignment on Building_HideInterior");
static_assert(sizeof(Building_HideInterior) == 0x000001, "Wrong size on Building_HideInterior");
static_assert(offsetof(Building_HideInterior, bNewHidden) == 0x000000, "Member 'Building_HideInterior::bNewHidden' has a wrong offset!");

// Function Flame.Building.GetDoor
// 0x0010 (0x0010 - 0x0000)
struct Building_GetDoor final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADoor*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Building_GetDoor) == 0x000008, "Wrong alignment on Building_GetDoor");
static_assert(sizeof(Building_GetDoor) == 0x000010, "Wrong size on Building_GetDoor");
static_assert(offsetof(Building_GetDoor, Idx) == 0x000000, "Member 'Building_GetDoor::Idx' has a wrong offset!");
static_assert(offsetof(Building_GetDoor, ReturnValue) == 0x000008, "Member 'Building_GetDoor::ReturnValue' has a wrong offset!");

// Function Flame.Building.GetDoorIdx
// 0x0010 (0x0010 - 0x0000)
struct Building_GetDoorIdx final
{
public:
	class ADoor*                                  Door;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Building_GetDoorIdx) == 0x000008, "Wrong alignment on Building_GetDoorIdx");
static_assert(sizeof(Building_GetDoorIdx) == 0x000010, "Wrong size on Building_GetDoorIdx");
static_assert(offsetof(Building_GetDoorIdx, Door) == 0x000000, "Member 'Building_GetDoorIdx::Door' has a wrong offset!");
static_assert(offsetof(Building_GetDoorIdx, Idx) == 0x000008, "Member 'Building_GetDoorIdx::Idx' has a wrong offset!");
static_assert(offsetof(Building_GetDoorIdx, ReturnValue) == 0x00000C, "Member 'Building_GetDoorIdx::ReturnValue' has a wrong offset!");

// Function Flame.Building.GetWindow
// 0x0010 (0x0010 - 0x0000)
struct Building_GetWindow final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindow*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Building_GetWindow) == 0x000008, "Wrong alignment on Building_GetWindow");
static_assert(sizeof(Building_GetWindow) == 0x000010, "Wrong size on Building_GetWindow");
static_assert(offsetof(Building_GetWindow, Idx) == 0x000000, "Member 'Building_GetWindow::Idx' has a wrong offset!");
static_assert(offsetof(Building_GetWindow, ReturnValue) == 0x000008, "Member 'Building_GetWindow::ReturnValue' has a wrong offset!");

// Function Flame.Building.GetWindowIndex
// 0x0010 (0x0010 - 0x0000)
struct Building_GetWindowIndex final
{
public:
	class AWindow*                                Window;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Building_GetWindowIndex) == 0x000008, "Wrong alignment on Building_GetWindowIndex");
static_assert(sizeof(Building_GetWindowIndex) == 0x000010, "Wrong size on Building_GetWindowIndex");
static_assert(offsetof(Building_GetWindowIndex, Window) == 0x000000, "Member 'Building_GetWindowIndex::Window' has a wrong offset!");
static_assert(offsetof(Building_GetWindowIndex, Idx) == 0x000008, "Member 'Building_GetWindowIndex::Idx' has a wrong offset!");
static_assert(offsetof(Building_GetWindowIndex, ReturnValue) == 0x00000C, "Member 'Building_GetWindowIndex::ReturnValue' has a wrong offset!");

// Function Flame.Building.MulticastLockDoorsAndWindows
// 0x0004 (0x0004 - 0x0000)
struct Building_MulticastLockDoorsAndWindows final
{
public:
	EBuildingOverrideBehavior                     DoorBehaviorExterior;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildingOverrideBehavior                     DoorBehaviorInterior;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBuildingOverrideBehavior                     WindowBehavior;                                    // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTakeDefaultFromObjectsIfNoChange;                 // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Building_MulticastLockDoorsAndWindows) == 0x000001, "Wrong alignment on Building_MulticastLockDoorsAndWindows");
static_assert(sizeof(Building_MulticastLockDoorsAndWindows) == 0x000004, "Wrong size on Building_MulticastLockDoorsAndWindows");
static_assert(offsetof(Building_MulticastLockDoorsAndWindows, DoorBehaviorExterior) == 0x000000, "Member 'Building_MulticastLockDoorsAndWindows::DoorBehaviorExterior' has a wrong offset!");
static_assert(offsetof(Building_MulticastLockDoorsAndWindows, DoorBehaviorInterior) == 0x000001, "Member 'Building_MulticastLockDoorsAndWindows::DoorBehaviorInterior' has a wrong offset!");
static_assert(offsetof(Building_MulticastLockDoorsAndWindows, WindowBehavior) == 0x000002, "Member 'Building_MulticastLockDoorsAndWindows::WindowBehavior' has a wrong offset!");
static_assert(offsetof(Building_MulticastLockDoorsAndWindows, bTakeDefaultFromObjectsIfNoChange) == 0x000003, "Member 'Building_MulticastLockDoorsAndWindows::bTakeDefaultFromObjectsIfNoChange' has a wrong offset!");

// Function Flame.Door.GetOtherActorDirection
// 0x0010 (0x0010 - 0x0000)
struct Door_GetOtherActorDirection final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Door_GetOtherActorDirection) == 0x000008, "Wrong alignment on Door_GetOtherActorDirection");
static_assert(sizeof(Door_GetOtherActorDirection) == 0x000010, "Wrong size on Door_GetOtherActorDirection");
static_assert(offsetof(Door_GetOtherActorDirection, OtherActor) == 0x000000, "Member 'Door_GetOtherActorDirection::OtherActor' has a wrong offset!");
static_assert(offsetof(Door_GetOtherActorDirection, ReturnValue) == 0x000008, "Member 'Door_GetOtherActorDirection::ReturnValue' has a wrong offset!");

// Function Flame.Door.GetState
// 0x0001 (0x0001 - 0x0000)
struct Door_GetState final
{
public:
	EDoorState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_GetState) == 0x000001, "Wrong alignment on Door_GetState");
static_assert(sizeof(Door_GetState) == 0x000001, "Wrong size on Door_GetState");
static_assert(offsetof(Door_GetState, ReturnValue) == 0x000000, "Member 'Door_GetState::ReturnValue' has a wrong offset!");

// Function Flame.Door.HandleProgress
// 0x0004 (0x0004 - 0x0000)
struct Door_HandleProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_HandleProgress) == 0x000004, "Wrong alignment on Door_HandleProgress");
static_assert(sizeof(Door_HandleProgress) == 0x000004, "Wrong size on Door_HandleProgress");
static_assert(offsetof(Door_HandleProgress, Value) == 0x000000, "Member 'Door_HandleProgress::Value' has a wrong offset!");

// Function Flame.Door.Interact
// 0x0010 (0x0010 - 0x0000)
struct Door_Interact final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_Interact) == 0x000008, "Wrong alignment on Door_Interact");
static_assert(sizeof(Door_Interact) == 0x000010, "Wrong size on Door_Interact");
static_assert(offsetof(Door_Interact, Sender) == 0x000000, "Member 'Door_Interact::Sender' has a wrong offset!");
static_assert(offsetof(Door_Interact, InteractingActor) == 0x000008, "Member 'Door_Interact::InteractingActor' has a wrong offset!");

// Function Flame.Door.ServerChangeStateTo
// 0x0001 (0x0001 - 0x0000)
struct Door_ServerChangeStateTo final
{
public:
	EDoorState                                    NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_ServerChangeStateTo) == 0x000001, "Wrong alignment on Door_ServerChangeStateTo");
static_assert(sizeof(Door_ServerChangeStateTo) == 0x000001, "Wrong size on Door_ServerChangeStateTo");
static_assert(offsetof(Door_ServerChangeStateTo, NewState) == 0x000000, "Member 'Door_ServerChangeStateTo::NewState' has a wrong offset!");

// Function Flame.Door.SetCanOpenBackward
// 0x0001 (0x0001 - 0x0000)
struct Door_SetCanOpenBackward final
{
public:
	bool                                          bAble;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetCanOpenBackward) == 0x000001, "Wrong alignment on Door_SetCanOpenBackward");
static_assert(sizeof(Door_SetCanOpenBackward) == 0x000001, "Wrong size on Door_SetCanOpenBackward");
static_assert(offsetof(Door_SetCanOpenBackward, bAble) == 0x000000, "Member 'Door_SetCanOpenBackward::bAble' has a wrong offset!");

// Function Flame.Door.SetCanOpenForward
// 0x0001 (0x0001 - 0x0000)
struct Door_SetCanOpenForward final
{
public:
	bool                                          bAble;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetCanOpenForward) == 0x000001, "Wrong alignment on Door_SetCanOpenForward");
static_assert(sizeof(Door_SetCanOpenForward) == 0x000001, "Wrong size on Door_SetCanOpenForward");
static_assert(offsetof(Door_SetCanOpenForward, bAble) == 0x000000, "Member 'Door_SetCanOpenForward::bAble' has a wrong offset!");

// Function Flame.Door.SetDoorBlocked
// 0x0001 (0x0001 - 0x0000)
struct Door_SetDoorBlocked final
{
public:
	bool                                          bBlocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorBlocked) == 0x000001, "Wrong alignment on Door_SetDoorBlocked");
static_assert(sizeof(Door_SetDoorBlocked) == 0x000001, "Wrong size on Door_SetDoorBlocked");
static_assert(offsetof(Door_SetDoorBlocked, bBlocked) == 0x000000, "Member 'Door_SetDoorBlocked::bBlocked' has a wrong offset!");

// Function Flame.Door.SetDoorLocked
// 0x0001 (0x0001 - 0x0000)
struct Door_SetDoorLocked final
{
public:
	bool                                          bLocked;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorLocked) == 0x000001, "Wrong alignment on Door_SetDoorLocked");
static_assert(sizeof(Door_SetDoorLocked) == 0x000001, "Wrong size on Door_SetDoorLocked");
static_assert(offsetof(Door_SetDoorLocked, bLocked) == 0x000000, "Member 'Door_SetDoorLocked::bLocked' has a wrong offset!");

// Function Flame.Door.SetDoorOpen
// 0x0001 (0x0001 - 0x0000)
struct Door_SetDoorOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Door_SetDoorOpen) == 0x000001, "Wrong alignment on Door_SetDoorOpen");
static_assert(sizeof(Door_SetDoorOpen) == 0x000001, "Wrong size on Door_SetDoorOpen");
static_assert(offsetof(Door_SetDoorOpen, bOpen) == 0x000000, "Member 'Door_SetDoorOpen::bOpen' has a wrong offset!");

// Function Flame.Door.IsPointInFront
// 0x0010 (0x0010 - 0x0000)
struct Door_IsPointInFront final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Door_IsPointInFront) == 0x000004, "Wrong alignment on Door_IsPointInFront");
static_assert(sizeof(Door_IsPointInFront) == 0x000010, "Wrong size on Door_IsPointInFront");
static_assert(offsetof(Door_IsPointInFront, Location) == 0x000000, "Member 'Door_IsPointInFront::Location' has a wrong offset!");
static_assert(offsetof(Door_IsPointInFront, ReturnValue) == 0x00000C, "Member 'Door_IsPointInFront::ReturnValue' has a wrong offset!");

// Function Flame.BulletDecalManager.CreateDecal
// 0x0050 (0x0050 - 0x0000)
struct BulletDecalManager_CreateDecal final
{
public:
	struct FDecalInfo                             Info;                                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UDecalComponent*                        ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletDecalManager_CreateDecal) == 0x000010, "Wrong alignment on BulletDecalManager_CreateDecal");
static_assert(sizeof(BulletDecalManager_CreateDecal) == 0x000050, "Wrong size on BulletDecalManager_CreateDecal");
static_assert(offsetof(BulletDecalManager_CreateDecal, Info) == 0x000000, "Member 'BulletDecalManager_CreateDecal::Info' has a wrong offset!");
static_assert(offsetof(BulletDecalManager_CreateDecal, ReturnValue) == 0x000040, "Member 'BulletDecalManager_CreateDecal::ReturnValue' has a wrong offset!");

// Function Flame.BulletDecalManager.DestroyDecal
// 0x0010 (0x0010 - 0x0000)
struct BulletDecalManager_DestroyDecal final
{
public:
	class UDecalComponent*                        DecalActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletDecalManager_DestroyDecal) == 0x000008, "Wrong alignment on BulletDecalManager_DestroyDecal");
static_assert(sizeof(BulletDecalManager_DestroyDecal) == 0x000010, "Wrong size on BulletDecalManager_DestroyDecal");
static_assert(offsetof(BulletDecalManager_DestroyDecal, DecalActor) == 0x000000, "Member 'BulletDecalManager_DestroyDecal::DecalActor' has a wrong offset!");
static_assert(offsetof(BulletDecalManager_DestroyDecal, Index_0) == 0x000008, "Member 'BulletDecalManager_DestroyDecal::Index_0' has a wrong offset!");

// Function Flame.BulletDecalManager.RequestDecal
// 0x0040 (0x0040 - 0x0000)
struct BulletDecalManager_RequestDecal final
{
public:
	struct FTransform                             Position;                                          // 0x0000(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeMultiplier;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletDecalManager_RequestDecal) == 0x000010, "Wrong alignment on BulletDecalManager_RequestDecal");
static_assert(sizeof(BulletDecalManager_RequestDecal) == 0x000040, "Wrong size on BulletDecalManager_RequestDecal");
static_assert(offsetof(BulletDecalManager_RequestDecal, Position) == 0x000000, "Member 'BulletDecalManager_RequestDecal::Position' has a wrong offset!");
static_assert(offsetof(BulletDecalManager_RequestDecal, Material) == 0x000030, "Member 'BulletDecalManager_RequestDecal::Material' has a wrong offset!");
static_assert(offsetof(BulletDecalManager_RequestDecal, SizeMultiplier) == 0x000038, "Member 'BulletDecalManager_RequestDecal::SizeMultiplier' has a wrong offset!");

// Function Flame.BulletDecalManager.Tick
// 0x0004 (0x0004 - 0x0000)
struct BulletDecalManager_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletDecalManager_Tick) == 0x000004, "Wrong alignment on BulletDecalManager_Tick");
static_assert(sizeof(BulletDecalManager_Tick) == 0x000004, "Wrong size on BulletDecalManager_Tick");
static_assert(offsetof(BulletDecalManager_Tick, DeltaTime) == 0x000000, "Member 'BulletDecalManager_Tick::DeltaTime' has a wrong offset!");

// Function Flame.HumanCharacter.BeforeDied
// 0x00A8 (0x00A8 - 0x0000)
struct HumanCharacter_BeforeDied final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItem;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0018(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_BeforeDied) == 0x000008, "Wrong alignment on HumanCharacter_BeforeDied");
static_assert(sizeof(HumanCharacter_BeforeDied) == 0x0000A8, "Wrong size on HumanCharacter_BeforeDied");
static_assert(offsetof(HumanCharacter_BeforeDied, DamageAmount) == 0x000000, "Member 'HumanCharacter_BeforeDied::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_BeforeDied, DamageType) == 0x000004, "Member 'HumanCharacter_BeforeDied::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_BeforeDied, InstigatingCharacter) == 0x000008, "Member 'HumanCharacter_BeforeDied::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_BeforeDied, InstigatingItem) == 0x000010, "Member 'HumanCharacter_BeforeDied::InstigatingItem' has a wrong offset!");
static_assert(offsetof(HumanCharacter_BeforeDied, HitResult) == 0x000018, "Member 'HumanCharacter_BeforeDied::HitResult' has a wrong offset!");

// Function Flame.HumanCharacter.CalculateExplosionExposure
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_CalculateExplosionExposure final
{
public:
	class UExplosionComponent*                    ExplosionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExplosionEffect                       ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CalculateExplosionExposure) == 0x000008, "Wrong alignment on HumanCharacter_CalculateExplosionExposure");
static_assert(sizeof(HumanCharacter_CalculateExplosionExposure) == 0x000020, "Wrong size on HumanCharacter_CalculateExplosionExposure");
static_assert(offsetof(HumanCharacter_CalculateExplosionExposure, ExplosionComponent) == 0x000000, "Member 'HumanCharacter_CalculateExplosionExposure::ExplosionComponent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateExplosionExposure, ReturnValue) == 0x000008, "Member 'HumanCharacter_CalculateExplosionExposure::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanAimChanged
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_CanAimChanged final
{
public:
	class UObject*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanAimComponentState;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_CanAimChanged) == 0x000008, "Wrong alignment on HumanCharacter_CanAimChanged");
static_assert(sizeof(HumanCharacter_CanAimChanged) == 0x000010, "Wrong size on HumanCharacter_CanAimChanged");
static_assert(offsetof(HumanCharacter_CanAimChanged, Sender) == 0x000000, "Member 'HumanCharacter_CanAimChanged::Sender' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CanAimChanged, CanAimComponentState) == 0x000008, "Member 'HumanCharacter_CanAimChanged::CanAimComponentState' has a wrong offset!");

// Function Flame.HumanCharacter.ClientAskForUpdateWeaponAmmo
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_ClientAskForUpdateWeaponAmmo final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientAskForUpdateWeaponAmmo) == 0x000008, "Wrong alignment on HumanCharacter_ClientAskForUpdateWeaponAmmo");
static_assert(sizeof(HumanCharacter_ClientAskForUpdateWeaponAmmo) == 0x000008, "Wrong size on HumanCharacter_ClientAskForUpdateWeaponAmmo");
static_assert(offsetof(HumanCharacter_ClientAskForUpdateWeaponAmmo, Weapon) == 0x000000, "Member 'HumanCharacter_ClientAskForUpdateWeaponAmmo::Weapon' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawBox
// 0x0050 (0x0050 - 0x0000)
struct HumanCharacter_ClientDrawBox final
{
public:
	struct FBoxCollider                           Box;                                               // 0x0000(0x0040)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ClientDrawBox) == 0x000010, "Wrong alignment on HumanCharacter_ClientDrawBox");
static_assert(sizeof(HumanCharacter_ClientDrawBox) == 0x000050, "Wrong size on HumanCharacter_ClientDrawBox");
static_assert(offsetof(HumanCharacter_ClientDrawBox, Box) == 0x000000, "Member 'HumanCharacter_ClientDrawBox::Box' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBox, Color) == 0x000040, "Member 'HumanCharacter_ClientDrawBox::Color' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawBoxCustom
// 0x0040 (0x0040 - 0x0000)
struct HumanCharacter_ClientDrawBoxCustom final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Extent;                                            // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ClientDrawBoxCustom) == 0x000010, "Wrong alignment on HumanCharacter_ClientDrawBoxCustom");
static_assert(sizeof(HumanCharacter_ClientDrawBoxCustom) == 0x000040, "Wrong size on HumanCharacter_ClientDrawBoxCustom");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, Center) == 0x000000, "Member 'HumanCharacter_ClientDrawBoxCustom::Center' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, Extent) == 0x00000C, "Member 'HumanCharacter_ClientDrawBoxCustom::Extent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, Rotation) == 0x000020, "Member 'HumanCharacter_ClientDrawBoxCustom::Rotation' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, Color) == 0x000030, "Member 'HumanCharacter_ClientDrawBoxCustom::Color' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, LifeTime) == 0x000034, "Member 'HumanCharacter_ClientDrawBoxCustom::LifeTime' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawBoxCustom, Thickness) == 0x000038, "Member 'HumanCharacter_ClientDrawBoxCustom::Thickness' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawCapsule
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_ClientDrawCapsule final
{
public:
	struct FCapsuleCollider                       Capsule;                                           // 0x0000(0x001C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientDrawCapsule) == 0x000004, "Wrong alignment on HumanCharacter_ClientDrawCapsule");
static_assert(sizeof(HumanCharacter_ClientDrawCapsule) == 0x000020, "Wrong size on HumanCharacter_ClientDrawCapsule");
static_assert(offsetof(HumanCharacter_ClientDrawCapsule, Capsule) == 0x000000, "Member 'HumanCharacter_ClientDrawCapsule::Capsule' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsule, Color) == 0x00001C, "Member 'HumanCharacter_ClientDrawCapsule::Color' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawCapsuleCustom
// 0x0040 (0x0040 - 0x0000)
struct HumanCharacter_ClientDrawCapsuleCustom final
{
public:
	struct FVector                                Center;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Rotation;                                          // 0x0020(0x0010)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ClientDrawCapsuleCustom) == 0x000010, "Wrong alignment on HumanCharacter_ClientDrawCapsuleCustom");
static_assert(sizeof(HumanCharacter_ClientDrawCapsuleCustom) == 0x000040, "Wrong size on HumanCharacter_ClientDrawCapsuleCustom");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, Center) == 0x000000, "Member 'HumanCharacter_ClientDrawCapsuleCustom::Center' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, HalfHeight) == 0x00000C, "Member 'HumanCharacter_ClientDrawCapsuleCustom::HalfHeight' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, Radius) == 0x000010, "Member 'HumanCharacter_ClientDrawCapsuleCustom::Radius' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, Rotation) == 0x000020, "Member 'HumanCharacter_ClientDrawCapsuleCustom::Rotation' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, Color) == 0x000030, "Member 'HumanCharacter_ClientDrawCapsuleCustom::Color' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, LifeTime) == 0x000034, "Member 'HumanCharacter_ClientDrawCapsuleCustom::LifeTime' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawCapsuleCustom, Thickness) == 0x000038, "Member 'HumanCharacter_ClientDrawCapsuleCustom::Thickness' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawDebugBox
// 0x001C (0x001C - 0x0000)
struct HumanCharacter_ClientDrawDebugBox final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientDrawDebugBox) == 0x000004, "Wrong alignment on HumanCharacter_ClientDrawDebugBox");
static_assert(sizeof(HumanCharacter_ClientDrawDebugBox) == 0x00001C, "Wrong size on HumanCharacter_ClientDrawDebugBox");
static_assert(offsetof(HumanCharacter_ClientDrawDebugBox, Location) == 0x000000, "Member 'HumanCharacter_ClientDrawDebugBox::Location' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawDebugBox, BoxExtent) == 0x00000C, "Member 'HumanCharacter_ClientDrawDebugBox::BoxExtent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawDebugBox, Time) == 0x000018, "Member 'HumanCharacter_ClientDrawDebugBox::Time' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawDebugLine
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_ClientDrawDebugLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Colour;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientDrawDebugLine) == 0x000004, "Wrong alignment on HumanCharacter_ClientDrawDebugLine");
static_assert(sizeof(HumanCharacter_ClientDrawDebugLine) == 0x000020, "Wrong size on HumanCharacter_ClientDrawDebugLine");
static_assert(offsetof(HumanCharacter_ClientDrawDebugLine, Start) == 0x000000, "Member 'HumanCharacter_ClientDrawDebugLine::Start' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawDebugLine, End) == 0x00000C, "Member 'HumanCharacter_ClientDrawDebugLine::End' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawDebugLine, Time) == 0x000018, "Member 'HumanCharacter_ClientDrawDebugLine::Time' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawDebugLine, Colour) == 0x00001C, "Member 'HumanCharacter_ClientDrawDebugLine::Colour' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawLine
// 0x001C (0x001C - 0x0000)
struct HumanCharacter_ClientDrawLine final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientDrawLine) == 0x000004, "Wrong alignment on HumanCharacter_ClientDrawLine");
static_assert(sizeof(HumanCharacter_ClientDrawLine) == 0x00001C, "Wrong size on HumanCharacter_ClientDrawLine");
static_assert(offsetof(HumanCharacter_ClientDrawLine, Start) == 0x000000, "Member 'HumanCharacter_ClientDrawLine::Start' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawLine, End) == 0x00000C, "Member 'HumanCharacter_ClientDrawLine::End' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawLine, Color) == 0x000018, "Member 'HumanCharacter_ClientDrawLine::Color' has a wrong offset!");

// Function Flame.HumanCharacter.ClientDrawLineCustom
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_ClientDrawLineCustom final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeTime;                                          // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientDrawLineCustom) == 0x000004, "Wrong alignment on HumanCharacter_ClientDrawLineCustom");
static_assert(sizeof(HumanCharacter_ClientDrawLineCustom) == 0x000020, "Wrong size on HumanCharacter_ClientDrawLineCustom");
static_assert(offsetof(HumanCharacter_ClientDrawLineCustom, Start) == 0x000000, "Member 'HumanCharacter_ClientDrawLineCustom::Start' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawLineCustom, End) == 0x00000C, "Member 'HumanCharacter_ClientDrawLineCustom::End' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawLineCustom, Color) == 0x000018, "Member 'HumanCharacter_ClientDrawLineCustom::Color' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientDrawLineCustom, LifeTime) == 0x00001C, "Member 'HumanCharacter_ClientDrawLineCustom::LifeTime' has a wrong offset!");

// Function Flame.HumanCharacter.ClientLogLagswitchingStats
// 0x000C (0x000C - 0x0000)
struct HumanCharacter_ClientLogLagswitchingStats final
{
public:
	bool                                          bDisconnected;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToLagswitchProtection;                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Strikes;                                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientLogLagswitchingStats) == 0x000004, "Wrong alignment on HumanCharacter_ClientLogLagswitchingStats");
static_assert(sizeof(HumanCharacter_ClientLogLagswitchingStats) == 0x00000C, "Wrong size on HumanCharacter_ClientLogLagswitchingStats");
static_assert(offsetof(HumanCharacter_ClientLogLagswitchingStats, bDisconnected) == 0x000000, "Member 'HumanCharacter_ClientLogLagswitchingStats::bDisconnected' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientLogLagswitchingStats, TimeToLagswitchProtection) == 0x000004, "Member 'HumanCharacter_ClientLogLagswitchingStats::TimeToLagswitchProtection' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientLogLagswitchingStats, Strikes) == 0x000008, "Member 'HumanCharacter_ClientLogLagswitchingStats::Strikes' has a wrong offset!");

// Function Flame.HumanCharacter.ClientOnOtherPlayerHit
// 0x00B8 (0x00B8 - 0x0000)
struct HumanCharacter_ClientOnOtherPlayerHit final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItemClass;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0018(0x008C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              AffectedItems;                                     // 0x00A8(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientOnOtherPlayerHit) == 0x000008, "Wrong alignment on HumanCharacter_ClientOnOtherPlayerHit");
static_assert(sizeof(HumanCharacter_ClientOnOtherPlayerHit) == 0x0000B8, "Wrong size on HumanCharacter_ClientOnOtherPlayerHit");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, DamageAmount) == 0x000000, "Member 'HumanCharacter_ClientOnOtherPlayerHit::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, DamageType) == 0x000004, "Member 'HumanCharacter_ClientOnOtherPlayerHit::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, Victim) == 0x000008, "Member 'HumanCharacter_ClientOnOtherPlayerHit::Victim' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, InstigatingItemClass) == 0x000010, "Member 'HumanCharacter_ClientOnOtherPlayerHit::InstigatingItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, HitResult) == 0x000018, "Member 'HumanCharacter_ClientOnOtherPlayerHit::HitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnOtherPlayerHit, AffectedItems) == 0x0000A8, "Member 'HumanCharacter_ClientOnOtherPlayerHit::AffectedItems' has a wrong offset!");

// Function Flame.HumanCharacter.ClientOnShowHitMarkerOfColor
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_ClientOnShowHitMarkerOfColor final
{
public:
	float                                         CrosshairScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientOnShowHitMarkerOfColor) == 0x000004, "Wrong alignment on HumanCharacter_ClientOnShowHitMarkerOfColor");
static_assert(sizeof(HumanCharacter_ClientOnShowHitMarkerOfColor) == 0x000008, "Wrong size on HumanCharacter_ClientOnShowHitMarkerOfColor");
static_assert(offsetof(HumanCharacter_ClientOnShowHitMarkerOfColor, CrosshairScale) == 0x000000, "Member 'HumanCharacter_ClientOnShowHitMarkerOfColor::CrosshairScale' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientOnShowHitMarkerOfColor, Color) == 0x000004, "Member 'HumanCharacter_ClientOnShowHitMarkerOfColor::Color' has a wrong offset!");

// Function Flame.HumanCharacter.ClientShowDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_ClientShowDebugMessage final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ClientShowDebugMessage) == 0x000008, "Wrong alignment on HumanCharacter_ClientShowDebugMessage");
static_assert(sizeof(HumanCharacter_ClientShowDebugMessage) == 0x000020, "Wrong size on HumanCharacter_ClientShowDebugMessage");
static_assert(offsetof(HumanCharacter_ClientShowDebugMessage, Duration) == 0x000000, "Member 'HumanCharacter_ClientShowDebugMessage::Duration' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientShowDebugMessage, Message) == 0x000008, "Member 'HumanCharacter_ClientShowDebugMessage::Message' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ClientShowDebugMessage, Color) == 0x000018, "Member 'HumanCharacter_ClientShowDebugMessage::Color' has a wrong offset!");

// Function Flame.HumanCharacter.ClientUpdateWeaponsAmmo
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_ClientUpdateWeaponsAmmo final
{
public:
	TArray<struct FAmmoSyncMessage>               Messages;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ClientUpdateWeaponsAmmo) == 0x000008, "Wrong alignment on HumanCharacter_ClientUpdateWeaponsAmmo");
static_assert(sizeof(HumanCharacter_ClientUpdateWeaponsAmmo) == 0x000010, "Wrong size on HumanCharacter_ClientUpdateWeaponsAmmo");
static_assert(offsetof(HumanCharacter_ClientUpdateWeaponsAmmo, Messages) == 0x000000, "Member 'HumanCharacter_ClientUpdateWeaponsAmmo::Messages' has a wrong offset!");

// Function Flame.HumanCharacter.ConfirmLadderAttach
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_ConfirmLadderAttach final
{
public:
	class AWorldLadder*                           Ladder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ActorLocation;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ConfirmLadderAttach) == 0x000008, "Wrong alignment on HumanCharacter_ConfirmLadderAttach");
static_assert(sizeof(HumanCharacter_ConfirmLadderAttach) == 0x000018, "Wrong size on HumanCharacter_ConfirmLadderAttach");
static_assert(offsetof(HumanCharacter_ConfirmLadderAttach, Ladder) == 0x000000, "Member 'HumanCharacter_ConfirmLadderAttach::Ladder' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ConfirmLadderAttach, ActorLocation) == 0x000008, "Member 'HumanCharacter_ConfirmLadderAttach::ActorLocation' has a wrong offset!");

// Function Flame.HumanCharacter.Die
// 0x00A8 (0x00A8 - 0x0000)
struct HumanCharacter_Die final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItem;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0018(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_Die) == 0x000008, "Wrong alignment on HumanCharacter_Die");
static_assert(sizeof(HumanCharacter_Die) == 0x0000A8, "Wrong size on HumanCharacter_Die");
static_assert(offsetof(HumanCharacter_Die, DamageAmount) == 0x000000, "Member 'HumanCharacter_Die::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_Die, DamageType) == 0x000004, "Member 'HumanCharacter_Die::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_Die, InstigatingCharacter) == 0x000008, "Member 'HumanCharacter_Die::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_Die, InstigatingItem) == 0x000010, "Member 'HumanCharacter_Die::InstigatingItem' has a wrong offset!");
static_assert(offsetof(HumanCharacter_Die, HitResult) == 0x000018, "Member 'HumanCharacter_Die::HitResult' has a wrong offset!");

// Function Flame.HumanCharacter.DisableMovementForDuration
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_DisableMovementForDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_DisableMovementForDuration) == 0x000004, "Wrong alignment on HumanCharacter_DisableMovementForDuration");
static_assert(sizeof(HumanCharacter_DisableMovementForDuration) == 0x000004, "Wrong size on HumanCharacter_DisableMovementForDuration");
static_assert(offsetof(HumanCharacter_DisableMovementForDuration, Duration) == 0x000000, "Member 'HumanCharacter_DisableMovementForDuration::Duration' has a wrong offset!");

// Function Flame.HumanCharacter.DrawDebugHeadLocation
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_DrawDebugHeadLocation final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      CallerRole;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_DrawDebugHeadLocation) == 0x000004, "Wrong alignment on HumanCharacter_DrawDebugHeadLocation");
static_assert(sizeof(HumanCharacter_DrawDebugHeadLocation) == 0x000010, "Wrong size on HumanCharacter_DrawDebugHeadLocation");
static_assert(offsetof(HumanCharacter_DrawDebugHeadLocation, Location) == 0x000000, "Member 'HumanCharacter_DrawDebugHeadLocation::Location' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawDebugHeadLocation, CallerRole) == 0x00000C, "Member 'HumanCharacter_DrawDebugHeadLocation::CallerRole' has a wrong offset!");

// Function Flame.HumanCharacter.DrawDebugMuzzleLocation
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_DrawDebugMuzzleLocation final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      CallerRole;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_DrawDebugMuzzleLocation) == 0x000004, "Wrong alignment on HumanCharacter_DrawDebugMuzzleLocation");
static_assert(sizeof(HumanCharacter_DrawDebugMuzzleLocation) == 0x000010, "Wrong size on HumanCharacter_DrawDebugMuzzleLocation");
static_assert(offsetof(HumanCharacter_DrawDebugMuzzleLocation, Location) == 0x000000, "Member 'HumanCharacter_DrawDebugMuzzleLocation::Location' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawDebugMuzzleLocation, CallerRole) == 0x00000C, "Member 'HumanCharacter_DrawDebugMuzzleLocation::CallerRole' has a wrong offset!");

// Function Flame.HumanCharacter.DrawDebugTargetLocation
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_DrawDebugTargetLocation final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      CallerRole;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_DrawDebugTargetLocation) == 0x000004, "Wrong alignment on HumanCharacter_DrawDebugTargetLocation");
static_assert(sizeof(HumanCharacter_DrawDebugTargetLocation) == 0x000010, "Wrong size on HumanCharacter_DrawDebugTargetLocation");
static_assert(offsetof(HumanCharacter_DrawDebugTargetLocation, Location) == 0x000000, "Member 'HumanCharacter_DrawDebugTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawDebugTargetLocation, CallerRole) == 0x00000C, "Member 'HumanCharacter_DrawDebugTargetLocation::CallerRole' has a wrong offset!");

// Function Flame.HumanCharacter.DrawMeleeDebug
// 0x001C (0x001C - 0x0000)
struct HumanCharacter_DrawMeleeDebug final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHit;                                           // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAuthority;                                     // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_DrawMeleeDebug) == 0x000004, "Wrong alignment on HumanCharacter_DrawMeleeDebug");
static_assert(sizeof(HumanCharacter_DrawMeleeDebug) == 0x00001C, "Wrong size on HumanCharacter_DrawMeleeDebug");
static_assert(offsetof(HumanCharacter_DrawMeleeDebug, Start) == 0x000000, "Member 'HumanCharacter_DrawMeleeDebug::Start' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawMeleeDebug, End) == 0x00000C, "Member 'HumanCharacter_DrawMeleeDebug::End' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawMeleeDebug, bHasHit) == 0x000018, "Member 'HumanCharacter_DrawMeleeDebug::bHasHit' has a wrong offset!");
static_assert(offsetof(HumanCharacter_DrawMeleeDebug, bHasAuthority) == 0x000019, "Member 'HumanCharacter_DrawMeleeDebug::bHasAuthority' has a wrong offset!");

// Function Flame.HumanCharacter.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetAnimInstance final
{
public:
	class UHumanAnimInstace*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetAnimInstance) == 0x000008, "Wrong alignment on HumanCharacter_GetAnimInstance");
static_assert(sizeof(HumanCharacter_GetAnimInstance) == 0x000008, "Wrong size on HumanCharacter_GetAnimInstance");
static_assert(offsetof(HumanCharacter_GetAnimInstance, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetSpecialDamageAmountForCharacter
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_GetSpecialDamageAmountForCharacter final
{
public:
	const class AHumanCharacter*                  EnemyTakingDamage;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentDamageAmount;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetSpecialDamageAmountForCharacter) == 0x000008, "Wrong alignment on HumanCharacter_GetSpecialDamageAmountForCharacter");
static_assert(sizeof(HumanCharacter_GetSpecialDamageAmountForCharacter) == 0x000010, "Wrong size on HumanCharacter_GetSpecialDamageAmountForCharacter");
static_assert(offsetof(HumanCharacter_GetSpecialDamageAmountForCharacter, EnemyTakingDamage) == 0x000000, "Member 'HumanCharacter_GetSpecialDamageAmountForCharacter::EnemyTakingDamage' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetSpecialDamageAmountForCharacter, CurrentDamageAmount) == 0x000008, "Member 'HumanCharacter_GetSpecialDamageAmountForCharacter::CurrentDamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetSpecialDamageAmountForCharacter, ReturnValue) == 0x00000C, "Member 'HumanCharacter_GetSpecialDamageAmountForCharacter::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.HasThrown
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_HasThrown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_HasThrown) == 0x000001, "Wrong alignment on HumanCharacter_HasThrown");
static_assert(sizeof(HumanCharacter_HasThrown) == 0x000001, "Wrong size on HumanCharacter_HasThrown");
static_assert(offsetof(HumanCharacter_HasThrown, ReturnValue) == 0x000000, "Member 'HumanCharacter_HasThrown::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.InWaterTick
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_InWaterTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_InWaterTick) == 0x000004, "Wrong alignment on HumanCharacter_InWaterTick");
static_assert(sizeof(HumanCharacter_InWaterTick) == 0x000004, "Wrong size on HumanCharacter_InWaterTick");
static_assert(offsetof(HumanCharacter_InWaterTick, DeltaTime) == 0x000000, "Member 'HumanCharacter_InWaterTick::DeltaTime' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastAddWound
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_MulticastAddWound final
{
public:
	struct FVector_NetQuantize                    HitWorldPosition;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastAddWound) == 0x000008, "Wrong alignment on HumanCharacter_MulticastAddWound");
static_assert(sizeof(HumanCharacter_MulticastAddWound) == 0x000020, "Wrong size on HumanCharacter_MulticastAddWound");
static_assert(offsetof(HumanCharacter_MulticastAddWound, HitWorldPosition) == 0x000000, "Member 'HumanCharacter_MulticastAddWound::HitWorldPosition' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastAddWound, HitComponent) == 0x000010, "Member 'HumanCharacter_MulticastAddWound::HitComponent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastAddWound, HitBoneName) == 0x000018, "Member 'HumanCharacter_MulticastAddWound::HitBoneName' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastDie
// 0x00B0 (0x00B0 - 0x0000)
struct HumanCharacter_MulticastDie final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItem;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastItemDamageCauserID;                            // 0x00A8(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_MulticastDie) == 0x000008, "Wrong alignment on HumanCharacter_MulticastDie");
static_assert(sizeof(HumanCharacter_MulticastDie) == 0x0000B0, "Wrong size on HumanCharacter_MulticastDie");
static_assert(offsetof(HumanCharacter_MulticastDie, DamageAmount) == 0x000000, "Member 'HumanCharacter_MulticastDie::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastDie, HitResult) == 0x000004, "Member 'HumanCharacter_MulticastDie::HitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastDie, DamageType) == 0x000090, "Member 'HumanCharacter_MulticastDie::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastDie, InstigatingCharacter) == 0x000098, "Member 'HumanCharacter_MulticastDie::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastDie, InstigatingItem) == 0x0000A0, "Member 'HumanCharacter_MulticastDie::InstigatingItem' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastDie, LastItemDamageCauserID) == 0x0000A8, "Member 'HumanCharacter_MulticastDie::LastItemDamageCauserID' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastPlayGesture
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_MulticastPlayGesture final
{
public:
	class UAnimMontage*                           GestureToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastPlayGesture) == 0x000008, "Wrong alignment on HumanCharacter_MulticastPlayGesture");
static_assert(sizeof(HumanCharacter_MulticastPlayGesture) == 0x000008, "Wrong size on HumanCharacter_MulticastPlayGesture");
static_assert(offsetof(HumanCharacter_MulticastPlayGesture, GestureToPlay) == 0x000000, "Member 'HumanCharacter_MulticastPlayGesture::GestureToPlay' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastSetCollision
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_MulticastSetCollision final
{
public:
	bool                                          NewCollision;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastSetCollision) == 0x000001, "Wrong alignment on HumanCharacter_MulticastSetCollision");
static_assert(sizeof(HumanCharacter_MulticastSetCollision) == 0x000001, "Wrong size on HumanCharacter_MulticastSetCollision");
static_assert(offsetof(HumanCharacter_MulticastSetCollision, NewCollision) == 0x000000, "Member 'HumanCharacter_MulticastSetCollision::NewCollision' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastSetPlayerGroup
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_MulticastSetPlayerGroup final
{
public:
	class FString                                 NewGroup;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastSetPlayerGroup) == 0x000008, "Wrong alignment on HumanCharacter_MulticastSetPlayerGroup");
static_assert(sizeof(HumanCharacter_MulticastSetPlayerGroup) == 0x000010, "Wrong size on HumanCharacter_MulticastSetPlayerGroup");
static_assert(offsetof(HumanCharacter_MulticastSetPlayerGroup, NewGroup) == 0x000000, "Member 'HumanCharacter_MulticastSetPlayerGroup::NewGroup' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastStaggerPlayer
// 0x0014 (0x0014 - 0x0000)
struct HumanCharacter_MulticastStaggerPlayer final
{
public:
	float                                         StunDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastStaggerPlayer) == 0x000004, "Wrong alignment on HumanCharacter_MulticastStaggerPlayer");
static_assert(sizeof(HumanCharacter_MulticastStaggerPlayer) == 0x000014, "Wrong size on HumanCharacter_MulticastStaggerPlayer");
static_assert(offsetof(HumanCharacter_MulticastStaggerPlayer, StunDuration) == 0x000000, "Member 'HumanCharacter_MulticastStaggerPlayer::StunDuration' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastStaggerPlayer, Damage) == 0x000004, "Member 'HumanCharacter_MulticastStaggerPlayer::Damage' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastStaggerPlayer, Direction) == 0x000008, "Member 'HumanCharacter_MulticastStaggerPlayer::Direction' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastTakeDamage
// 0x0078 (0x0078 - 0x0000)
struct HumanCharacter_MulticastTakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitResult;                                         // 0x0004(0x003C)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              Direction;                                         // 0x0040(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  InstigatingActor;                                  // 0x0050(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           DamageCauser;                                      // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              AffectedItems;                                     // 0x0068(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastTakeDamage) == 0x000008, "Wrong alignment on HumanCharacter_MulticastTakeDamage");
static_assert(sizeof(HumanCharacter_MulticastTakeDamage) == 0x000078, "Wrong size on HumanCharacter_MulticastTakeDamage");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, DamageAmount) == 0x000000, "Member 'HumanCharacter_MulticastTakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, HitResult) == 0x000004, "Member 'HumanCharacter_MulticastTakeDamage::HitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, Direction) == 0x000040, "Member 'HumanCharacter_MulticastTakeDamage::Direction' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, InstigatingActor) == 0x000050, "Member 'HumanCharacter_MulticastTakeDamage::InstigatingActor' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, DamageCauser) == 0x000058, "Member 'HumanCharacter_MulticastTakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, DamageType) == 0x000060, "Member 'HumanCharacter_MulticastTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_MulticastTakeDamage, AffectedItems) == 0x000068, "Member 'HumanCharacter_MulticastTakeDamage::AffectedItems' has a wrong offset!");

// Function Flame.HumanCharacter.MulticastUpdateWeaponAmmo
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_MulticastUpdateWeaponAmmo final
{
public:
	struct FAmmoSyncMessage                       Message;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_MulticastUpdateWeaponAmmo) == 0x000008, "Wrong alignment on HumanCharacter_MulticastUpdateWeaponAmmo");
static_assert(sizeof(HumanCharacter_MulticastUpdateWeaponAmmo) == 0x000018, "Wrong size on HumanCharacter_MulticastUpdateWeaponAmmo");
static_assert(offsetof(HumanCharacter_MulticastUpdateWeaponAmmo, Message) == 0x000000, "Member 'HumanCharacter_MulticastUpdateWeaponAmmo::Message' has a wrong offset!");

// Function Flame.HumanCharacter.OnItemChangedStart
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_OnItemChangedStart final
{
public:
	class UGameplayActionsComponent*              GAC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  NewItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  OldItem;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnItemChangedStart) == 0x000008, "Wrong alignment on HumanCharacter_OnItemChangedStart");
static_assert(sizeof(HumanCharacter_OnItemChangedStart) == 0x000018, "Wrong size on HumanCharacter_OnItemChangedStart");
static_assert(offsetof(HumanCharacter_OnItemChangedStart, GAC) == 0x000000, "Member 'HumanCharacter_OnItemChangedStart::GAC' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnItemChangedStart, NewItem) == 0x000008, "Member 'HumanCharacter_OnItemChangedStart::NewItem' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnItemChangedStart, OldItem) == 0x000010, "Member 'HumanCharacter_OnItemChangedStart::OldItem' has a wrong offset!");

// Function Flame.HumanCharacter.OnMeshChanged
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_OnMeshChanged final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnMeshChanged) == 0x000008, "Wrong alignment on HumanCharacter_OnMeshChanged");
static_assert(sizeof(HumanCharacter_OnMeshChanged) == 0x000008, "Wrong size on HumanCharacter_OnMeshChanged");
static_assert(offsetof(HumanCharacter_OnMeshChanged, Component) == 0x000000, "Member 'HumanCharacter_OnMeshChanged::Component' has a wrong offset!");

// Function Flame.HumanCharacter.OnOtherPlayerHit
// 0x00B8 (0x00B8 - 0x0000)
struct HumanCharacter_OnOtherPlayerHit final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItemClass;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0018(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              AffectedItems;                                     // 0x00A8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnOtherPlayerHit) == 0x000008, "Wrong alignment on HumanCharacter_OnOtherPlayerHit");
static_assert(sizeof(HumanCharacter_OnOtherPlayerHit) == 0x0000B8, "Wrong size on HumanCharacter_OnOtherPlayerHit");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, DamageAmount) == 0x000000, "Member 'HumanCharacter_OnOtherPlayerHit::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, DamageType) == 0x000004, "Member 'HumanCharacter_OnOtherPlayerHit::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, Victim) == 0x000008, "Member 'HumanCharacter_OnOtherPlayerHit::Victim' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, InstigatingItemClass) == 0x000010, "Member 'HumanCharacter_OnOtherPlayerHit::InstigatingItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, HitResult) == 0x000018, "Member 'HumanCharacter_OnOtherPlayerHit::HitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnOtherPlayerHit, AffectedItems) == 0x0000A8, "Member 'HumanCharacter_OnOtherPlayerHit::AffectedItems' has a wrong offset!");

// Function Flame.HumanCharacter.OnPlayerDied
// 0x00B0 (0x00B0 - 0x0000)
struct HumanCharacter_OnPlayerDied final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItem;                                   // 0x00A0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_OnPlayerDied) == 0x000008, "Wrong alignment on HumanCharacter_OnPlayerDied");
static_assert(sizeof(HumanCharacter_OnPlayerDied) == 0x0000B0, "Wrong size on HumanCharacter_OnPlayerDied");
static_assert(offsetof(HumanCharacter_OnPlayerDied, DamageAmount) == 0x000000, "Member 'HumanCharacter_OnPlayerDied::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerDied, HitResult) == 0x000004, "Member 'HumanCharacter_OnPlayerDied::HitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerDied, DamageType) == 0x000090, "Member 'HumanCharacter_OnPlayerDied::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerDied, InstigatingCharacter) == 0x000098, "Member 'HumanCharacter_OnPlayerDied::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerDied, InstigatingItem) == 0x0000A0, "Member 'HumanCharacter_OnPlayerDied::InstigatingItem' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerDied, ReturnValue) == 0x0000A8, "Member 'HumanCharacter_OnPlayerDied::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.OnPlayerEnterWater
// 0x0014 (0x0014 - 0x0000)
struct HumanCharacter_OnPlayerEnterWater final
{
public:
	struct FVector                                ImpactLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDepthAtImpact;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterDepthInFront;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnPlayerEnterWater) == 0x000004, "Wrong alignment on HumanCharacter_OnPlayerEnterWater");
static_assert(sizeof(HumanCharacter_OnPlayerEnterWater) == 0x000014, "Wrong size on HumanCharacter_OnPlayerEnterWater");
static_assert(offsetof(HumanCharacter_OnPlayerEnterWater, ImpactLocation) == 0x000000, "Member 'HumanCharacter_OnPlayerEnterWater::ImpactLocation' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerEnterWater, WaterDepthAtImpact) == 0x00000C, "Member 'HumanCharacter_OnPlayerEnterWater::WaterDepthAtImpact' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnPlayerEnterWater, WaterDepthInFront) == 0x000010, "Member 'HumanCharacter_OnPlayerEnterWater::WaterDepthInFront' has a wrong offset!");

// Function Flame.HumanCharacter.OnRep_DisableMovementClount
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_OnRep_DisableMovementClount final
{
public:
	uint8                                         OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnRep_DisableMovementClount) == 0x000001, "Wrong alignment on HumanCharacter_OnRep_DisableMovementClount");
static_assert(sizeof(HumanCharacter_OnRep_DisableMovementClount) == 0x000001, "Wrong size on HumanCharacter_OnRep_DisableMovementClount");
static_assert(offsetof(HumanCharacter_OnRep_DisableMovementClount, OldValue) == 0x000000, "Member 'HumanCharacter_OnRep_DisableMovementClount::OldValue' has a wrong offset!");

// Function Flame.HumanCharacter.OnRep_PostChangeAttachedCharacters
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_OnRep_PostChangeAttachedCharacters final
{
public:
	TArray<class AHumanCharacter*>                OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnRep_PostChangeAttachedCharacters) == 0x000008, "Wrong alignment on HumanCharacter_OnRep_PostChangeAttachedCharacters");
static_assert(sizeof(HumanCharacter_OnRep_PostChangeAttachedCharacters) == 0x000010, "Wrong size on HumanCharacter_OnRep_PostChangeAttachedCharacters");
static_assert(offsetof(HumanCharacter_OnRep_PostChangeAttachedCharacters, OldArray) == 0x000000, "Member 'HumanCharacter_OnRep_PostChangeAttachedCharacters::OldArray' has a wrong offset!");

// Function Flame.HumanCharacter.OnRep_WaterOverlapped
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_OnRep_WaterOverlapped final
{
public:
	class UWaterComponent*                        OldValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnRep_WaterOverlapped) == 0x000008, "Wrong alignment on HumanCharacter_OnRep_WaterOverlapped");
static_assert(sizeof(HumanCharacter_OnRep_WaterOverlapped) == 0x000008, "Wrong size on HumanCharacter_OnRep_WaterOverlapped");
static_assert(offsetof(HumanCharacter_OnRep_WaterOverlapped, OldValue) == 0x000000, "Member 'HumanCharacter_OnRep_WaterOverlapped::OldValue' has a wrong offset!");

// Function Flame.HumanCharacter.OnShowHitMarkerOfColor
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_OnShowHitMarkerOfColor final
{
public:
	float                                         CrosshairScale;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnShowHitMarkerOfColor) == 0x000004, "Wrong alignment on HumanCharacter_OnShowHitMarkerOfColor");
static_assert(sizeof(HumanCharacter_OnShowHitMarkerOfColor) == 0x000008, "Wrong size on HumanCharacter_OnShowHitMarkerOfColor");
static_assert(offsetof(HumanCharacter_OnShowHitMarkerOfColor, CrosshairScale) == 0x000000, "Member 'HumanCharacter_OnShowHitMarkerOfColor::CrosshairScale' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnShowHitMarkerOfColor, Color) == 0x000004, "Member 'HumanCharacter_OnShowHitMarkerOfColor::Color' has a wrong offset!");

// Function Flame.HumanCharacter.OnTakeDamage
// 0x0068 (0x0068 - 0x0000)
struct HumanCharacter_OnTakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  InstigatingActor;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItemClass;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitOptimised;                                      // 0x0018(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              AffectedItems;                                     // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnTakeDamage) == 0x000008, "Wrong alignment on HumanCharacter_OnTakeDamage");
static_assert(sizeof(HumanCharacter_OnTakeDamage) == 0x000068, "Wrong size on HumanCharacter_OnTakeDamage");
static_assert(offsetof(HumanCharacter_OnTakeDamage, DamageAmount) == 0x000000, "Member 'HumanCharacter_OnTakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeDamage, DamageType) == 0x000004, "Member 'HumanCharacter_OnTakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeDamage, InstigatingActor) == 0x000008, "Member 'HumanCharacter_OnTakeDamage::InstigatingActor' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeDamage, InstigatingItemClass) == 0x000010, "Member 'HumanCharacter_OnTakeDamage::InstigatingItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeDamage, HitOptimised) == 0x000018, "Member 'HumanCharacter_OnTakeDamage::HitOptimised' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeDamage, AffectedItems) == 0x000058, "Member 'HumanCharacter_OnTakeDamage::AffectedItems' has a wrong offset!");

// Function Flame.HumanCharacter.OnTakeMeleeDamageOnClient
// 0x0048 (0x0048 - 0x0000)
struct HumanCharacter_OnTakeMeleeDamageOnClient final
{
public:
	const class AHumanCharacter*                  PlayerInstigator;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 InstigatingItemCategory;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResultSimplified                   HitOptimised;                                      // 0x000C(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_OnTakeMeleeDamageOnClient) == 0x000008, "Wrong alignment on HumanCharacter_OnTakeMeleeDamageOnClient");
static_assert(sizeof(HumanCharacter_OnTakeMeleeDamageOnClient) == 0x000048, "Wrong size on HumanCharacter_OnTakeMeleeDamageOnClient");
static_assert(offsetof(HumanCharacter_OnTakeMeleeDamageOnClient, PlayerInstigator) == 0x000000, "Member 'HumanCharacter_OnTakeMeleeDamageOnClient::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeMeleeDamageOnClient, InstigatingItemCategory) == 0x000008, "Member 'HumanCharacter_OnTakeMeleeDamageOnClient::InstigatingItemCategory' has a wrong offset!");
static_assert(offsetof(HumanCharacter_OnTakeMeleeDamageOnClient, HitOptimised) == 0x00000C, "Member 'HumanCharacter_OnTakeMeleeDamageOnClient::HitOptimised' has a wrong offset!");

// Function Flame.HumanCharacter.PlayGesture
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_PlayGesture final
{
public:
	class UAnimMontage*                           GestureToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_PlayGesture) == 0x000008, "Wrong alignment on HumanCharacter_PlayGesture");
static_assert(sizeof(HumanCharacter_PlayGesture) == 0x000008, "Wrong size on HumanCharacter_PlayGesture");
static_assert(offsetof(HumanCharacter_PlayGesture, GestureToPlay) == 0x000000, "Member 'HumanCharacter_PlayGesture::GestureToPlay' has a wrong offset!");

// Function Flame.HumanCharacter.PlayStaggerSound
// 0x0002 (0x0002 - 0x0000)
struct HumanCharacter_PlayStaggerSound final
{
public:
	bool                                          bIsInstigator;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVictim;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_PlayStaggerSound) == 0x000001, "Wrong alignment on HumanCharacter_PlayStaggerSound");
static_assert(sizeof(HumanCharacter_PlayStaggerSound) == 0x000002, "Wrong size on HumanCharacter_PlayStaggerSound");
static_assert(offsetof(HumanCharacter_PlayStaggerSound, bIsInstigator) == 0x000000, "Member 'HumanCharacter_PlayStaggerSound::bIsInstigator' has a wrong offset!");
static_assert(offsetof(HumanCharacter_PlayStaggerSound, bIsVictim) == 0x000001, "Member 'HumanCharacter_PlayStaggerSound::bIsVictim' has a wrong offset!");

// Function Flame.HumanCharacter.ProcessExplosion
// 0x0028 (0x0028 - 0x0000)
struct HumanCharacter_ProcessExplosion final
{
public:
	class UExplosionComponent*                    ExplosionComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExplosionEffect                       Explosion;                                         // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ProcessExplosion) == 0x000008, "Wrong alignment on HumanCharacter_ProcessExplosion");
static_assert(sizeof(HumanCharacter_ProcessExplosion) == 0x000028, "Wrong size on HumanCharacter_ProcessExplosion");
static_assert(offsetof(HumanCharacter_ProcessExplosion, ExplosionComponent) == 0x000000, "Member 'HumanCharacter_ProcessExplosion::ExplosionComponent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ProcessExplosion, Explosion) == 0x000008, "Member 'HumanCharacter_ProcessExplosion::Explosion' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ProcessExplosion, DamageType) == 0x000020, "Member 'HumanCharacter_ProcessExplosion::DamageType' has a wrong offset!");

// Function Flame.HumanCharacter.Respawn
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_Respawn final
{
public:
	float                                         RemainingLifeTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_Respawn) == 0x000004, "Wrong alignment on HumanCharacter_Respawn");
static_assert(sizeof(HumanCharacter_Respawn) == 0x000004, "Wrong size on HumanCharacter_Respawn");
static_assert(offsetof(HumanCharacter_Respawn, RemainingLifeTime) == 0x000000, "Member 'HumanCharacter_Respawn::RemainingLifeTime' has a wrong offset!");

// Function Flame.HumanCharacter.SelectWeapon
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SelectWeapon final
{
public:
	EWeaponSlotType                               Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SelectWeapon) == 0x000001, "Wrong alignment on HumanCharacter_SelectWeapon");
static_assert(sizeof(HumanCharacter_SelectWeapon) == 0x000001, "Wrong size on HumanCharacter_SelectWeapon");
static_assert(offsetof(HumanCharacter_SelectWeapon, Slot) == 0x000000, "Member 'HumanCharacter_SelectWeapon::Slot' has a wrong offset!");

// Function Flame.HumanCharacter.SendMovementDebugDataToServer
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_SendMovementDebugDataToServer final
{
public:
	float                                         CurrentSpeed;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SendMovementDebugDataToServer) == 0x000004, "Wrong alignment on HumanCharacter_SendMovementDebugDataToServer");
static_assert(sizeof(HumanCharacter_SendMovementDebugDataToServer) == 0x000004, "Wrong size on HumanCharacter_SendMovementDebugDataToServer");
static_assert(offsetof(HumanCharacter_SendMovementDebugDataToServer, CurrentSpeed) == 0x000000, "Member 'HumanCharacter_SendMovementDebugDataToServer::CurrentSpeed' has a wrong offset!");

// Function Flame.HumanCharacter.ServerPlayGesture
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_ServerPlayGesture final
{
public:
	class UAnimMontage*                           GestureToPlay;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerPlayGesture) == 0x000008, "Wrong alignment on HumanCharacter_ServerPlayGesture");
static_assert(sizeof(HumanCharacter_ServerPlayGesture) == 0x000008, "Wrong size on HumanCharacter_ServerPlayGesture");
static_assert(offsetof(HumanCharacter_ServerPlayGesture, GestureToPlay) == 0x000000, "Member 'HumanCharacter_ServerPlayGesture::GestureToPlay' has a wrong offset!");

// Function Flame.HumanCharacter.ServerRequestLadderAttach
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_ServerRequestLadderAttach final
{
public:
	class AWorldLadder*                           Ladder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerRequestLadderAttach) == 0x000008, "Wrong alignment on HumanCharacter_ServerRequestLadderAttach");
static_assert(sizeof(HumanCharacter_ServerRequestLadderAttach) == 0x000008, "Wrong size on HumanCharacter_ServerRequestLadderAttach");
static_assert(offsetof(HumanCharacter_ServerRequestLadderAttach, Ladder) == 0x000000, "Member 'HumanCharacter_ServerRequestLadderAttach::Ladder' has a wrong offset!");

// Function Flame.HumanCharacter.ServerSetAimingDebug
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ServerSetAimingDebug final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerSetAimingDebug) == 0x000001, "Wrong alignment on HumanCharacter_ServerSetAimingDebug");
static_assert(sizeof(HumanCharacter_ServerSetAimingDebug) == 0x000001, "Wrong size on HumanCharacter_ServerSetAimingDebug");
static_assert(offsetof(HumanCharacter_ServerSetAimingDebug, bEnabled) == 0x000000, "Member 'HumanCharacter_ServerSetAimingDebug::bEnabled' has a wrong offset!");

// Function Flame.HumanCharacter.ServerSetAllowReload
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ServerSetAllowReload final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerSetAllowReload) == 0x000001, "Wrong alignment on HumanCharacter_ServerSetAllowReload");
static_assert(sizeof(HumanCharacter_ServerSetAllowReload) == 0x000001, "Wrong size on HumanCharacter_ServerSetAllowReload");
static_assert(offsetof(HumanCharacter_ServerSetAllowReload, bValue) == 0x000000, "Member 'HumanCharacter_ServerSetAllowReload::bValue' has a wrong offset!");

// Function Flame.HumanCharacter.ServerSetArchetype
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_ServerSetArchetype final
{
public:
	class FString                                 InArchetypeName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerSetArchetype) == 0x000008, "Wrong alignment on HumanCharacter_ServerSetArchetype");
static_assert(sizeof(HumanCharacter_ServerSetArchetype) == 0x000010, "Wrong size on HumanCharacter_ServerSetArchetype");
static_assert(offsetof(HumanCharacter_ServerSetArchetype, InArchetypeName) == 0x000000, "Member 'HumanCharacter_ServerSetArchetype::InArchetypeName' has a wrong offset!");

// Function Flame.HumanCharacter.ServerSetInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ServerSetInfiniteAmmo final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerSetInfiniteAmmo) == 0x000001, "Wrong alignment on HumanCharacter_ServerSetInfiniteAmmo");
static_assert(sizeof(HumanCharacter_ServerSetInfiniteAmmo) == 0x000001, "Wrong size on HumanCharacter_ServerSetInfiniteAmmo");
static_assert(offsetof(HumanCharacter_ServerSetInfiniteAmmo, bValue) == 0x000000, "Member 'HumanCharacter_ServerSetInfiniteAmmo::bValue' has a wrong offset!");

// Function Flame.HumanCharacter.ServerSetInfiniteReload
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ServerSetInfiniteReload final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerSetInfiniteReload) == 0x000001, "Wrong alignment on HumanCharacter_ServerSetInfiniteReload");
static_assert(sizeof(HumanCharacter_ServerSetInfiniteReload) == 0x000001, "Wrong size on HumanCharacter_ServerSetInfiniteReload");
static_assert(offsetof(HumanCharacter_ServerSetInfiniteReload, bValue) == 0x000000, "Member 'HumanCharacter_ServerSetInfiniteReload::bValue' has a wrong offset!");

// Function Flame.HumanCharacter.ServerUpdateWeaponAmmo
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_ServerUpdateWeaponAmmo final
{
public:
	struct FAmmoSyncMessage                       Message;                                           // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ServerUpdateWeaponAmmo) == 0x000008, "Wrong alignment on HumanCharacter_ServerUpdateWeaponAmmo");
static_assert(sizeof(HumanCharacter_ServerUpdateWeaponAmmo) == 0x000018, "Wrong size on HumanCharacter_ServerUpdateWeaponAmmo");
static_assert(offsetof(HumanCharacter_ServerUpdateWeaponAmmo, Message) == 0x000000, "Member 'HumanCharacter_ServerUpdateWeaponAmmo::Message' has a wrong offset!");

// Function Flame.HumanCharacter.SetADS
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetADS final
{
public:
	bool                                          IsADS;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetADS) == 0x000001, "Wrong alignment on HumanCharacter_SetADS");
static_assert(sizeof(HumanCharacter_SetADS) == 0x000001, "Wrong size on HumanCharacter_SetADS");
static_assert(offsetof(HumanCharacter_SetADS, IsADS) == 0x000000, "Member 'HumanCharacter_SetADS::IsADS' has a wrong offset!");

// Function Flame.HumanCharacter.SetADSDesiredHold
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetADSDesiredHold final
{
public:
	bool                                          IsADS;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetADSDesiredHold) == 0x000001, "Wrong alignment on HumanCharacter_SetADSDesiredHold");
static_assert(sizeof(HumanCharacter_SetADSDesiredHold) == 0x000001, "Wrong size on HumanCharacter_SetADSDesiredHold");
static_assert(offsetof(HumanCharacter_SetADSDesiredHold, IsADS) == 0x000000, "Member 'HumanCharacter_SetADSDesiredHold::IsADS' has a wrong offset!");

// Function Flame.HumanCharacter.SetADSDesiredTrigger
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetADSDesiredTrigger final
{
public:
	bool                                          IsADS;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetADSDesiredTrigger) == 0x000001, "Wrong alignment on HumanCharacter_SetADSDesiredTrigger");
static_assert(sizeof(HumanCharacter_SetADSDesiredTrigger) == 0x000001, "Wrong size on HumanCharacter_SetADSDesiredTrigger");
static_assert(offsetof(HumanCharacter_SetADSDesiredTrigger, IsADS) == 0x000000, "Member 'HumanCharacter_SetADSDesiredTrigger::IsADS' has a wrong offset!");

// Function Flame.HumanCharacter.SetADSThrowable
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetADSThrowable final
{
public:
	bool                                          IsADS;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetADSThrowable) == 0x000001, "Wrong alignment on HumanCharacter_SetADSThrowable");
static_assert(sizeof(HumanCharacter_SetADSThrowable) == 0x000001, "Wrong size on HumanCharacter_SetADSThrowable");
static_assert(offsetof(HumanCharacter_SetADSThrowable, IsADS) == 0x000000, "Member 'HumanCharacter_SetADSThrowable::IsADS' has a wrong offset!");

// Function Flame.HumanCharacter.SetAimingDebug
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetAimingDebug final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetAimingDebug) == 0x000001, "Wrong alignment on HumanCharacter_SetAimingDebug");
static_assert(sizeof(HumanCharacter_SetAimingDebug) == 0x000001, "Wrong size on HumanCharacter_SetAimingDebug");
static_assert(offsetof(HumanCharacter_SetAimingDebug, bEnabled) == 0x000000, "Member 'HumanCharacter_SetAimingDebug::bEnabled' has a wrong offset!");

// Function Flame.HumanCharacter.SetAllowFire
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetAllowFire final
{
public:
	bool                                          bNewAllowFire;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetAllowFire) == 0x000001, "Wrong alignment on HumanCharacter_SetAllowFire");
static_assert(sizeof(HumanCharacter_SetAllowFire) == 0x000001, "Wrong size on HumanCharacter_SetAllowFire");
static_assert(offsetof(HumanCharacter_SetAllowFire, bNewAllowFire) == 0x000000, "Member 'HumanCharacter_SetAllowFire::bNewAllowFire' has a wrong offset!");

// Function Flame.HumanCharacter.SetCharacterVisible
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetCharacterVisible final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetCharacterVisible) == 0x000001, "Wrong alignment on HumanCharacter_SetCharacterVisible");
static_assert(sizeof(HumanCharacter_SetCharacterVisible) == 0x000001, "Wrong size on HumanCharacter_SetCharacterVisible");
static_assert(offsetof(HumanCharacter_SetCharacterVisible, bVisible) == 0x000000, "Member 'HumanCharacter_SetCharacterVisible::bVisible' has a wrong offset!");

// Function Flame.HumanCharacter.SetSprint
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetSprint final
{
public:
	bool                                          Sprint;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetSprint) == 0x000001, "Wrong alignment on HumanCharacter_SetSprint");
static_assert(sizeof(HumanCharacter_SetSprint) == 0x000001, "Wrong size on HumanCharacter_SetSprint");
static_assert(offsetof(HumanCharacter_SetSprint, Sprint) == 0x000000, "Member 'HumanCharacter_SetSprint::Sprint' has a wrong offset!");

// Function Flame.HumanCharacter.SetWantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetWantsToSprint final
{
public:
	bool                                          Sprint;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetWantsToSprint) == 0x000001, "Wrong alignment on HumanCharacter_SetWantsToSprint");
static_assert(sizeof(HumanCharacter_SetWantsToSprint) == 0x000001, "Wrong size on HumanCharacter_SetWantsToSprint");
static_assert(offsetof(HumanCharacter_SetWantsToSprint, Sprint) == 0x000000, "Member 'HumanCharacter_SetWantsToSprint::Sprint' has a wrong offset!");

// Function Flame.HumanCharacter.SetWantsToSprintHotFix
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetWantsToSprintHotFix final
{
public:
	bool                                          Sprint;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetWantsToSprintHotFix) == 0x000001, "Wrong alignment on HumanCharacter_SetWantsToSprintHotFix");
static_assert(sizeof(HumanCharacter_SetWantsToSprintHotFix) == 0x000001, "Wrong size on HumanCharacter_SetWantsToSprintHotFix");
static_assert(offsetof(HumanCharacter_SetWantsToSprintHotFix, Sprint) == 0x000000, "Member 'HumanCharacter_SetWantsToSprintHotFix::Sprint' has a wrong offset!");

// Function Flame.HumanCharacter.SetWeaponRaised
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_SetWeaponRaised final
{
public:
	bool                                          IsWeaponRaised;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetWeaponRaised) == 0x000001, "Wrong alignment on HumanCharacter_SetWeaponRaised");
static_assert(sizeof(HumanCharacter_SetWeaponRaised) == 0x000001, "Wrong size on HumanCharacter_SetWeaponRaised");
static_assert(offsetof(HumanCharacter_SetWeaponRaised, IsWeaponRaised) == 0x000000, "Member 'HumanCharacter_SetWeaponRaised::IsWeaponRaised' has a wrong offset!");

// Function Flame.HumanCharacter.SetWeightModifier
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_SetWeightModifier final
{
public:
	float                                         NewWeightModifier;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_SetWeightModifier) == 0x000004, "Wrong alignment on HumanCharacter_SetWeightModifier");
static_assert(sizeof(HumanCharacter_SetWeightModifier) == 0x000004, "Wrong size on HumanCharacter_SetWeightModifier");
static_assert(offsetof(HumanCharacter_SetWeightModifier, NewWeightModifier) == 0x000000, "Member 'HumanCharacter_SetWeightModifier::NewWeightModifier' has a wrong offset!");

// Function Flame.HumanCharacter.ShouldTakeDamageBP
// 0x0020 (0x0020 - 0x0000)
struct HumanCharacter_ShouldTakeDamageBP final
{
public:
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           DamageCauser;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_ShouldTakeDamageBP) == 0x000008, "Wrong alignment on HumanCharacter_ShouldTakeDamageBP");
static_assert(sizeof(HumanCharacter_ShouldTakeDamageBP) == 0x000020, "Wrong size on HumanCharacter_ShouldTakeDamageBP");
static_assert(offsetof(HumanCharacter_ShouldTakeDamageBP, InstigatingCharacter) == 0x000000, "Member 'HumanCharacter_ShouldTakeDamageBP::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShouldTakeDamageBP, DamageCauser) == 0x000008, "Member 'HumanCharacter_ShouldTakeDamageBP::DamageCauser' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShouldTakeDamageBP, ItemClass) == 0x000010, "Member 'HumanCharacter_ShouldTakeDamageBP::ItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShouldTakeDamageBP, DamageType) == 0x000018, "Member 'HumanCharacter_ShouldTakeDamageBP::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShouldTakeDamageBP, ReturnValue) == 0x000019, "Member 'HumanCharacter_ShouldTakeDamageBP::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.ShowBulletIndicatorNative
// 0x0058 (0x0058 - 0x0000)
struct HumanCharacter_ShowBulletIndicatorNative final
{
public:
	bool                                          bIsPlayerHit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  PlayerInstigator;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitOptimised;                                      // 0x001C(0x003C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ShowBulletIndicatorNative) == 0x000008, "Wrong alignment on HumanCharacter_ShowBulletIndicatorNative");
static_assert(sizeof(HumanCharacter_ShowBulletIndicatorNative) == 0x000058, "Wrong size on HumanCharacter_ShowBulletIndicatorNative");
static_assert(offsetof(HumanCharacter_ShowBulletIndicatorNative, bIsPlayerHit) == 0x000000, "Member 'HumanCharacter_ShowBulletIndicatorNative::bIsPlayerHit' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShowBulletIndicatorNative, DamageType) == 0x000001, "Member 'HumanCharacter_ShowBulletIndicatorNative::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShowBulletIndicatorNative, PlayerInstigator) == 0x000008, "Member 'HumanCharacter_ShowBulletIndicatorNative::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShowBulletIndicatorNative, Origin) == 0x000010, "Member 'HumanCharacter_ShowBulletIndicatorNative::Origin' has a wrong offset!");
static_assert(offsetof(HumanCharacter_ShowBulletIndicatorNative, HitOptimised) == 0x00001C, "Member 'HumanCharacter_ShowBulletIndicatorNative::HitOptimised' has a wrong offset!");

// Function Flame.HumanCharacter.TakeDamage
// 0x0038 (0x0038 - 0x0000)
struct HumanCharacter_TakeDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           DamageCauser;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_TakeDamage) == 0x000008, "Wrong alignment on HumanCharacter_TakeDamage");
static_assert(sizeof(HumanCharacter_TakeDamage) == 0x000038, "Wrong size on HumanCharacter_TakeDamage");
static_assert(offsetof(HumanCharacter_TakeDamage, DamageAmount) == 0x000000, "Member 'HumanCharacter_TakeDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, DamageEvent) == 0x000008, "Member 'HumanCharacter_TakeDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, DamageCauser) == 0x000018, "Member 'HumanCharacter_TakeDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, InstigatingCharacter) == 0x000020, "Member 'HumanCharacter_TakeDamage::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, ItemClass) == 0x000028, "Member 'HumanCharacter_TakeDamage::ItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, DamageType) == 0x000030, "Member 'HumanCharacter_TakeDamage::DamageType' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamage, ReturnValue) == 0x000034, "Member 'HumanCharacter_TakeDamage::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.TakeDamageOnClosestBone
// 0x0028 (0x0028 - 0x0000)
struct HumanCharacter_TakeDamageOnClosestBone final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           DamageCauser;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_TakeDamageOnClosestBone) == 0x000008, "Wrong alignment on HumanCharacter_TakeDamageOnClosestBone");
static_assert(sizeof(HumanCharacter_TakeDamageOnClosestBone) == 0x000028, "Wrong size on HumanCharacter_TakeDamageOnClosestBone");
static_assert(offsetof(HumanCharacter_TakeDamageOnClosestBone, DamageAmount) == 0x000000, "Member 'HumanCharacter_TakeDamageOnClosestBone::DamageAmount' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamageOnClosestBone, DamageCauser) == 0x000008, "Member 'HumanCharacter_TakeDamageOnClosestBone::DamageCauser' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamageOnClosestBone, InstigatingCharacter) == 0x000010, "Member 'HumanCharacter_TakeDamageOnClosestBone::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamageOnClosestBone, ItemClass) == 0x000018, "Member 'HumanCharacter_TakeDamageOnClosestBone::ItemClass' has a wrong offset!");
static_assert(offsetof(HumanCharacter_TakeDamageOnClosestBone, DamageType) == 0x000020, "Member 'HumanCharacter_TakeDamageOnClosestBone::DamageType' has a wrong offset!");

// Function Flame.HumanCharacter.UpdateAdrenalineDeprivationEffect
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_UpdateAdrenalineDeprivationEffect final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_UpdateAdrenalineDeprivationEffect) == 0x000004, "Wrong alignment on HumanCharacter_UpdateAdrenalineDeprivationEffect");
static_assert(sizeof(HumanCharacter_UpdateAdrenalineDeprivationEffect) == 0x000008, "Wrong size on HumanCharacter_UpdateAdrenalineDeprivationEffect");
static_assert(offsetof(HumanCharacter_UpdateAdrenalineDeprivationEffect, Strength) == 0x000000, "Member 'HumanCharacter_UpdateAdrenalineDeprivationEffect::Strength' has a wrong offset!");
static_assert(offsetof(HumanCharacter_UpdateAdrenalineDeprivationEffect, RemainingTime) == 0x000004, "Member 'HumanCharacter_UpdateAdrenalineDeprivationEffect::RemainingTime' has a wrong offset!");

// Function Flame.HumanCharacter.UpdateStaggerEffect
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_UpdateStaggerEffect final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainingTime;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_UpdateStaggerEffect) == 0x000004, "Wrong alignment on HumanCharacter_UpdateStaggerEffect");
static_assert(sizeof(HumanCharacter_UpdateStaggerEffect) == 0x000008, "Wrong size on HumanCharacter_UpdateStaggerEffect");
static_assert(offsetof(HumanCharacter_UpdateStaggerEffect, Strength) == 0x000000, "Member 'HumanCharacter_UpdateStaggerEffect::Strength' has a wrong offset!");
static_assert(offsetof(HumanCharacter_UpdateStaggerEffect, RemainingTime) == 0x000004, "Member 'HumanCharacter_UpdateStaggerEffect::RemainingTime' has a wrong offset!");

// Function Flame.HumanCharacter.VerifyHitOnServer
// 0x00C0 (0x00C0 - 0x0000)
struct HumanCharacter_VerifyHitOnServer final
{
public:
	class AHumanCharacter*                        Shooter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDirection;                                    // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletTravelTime;                                  // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ClientHitResult;                                   // 0x0030(0x008C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ClientDamage;                                      // 0x00BC(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_VerifyHitOnServer) == 0x000008, "Wrong alignment on HumanCharacter_VerifyHitOnServer");
static_assert(sizeof(HumanCharacter_VerifyHitOnServer) == 0x0000C0, "Wrong size on HumanCharacter_VerifyHitOnServer");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, Shooter) == 0x000000, "Member 'HumanCharacter_VerifyHitOnServer::Shooter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, Target) == 0x000008, "Member 'HumanCharacter_VerifyHitOnServer::Target' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, ShootLocation) == 0x000010, "Member 'HumanCharacter_VerifyHitOnServer::ShootLocation' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, ShootDirection) == 0x00001C, "Member 'HumanCharacter_VerifyHitOnServer::ShootDirection' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, BulletTravelTime) == 0x000028, "Member 'HumanCharacter_VerifyHitOnServer::BulletTravelTime' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, Timestamp) == 0x00002C, "Member 'HumanCharacter_VerifyHitOnServer::Timestamp' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, ClientHitResult) == 0x000030, "Member 'HumanCharacter_VerifyHitOnServer::ClientHitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServer, ClientDamage) == 0x0000BC, "Member 'HumanCharacter_VerifyHitOnServer::ClientDamage' has a wrong offset!");

// Function Flame.HumanCharacter.VerifyHitOnServerDebug
// 0x00E0 (0x00E0 - 0x0000)
struct HumanCharacter_VerifyHitOnServerDebug final
{
public:
	class AHumanCharacter*                        Shooter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShootDirection;                                    // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletTravelTime;                                  // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Timestamp;                                         // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             ClientHitResult;                                   // 0x0030(0x008C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ClientDamage;                                      // 0x00BC(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          ClientHitBodyCollidersRotations;                   // 0x00C0(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FCapsuleCollider>               ClientHitBodyCollidersCapsules;                    // 0x00D0(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_VerifyHitOnServerDebug) == 0x000008, "Wrong alignment on HumanCharacter_VerifyHitOnServerDebug");
static_assert(sizeof(HumanCharacter_VerifyHitOnServerDebug) == 0x0000E0, "Wrong size on HumanCharacter_VerifyHitOnServerDebug");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, Shooter) == 0x000000, "Member 'HumanCharacter_VerifyHitOnServerDebug::Shooter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, Target) == 0x000008, "Member 'HumanCharacter_VerifyHitOnServerDebug::Target' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ShootLocation) == 0x000010, "Member 'HumanCharacter_VerifyHitOnServerDebug::ShootLocation' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ShootDirection) == 0x00001C, "Member 'HumanCharacter_VerifyHitOnServerDebug::ShootDirection' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, BulletTravelTime) == 0x000028, "Member 'HumanCharacter_VerifyHitOnServerDebug::BulletTravelTime' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, Timestamp) == 0x00002C, "Member 'HumanCharacter_VerifyHitOnServerDebug::Timestamp' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ClientHitResult) == 0x000030, "Member 'HumanCharacter_VerifyHitOnServerDebug::ClientHitResult' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ClientDamage) == 0x0000BC, "Member 'HumanCharacter_VerifyHitOnServerDebug::ClientDamage' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ClientHitBodyCollidersRotations) == 0x0000C0, "Member 'HumanCharacter_VerifyHitOnServerDebug::ClientHitBodyCollidersRotations' has a wrong offset!");
static_assert(offsetof(HumanCharacter_VerifyHitOnServerDebug, ClientHitBodyCollidersCapsules) == 0x0000D0, "Member 'HumanCharacter_VerifyHitOnServerDebug::ClientHitBodyCollidersCapsules' has a wrong offset!");

// Function Flame.HumanCharacter.AnimIsRunning
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_AnimIsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_AnimIsRunning) == 0x000001, "Wrong alignment on HumanCharacter_AnimIsRunning");
static_assert(sizeof(HumanCharacter_AnimIsRunning) == 0x000001, "Wrong size on HumanCharacter_AnimIsRunning");
static_assert(offsetof(HumanCharacter_AnimIsRunning, ReturnValue) == 0x000000, "Member 'HumanCharacter_AnimIsRunning::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.ApplyOwnerSoundAttenuation
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_ApplyOwnerSoundAttenuation final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ApplyOwnerSoundAttenuation) == 0x000008, "Wrong alignment on HumanCharacter_ApplyOwnerSoundAttenuation");
static_assert(sizeof(HumanCharacter_ApplyOwnerSoundAttenuation) == 0x000008, "Wrong size on HumanCharacter_ApplyOwnerSoundAttenuation");
static_assert(offsetof(HumanCharacter_ApplyOwnerSoundAttenuation, AudioComponent) == 0x000000, "Member 'HumanCharacter_ApplyOwnerSoundAttenuation::AudioComponent' has a wrong offset!");

// Function Flame.HumanCharacter.AreCharactersInSameTeam
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_AreCharactersInSameTeam final
{
public:
	class AHumanCharacter*                        OtherCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AreInSameTeam;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AreSameCharacter;                                  // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacter_AreCharactersInSameTeam) == 0x000008, "Wrong alignment on HumanCharacter_AreCharactersInSameTeam");
static_assert(sizeof(HumanCharacter_AreCharactersInSameTeam) == 0x000010, "Wrong size on HumanCharacter_AreCharactersInSameTeam");
static_assert(offsetof(HumanCharacter_AreCharactersInSameTeam, OtherCharacter) == 0x000000, "Member 'HumanCharacter_AreCharactersInSameTeam::OtherCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacter_AreCharactersInSameTeam, AreInSameTeam) == 0x000008, "Member 'HumanCharacter_AreCharactersInSameTeam::AreInSameTeam' has a wrong offset!");
static_assert(offsetof(HumanCharacter_AreCharactersInSameTeam, AreSameCharacter) == 0x000009, "Member 'HumanCharacter_AreCharactersInSameTeam::AreSameCharacter' has a wrong offset!");

// Function Flame.HumanCharacter.CalculateBodyExposureToPoint
// 0x0028 (0x0028 - 0x0000)
struct HumanCharacter_CalculateBodyExposureToPoint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutFaceExposure;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutBodyExposure;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThickness;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IgnoreActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CalculateBodyExposureToPoint) == 0x000008, "Wrong alignment on HumanCharacter_CalculateBodyExposureToPoint");
static_assert(sizeof(HumanCharacter_CalculateBodyExposureToPoint) == 0x000028, "Wrong size on HumanCharacter_CalculateBodyExposureToPoint");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, Location) == 0x000000, "Member 'HumanCharacter_CalculateBodyExposureToPoint::Location' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, OutFaceExposure) == 0x00000C, "Member 'HumanCharacter_CalculateBodyExposureToPoint::OutFaceExposure' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, OutBodyExposure) == 0x000010, "Member 'HumanCharacter_CalculateBodyExposureToPoint::OutBodyExposure' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, Precision) == 0x000014, "Member 'HumanCharacter_CalculateBodyExposureToPoint::Precision' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, MaxThickness) == 0x000018, "Member 'HumanCharacter_CalculateBodyExposureToPoint::MaxThickness' has a wrong offset!");
static_assert(offsetof(HumanCharacter_CalculateBodyExposureToPoint, IgnoreActor) == 0x000020, "Member 'HumanCharacter_CalculateBodyExposureToPoint::IgnoreActor' has a wrong offset!");

// Function Flame.HumanCharacter.CanAim
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanAim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanAim) == 0x000001, "Wrong alignment on HumanCharacter_CanAim");
static_assert(sizeof(HumanCharacter_CanAim) == 0x000001, "Wrong size on HumanCharacter_CanAim");
static_assert(offsetof(HumanCharacter_CanAim, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanAim::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanClimbLadder
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanClimbLadder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanClimbLadder) == 0x000001, "Wrong alignment on HumanCharacter_CanClimbLadder");
static_assert(sizeof(HumanCharacter_CanClimbLadder) == 0x000001, "Wrong size on HumanCharacter_CanClimbLadder");
static_assert(offsetof(HumanCharacter_CanClimbLadder, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanClimbLadder::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanProcessCustomizationChangesToCloud
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanProcessCustomizationChangesToCloud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanProcessCustomizationChangesToCloud) == 0x000001, "Wrong alignment on HumanCharacter_CanProcessCustomizationChangesToCloud");
static_assert(sizeof(HumanCharacter_CanProcessCustomizationChangesToCloud) == 0x000001, "Wrong size on HumanCharacter_CanProcessCustomizationChangesToCloud");
static_assert(offsetof(HumanCharacter_CanProcessCustomizationChangesToCloud, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanProcessCustomizationChangesToCloud::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanShowActionsInHistory
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanShowActionsInHistory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanShowActionsInHistory) == 0x000001, "Wrong alignment on HumanCharacter_CanShowActionsInHistory");
static_assert(sizeof(HumanCharacter_CanShowActionsInHistory) == 0x000001, "Wrong size on HumanCharacter_CanShowActionsInHistory");
static_assert(offsetof(HumanCharacter_CanShowActionsInHistory, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanShowActionsInHistory::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanShowFiringTraces
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanShowFiringTraces final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanShowFiringTraces) == 0x000001, "Wrong alignment on HumanCharacter_CanShowFiringTraces");
static_assert(sizeof(HumanCharacter_CanShowFiringTraces) == 0x000001, "Wrong size on HumanCharacter_CanShowFiringTraces");
static_assert(offsetof(HumanCharacter_CanShowFiringTraces, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanShowFiringTraces::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.CanUseConsumables
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_CanUseConsumables final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_CanUseConsumables) == 0x000001, "Wrong alignment on HumanCharacter_CanUseConsumables");
static_assert(sizeof(HumanCharacter_CanUseConsumables) == 0x000001, "Wrong size on HumanCharacter_CanUseConsumables");
static_assert(offsetof(HumanCharacter_CanUseConsumables, ReturnValue) == 0x000000, "Member 'HumanCharacter_CanUseConsumables::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetAimAtLocation
// 0x000C (0x000C - 0x0000)
struct HumanCharacter_GetAimAtLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetAimAtLocation) == 0x000004, "Wrong alignment on HumanCharacter_GetAimAtLocation");
static_assert(sizeof(HumanCharacter_GetAimAtLocation) == 0x00000C, "Wrong size on HumanCharacter_GetAimAtLocation");
static_assert(offsetof(HumanCharacter_GetAimAtLocation, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetAimAtLocation::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetAimpointWeaponTarget
// 0x000C (0x000C - 0x0000)
struct HumanCharacter_GetAimpointWeaponTarget final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetAimpointWeaponTarget) == 0x000004, "Wrong alignment on HumanCharacter_GetAimpointWeaponTarget");
static_assert(sizeof(HumanCharacter_GetAimpointWeaponTarget) == 0x00000C, "Wrong size on HumanCharacter_GetAimpointWeaponTarget");
static_assert(offsetof(HumanCharacter_GetAimpointWeaponTarget, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetAimpointWeaponTarget::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetAllowReload
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetAllowReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetAllowReload) == 0x000001, "Wrong alignment on HumanCharacter_GetAllowReload");
static_assert(sizeof(HumanCharacter_GetAllowReload) == 0x000001, "Wrong size on HumanCharacter_GetAllowReload");
static_assert(offsetof(HumanCharacter_GetAllowReload, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetAllowReload::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetBreathAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetBreathAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetBreathAudioComponent) == 0x000008, "Wrong alignment on HumanCharacter_GetBreathAudioComponent");
static_assert(sizeof(HumanCharacter_GetBreathAudioComponent) == 0x000008, "Wrong size on HumanCharacter_GetBreathAudioComponent");
static_assert(offsetof(HumanCharacter_GetBreathAudioComponent, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetBreathAudioComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetCharacterWeightSoundProperties
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetCharacterWeightSoundProperties final
{
public:
	float                                         VolumeMultiplier;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetCharacterWeightSoundProperties) == 0x000004, "Wrong alignment on HumanCharacter_GetCharacterWeightSoundProperties");
static_assert(sizeof(HumanCharacter_GetCharacterWeightSoundProperties) == 0x000008, "Wrong size on HumanCharacter_GetCharacterWeightSoundProperties");
static_assert(offsetof(HumanCharacter_GetCharacterWeightSoundProperties, VolumeMultiplier) == 0x000000, "Member 'HumanCharacter_GetCharacterWeightSoundProperties::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetCharacterWeightSoundProperties, PitchMultiplier) == 0x000004, "Member 'HumanCharacter_GetCharacterWeightSoundProperties::PitchMultiplier' has a wrong offset!");

// Function Flame.HumanCharacter.GetFootStepComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetFootStepComponent final
{
public:
	class UFootStepComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetFootStepComponent) == 0x000008, "Wrong alignment on HumanCharacter_GetFootStepComponent");
static_assert(sizeof(HumanCharacter_GetFootStepComponent) == 0x000008, "Wrong size on HumanCharacter_GetFootStepComponent");
static_assert(offsetof(HumanCharacter_GetFootStepComponent, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetFootStepComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetGenderClass
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetGenderClass final
{
public:
	TSubclassOf<class AGender>                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetGenderClass) == 0x000008, "Wrong alignment on HumanCharacter_GetGenderClass");
static_assert(sizeof(HumanCharacter_GetGenderClass) == 0x000008, "Wrong size on HumanCharacter_GetGenderClass");
static_assert(offsetof(HumanCharacter_GetGenderClass, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetGenderClass::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetInfiniteAmmo
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetInfiniteAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetInfiniteAmmo) == 0x000001, "Wrong alignment on HumanCharacter_GetInfiniteAmmo");
static_assert(sizeof(HumanCharacter_GetInfiniteAmmo) == 0x000001, "Wrong size on HumanCharacter_GetInfiniteAmmo");
static_assert(offsetof(HumanCharacter_GetInfiniteAmmo, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetInfiniteAmmo::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetInfiniteReload
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetInfiniteReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetInfiniteReload) == 0x000001, "Wrong alignment on HumanCharacter_GetInfiniteReload");
static_assert(sizeof(HumanCharacter_GetInfiniteReload) == 0x000001, "Wrong size on HumanCharacter_GetInfiniteReload");
static_assert(offsetof(HumanCharacter_GetInfiniteReload, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetInfiniteReload::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetInventoryOperationsComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetInventoryOperationsComponent final
{
public:
	class UInventoryOperationsComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetInventoryOperationsComponent) == 0x000008, "Wrong alignment on HumanCharacter_GetInventoryOperationsComponent");
static_assert(sizeof(HumanCharacter_GetInventoryOperationsComponent) == 0x000008, "Wrong size on HumanCharacter_GetInventoryOperationsComponent");
static_assert(offsetof(HumanCharacter_GetInventoryOperationsComponent, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetInventoryOperationsComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetIsADSThrowable
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetIsADSThrowable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetIsADSThrowable) == 0x000001, "Wrong alignment on HumanCharacter_GetIsADSThrowable");
static_assert(sizeof(HumanCharacter_GetIsADSThrowable) == 0x000001, "Wrong size on HumanCharacter_GetIsADSThrowable");
static_assert(offsetof(HumanCharacter_GetIsADSThrowable, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetIsADSThrowable::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetMovementSoundProperties
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacter_GetMovementSoundProperties final
{
public:
	const class USoundBase*                       Sound;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetMovementSoundProperties) == 0x000008, "Wrong alignment on HumanCharacter_GetMovementSoundProperties");
static_assert(sizeof(HumanCharacter_GetMovementSoundProperties) == 0x000010, "Wrong size on HumanCharacter_GetMovementSoundProperties");
static_assert(offsetof(HumanCharacter_GetMovementSoundProperties, Sound) == 0x000000, "Member 'HumanCharacter_GetMovementSoundProperties::Sound' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetMovementSoundProperties, VolumeMultiplier) == 0x000008, "Member 'HumanCharacter_GetMovementSoundProperties::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetMovementSoundProperties, PitchMultiplier) == 0x00000C, "Member 'HumanCharacter_GetMovementSoundProperties::PitchMultiplier' has a wrong offset!");

// Function Flame.HumanCharacter.GetNetworkRole
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetNetworkRole final
{
public:
	ENetRole                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetNetworkRole) == 0x000001, "Wrong alignment on HumanCharacter_GetNetworkRole");
static_assert(sizeof(HumanCharacter_GetNetworkRole) == 0x000001, "Wrong size on HumanCharacter_GetNetworkRole");
static_assert(offsetof(HumanCharacter_GetNetworkRole, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetNetworkRole::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetPlayerCameraStartAndDirection
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_GetPlayerCameraStartAndDirection final
{
public:
	struct FVector                                OutCameraStart;                                    // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutCameraDirection;                                // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetPlayerCameraStartAndDirection) == 0x000004, "Wrong alignment on HumanCharacter_GetPlayerCameraStartAndDirection");
static_assert(sizeof(HumanCharacter_GetPlayerCameraStartAndDirection) == 0x000018, "Wrong size on HumanCharacter_GetPlayerCameraStartAndDirection");
static_assert(offsetof(HumanCharacter_GetPlayerCameraStartAndDirection, OutCameraStart) == 0x000000, "Member 'HumanCharacter_GetPlayerCameraStartAndDirection::OutCameraStart' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetPlayerCameraStartAndDirection, OutCameraDirection) == 0x00000C, "Member 'HumanCharacter_GetPlayerCameraStartAndDirection::OutCameraDirection' has a wrong offset!");

// Function Flame.HumanCharacter.GetProneForwardVector
// 0x000C (0x000C - 0x0000)
struct HumanCharacter_GetProneForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetProneForwardVector) == 0x000004, "Wrong alignment on HumanCharacter_GetProneForwardVector");
static_assert(sizeof(HumanCharacter_GetProneForwardVector) == 0x00000C, "Wrong size on HumanCharacter_GetProneForwardVector");
static_assert(offsetof(HumanCharacter_GetProneForwardVector, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetProneForwardVector::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetRemoteViewPitch
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_GetRemoteViewPitch final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetRemoteViewPitch) == 0x000004, "Wrong alignment on HumanCharacter_GetRemoteViewPitch");
static_assert(sizeof(HumanCharacter_GetRemoteViewPitch) == 0x000004, "Wrong size on HumanCharacter_GetRemoteViewPitch");
static_assert(offsetof(HumanCharacter_GetRemoteViewPitch, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetRemoteViewPitch::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetRemoteViewPitchSmooth
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_GetRemoteViewPitchSmooth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetRemoteViewPitchSmooth) == 0x000004, "Wrong alignment on HumanCharacter_GetRemoteViewPitchSmooth");
static_assert(sizeof(HumanCharacter_GetRemoteViewPitchSmooth) == 0x000004, "Wrong size on HumanCharacter_GetRemoteViewPitchSmooth");
static_assert(offsetof(HumanCharacter_GetRemoteViewPitchSmooth, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetRemoteViewPitchSmooth::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetRoleText
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_GetRoleText final
{
public:
	ENetRole                                      NetRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetRoleText) == 0x000008, "Wrong alignment on HumanCharacter_GetRoleText");
static_assert(sizeof(HumanCharacter_GetRoleText) == 0x000018, "Wrong size on HumanCharacter_GetRoleText");
static_assert(offsetof(HumanCharacter_GetRoleText, NetRole) == 0x000000, "Member 'HumanCharacter_GetRoleText::NetRole' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetRoleText, ReturnValue) == 0x000008, "Member 'HumanCharacter_GetRoleText::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetStaminaComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetStaminaComponent final
{
public:
	class UStaminaComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetStaminaComponent) == 0x000008, "Wrong alignment on HumanCharacter_GetStaminaComponent");
static_assert(sizeof(HumanCharacter_GetStaminaComponent) == 0x000008, "Wrong size on HumanCharacter_GetStaminaComponent");
static_assert(offsetof(HumanCharacter_GetStaminaComponent, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetStaminaComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetStance
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_GetStance final
{
public:
	EStance                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetStance) == 0x000001, "Wrong alignment on HumanCharacter_GetStance");
static_assert(sizeof(HumanCharacter_GetStance) == 0x000001, "Wrong size on HumanCharacter_GetStance");
static_assert(offsetof(HumanCharacter_GetStance, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetStance::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetVegetationComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanCharacter_GetVegetationComponent final
{
public:
	class UVegetationComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetVegetationComponent) == 0x000008, "Wrong alignment on HumanCharacter_GetVegetationComponent");
static_assert(sizeof(HumanCharacter_GetVegetationComponent) == 0x000008, "Wrong size on HumanCharacter_GetVegetationComponent");
static_assert(offsetof(HumanCharacter_GetVegetationComponent, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetVegetationComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetWaterDetails
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacter_GetWaterDetails final
{
public:
	bool                                          bIsInWater;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Depth;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Flow;                                              // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDepth;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetWaterDetails) == 0x000004, "Wrong alignment on HumanCharacter_GetWaterDetails");
static_assert(sizeof(HumanCharacter_GetWaterDetails) == 0x000018, "Wrong size on HumanCharacter_GetWaterDetails");
static_assert(offsetof(HumanCharacter_GetWaterDetails, bIsInWater) == 0x000000, "Member 'HumanCharacter_GetWaterDetails::bIsInWater' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetWaterDetails, Depth) == 0x000004, "Member 'HumanCharacter_GetWaterDetails::Depth' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetWaterDetails, Flow) == 0x000008, "Member 'HumanCharacter_GetWaterDetails::Flow' has a wrong offset!");
static_assert(offsetof(HumanCharacter_GetWaterDetails, MaxDepth) == 0x000014, "Member 'HumanCharacter_GetWaterDetails::MaxDepth' has a wrong offset!");

// Function Flame.HumanCharacter.GetWeaponCollisionInsufficientDistance
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_GetWeaponCollisionInsufficientDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetWeaponCollisionInsufficientDistance) == 0x000004, "Wrong alignment on HumanCharacter_GetWeaponCollisionInsufficientDistance");
static_assert(sizeof(HumanCharacter_GetWeaponCollisionInsufficientDistance) == 0x000004, "Wrong size on HumanCharacter_GetWeaponCollisionInsufficientDistance");
static_assert(offsetof(HumanCharacter_GetWeaponCollisionInsufficientDistance, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetWeaponCollisionInsufficientDistance::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.GetWeaponCollisionInsufficientHorizontalDistance
// 0x0004 (0x0004 - 0x0000)
struct HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance) == 0x000004, "Wrong alignment on HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance");
static_assert(sizeof(HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance) == 0x000004, "Wrong size on HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance");
static_assert(offsetof(HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance, ReturnValue) == 0x000000, "Member 'HumanCharacter_GetWeaponCollisionInsufficientHorizontalDistance::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.HasUsedThrowable
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_HasUsedThrowable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_HasUsedThrowable) == 0x000001, "Wrong alignment on HumanCharacter_HasUsedThrowable");
static_assert(sizeof(HumanCharacter_HasUsedThrowable) == 0x000001, "Wrong size on HumanCharacter_HasUsedThrowable");
static_assert(offsetof(HumanCharacter_HasUsedThrowable, ReturnValue) == 0x000000, "Member 'HumanCharacter_HasUsedThrowable::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsADS
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsADS) == 0x000001, "Wrong alignment on HumanCharacter_IsADS");
static_assert(sizeof(HumanCharacter_IsADS) == 0x000001, "Wrong size on HumanCharacter_IsADS");
static_assert(offsetof(HumanCharacter_IsADS, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsADS::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsAimingAffectedByConcussion
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsAimingAffectedByConcussion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsAimingAffectedByConcussion) == 0x000001, "Wrong alignment on HumanCharacter_IsAimingAffectedByConcussion");
static_assert(sizeof(HumanCharacter_IsAimingAffectedByConcussion) == 0x000001, "Wrong size on HumanCharacter_IsAimingAffectedByConcussion");
static_assert(offsetof(HumanCharacter_IsAimingAffectedByConcussion, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsAimingAffectedByConcussion::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsAttacking) == 0x000001, "Wrong alignment on HumanCharacter_IsAttacking");
static_assert(sizeof(HumanCharacter_IsAttacking) == 0x000001, "Wrong size on HumanCharacter_IsAttacking");
static_assert(offsetof(HumanCharacter_IsAttacking, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsAttacking::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsChambering
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsChambering final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsChambering) == 0x000001, "Wrong alignment on HumanCharacter_IsChambering");
static_assert(sizeof(HumanCharacter_IsChambering) == 0x000001, "Wrong size on HumanCharacter_IsChambering");
static_assert(offsetof(HumanCharacter_IsChambering, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsChambering::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsChamberInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsChamberInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsChamberInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsChamberInProgress");
static_assert(sizeof(HumanCharacter_IsChamberInProgress) == 0x000001, "Wrong size on HumanCharacter_IsChamberInProgress");
static_assert(offsetof(HumanCharacter_IsChamberInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsChamberInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsChangeFireModeInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsChangeFireModeInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsChangeFireModeInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsChangeFireModeInProgress");
static_assert(sizeof(HumanCharacter_IsChangeFireModeInProgress) == 0x000001, "Wrong size on HumanCharacter_IsChangeFireModeInProgress");
static_assert(offsetof(HumanCharacter_IsChangeFireModeInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsChangeFireModeInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsCharacterInWater
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsCharacterInWater final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsCharacterInWater) == 0x000001, "Wrong alignment on HumanCharacter_IsCharacterInWater");
static_assert(sizeof(HumanCharacter_IsCharacterInWater) == 0x000001, "Wrong size on HumanCharacter_IsCharacterInWater");
static_assert(offsetof(HumanCharacter_IsCharacterInWater, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsCharacterInWater::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsClimbing
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsClimbing) == 0x000001, "Wrong alignment on HumanCharacter_IsClimbing");
static_assert(sizeof(HumanCharacter_IsClimbing) == 0x000001, "Wrong size on HumanCharacter_IsClimbing");
static_assert(offsetof(HumanCharacter_IsClimbing, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsClimbing::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsClimbingLadder
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsClimbingLadder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsClimbingLadder) == 0x000001, "Wrong alignment on HumanCharacter_IsClimbingLadder");
static_assert(sizeof(HumanCharacter_IsClimbingLadder) == 0x000001, "Wrong size on HumanCharacter_IsClimbingLadder");
static_assert(offsetof(HumanCharacter_IsClimbingLadder, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsClimbingLadder::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsCrouchInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsCrouchInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsCrouchInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsCrouchInProgress");
static_assert(sizeof(HumanCharacter_IsCrouchInProgress) == 0x000001, "Wrong size on HumanCharacter_IsCrouchInProgress");
static_assert(offsetof(HumanCharacter_IsCrouchInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsCrouchInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsCyclingMode
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsCyclingMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsCyclingMode) == 0x000001, "Wrong alignment on HumanCharacter_IsCyclingMode");
static_assert(sizeof(HumanCharacter_IsCyclingMode) == 0x000001, "Wrong size on HumanCharacter_IsCyclingMode");
static_assert(offsetof(HumanCharacter_IsCyclingMode, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsCyclingMode::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsDebugAmmoReplicationEnabled
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsDebugAmmoReplicationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsDebugAmmoReplicationEnabled) == 0x000001, "Wrong alignment on HumanCharacter_IsDebugAmmoReplicationEnabled");
static_assert(sizeof(HumanCharacter_IsDebugAmmoReplicationEnabled) == 0x000001, "Wrong size on HumanCharacter_IsDebugAmmoReplicationEnabled");
static_assert(offsetof(HumanCharacter_IsDebugAmmoReplicationEnabled, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsDebugAmmoReplicationEnabled::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsFireInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsFireInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsFireInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsFireInProgress");
static_assert(sizeof(HumanCharacter_IsFireInProgress) == 0x000001, "Wrong size on HumanCharacter_IsFireInProgress");
static_assert(offsetof(HumanCharacter_IsFireInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsFireInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsFiring
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsFiring) == 0x000001, "Wrong alignment on HumanCharacter_IsFiring");
static_assert(sizeof(HumanCharacter_IsFiring) == 0x000001, "Wrong size on HumanCharacter_IsFiring");
static_assert(offsetof(HumanCharacter_IsFiring, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsFiring::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsFirstPersonADS
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsFirstPersonADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsFirstPersonADS) == 0x000001, "Wrong alignment on HumanCharacter_IsFirstPersonADS");
static_assert(sizeof(HumanCharacter_IsFirstPersonADS) == 0x000001, "Wrong size on HumanCharacter_IsFirstPersonADS");
static_assert(offsetof(HumanCharacter_IsFirstPersonADS, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsFirstPersonADS::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsGestureInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsGestureInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsGestureInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsGestureInProgress");
static_assert(sizeof(HumanCharacter_IsGestureInProgress) == 0x000001, "Wrong size on HumanCharacter_IsGestureInProgress");
static_assert(offsetof(HumanCharacter_IsGestureInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsGestureInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsHipFiring
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsHipFiring final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsHipFiring) == 0x000001, "Wrong alignment on HumanCharacter_IsHipFiring");
static_assert(sizeof(HumanCharacter_IsHipFiring) == 0x000001, "Wrong size on HumanCharacter_IsHipFiring");
static_assert(offsetof(HumanCharacter_IsHipFiring, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsHipFiring::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsHolsterInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsHolsterInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsHolsterInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsHolsterInProgress");
static_assert(sizeof(HumanCharacter_IsHolsterInProgress) == 0x000001, "Wrong size on HumanCharacter_IsHolsterInProgress");
static_assert(offsetof(HumanCharacter_IsHolsterInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsHolsterInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsJumpInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsJumpInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsJumpInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsJumpInProgress");
static_assert(sizeof(HumanCharacter_IsJumpInProgress) == 0x000001, "Wrong size on HumanCharacter_IsJumpInProgress");
static_assert(offsetof(HumanCharacter_IsJumpInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsJumpInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsPoseMirrored
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsPoseMirrored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsPoseMirrored) == 0x000001, "Wrong alignment on HumanCharacter_IsPoseMirrored");
static_assert(sizeof(HumanCharacter_IsPoseMirrored) == 0x000001, "Wrong size on HumanCharacter_IsPoseMirrored");
static_assert(offsetof(HumanCharacter_IsPoseMirrored, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsPoseMirrored::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsProneInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsProneInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsProneInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsProneInProgress");
static_assert(sizeof(HumanCharacter_IsProneInProgress) == 0x000001, "Wrong size on HumanCharacter_IsProneInProgress");
static_assert(offsetof(HumanCharacter_IsProneInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsProneInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsProningInMotion
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsProningInMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsProningInMotion) == 0x000001, "Wrong alignment on HumanCharacter_IsProningInMotion");
static_assert(sizeof(HumanCharacter_IsProningInMotion) == 0x000001, "Wrong size on HumanCharacter_IsProningInMotion");
static_assert(offsetof(HumanCharacter_IsProningInMotion, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsProningInMotion::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsQuickMeleeInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsQuickMeleeInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsQuickMeleeInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsQuickMeleeInProgress");
static_assert(sizeof(HumanCharacter_IsQuickMeleeInProgress) == 0x000001, "Wrong size on HumanCharacter_IsQuickMeleeInProgress");
static_assert(offsetof(HumanCharacter_IsQuickMeleeInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsQuickMeleeInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsReloading) == 0x000001, "Wrong alignment on HumanCharacter_IsReloading");
static_assert(sizeof(HumanCharacter_IsReloading) == 0x000001, "Wrong size on HumanCharacter_IsReloading");
static_assert(offsetof(HumanCharacter_IsReloading, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsReloading::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsReloadInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsReloadInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsReloadInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsReloadInProgress");
static_assert(sizeof(HumanCharacter_IsReloadInProgress) == 0x000001, "Wrong size on HumanCharacter_IsReloadInProgress");
static_assert(offsetof(HumanCharacter_IsReloadInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsReloadInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsSlidingDownLadder
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsSlidingDownLadder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsSlidingDownLadder) == 0x000001, "Wrong alignment on HumanCharacter_IsSlidingDownLadder");
static_assert(sizeof(HumanCharacter_IsSlidingDownLadder) == 0x000001, "Wrong size on HumanCharacter_IsSlidingDownLadder");
static_assert(offsetof(HumanCharacter_IsSlidingDownLadder, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsSlidingDownLadder::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsSprinting) == 0x000001, "Wrong alignment on HumanCharacter_IsSprinting");
static_assert(sizeof(HumanCharacter_IsSprinting) == 0x000001, "Wrong size on HumanCharacter_IsSprinting");
static_assert(offsetof(HumanCharacter_IsSprinting, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsSprinting::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsSprintInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsSprintInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsSprintInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsSprintInProgress");
static_assert(sizeof(HumanCharacter_IsSprintInProgress) == 0x000001, "Wrong size on HumanCharacter_IsSprintInProgress");
static_assert(offsetof(HumanCharacter_IsSprintInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsSprintInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsStandInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsStandInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsStandInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsStandInProgress");
static_assert(sizeof(HumanCharacter_IsStandInProgress) == 0x000001, "Wrong size on HumanCharacter_IsStandInProgress");
static_assert(offsetof(HumanCharacter_IsStandInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsStandInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsSwitchInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsSwitchInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsSwitchInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsSwitchInProgress");
static_assert(sizeof(HumanCharacter_IsSwitchInProgress) == 0x000001, "Wrong size on HumanCharacter_IsSwitchInProgress");
static_assert(offsetof(HumanCharacter_IsSwitchInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsSwitchInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsThirdPersonADS
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsThirdPersonADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsThirdPersonADS) == 0x000001, "Wrong alignment on HumanCharacter_IsThirdPersonADS");
static_assert(sizeof(HumanCharacter_IsThirdPersonADS) == 0x000001, "Wrong size on HumanCharacter_IsThirdPersonADS");
static_assert(offsetof(HumanCharacter_IsThirdPersonADS, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsThirdPersonADS::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsTriggerDownAuthority
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsTriggerDownAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsTriggerDownAuthority) == 0x000001, "Wrong alignment on HumanCharacter_IsTriggerDownAuthority");
static_assert(sizeof(HumanCharacter_IsTriggerDownAuthority) == 0x000001, "Wrong size on HumanCharacter_IsTriggerDownAuthority");
static_assert(offsetof(HumanCharacter_IsTriggerDownAuthority, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsTriggerDownAuthority::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsTriggerDownLocal
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsTriggerDownLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsTriggerDownLocal) == 0x000001, "Wrong alignment on HumanCharacter_IsTriggerDownLocal");
static_assert(sizeof(HumanCharacter_IsTriggerDownLocal) == 0x000001, "Wrong size on HumanCharacter_IsTriggerDownLocal");
static_assert(offsetof(HumanCharacter_IsTriggerDownLocal, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsTriggerDownLocal::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsUseInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsUseInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsUseInProgress) == 0x000001, "Wrong alignment on HumanCharacter_IsUseInProgress");
static_assert(sizeof(HumanCharacter_IsUseInProgress) == 0x000001, "Wrong size on HumanCharacter_IsUseInProgress");
static_assert(offsetof(HumanCharacter_IsUseInProgress, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsUseInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_IsVaulting) == 0x000001, "Wrong alignment on HumanCharacter_IsVaulting");
static_assert(sizeof(HumanCharacter_IsVaulting) == 0x000001, "Wrong size on HumanCharacter_IsVaulting");
static_assert(offsetof(HumanCharacter_IsVaulting, ReturnValue) == 0x000000, "Member 'HumanCharacter_IsVaulting::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.ShouldScaleHeadDown
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ShouldScaleHeadDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ShouldScaleHeadDown) == 0x000001, "Wrong alignment on HumanCharacter_ShouldScaleHeadDown");
static_assert(sizeof(HumanCharacter_ShouldScaleHeadDown) == 0x000001, "Wrong size on HumanCharacter_ShouldScaleHeadDown");
static_assert(offsetof(HumanCharacter_ShouldScaleHeadDown, ReturnValue) == 0x000000, "Member 'HumanCharacter_ShouldScaleHeadDown::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.ShouldShowCharacterAiming
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_ShouldShowCharacterAiming final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_ShouldShowCharacterAiming) == 0x000001, "Wrong alignment on HumanCharacter_ShouldShowCharacterAiming");
static_assert(sizeof(HumanCharacter_ShouldShowCharacterAiming) == 0x000001, "Wrong size on HumanCharacter_ShouldShowCharacterAiming");
static_assert(offsetof(HumanCharacter_ShouldShowCharacterAiming, ReturnValue) == 0x000000, "Member 'HumanCharacter_ShouldShowCharacterAiming::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacter.WantsToSprint
// 0x0001 (0x0001 - 0x0000)
struct HumanCharacter_WantsToSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacter_WantsToSprint) == 0x000001, "Wrong alignment on HumanCharacter_WantsToSprint");
static_assert(sizeof(HumanCharacter_WantsToSprint) == 0x000001, "Wrong size on HumanCharacter_WantsToSprint");
static_assert(offsetof(HumanCharacter_WantsToSprint, ReturnValue) == 0x000000, "Member 'HumanCharacter_WantsToSprint::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnHideMarker
// 0x0008 (0x0008 - 0x0000)
struct InteractionItemComponent_OnHideMarker final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_OnHideMarker) == 0x000008, "Wrong alignment on InteractionItemComponent_OnHideMarker");
static_assert(sizeof(InteractionItemComponent_OnHideMarker) == 0x000008, "Wrong size on InteractionItemComponent_OnHideMarker");
static_assert(offsetof(InteractionItemComponent_OnHideMarker, Sender) == 0x000000, "Member 'InteractionItemComponent_OnHideMarker::Sender' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnInteractionEnd
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_OnInteractionEnd final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_OnInteractionEnd) == 0x000008, "Wrong alignment on InteractionItemComponent_OnInteractionEnd");
static_assert(sizeof(InteractionItemComponent_OnInteractionEnd) == 0x000010, "Wrong size on InteractionItemComponent_OnInteractionEnd");
static_assert(offsetof(InteractionItemComponent_OnInteractionEnd, Sender) == 0x000000, "Member 'InteractionItemComponent_OnInteractionEnd::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnInteractionEnd, InteractingActor) == 0x000008, "Member 'InteractionItemComponent_OnInteractionEnd::InteractingActor' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnInteractionStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_OnInteractionStart final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_OnInteractionStart) == 0x000008, "Wrong alignment on InteractionItemComponent_OnInteractionStart");
static_assert(sizeof(InteractionItemComponent_OnInteractionStart) == 0x000010, "Wrong size on InteractionItemComponent_OnInteractionStart");
static_assert(offsetof(InteractionItemComponent_OnInteractionStart, Sender) == 0x000000, "Member 'InteractionItemComponent_OnInteractionStart::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnInteractionStart, InteractingActor) == 0x000008, "Member 'InteractionItemComponent_OnInteractionStart::InteractingActor' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnPreInteractionEnd
// 0x0018 (0x0018 - 0x0000)
struct InteractionItemComponent_OnPreInteractionEnd final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Canceled;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_OnPreInteractionEnd) == 0x000008, "Wrong alignment on InteractionItemComponent_OnPreInteractionEnd");
static_assert(sizeof(InteractionItemComponent_OnPreInteractionEnd) == 0x000018, "Wrong size on InteractionItemComponent_OnPreInteractionEnd");
static_assert(offsetof(InteractionItemComponent_OnPreInteractionEnd, Sender) == 0x000000, "Member 'InteractionItemComponent_OnPreInteractionEnd::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnPreInteractionEnd, InteractingActor) == 0x000008, "Member 'InteractionItemComponent_OnPreInteractionEnd::InteractingActor' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnPreInteractionEnd, Canceled) == 0x000010, "Member 'InteractionItemComponent_OnPreInteractionEnd::Canceled' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnPreInteractionStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_OnPreInteractionStart final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_OnPreInteractionStart) == 0x000008, "Wrong alignment on InteractionItemComponent_OnPreInteractionStart");
static_assert(sizeof(InteractionItemComponent_OnPreInteractionStart) == 0x000010, "Wrong size on InteractionItemComponent_OnPreInteractionStart");
static_assert(offsetof(InteractionItemComponent_OnPreInteractionStart, Sender) == 0x000000, "Member 'InteractionItemComponent_OnPreInteractionStart::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnPreInteractionStart, InteractingActor) == 0x000008, "Member 'InteractionItemComponent_OnPreInteractionStart::InteractingActor' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnShowMarker
// 0x0018 (0x0018 - 0x0000)
struct InteractionItemComponent_OnShowMarker final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_OnShowMarker) == 0x000008, "Wrong alignment on InteractionItemComponent_OnShowMarker");
static_assert(sizeof(InteractionItemComponent_OnShowMarker) == 0x000018, "Wrong size on InteractionItemComponent_OnShowMarker");
static_assert(offsetof(InteractionItemComponent_OnShowMarker, Sender) == 0x000000, "Member 'InteractionItemComponent_OnShowMarker::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnShowMarker, MarkerPosition) == 0x000008, "Member 'InteractionItemComponent_OnShowMarker::MarkerPosition' has a wrong offset!");

// Function Flame.InteractionItemComponent.OnUpdateMarker
// 0x0018 (0x0018 - 0x0000)
struct InteractionItemComponent_OnUpdateMarker final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_OnUpdateMarker) == 0x000008, "Wrong alignment on InteractionItemComponent_OnUpdateMarker");
static_assert(sizeof(InteractionItemComponent_OnUpdateMarker) == 0x000018, "Wrong size on InteractionItemComponent_OnUpdateMarker");
static_assert(offsetof(InteractionItemComponent_OnUpdateMarker, Sender) == 0x000000, "Member 'InteractionItemComponent_OnUpdateMarker::Sender' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_OnUpdateMarker, MarkerPosition) == 0x000008, "Member 'InteractionItemComponent_OnUpdateMarker::MarkerPosition' has a wrong offset!");

// Function Flame.InteractionItemComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_SetEnabled) == 0x000001, "Wrong alignment on InteractionItemComponent_SetEnabled");
static_assert(sizeof(InteractionItemComponent_SetEnabled) == 0x000001, "Wrong size on InteractionItemComponent_SetEnabled");
static_assert(offsetof(InteractionItemComponent_SetEnabled, Enabled) == 0x000000, "Member 'InteractionItemComponent_SetEnabled::Enabled' has a wrong offset!");

// Function Flame.InteractionItemComponent.SetInteractionTime
// 0x0004 (0x0004 - 0x0000)
struct InteractionItemComponent_SetInteractionTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_SetInteractionTime) == 0x000004, "Wrong alignment on InteractionItemComponent_SetInteractionTime");
static_assert(sizeof(InteractionItemComponent_SetInteractionTime) == 0x000004, "Wrong size on InteractionItemComponent_SetInteractionTime");
static_assert(offsetof(InteractionItemComponent_SetInteractionTime, NewTime) == 0x000000, "Member 'InteractionItemComponent_SetInteractionTime::NewTime' has a wrong offset!");

// Function Flame.InteractionItemComponent.SetMarkerVisibility
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_SetMarkerVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_SetMarkerVisibility) == 0x000001, "Wrong alignment on InteractionItemComponent_SetMarkerVisibility");
static_assert(sizeof(InteractionItemComponent_SetMarkerVisibility) == 0x000001, "Wrong size on InteractionItemComponent_SetMarkerVisibility");
static_assert(offsetof(InteractionItemComponent_SetMarkerVisibility, Visibility) == 0x000000, "Member 'InteractionItemComponent_SetMarkerVisibility::Visibility' has a wrong offset!");

// Function Flame.InteractionItemComponent.SetPlayEndInteractionAnimation
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_SetPlayEndInteractionAnimation final
{
public:
	bool                                          PlayAnimation;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_SetPlayEndInteractionAnimation) == 0x000001, "Wrong alignment on InteractionItemComponent_SetPlayEndInteractionAnimation");
static_assert(sizeof(InteractionItemComponent_SetPlayEndInteractionAnimation) == 0x000001, "Wrong size on InteractionItemComponent_SetPlayEndInteractionAnimation");
static_assert(offsetof(InteractionItemComponent_SetPlayEndInteractionAnimation, PlayAnimation) == 0x000000, "Member 'InteractionItemComponent_SetPlayEndInteractionAnimation::PlayAnimation' has a wrong offset!");

// Function Flame.InteractionItemComponent.CanInteract
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_CanInteract final
{
public:
	class AHumanCharacter*                        Human;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_CanInteract) == 0x000008, "Wrong alignment on InteractionItemComponent_CanInteract");
static_assert(sizeof(InteractionItemComponent_CanInteract) == 0x000010, "Wrong size on InteractionItemComponent_CanInteract");
static_assert(offsetof(InteractionItemComponent_CanInteract, Human) == 0x000000, "Member 'InteractionItemComponent_CanInteract::Human' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_CanInteract, ReturnValue) == 0x000008, "Member 'InteractionItemComponent_CanInteract::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.CanShowMarker
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_CanShowMarker final
{
public:
	class AHumanCharacter*                        Human;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_CanShowMarker) == 0x000008, "Wrong alignment on InteractionItemComponent_CanShowMarker");
static_assert(sizeof(InteractionItemComponent_CanShowMarker) == 0x000010, "Wrong size on InteractionItemComponent_CanShowMarker");
static_assert(offsetof(InteractionItemComponent_CanShowMarker, Human) == 0x000000, "Member 'InteractionItemComponent_CanShowMarker::Human' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_CanShowMarker, ReturnValue) == 0x000008, "Member 'InteractionItemComponent_CanShowMarker::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetInteractionAngleLimit
// 0x0004 (0x0004 - 0x0000)
struct InteractionItemComponent_GetInteractionAngleLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_GetInteractionAngleLimit) == 0x000004, "Wrong alignment on InteractionItemComponent_GetInteractionAngleLimit");
static_assert(sizeof(InteractionItemComponent_GetInteractionAngleLimit) == 0x000004, "Wrong size on InteractionItemComponent_GetInteractionAngleLimit");
static_assert(offsetof(InteractionItemComponent_GetInteractionAngleLimit, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_GetInteractionAngleLimit::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetInteractionDistanceLimit
// 0x0004 (0x0004 - 0x0000)
struct InteractionItemComponent_GetInteractionDistanceLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_GetInteractionDistanceLimit) == 0x000004, "Wrong alignment on InteractionItemComponent_GetInteractionDistanceLimit");
static_assert(sizeof(InteractionItemComponent_GetInteractionDistanceLimit) == 0x000004, "Wrong size on InteractionItemComponent_GetInteractionDistanceLimit");
static_assert(offsetof(InteractionItemComponent_GetInteractionDistanceLimit, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_GetInteractionDistanceLimit::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetInteractionLimit
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_GetInteractionLimit final
{
public:
	EInteractionAngleLimit                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_GetInteractionLimit) == 0x000001, "Wrong alignment on InteractionItemComponent_GetInteractionLimit");
static_assert(sizeof(InteractionItemComponent_GetInteractionLimit) == 0x000001, "Wrong size on InteractionItemComponent_GetInteractionLimit");
static_assert(offsetof(InteractionItemComponent_GetInteractionLimit, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_GetInteractionLimit::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetInteractionTime
// 0x0004 (0x0004 - 0x0000)
struct InteractionItemComponent_GetInteractionTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_GetInteractionTime) == 0x000004, "Wrong alignment on InteractionItemComponent_GetInteractionTime");
static_assert(sizeof(InteractionItemComponent_GetInteractionTime) == 0x000004, "Wrong size on InteractionItemComponent_GetInteractionTime");
static_assert(offsetof(InteractionItemComponent_GetInteractionTime, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_GetInteractionTime::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetMarkerVisibility
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_GetMarkerVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_GetMarkerVisibility) == 0x000001, "Wrong alignment on InteractionItemComponent_GetMarkerVisibility");
static_assert(sizeof(InteractionItemComponent_GetMarkerVisibility) == 0x000001, "Wrong size on InteractionItemComponent_GetMarkerVisibility");
static_assert(offsetof(InteractionItemComponent_GetMarkerVisibility, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_GetMarkerVisibility::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.GetNearestSocketPos
// 0x0028 (0x0028 - 0x0000)
struct InteractionItemComponent_GetNearestSocketPos final
{
public:
	class AHumanCharacter*                        Human;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ViewPos;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketPos;                                         // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_GetNearestSocketPos) == 0x000008, "Wrong alignment on InteractionItemComponent_GetNearestSocketPos");
static_assert(sizeof(InteractionItemComponent_GetNearestSocketPos) == 0x000028, "Wrong size on InteractionItemComponent_GetNearestSocketPos");
static_assert(offsetof(InteractionItemComponent_GetNearestSocketPos, Human) == 0x000000, "Member 'InteractionItemComponent_GetNearestSocketPos::Human' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_GetNearestSocketPos, ViewPos) == 0x000008, "Member 'InteractionItemComponent_GetNearestSocketPos::ViewPos' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_GetNearestSocketPos, SocketPos) == 0x000014, "Member 'InteractionItemComponent_GetNearestSocketPos::SocketPos' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_GetNearestSocketPos, ReturnValue) == 0x000020, "Member 'InteractionItemComponent_GetNearestSocketPos::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.IsCompoundInteraction
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_IsCompoundInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_IsCompoundInteraction) == 0x000001, "Wrong alignment on InteractionItemComponent_IsCompoundInteraction");
static_assert(sizeof(InteractionItemComponent_IsCompoundInteraction) == 0x000001, "Wrong size on InteractionItemComponent_IsCompoundInteraction");
static_assert(offsetof(InteractionItemComponent_IsCompoundInteraction, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_IsCompoundInteraction::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_IsEnabled) == 0x000001, "Wrong alignment on InteractionItemComponent_IsEnabled");
static_assert(sizeof(InteractionItemComponent_IsEnabled) == 0x000001, "Wrong size on InteractionItemComponent_IsEnabled");
static_assert(offsetof(InteractionItemComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.IsExclusivityLocked
// 0x0010 (0x0010 - 0x0000)
struct InteractionItemComponent_IsExclusivityLocked final
{
public:
	class AHumanCharacter*                        Human;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionItemComponent_IsExclusivityLocked) == 0x000008, "Wrong alignment on InteractionItemComponent_IsExclusivityLocked");
static_assert(sizeof(InteractionItemComponent_IsExclusivityLocked) == 0x000010, "Wrong size on InteractionItemComponent_IsExclusivityLocked");
static_assert(offsetof(InteractionItemComponent_IsExclusivityLocked, Human) == 0x000000, "Member 'InteractionItemComponent_IsExclusivityLocked::Human' has a wrong offset!");
static_assert(offsetof(InteractionItemComponent_IsExclusivityLocked, ReturnValue) == 0x000008, "Member 'InteractionItemComponent_IsExclusivityLocked::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.IsExclusivityUsing
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_IsExclusivityUsing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_IsExclusivityUsing) == 0x000001, "Wrong alignment on InteractionItemComponent_IsExclusivityUsing");
static_assert(sizeof(InteractionItemComponent_IsExclusivityUsing) == 0x000001, "Wrong size on InteractionItemComponent_IsExclusivityUsing");
static_assert(offsetof(InteractionItemComponent_IsExclusivityUsing, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_IsExclusivityUsing::ReturnValue' has a wrong offset!");

// Function Flame.InteractionItemComponent.PlayEndInteractionAnimation
// 0x0001 (0x0001 - 0x0000)
struct InteractionItemComponent_PlayEndInteractionAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionItemComponent_PlayEndInteractionAnimation) == 0x000001, "Wrong alignment on InteractionItemComponent_PlayEndInteractionAnimation");
static_assert(sizeof(InteractionItemComponent_PlayEndInteractionAnimation) == 0x000001, "Wrong size on InteractionItemComponent_PlayEndInteractionAnimation");
static_assert(offsetof(InteractionItemComponent_PlayEndInteractionAnimation, ReturnValue) == 0x000000, "Member 'InteractionItemComponent_PlayEndInteractionAnimation::ReturnValue' has a wrong offset!");

// Function Flame.CameraManagerComponentBase.SetCameraState
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponentBase_SetCameraState final
{
public:
	ECameraPositionState                          NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponentBase_SetCameraState) == 0x000001, "Wrong alignment on CameraManagerComponentBase_SetCameraState");
static_assert(sizeof(CameraManagerComponentBase_SetCameraState) == 0x000001, "Wrong size on CameraManagerComponentBase_SetCameraState");
static_assert(offsetof(CameraManagerComponentBase_SetCameraState, NewState) == 0x000000, "Member 'CameraManagerComponentBase_SetCameraState::NewState' has a wrong offset!");

// Function Flame.CameraManagerComponentBase.GetActiveCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraManagerComponentBase_GetActiveCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponentBase_GetActiveCamera) == 0x000008, "Wrong alignment on CameraManagerComponentBase_GetActiveCamera");
static_assert(sizeof(CameraManagerComponentBase_GetActiveCamera) == 0x000008, "Wrong size on CameraManagerComponentBase_GetActiveCamera");
static_assert(offsetof(CameraManagerComponentBase_GetActiveCamera, ReturnValue) == 0x000000, "Member 'CameraManagerComponentBase_GetActiveCamera::ReturnValue' has a wrong offset!");

// Function Flame.CameraManagerComponentBase.GetCameraState
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponentBase_GetCameraState final
{
public:
	ECameraPositionState                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponentBase_GetCameraState) == 0x000001, "Wrong alignment on CameraManagerComponentBase_GetCameraState");
static_assert(sizeof(CameraManagerComponentBase_GetCameraState) == 0x000001, "Wrong size on CameraManagerComponentBase_GetCameraState");
static_assert(offsetof(CameraManagerComponentBase_GetCameraState, ReturnValue) == 0x000000, "Member 'CameraManagerComponentBase_GetCameraState::ReturnValue' has a wrong offset!");

// Function Flame.CameraManagerComponentBase.GetShakeModifier
// 0x0004 (0x0004 - 0x0000)
struct CameraManagerComponentBase_GetShakeModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponentBase_GetShakeModifier) == 0x000004, "Wrong alignment on CameraManagerComponentBase_GetShakeModifier");
static_assert(sizeof(CameraManagerComponentBase_GetShakeModifier) == 0x000004, "Wrong size on CameraManagerComponentBase_GetShakeModifier");
static_assert(offsetof(CameraManagerComponentBase_GetShakeModifier, ReturnValue) == 0x000000, "Member 'CameraManagerComponentBase_GetShakeModifier::ReturnValue' has a wrong offset!");

// Function Flame.CameraManagerComponentBase.GetWaterSurfaceZ
// 0x0004 (0x0004 - 0x0000)
struct CameraManagerComponentBase_GetWaterSurfaceZ final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponentBase_GetWaterSurfaceZ) == 0x000004, "Wrong alignment on CameraManagerComponentBase_GetWaterSurfaceZ");
static_assert(sizeof(CameraManagerComponentBase_GetWaterSurfaceZ) == 0x000004, "Wrong size on CameraManagerComponentBase_GetWaterSurfaceZ");
static_assert(offsetof(CameraManagerComponentBase_GetWaterSurfaceZ, ReturnValue) == 0x000000, "Member 'CameraManagerComponentBase_GetWaterSurfaceZ::ReturnValue' has a wrong offset!");

// Function Flame.CameraManagerComponent.DrawDebugCameraLocation
// 0x0010 (0x0010 - 0x0000)
struct CameraManagerComponent_DrawDebugCameraLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetRole                                      CallerRole;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CameraManagerComponent_DrawDebugCameraLocation) == 0x000004, "Wrong alignment on CameraManagerComponent_DrawDebugCameraLocation");
static_assert(sizeof(CameraManagerComponent_DrawDebugCameraLocation) == 0x000010, "Wrong size on CameraManagerComponent_DrawDebugCameraLocation");
static_assert(offsetof(CameraManagerComponent_DrawDebugCameraLocation, Location) == 0x000000, "Member 'CameraManagerComponent_DrawDebugCameraLocation::Location' has a wrong offset!");
static_assert(offsetof(CameraManagerComponent_DrawDebugCameraLocation, CallerRole) == 0x00000C, "Member 'CameraManagerComponent_DrawDebugCameraLocation::CallerRole' has a wrong offset!");

// Function Flame.CameraManagerComponent.InitADS
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponent_InitADS final
{
public:
	bool                                          IsADS;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_InitADS) == 0x000001, "Wrong alignment on CameraManagerComponent_InitADS");
static_assert(sizeof(CameraManagerComponent_InitADS) == 0x000001, "Wrong size on CameraManagerComponent_InitADS");
static_assert(offsetof(CameraManagerComponent_InitADS, IsADS) == 0x000000, "Member 'CameraManagerComponent_InitADS::IsADS' has a wrong offset!");

// Function Flame.CameraManagerComponent.OnBuildingEnter
// 0x0008 (0x0008 - 0x0000)
struct CameraManagerComponent_OnBuildingEnter final
{
public:
	class AActor*                                 Building;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_OnBuildingEnter) == 0x000008, "Wrong alignment on CameraManagerComponent_OnBuildingEnter");
static_assert(sizeof(CameraManagerComponent_OnBuildingEnter) == 0x000008, "Wrong size on CameraManagerComponent_OnBuildingEnter");
static_assert(offsetof(CameraManagerComponent_OnBuildingEnter, Building) == 0x000000, "Member 'CameraManagerComponent_OnBuildingEnter::Building' has a wrong offset!");

// Function Flame.CameraManagerComponent.OnBuildingLeave
// 0x0008 (0x0008 - 0x0000)
struct CameraManagerComponent_OnBuildingLeave final
{
public:
	class AActor*                                 Building;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_OnBuildingLeave) == 0x000008, "Wrong alignment on CameraManagerComponent_OnBuildingLeave");
static_assert(sizeof(CameraManagerComponent_OnBuildingLeave) == 0x000008, "Wrong size on CameraManagerComponent_OnBuildingLeave");
static_assert(offsetof(CameraManagerComponent_OnBuildingLeave, Building) == 0x000000, "Member 'CameraManagerComponent_OnBuildingLeave::Building' has a wrong offset!");

// Function Flame.CameraManagerComponent.OnBuildingTypeEntered
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponent_OnBuildingTypeEntered final
{
public:
	EInteriorRoomType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_OnBuildingTypeEntered) == 0x000001, "Wrong alignment on CameraManagerComponent_OnBuildingTypeEntered");
static_assert(sizeof(CameraManagerComponent_OnBuildingTypeEntered) == 0x000001, "Wrong size on CameraManagerComponent_OnBuildingTypeEntered");
static_assert(offsetof(CameraManagerComponent_OnBuildingTypeEntered, Type) == 0x000000, "Member 'CameraManagerComponent_OnBuildingTypeEntered::Type' has a wrong offset!");

// Function Flame.CameraManagerComponent.OnBuildingTypeLeave
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponent_OnBuildingTypeLeave final
{
public:
	EInteriorRoomType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_OnBuildingTypeLeave) == 0x000001, "Wrong alignment on CameraManagerComponent_OnBuildingTypeLeave");
static_assert(sizeof(CameraManagerComponent_OnBuildingTypeLeave) == 0x000001, "Wrong size on CameraManagerComponent_OnBuildingTypeLeave");
static_assert(offsetof(CameraManagerComponent_OnBuildingTypeLeave, Type) == 0x000000, "Member 'CameraManagerComponent_OnBuildingTypeLeave::Type' has a wrong offset!");

// Function Flame.CameraManagerComponent.ServerSetShoulder
// 0x0001 (0x0001 - 0x0000)
struct CameraManagerComponent_ServerSetShoulder final
{
public:
	bool                                          bShoulder;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraManagerComponent_ServerSetShoulder) == 0x000001, "Wrong alignment on CameraManagerComponent_ServerSetShoulder");
static_assert(sizeof(CameraManagerComponent_ServerSetShoulder) == 0x000001, "Wrong size on CameraManagerComponent_ServerSetShoulder");
static_assert(offsetof(CameraManagerComponent_ServerSetShoulder, bShoulder) == 0x000000, "Member 'CameraManagerComponent_ServerSetShoulder::bShoulder' has a wrong offset!");

// Function Flame.EditorRebuildDataStorage.AddFloatProperty
// 0x000C (0x000C - 0x0000)
struct EditorRebuildDataStorage_AddFloatProperty final
{
public:
	class FName                                   Identifier;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorRebuildDataStorage_AddFloatProperty) == 0x000004, "Wrong alignment on EditorRebuildDataStorage_AddFloatProperty");
static_assert(sizeof(EditorRebuildDataStorage_AddFloatProperty) == 0x00000C, "Wrong size on EditorRebuildDataStorage_AddFloatProperty");
static_assert(offsetof(EditorRebuildDataStorage_AddFloatProperty, Identifier) == 0x000000, "Member 'EditorRebuildDataStorage_AddFloatProperty::Identifier' has a wrong offset!");
static_assert(offsetof(EditorRebuildDataStorage_AddFloatProperty, Value) == 0x000008, "Member 'EditorRebuildDataStorage_AddFloatProperty::Value' has a wrong offset!");

// Function Flame.EditorRebuildDataStorage.GetFloatProperty
// 0x0010 (0x0010 - 0x0000)
struct EditorRebuildDataStorage_GetFloatProperty final
{
public:
	class FName                                   Identifier;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorRebuildDataStorage_GetFloatProperty) == 0x000004, "Wrong alignment on EditorRebuildDataStorage_GetFloatProperty");
static_assert(sizeof(EditorRebuildDataStorage_GetFloatProperty) == 0x000010, "Wrong size on EditorRebuildDataStorage_GetFloatProperty");
static_assert(offsetof(EditorRebuildDataStorage_GetFloatProperty, Identifier) == 0x000000, "Member 'EditorRebuildDataStorage_GetFloatProperty::Identifier' has a wrong offset!");
static_assert(offsetof(EditorRebuildDataStorage_GetFloatProperty, OutValue) == 0x000008, "Member 'EditorRebuildDataStorage_GetFloatProperty::OutValue' has a wrong offset!");
static_assert(offsetof(EditorRebuildDataStorage_GetFloatProperty, ReturnValue) == 0x00000C, "Member 'EditorRebuildDataStorage_GetFloatProperty::ReturnValue' has a wrong offset!");

// Function Flame.MenuWidget.GetHUDElementVisibility
// 0x0001 (0x0001 - 0x0000)
struct MenuWidget_GetHUDElementVisibility final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_GetHUDElementVisibility) == 0x000001, "Wrong alignment on MenuWidget_GetHUDElementVisibility");
static_assert(sizeof(MenuWidget_GetHUDElementVisibility) == 0x000001, "Wrong size on MenuWidget_GetHUDElementVisibility");
static_assert(offsetof(MenuWidget_GetHUDElementVisibility, ReturnValue) == 0x000000, "Member 'MenuWidget_GetHUDElementVisibility::ReturnValue' has a wrong offset!");

// Function Flame.MenuWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct MenuWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on MenuWidget_GetWidgetToFocus");
static_assert(sizeof(MenuWidget_GetWidgetToFocus) == 0x000008, "Wrong size on MenuWidget_GetWidgetToFocus");
static_assert(offsetof(MenuWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'MenuWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function Flame.ModalWidget.UpdatePreviousWidgetFocusPath
// 0x0008 (0x0008 - 0x0000)
struct ModalWidget_UpdatePreviousWidgetFocusPath final
{
public:
	class UWidget*                                InWidget;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModalWidget_UpdatePreviousWidgetFocusPath) == 0x000008, "Wrong alignment on ModalWidget_UpdatePreviousWidgetFocusPath");
static_assert(sizeof(ModalWidget_UpdatePreviousWidgetFocusPath) == 0x000008, "Wrong size on ModalWidget_UpdatePreviousWidgetFocusPath");
static_assert(offsetof(ModalWidget_UpdatePreviousWidgetFocusPath, InWidget) == 0x000000, "Member 'ModalWidget_UpdatePreviousWidgetFocusPath::InWidget' has a wrong offset!");

// Function Flame.ExtendedFoliageStaticMeshComp.GetFoleySoundProperties
// 0x0028 (0x0028 - 0x0000)
struct ExtendedFoliageStaticMeshComp_GetFoleySoundProperties final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOverlapping;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PreviousVolume;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviousPitch;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties) == 0x000008, "Wrong alignment on ExtendedFoliageStaticMeshComp_GetFoleySoundProperties");
static_assert(sizeof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties) == 0x000028, "Wrong size on ExtendedFoliageStaticMeshComp_GetFoleySoundProperties");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, DeltaTime) == 0x000000, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::DeltaTime' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, Actor) == 0x000008, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::Actor' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, bIsOverlapping) == 0x000010, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::bIsOverlapping' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, PreviousVolume) == 0x000014, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::PreviousVolume' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, PreviousPitch) == 0x000018, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::PreviousPitch' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, Volume) == 0x00001C, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::Volume' has a wrong offset!");
static_assert(offsetof(ExtendedFoliageStaticMeshComp_GetFoleySoundProperties, Pitch) == 0x000020, "Member 'ExtendedFoliageStaticMeshComp_GetFoleySoundProperties::Pitch' has a wrong offset!");

// Function Flame.CurveGrenadeExplosionEffect.GetMaximumDistance
// 0x0004 (0x0004 - 0x0000)
struct CurveGrenadeExplosionEffect_GetMaximumDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveGrenadeExplosionEffect_GetMaximumDistance) == 0x000004, "Wrong alignment on CurveGrenadeExplosionEffect_GetMaximumDistance");
static_assert(sizeof(CurveGrenadeExplosionEffect_GetMaximumDistance) == 0x000004, "Wrong size on CurveGrenadeExplosionEffect_GetMaximumDistance");
static_assert(offsetof(CurveGrenadeExplosionEffect_GetMaximumDistance, ReturnValue) == 0x000000, "Member 'CurveGrenadeExplosionEffect_GetMaximumDistance::ReturnValue' has a wrong offset!");

// Function Flame.FlameSlot.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_OnButtonClicked final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_OnButtonClicked) == 0x000008, "Wrong alignment on FlameSlot_OnButtonClicked");
static_assert(sizeof(FlameSlot_OnButtonClicked) == 0x000008, "Wrong size on FlameSlot_OnButtonClicked");
static_assert(offsetof(FlameSlot_OnButtonClicked, Sender) == 0x000000, "Member 'FlameSlot_OnButtonClicked::Sender' has a wrong offset!");

// Function Flame.FlameSlot.OnButtonFocused
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_OnButtonFocused final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_OnButtonFocused) == 0x000008, "Wrong alignment on FlameSlot_OnButtonFocused");
static_assert(sizeof(FlameSlot_OnButtonFocused) == 0x000008, "Wrong size on FlameSlot_OnButtonFocused");
static_assert(offsetof(FlameSlot_OnButtonFocused, Sender) == 0x000000, "Member 'FlameSlot_OnButtonFocused::Sender' has a wrong offset!");

// Function Flame.FlameSlot.OnButtonUnfocused
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_OnButtonUnfocused final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_OnButtonUnfocused) == 0x000008, "Wrong alignment on FlameSlot_OnButtonUnfocused");
static_assert(sizeof(FlameSlot_OnButtonUnfocused) == 0x000008, "Wrong size on FlameSlot_OnButtonUnfocused");
static_assert(offsetof(FlameSlot_OnButtonUnfocused, Sender) == 0x000000, "Member 'FlameSlot_OnButtonUnfocused::Sender' has a wrong offset!");

// Function Flame.FlameSlot.SetItemDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FlameSlot_SetItemDescriptor final
{
public:
	struct FInvetoryItemDescriptor                InDescriptor;                                      // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_SetItemDescriptor) == 0x000008, "Wrong alignment on FlameSlot_SetItemDescriptor");
static_assert(sizeof(FlameSlot_SetItemDescriptor) == 0x000030, "Wrong size on FlameSlot_SetItemDescriptor");
static_assert(offsetof(FlameSlot_SetItemDescriptor, InDescriptor) == 0x000000, "Member 'FlameSlot_SetItemDescriptor::InDescriptor' has a wrong offset!");

// Function Flame.FlameSlot.SetItemType
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_SetItemType final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_SetItemType) == 0x000008, "Wrong alignment on FlameSlot_SetItemType");
static_assert(sizeof(FlameSlot_SetItemType) == 0x000008, "Wrong size on FlameSlot_SetItemType");
static_assert(offsetof(FlameSlot_SetItemType, ItemClass) == 0x000000, "Member 'FlameSlot_SetItemType::ItemClass' has a wrong offset!");

// Function Flame.FlameSlot.SetWeaponInstance
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_SetWeaponInstance final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_SetWeaponInstance) == 0x000008, "Wrong alignment on FlameSlot_SetWeaponInstance");
static_assert(sizeof(FlameSlot_SetWeaponInstance) == 0x000008, "Wrong size on FlameSlot_SetWeaponInstance");
static_assert(offsetof(FlameSlot_SetWeaponInstance, Weapon) == 0x000000, "Member 'FlameSlot_SetWeaponInstance::Weapon' has a wrong offset!");

// Function Flame.FlameSlot.GetItemDescriptor
// 0x0030 (0x0030 - 0x0000)
struct FlameSlot_GetItemDescriptor final
{
public:
	struct FInvetoryItemDescriptor                ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_GetItemDescriptor) == 0x000008, "Wrong alignment on FlameSlot_GetItemDescriptor");
static_assert(sizeof(FlameSlot_GetItemDescriptor) == 0x000030, "Wrong size on FlameSlot_GetItemDescriptor");
static_assert(offsetof(FlameSlot_GetItemDescriptor, ReturnValue) == 0x000000, "Member 'FlameSlot_GetItemDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.FlameSlot.GetItemObsolete
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_GetItemObsolete final
{
public:
	class AItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_GetItemObsolete) == 0x000008, "Wrong alignment on FlameSlot_GetItemObsolete");
static_assert(sizeof(FlameSlot_GetItemObsolete) == 0x000008, "Wrong size on FlameSlot_GetItemObsolete");
static_assert(offsetof(FlameSlot_GetItemObsolete, ReturnValue) == 0x000000, "Member 'FlameSlot_GetItemObsolete::ReturnValue' has a wrong offset!");

// Function Flame.FlameSlot.GetItemType
// 0x0008 (0x0008 - 0x0000)
struct FlameSlot_GetItemType final
{
public:
	TSubclassOf<class AItem>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSlot_GetItemType) == 0x000008, "Wrong alignment on FlameSlot_GetItemType");
static_assert(sizeof(FlameSlot_GetItemType) == 0x000008, "Wrong size on FlameSlot_GetItemType");
static_assert(offsetof(FlameSlot_GetItemType, ReturnValue) == 0x000000, "Member 'FlameSlot_GetItemType::ReturnValue' has a wrong offset!");

// Function Flame.EquipmentSlot.GetCount
// 0x0004 (0x0004 - 0x0000)
struct EquipmentSlot_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSlot_GetCount) == 0x000004, "Wrong alignment on EquipmentSlot_GetCount");
static_assert(sizeof(EquipmentSlot_GetCount) == 0x000004, "Wrong size on EquipmentSlot_GetCount");
static_assert(offsetof(EquipmentSlot_GetCount, ReturnValue) == 0x000000, "Member 'EquipmentSlot_GetCount::ReturnValue' has a wrong offset!");

// Function Flame.EquipmentSlot.GetSlotLimitation
// 0x0004 (0x0004 - 0x0000)
struct EquipmentSlot_GetSlotLimitation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentSlot_GetSlotLimitation) == 0x000004, "Wrong alignment on EquipmentSlot_GetSlotLimitation");
static_assert(sizeof(EquipmentSlot_GetSlotLimitation) == 0x000004, "Wrong size on EquipmentSlot_GetSlotLimitation");
static_assert(offsetof(EquipmentSlot_GetSlotLimitation, ReturnValue) == 0x000000, "Member 'EquipmentSlot_GetSlotLimitation::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnalyticsFunctionLibrary.LoadAnalytics
// 0x0028 (0x0028 - 0x0000)
struct FlameAnalyticsFunctionLibrary_LoadAnalytics final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DocumentText;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnalyticsFileType                            FileType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAnalyticsFunctionLibrary_LoadAnalytics) == 0x000008, "Wrong alignment on FlameAnalyticsFunctionLibrary_LoadAnalytics");
static_assert(sizeof(FlameAnalyticsFunctionLibrary_LoadAnalytics) == 0x000028, "Wrong size on FlameAnalyticsFunctionLibrary_LoadAnalytics");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_LoadAnalytics, File) == 0x000000, "Member 'FlameAnalyticsFunctionLibrary_LoadAnalytics::File' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_LoadAnalytics, DocumentText) == 0x000010, "Member 'FlameAnalyticsFunctionLibrary_LoadAnalytics::DocumentText' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_LoadAnalytics, FileType) == 0x000020, "Member 'FlameAnalyticsFunctionLibrary_LoadAnalytics::FileType' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_LoadAnalytics, ReturnValue) == 0x000021, "Member 'FlameAnalyticsFunctionLibrary_LoadAnalytics::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnalyticsFunctionLibrary.SaveAnalytics
// 0x0028 (0x0028 - 0x0000)
struct FlameAnalyticsFunctionLibrary_SaveAnalytics final
{
public:
	class FString                                 File;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnalyticsFileType                            FileType;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAnalyticsFunctionLibrary_SaveAnalytics) == 0x000008, "Wrong alignment on FlameAnalyticsFunctionLibrary_SaveAnalytics");
static_assert(sizeof(FlameAnalyticsFunctionLibrary_SaveAnalytics) == 0x000028, "Wrong size on FlameAnalyticsFunctionLibrary_SaveAnalytics");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_SaveAnalytics, File) == 0x000000, "Member 'FlameAnalyticsFunctionLibrary_SaveAnalytics::File' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_SaveAnalytics, Text) == 0x000010, "Member 'FlameAnalyticsFunctionLibrary_SaveAnalytics::Text' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_SaveAnalytics, FileType) == 0x000020, "Member 'FlameAnalyticsFunctionLibrary_SaveAnalytics::FileType' has a wrong offset!");
static_assert(offsetof(FlameAnalyticsFunctionLibrary_SaveAnalytics, ReturnValue) == 0x000021, "Member 'FlameAnalyticsFunctionLibrary_SaveAnalytics::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.DataProviderGetStructure
// 0x0018 (0x0018 - 0x0000)
struct CloudDataStructures_DataProviderGetStructure final
{
public:
	ECloudStructureTypes                          StructureType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudDataStructureBase*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataStructures_DataProviderGetStructure) == 0x000008, "Wrong alignment on CloudDataStructures_DataProviderGetStructure");
static_assert(sizeof(CloudDataStructures_DataProviderGetStructure) == 0x000018, "Wrong size on CloudDataStructures_DataProviderGetStructure");
static_assert(offsetof(CloudDataStructures_DataProviderGetStructure, StructureType) == 0x000000, "Member 'CloudDataStructures_DataProviderGetStructure::StructureType' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderGetStructure, WorldContextObject) == 0x000008, "Member 'CloudDataStructures_DataProviderGetStructure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderGetStructure, ReturnValue) == 0x000010, "Member 'CloudDataStructures_DataProviderGetStructure::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.DataProviderLoadAllStructures
// 0x0018 (0x0018 - 0x0000)
struct CloudDataStructures_DataProviderLoadAllStructures final
{
public:
	bool                                          SkipManualLoad;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataStructures_DataProviderLoadAllStructures) == 0x000008, "Wrong alignment on CloudDataStructures_DataProviderLoadAllStructures");
static_assert(sizeof(CloudDataStructures_DataProviderLoadAllStructures) == 0x000018, "Wrong size on CloudDataStructures_DataProviderLoadAllStructures");
static_assert(offsetof(CloudDataStructures_DataProviderLoadAllStructures, SkipManualLoad) == 0x000000, "Member 'CloudDataStructures_DataProviderLoadAllStructures::SkipManualLoad' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderLoadAllStructures, WorldContextObject) == 0x000008, "Member 'CloudDataStructures_DataProviderLoadAllStructures::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderLoadAllStructures, ReturnValue) == 0x000010, "Member 'CloudDataStructures_DataProviderLoadAllStructures::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.DataProviderLoadStructure
// 0x0018 (0x0018 - 0x0000)
struct CloudDataStructures_DataProviderLoadStructure final
{
public:
	ECloudStructureTypes                          StructureType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataStructures_DataProviderLoadStructure) == 0x000008, "Wrong alignment on CloudDataStructures_DataProviderLoadStructure");
static_assert(sizeof(CloudDataStructures_DataProviderLoadStructure) == 0x000018, "Wrong size on CloudDataStructures_DataProviderLoadStructure");
static_assert(offsetof(CloudDataStructures_DataProviderLoadStructure, StructureType) == 0x000000, "Member 'CloudDataStructures_DataProviderLoadStructure::StructureType' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderLoadStructure, WorldContextObject) == 0x000008, "Member 'CloudDataStructures_DataProviderLoadStructure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderLoadStructure, ReturnValue) == 0x000010, "Member 'CloudDataStructures_DataProviderLoadStructure::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.DataProviderUnLoadAllStructures
// 0x0018 (0x0018 - 0x0000)
struct CloudDataStructures_DataProviderUnLoadAllStructures final
{
public:
	bool                                          IncludeNonManual;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataStructures_DataProviderUnLoadAllStructures) == 0x000008, "Wrong alignment on CloudDataStructures_DataProviderUnLoadAllStructures");
static_assert(sizeof(CloudDataStructures_DataProviderUnLoadAllStructures) == 0x000018, "Wrong size on CloudDataStructures_DataProviderUnLoadAllStructures");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadAllStructures, IncludeNonManual) == 0x000000, "Member 'CloudDataStructures_DataProviderUnLoadAllStructures::IncludeNonManual' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadAllStructures, WorldContextObject) == 0x000008, "Member 'CloudDataStructures_DataProviderUnLoadAllStructures::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadAllStructures, ReturnValue) == 0x000010, "Member 'CloudDataStructures_DataProviderUnLoadAllStructures::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.DataProviderUnLoadStructure
// 0x0018 (0x0018 - 0x0000)
struct CloudDataStructures_DataProviderUnLoadStructure final
{
public:
	ECloudStructureTypes                          StructureType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataStructures_DataProviderUnLoadStructure) == 0x000008, "Wrong alignment on CloudDataStructures_DataProviderUnLoadStructure");
static_assert(sizeof(CloudDataStructures_DataProviderUnLoadStructure) == 0x000018, "Wrong size on CloudDataStructures_DataProviderUnLoadStructure");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadStructure, StructureType) == 0x000000, "Member 'CloudDataStructures_DataProviderUnLoadStructure::StructureType' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadStructure, WorldContextObject) == 0x000008, "Member 'CloudDataStructures_DataProviderUnLoadStructure::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_DataProviderUnLoadStructure, ReturnValue) == 0x000010, "Member 'CloudDataStructures_DataProviderUnLoadStructure::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataStructures.GetStructure
// 0x0010 (0x0010 - 0x0000)
struct CloudDataStructures_GetStructure final
{
public:
	ECloudStructureTypes                          StructureType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCloudDataStructureBase*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataStructures_GetStructure) == 0x000008, "Wrong alignment on CloudDataStructures_GetStructure");
static_assert(sizeof(CloudDataStructures_GetStructure) == 0x000010, "Wrong size on CloudDataStructures_GetStructure");
static_assert(offsetof(CloudDataStructures_GetStructure, StructureType) == 0x000000, "Member 'CloudDataStructures_GetStructure::StructureType' has a wrong offset!");
static_assert(offsetof(CloudDataStructures_GetStructure, ReturnValue) == 0x000008, "Member 'CloudDataStructures_GetStructure::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderFindTableByAssetTable
// 0x0038 (0x0038 - 0x0000)
struct CloudDataTables_DataProviderFindTableByAssetTable final
{
public:
	TSoftObjectPtr<class UDataTable>              AssetTable;                                        // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataTables_DataProviderFindTableByAssetTable) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderFindTableByAssetTable");
static_assert(sizeof(CloudDataTables_DataProviderFindTableByAssetTable) == 0x000038, "Wrong size on CloudDataTables_DataProviderFindTableByAssetTable");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByAssetTable, AssetTable) == 0x000000, "Member 'CloudDataTables_DataProviderFindTableByAssetTable::AssetTable' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByAssetTable, WorldContextObject) == 0x000028, "Member 'CloudDataTables_DataProviderFindTableByAssetTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByAssetTable, ReturnValue) == 0x000030, "Member 'CloudDataTables_DataProviderFindTableByAssetTable::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderFindTableByName
// 0x0018 (0x0018 - 0x0000)
struct CloudDataTables_DataProviderFindTableByName final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataTables_DataProviderFindTableByName) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderFindTableByName");
static_assert(sizeof(CloudDataTables_DataProviderFindTableByName) == 0x000018, "Wrong size on CloudDataTables_DataProviderFindTableByName");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByName, TableName) == 0x000000, "Member 'CloudDataTables_DataProviderFindTableByName::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByName, WorldContextObject) == 0x000008, "Member 'CloudDataTables_DataProviderFindTableByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderFindTableByName, ReturnValue) == 0x000010, "Member 'CloudDataTables_DataProviderFindTableByName::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderGetTableState
// 0x0018 (0x0018 - 0x0000)
struct CloudDataTables_DataProviderGetTableState final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataProviderTableState                       ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_DataProviderGetTableState) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderGetTableState");
static_assert(sizeof(CloudDataTables_DataProviderGetTableState) == 0x000018, "Wrong size on CloudDataTables_DataProviderGetTableState");
static_assert(offsetof(CloudDataTables_DataProviderGetTableState, TableName) == 0x000000, "Member 'CloudDataTables_DataProviderGetTableState::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderGetTableState, WorldContextObject) == 0x000008, "Member 'CloudDataTables_DataProviderGetTableState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderGetTableState, ReturnValue) == 0x000010, "Member 'CloudDataTables_DataProviderGetTableState::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderLoadDataTableByAssetTable
// 0x0038 (0x0038 - 0x0000)
struct CloudDataTables_DataProviderLoadDataTableByAssetTable final
{
public:
	TSoftObjectPtr<class UDataTable>              AssetTable;                                        // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_DataProviderLoadDataTableByAssetTable) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderLoadDataTableByAssetTable");
static_assert(sizeof(CloudDataTables_DataProviderLoadDataTableByAssetTable) == 0x000038, "Wrong size on CloudDataTables_DataProviderLoadDataTableByAssetTable");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByAssetTable, AssetTable) == 0x000000, "Member 'CloudDataTables_DataProviderLoadDataTableByAssetTable::AssetTable' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByAssetTable, WorldContextObject) == 0x000028, "Member 'CloudDataTables_DataProviderLoadDataTableByAssetTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByAssetTable, ReturnValue) == 0x000030, "Member 'CloudDataTables_DataProviderLoadDataTableByAssetTable::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderLoadDataTableByName
// 0x0018 (0x0018 - 0x0000)
struct CloudDataTables_DataProviderLoadDataTableByName final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_DataProviderLoadDataTableByName) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderLoadDataTableByName");
static_assert(sizeof(CloudDataTables_DataProviderLoadDataTableByName) == 0x000018, "Wrong size on CloudDataTables_DataProviderLoadDataTableByName");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByName, TableName) == 0x000000, "Member 'CloudDataTables_DataProviderLoadDataTableByName::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByName, WorldContextObject) == 0x000008, "Member 'CloudDataTables_DataProviderLoadDataTableByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderLoadDataTableByName, ReturnValue) == 0x000010, "Member 'CloudDataTables_DataProviderLoadDataTableByName::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderUnLoadDataTableByAssetTable
// 0x0038 (0x0038 - 0x0000)
struct CloudDataTables_DataProviderUnLoadDataTableByAssetTable final
{
public:
	TSoftObjectPtr<class UDataTable>              AssetTable;                                        // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_DataProviderUnLoadDataTableByAssetTable) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderUnLoadDataTableByAssetTable");
static_assert(sizeof(CloudDataTables_DataProviderUnLoadDataTableByAssetTable) == 0x000038, "Wrong size on CloudDataTables_DataProviderUnLoadDataTableByAssetTable");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByAssetTable, AssetTable) == 0x000000, "Member 'CloudDataTables_DataProviderUnLoadDataTableByAssetTable::AssetTable' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByAssetTable, WorldContextObject) == 0x000028, "Member 'CloudDataTables_DataProviderUnLoadDataTableByAssetTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByAssetTable, ReturnValue) == 0x000030, "Member 'CloudDataTables_DataProviderUnLoadDataTableByAssetTable::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.DataProviderUnLoadDataTableByName
// 0x0018 (0x0018 - 0x0000)
struct CloudDataTables_DataProviderUnLoadDataTableByName final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_DataProviderUnLoadDataTableByName) == 0x000008, "Wrong alignment on CloudDataTables_DataProviderUnLoadDataTableByName");
static_assert(sizeof(CloudDataTables_DataProviderUnLoadDataTableByName) == 0x000018, "Wrong size on CloudDataTables_DataProviderUnLoadDataTableByName");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByName, TableName) == 0x000000, "Member 'CloudDataTables_DataProviderUnLoadDataTableByName::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByName, WorldContextObject) == 0x000008, "Member 'CloudDataTables_DataProviderUnLoadDataTableByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudDataTables_DataProviderUnLoadDataTableByName, ReturnValue) == 0x000010, "Member 'CloudDataTables_DataProviderUnLoadDataTableByName::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.FindTableByAssetTable
// 0x0030 (0x0030 - 0x0000)
struct CloudDataTables_FindTableByAssetTable final
{
public:
	TSoftObjectPtr<class UDataTable>              AssetTable;                                        // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataTables_FindTableByAssetTable) == 0x000008, "Wrong alignment on CloudDataTables_FindTableByAssetTable");
static_assert(sizeof(CloudDataTables_FindTableByAssetTable) == 0x000030, "Wrong size on CloudDataTables_FindTableByAssetTable");
static_assert(offsetof(CloudDataTables_FindTableByAssetTable, AssetTable) == 0x000000, "Member 'CloudDataTables_FindTableByAssetTable::AssetTable' has a wrong offset!");
static_assert(offsetof(CloudDataTables_FindTableByAssetTable, ReturnValue) == 0x000028, "Member 'CloudDataTables_FindTableByAssetTable::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.FindTableByName
// 0x0010 (0x0010 - 0x0000)
struct CloudDataTables_FindTableByName final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudDataTables_FindTableByName) == 0x000008, "Wrong alignment on CloudDataTables_FindTableByName");
static_assert(sizeof(CloudDataTables_FindTableByName) == 0x000010, "Wrong size on CloudDataTables_FindTableByName");
static_assert(offsetof(CloudDataTables_FindTableByName, TableName) == 0x000000, "Member 'CloudDataTables_FindTableByName::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_FindTableByName, ReturnValue) == 0x000008, "Member 'CloudDataTables_FindTableByName::ReturnValue' has a wrong offset!");

// Function Flame.CloudDataTables.GetDataTableState
// 0x000C (0x000C - 0x0000)
struct CloudDataTables_GetDataTableState final
{
public:
	class FName                                   TableName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataProviderTableState                       ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudDataTables_GetDataTableState) == 0x000004, "Wrong alignment on CloudDataTables_GetDataTableState");
static_assert(sizeof(CloudDataTables_GetDataTableState) == 0x00000C, "Wrong size on CloudDataTables_GetDataTableState");
static_assert(offsetof(CloudDataTables_GetDataTableState, TableName) == 0x000000, "Member 'CloudDataTables_GetDataTableState::TableName' has a wrong offset!");
static_assert(offsetof(CloudDataTables_GetDataTableState, ReturnValue) == 0x000008, "Member 'CloudDataTables_GetDataTableState::ReturnValue' has a wrong offset!");

// Function Flame.CloudGlobalFunctions.GetMapsCloudInfo
// 0x0004 (0x0004 - 0x0000)
struct CloudGlobalFunctions_GetMapsCloudInfo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudGlobalFunctions_GetMapsCloudInfo) == 0x000004, "Wrong alignment on CloudGlobalFunctions_GetMapsCloudInfo");
static_assert(sizeof(CloudGlobalFunctions_GetMapsCloudInfo) == 0x000004, "Wrong size on CloudGlobalFunctions_GetMapsCloudInfo");
static_assert(offsetof(CloudGlobalFunctions_GetMapsCloudInfo, ReturnValue) == 0x000000, "Member 'CloudGlobalFunctions_GetMapsCloudInfo::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.CloudGlobalFunctions.GetMapsCloudInfoDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FMapInfoCloud>                  MapsInfo;                                          // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature");
static_assert(sizeof(CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature) == 0x000068, "Wrong size on CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature");
static_assert(offsetof(CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature, MapsInfo) == 0x000058, "Member 'CloudGlobalFunctions_GetMapsCloudInfoDelegate__DelegateSignature::MapsInfo' has a wrong offset!");

// Function Flame.CloudNotificationSystem.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct CloudNotificationSystem_GetGameInstance final
{
public:
	class UFlameGameInstance*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudNotificationSystem_GetGameInstance) == 0x000008, "Wrong alignment on CloudNotificationSystem_GetGameInstance");
static_assert(sizeof(CloudNotificationSystem_GetGameInstance) == 0x000008, "Wrong size on CloudNotificationSystem_GetGameInstance");
static_assert(offsetof(CloudNotificationSystem_GetGameInstance, ReturnValue) == 0x000000, "Member 'CloudNotificationSystem_GetGameInstance::ReturnValue' has a wrong offset!");

// Function Flame.CloudNotificationSystem.ProcessCloudNotification
// 0x0018 (0x0018 - 0x0000)
struct CloudNotificationSystem_ProcessCloudNotification final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudNotificationMessageEvent         NotificationMessageEvent;                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudNotificationSystem_ProcessCloudNotification) == 0x000008, "Wrong alignment on CloudNotificationSystem_ProcessCloudNotification");
static_assert(sizeof(CloudNotificationSystem_ProcessCloudNotification) == 0x000018, "Wrong size on CloudNotificationSystem_ProcessCloudNotification");
static_assert(offsetof(CloudNotificationSystem_ProcessCloudNotification, Userid) == 0x000000, "Member 'CloudNotificationSystem_ProcessCloudNotification::Userid' has a wrong offset!");
static_assert(offsetof(CloudNotificationSystem_ProcessCloudNotification, NotificationMessageEvent) == 0x000010, "Member 'CloudNotificationSystem_ProcessCloudNotification::NotificationMessageEvent' has a wrong offset!");

// Function Flame.CloudNotificationSystem.ShowCloudNotification
// 0x0018 (0x0018 - 0x0000)
struct CloudNotificationSystem_ShowCloudNotification final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudNotificationMessageEvent         NotificationMessageEvent;                          // 0x0010(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudNotificationSystem_ShowCloudNotification) == 0x000008, "Wrong alignment on CloudNotificationSystem_ShowCloudNotification");
static_assert(sizeof(CloudNotificationSystem_ShowCloudNotification) == 0x000018, "Wrong size on CloudNotificationSystem_ShowCloudNotification");
static_assert(offsetof(CloudNotificationSystem_ShowCloudNotification, Userid) == 0x000000, "Member 'CloudNotificationSystem_ShowCloudNotification::Userid' has a wrong offset!");
static_assert(offsetof(CloudNotificationSystem_ShowCloudNotification, NotificationMessageEvent) == 0x000010, "Member 'CloudNotificationSystem_ShowCloudNotification::NotificationMessageEvent' has a wrong offset!");

// Function Flame.CloudNotificationSystem.Tick
// 0x0004 (0x0004 - 0x0000)
struct CloudNotificationSystem_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudNotificationSystem_Tick) == 0x000004, "Wrong alignment on CloudNotificationSystem_Tick");
static_assert(sizeof(CloudNotificationSystem_Tick) == 0x000004, "Wrong size on CloudNotificationSystem_Tick");
static_assert(offsetof(CloudNotificationSystem_Tick, DeltaTime) == 0x000000, "Member 'CloudNotificationSystem_Tick::DeltaTime' has a wrong offset!");

// Function Flame.CloudRawDataUtils.GetDataAsJsonObject
// 0x0058 (0x0058 - 0x0000)
struct CloudRawDataUtils_GetDataAsJsonObject final
{
public:
	struct FCloudRawDataInfo                      Info;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudRawDataUtils_GetDataAsJsonObject) == 0x000008, "Wrong alignment on CloudRawDataUtils_GetDataAsJsonObject");
static_assert(sizeof(CloudRawDataUtils_GetDataAsJsonObject) == 0x000058, "Wrong size on CloudRawDataUtils_GetDataAsJsonObject");
static_assert(offsetof(CloudRawDataUtils_GetDataAsJsonObject, Info) == 0x000000, "Member 'CloudRawDataUtils_GetDataAsJsonObject::Info' has a wrong offset!");
static_assert(offsetof(CloudRawDataUtils_GetDataAsJsonObject, ReturnValue) == 0x000050, "Member 'CloudRawDataUtils_GetDataAsJsonObject::ReturnValue' has a wrong offset!");

// Function Flame.CloudRawDataUtils.GetDataAsJsonValue
// 0x0058 (0x0058 - 0x0000)
struct CloudRawDataUtils_GetDataAsJsonValue final
{
public:
	struct FCloudRawDataInfo                      Info;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonValue*                             ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudRawDataUtils_GetDataAsJsonValue) == 0x000008, "Wrong alignment on CloudRawDataUtils_GetDataAsJsonValue");
static_assert(sizeof(CloudRawDataUtils_GetDataAsJsonValue) == 0x000058, "Wrong size on CloudRawDataUtils_GetDataAsJsonValue");
static_assert(offsetof(CloudRawDataUtils_GetDataAsJsonValue, Info) == 0x000000, "Member 'CloudRawDataUtils_GetDataAsJsonValue::Info' has a wrong offset!");
static_assert(offsetof(CloudRawDataUtils_GetDataAsJsonValue, ReturnValue) == 0x000050, "Member 'CloudRawDataUtils_GetDataAsJsonValue::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetCloudEnvironment
// 0x0018 (0x0018 - 0x0000)
struct CloudSystem_GetCloudEnvironment final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetCloudEnvironment) == 0x000008, "Wrong alignment on CloudSystem_GetCloudEnvironment");
static_assert(sizeof(CloudSystem_GetCloudEnvironment) == 0x000018, "Wrong size on CloudSystem_GetCloudEnvironment");
static_assert(offsetof(CloudSystem_GetCloudEnvironment, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetCloudEnvironment::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetCloudEnvironment, ReturnValue) == 0x000008, "Member 'CloudSystem_GetCloudEnvironment::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetCloudFunctions
// 0x0010 (0x0010 - 0x0000)
struct CloudSystem_GetCloudFunctions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudGlobalFunctions*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetCloudFunctions) == 0x000008, "Wrong alignment on CloudSystem_GetCloudFunctions");
static_assert(sizeof(CloudSystem_GetCloudFunctions) == 0x000010, "Wrong size on CloudSystem_GetCloudFunctions");
static_assert(offsetof(CloudSystem_GetCloudFunctions, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetCloudFunctions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetCloudFunctions, ReturnValue) == 0x000008, "Member 'CloudSystem_GetCloudFunctions::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetCloudTime
// 0x0010 (0x0010 - 0x0000)
struct CloudSystem_GetCloudTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetCloudTime) == 0x000008, "Wrong alignment on CloudSystem_GetCloudTime");
static_assert(sizeof(CloudSystem_GetCloudTime) == 0x000010, "Wrong size on CloudSystem_GetCloudTime");
static_assert(offsetof(CloudSystem_GetCloudTime, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetCloudTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetCloudTime, ReturnValue) == 0x000008, "Member 'CloudSystem_GetCloudTime::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetCloudVersion
// 0x0018 (0x0018 - 0x0000)
struct CloudSystem_GetCloudVersion final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetCloudVersion) == 0x000008, "Wrong alignment on CloudSystem_GetCloudVersion");
static_assert(sizeof(CloudSystem_GetCloudVersion) == 0x000018, "Wrong size on CloudSystem_GetCloudVersion");
static_assert(offsetof(CloudSystem_GetCloudVersion, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetCloudVersion::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetCloudVersion, ReturnValue) == 0x000008, "Member 'CloudSystem_GetCloudVersion::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetUserAnalyticsId
// 0x0018 (0x0018 - 0x0000)
struct CloudSystem_GetUserAnalyticsId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetUserAnalyticsId) == 0x000008, "Wrong alignment on CloudSystem_GetUserAnalyticsId");
static_assert(sizeof(CloudSystem_GetUserAnalyticsId) == 0x000018, "Wrong size on CloudSystem_GetUserAnalyticsId");
static_assert(offsetof(CloudSystem_GetUserAnalyticsId, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetUserAnalyticsId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetUserAnalyticsId, ReturnValue) == 0x000008, "Member 'CloudSystem_GetUserAnalyticsId::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetUserCloudId
// 0x0018 (0x0018 - 0x0000)
struct CloudSystem_GetUserCloudId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetUserCloudId) == 0x000008, "Wrong alignment on CloudSystem_GetUserCloudId");
static_assert(sizeof(CloudSystem_GetUserCloudId) == 0x000018, "Wrong size on CloudSystem_GetUserCloudId");
static_assert(offsetof(CloudSystem_GetUserCloudId, WorldContextObject) == 0x000000, "Member 'CloudSystem_GetUserCloudId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetUserCloudId, ReturnValue) == 0x000008, "Member 'CloudSystem_GetUserCloudId::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.InvalidCloudRequest
// 0x0010 (0x0010 - 0x0000)
struct CloudSystem_InvalidCloudRequest final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudSystem_InvalidCloudRequest) == 0x000008, "Wrong alignment on CloudSystem_InvalidCloudRequest");
static_assert(sizeof(CloudSystem_InvalidCloudRequest) == 0x000010, "Wrong size on CloudSystem_InvalidCloudRequest");
static_assert(offsetof(CloudSystem_InvalidCloudRequest, WorldContextObject) == 0x000000, "Member 'CloudSystem_InvalidCloudRequest::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_InvalidCloudRequest, ReturnValue) == 0x000008, "Member 'CloudSystem_InvalidCloudRequest::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.RequestLogoutFromCloud
// 0x0028 (0x0028 - 0x0000)
struct CloudSystem_RequestLogoutFromCloud final
{
public:
	class FText                                   DisconnectMessage;                                 // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudSystem_RequestLogoutFromCloud) == 0x000008, "Wrong alignment on CloudSystem_RequestLogoutFromCloud");
static_assert(sizeof(CloudSystem_RequestLogoutFromCloud) == 0x000028, "Wrong size on CloudSystem_RequestLogoutFromCloud");
static_assert(offsetof(CloudSystem_RequestLogoutFromCloud, DisconnectMessage) == 0x000000, "Member 'CloudSystem_RequestLogoutFromCloud::DisconnectMessage' has a wrong offset!");
static_assert(offsetof(CloudSystem_RequestLogoutFromCloud, WorldContextObject) == 0x000018, "Member 'CloudSystem_RequestLogoutFromCloud::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_RequestLogoutFromCloud, ReturnValue) == 0x000020, "Member 'CloudSystem_RequestLogoutFromCloud::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.SendLogToCloud
// 0x0040 (0x0040 - 0x0000)
struct CloudSystem_SendLogToCloud final
{
public:
	ECloudLogSeverity                             Severity;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogCategory;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            Data;                                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudSystem_SendLogToCloud) == 0x000008, "Wrong alignment on CloudSystem_SendLogToCloud");
static_assert(sizeof(CloudSystem_SendLogToCloud) == 0x000040, "Wrong size on CloudSystem_SendLogToCloud");
static_assert(offsetof(CloudSystem_SendLogToCloud, Severity) == 0x000000, "Member 'CloudSystem_SendLogToCloud::Severity' has a wrong offset!");
static_assert(offsetof(CloudSystem_SendLogToCloud, LogCategory) == 0x000008, "Member 'CloudSystem_SendLogToCloud::LogCategory' has a wrong offset!");
static_assert(offsetof(CloudSystem_SendLogToCloud, Message) == 0x000018, "Member 'CloudSystem_SendLogToCloud::Message' has a wrong offset!");
static_assert(offsetof(CloudSystem_SendLogToCloud, Data) == 0x000028, "Member 'CloudSystem_SendLogToCloud::Data' has a wrong offset!");
static_assert(offsetof(CloudSystem_SendLogToCloud, WorldContextObject) == 0x000030, "Member 'CloudSystem_SendLogToCloud::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_SendLogToCloud, ReturnValue) == 0x000038, "Member 'CloudSystem_SendLogToCloud::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.SetCloudRequestResultLevel
// 0x0018 (0x0018 - 0x0000)
struct CloudSystem_SetCloudRequestResultLevel final
{
public:
	int32                                         RequestId;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudRequestResultLevel                      NewLevel;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CloudSystem_SetCloudRequestResultLevel) == 0x000008, "Wrong alignment on CloudSystem_SetCloudRequestResultLevel");
static_assert(sizeof(CloudSystem_SetCloudRequestResultLevel) == 0x000018, "Wrong size on CloudSystem_SetCloudRequestResultLevel");
static_assert(offsetof(CloudSystem_SetCloudRequestResultLevel, RequestId) == 0x000000, "Member 'CloudSystem_SetCloudRequestResultLevel::RequestId' has a wrong offset!");
static_assert(offsetof(CloudSystem_SetCloudRequestResultLevel, NewLevel) == 0x000004, "Member 'CloudSystem_SetCloudRequestResultLevel::NewLevel' has a wrong offset!");
static_assert(offsetof(CloudSystem_SetCloudRequestResultLevel, WorldContextObject) == 0x000008, "Member 'CloudSystem_SetCloudRequestResultLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CloudSystem_SetCloudRequestResultLevel, ReturnValue) == 0x000010, "Member 'CloudSystem_SetCloudRequestResultLevel::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.CloudSystem.CloudSystemStatusChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct CloudSystem_CloudSystemStatusChanged__DelegateSignature final
{
public:
	ECloudManagerState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudManagerState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_CloudSystemStatusChanged__DelegateSignature) == 0x000001, "Wrong alignment on CloudSystem_CloudSystemStatusChanged__DelegateSignature");
static_assert(sizeof(CloudSystem_CloudSystemStatusChanged__DelegateSignature) == 0x000002, "Wrong size on CloudSystem_CloudSystemStatusChanged__DelegateSignature");
static_assert(offsetof(CloudSystem_CloudSystemStatusChanged__DelegateSignature, OldState) == 0x000000, "Member 'CloudSystem_CloudSystemStatusChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(CloudSystem_CloudSystemStatusChanged__DelegateSignature, NewState) == 0x000001, "Member 'CloudSystem_CloudSystemStatusChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.CloudSystem.GetCloudUserName
// 0x0010 (0x0010 - 0x0000)
struct CloudSystem_GetCloudUserName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetCloudUserName) == 0x000008, "Wrong alignment on CloudSystem_GetCloudUserName");
static_assert(sizeof(CloudSystem_GetCloudUserName) == 0x000010, "Wrong size on CloudSystem_GetCloudUserName");
static_assert(offsetof(CloudSystem_GetCloudUserName, ReturnValue) == 0x000000, "Member 'CloudSystem_GetCloudUserName::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetState
// 0x0001 (0x0001 - 0x0000)
struct CloudSystem_GetState final
{
public:
	ECloudManagerState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetState) == 0x000001, "Wrong alignment on CloudSystem_GetState");
static_assert(sizeof(CloudSystem_GetState) == 0x000001, "Wrong size on CloudSystem_GetState");
static_assert(offsetof(CloudSystem_GetState, ReturnValue) == 0x000000, "Member 'CloudSystem_GetState::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetStateInfo
// 0x0020 (0x0020 - 0x0000)
struct CloudSystem_GetStateInfo final
{
public:
	struct FCloudManagerStateInfo                 ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetStateInfo) == 0x000008, "Wrong alignment on CloudSystem_GetStateInfo");
static_assert(sizeof(CloudSystem_GetStateInfo) == 0x000020, "Wrong size on CloudSystem_GetStateInfo");
static_assert(offsetof(CloudSystem_GetStateInfo, ReturnValue) == 0x000000, "Member 'CloudSystem_GetStateInfo::ReturnValue' has a wrong offset!");

// Function Flame.CloudSystem.GetStateStringFieldFromJson
// 0x0020 (0x0020 - 0x0000)
struct CloudSystem_GetStateStringFieldFromJson final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CloudSystem_GetStateStringFieldFromJson) == 0x000008, "Wrong alignment on CloudSystem_GetStateStringFieldFromJson");
static_assert(sizeof(CloudSystem_GetStateStringFieldFromJson) == 0x000020, "Wrong size on CloudSystem_GetStateStringFieldFromJson");
static_assert(offsetof(CloudSystem_GetStateStringFieldFromJson, FieldName) == 0x000000, "Member 'CloudSystem_GetStateStringFieldFromJson::FieldName' has a wrong offset!");
static_assert(offsetof(CloudSystem_GetStateStringFieldFromJson, ReturnValue) == 0x000010, "Member 'CloudSystem_GetStateStringFieldFromJson::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.AddCommodity
// 0x0020 (0x0020 - 0x0000)
struct CommoditySpawnManager_AddCommodity final
{
public:
	TSubclassOf<class AActor>                     Commodity;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnProbability;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommodityManagerDistributionAlgorithm        DistributionAlgorithm;                             // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_AddCommodity) == 0x000008, "Wrong alignment on CommoditySpawnManager_AddCommodity");
static_assert(sizeof(CommoditySpawnManager_AddCommodity) == 0x000020, "Wrong size on CommoditySpawnManager_AddCommodity");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, Commodity) == 0x000000, "Member 'CommoditySpawnManager_AddCommodity::Commodity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, MinCapacity) == 0x000008, "Member 'CommoditySpawnManager_AddCommodity::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, MaxCapacity) == 0x00000C, "Member 'CommoditySpawnManager_AddCommodity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, MinPriority) == 0x000010, "Member 'CommoditySpawnManager_AddCommodity::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, MaxPriority) == 0x000014, "Member 'CommoditySpawnManager_AddCommodity::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, SpawnProbability) == 0x000018, "Member 'CommoditySpawnManager_AddCommodity::SpawnProbability' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, DistributionAlgorithm) == 0x00001C, "Member 'CommoditySpawnManager_AddCommodity::DistributionAlgorithm' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_AddCommodity, ReturnValue) == 0x00001D, "Member 'CommoditySpawnManager_AddCommodity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.ClearCommodities
// 0x0004 (0x0004 - 0x0000)
struct CommoditySpawnManager_ClearCommodities final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnManager_ClearCommodities) == 0x000004, "Wrong alignment on CommoditySpawnManager_ClearCommodities");
static_assert(sizeof(CommoditySpawnManager_ClearCommodities) == 0x000004, "Wrong size on CommoditySpawnManager_ClearCommodities");
static_assert(offsetof(CommoditySpawnManager_ClearCommodities, ReturnValue) == 0x000000, "Member 'CommoditySpawnManager_ClearCommodities::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.CommoditySpawnManager.CommoditiesSpawned__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CommoditySpawnManager_CommoditiesSpawned__DelegateSignature final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnManager_CommoditiesSpawned__DelegateSignature) == 0x000001, "Wrong alignment on CommoditySpawnManager_CommoditiesSpawned__DelegateSignature");
static_assert(sizeof(CommoditySpawnManager_CommoditiesSpawned__DelegateSignature) == 0x000001, "Wrong size on CommoditySpawnManager_CommoditiesSpawned__DelegateSignature");
static_assert(offsetof(CommoditySpawnManager_CommoditiesSpawned__DelegateSignature, Result) == 0x000000, "Member 'CommoditySpawnManager_CommoditiesSpawned__DelegateSignature::Result' has a wrong offset!");

// Function Flame.CommoditySpawnManager.RemoveCommodity
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnManager_RemoveCommodity final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_RemoveCommodity) == 0x000004, "Wrong alignment on CommoditySpawnManager_RemoveCommodity");
static_assert(sizeof(CommoditySpawnManager_RemoveCommodity) == 0x000008, "Wrong size on CommoditySpawnManager_RemoveCommodity");
static_assert(offsetof(CommoditySpawnManager_RemoveCommodity, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_RemoveCommodity::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_RemoveCommodity, ReturnValue) == 0x000004, "Member 'CommoditySpawnManager_RemoveCommodity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityCapacity
// 0x0010 (0x0010 - 0x0000)
struct CommoditySpawnManager_SetCommodityCapacity final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityCapacity) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityCapacity");
static_assert(sizeof(CommoditySpawnManager_SetCommodityCapacity) == 0x000010, "Wrong size on CommoditySpawnManager_SetCommodityCapacity");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacity, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityCapacity::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacity, MinCapacity) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityCapacity::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacity, MaxCapacity) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityCapacity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacity, ReturnValue) == 0x00000C, "Member 'CommoditySpawnManager_SetCommodityCapacity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityCapacityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_SetCommodityCapacityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityCapacityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityCapacityMaximum");
static_assert(sizeof(CommoditySpawnManager_SetCommodityCapacityMaximum) == 0x00000C, "Wrong size on CommoditySpawnManager_SetCommodityCapacityMaximum");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityCapacityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMaximum, MaxCapacity) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityCapacityMaximum::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityCapacityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityCapacityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_SetCommodityCapacityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityCapacityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityCapacityMinimum");
static_assert(sizeof(CommoditySpawnManager_SetCommodityCapacityMinimum) == 0x00000C, "Wrong size on CommoditySpawnManager_SetCommodityCapacityMinimum");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityCapacityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMinimum, MinCapacity) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityCapacityMinimum::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityCapacityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityCapacityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityPriority
// 0x0010 (0x0010 - 0x0000)
struct CommoditySpawnManager_SetCommodityPriority final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityPriority) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityPriority");
static_assert(sizeof(CommoditySpawnManager_SetCommodityPriority) == 0x000010, "Wrong size on CommoditySpawnManager_SetCommodityPriority");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriority, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityPriority::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriority, MinPriority) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityPriority::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriority, MaxPriority) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityPriority::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriority, ReturnValue) == 0x00000C, "Member 'CommoditySpawnManager_SetCommodityPriority::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityPriorityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_SetCommodityPriorityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityPriorityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityPriorityMaximum");
static_assert(sizeof(CommoditySpawnManager_SetCommodityPriorityMaximum) == 0x00000C, "Wrong size on CommoditySpawnManager_SetCommodityPriorityMaximum");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityPriorityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMaximum, MaxPriority) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityPriorityMaximum::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityPriorityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SetCommodityPriorityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_SetCommodityPriorityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SetCommodityPriorityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnManager_SetCommodityPriorityMinimum");
static_assert(sizeof(CommoditySpawnManager_SetCommodityPriorityMinimum) == 0x00000C, "Wrong size on CommoditySpawnManager_SetCommodityPriorityMinimum");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_SetCommodityPriorityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMinimum, MinPriority) == 0x000004, "Member 'CommoditySpawnManager_SetCommodityPriorityMinimum::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SetCommodityPriorityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_SetCommodityPriorityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.SpawnCommodities
// 0x0018 (0x0018 - 0x0000)
struct CommoditySpawnManager_SpawnCommodities final
{
public:
	TArray<struct FManagerCommodityDescriptor>    InCommodities;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IncompleteData;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_SpawnCommodities) == 0x000008, "Wrong alignment on CommoditySpawnManager_SpawnCommodities");
static_assert(sizeof(CommoditySpawnManager_SpawnCommodities) == 0x000018, "Wrong size on CommoditySpawnManager_SpawnCommodities");
static_assert(offsetof(CommoditySpawnManager_SpawnCommodities, InCommodities) == 0x000000, "Member 'CommoditySpawnManager_SpawnCommodities::InCommodities' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_SpawnCommodities, IncompleteData) == 0x000010, "Member 'CommoditySpawnManager_SpawnCommodities::IncompleteData' has a wrong offset!");

// Function Flame.CommoditySpawnManager.GetCommodityCapacityMaximum
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnManager_GetCommodityCapacityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnManager_GetCommodityCapacityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnManager_GetCommodityCapacityMaximum");
static_assert(sizeof(CommoditySpawnManager_GetCommodityCapacityMaximum) == 0x000008, "Wrong size on CommoditySpawnManager_GetCommodityCapacityMaximum");
static_assert(offsetof(CommoditySpawnManager_GetCommodityCapacityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_GetCommodityCapacityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityCapacityMaximum, ReturnValue) == 0x000004, "Member 'CommoditySpawnManager_GetCommodityCapacityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.GetCommodityCapacityMinimum
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnManager_GetCommodityCapacityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnManager_GetCommodityCapacityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnManager_GetCommodityCapacityMinimum");
static_assert(sizeof(CommoditySpawnManager_GetCommodityCapacityMinimum) == 0x000008, "Wrong size on CommoditySpawnManager_GetCommodityCapacityMinimum");
static_assert(offsetof(CommoditySpawnManager_GetCommodityCapacityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_GetCommodityCapacityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityCapacityMinimum, ReturnValue) == 0x000004, "Member 'CommoditySpawnManager_GetCommodityCapacityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.GetCommodityPriorityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_GetCommodityPriorityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_GetCommodityPriorityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnManager_GetCommodityPriorityMaximum");
static_assert(sizeof(CommoditySpawnManager_GetCommodityPriorityMaximum) == 0x00000C, "Wrong size on CommoditySpawnManager_GetCommodityPriorityMaximum");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_GetCommodityPriorityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMaximum, Value) == 0x000004, "Member 'CommoditySpawnManager_GetCommodityPriorityMaximum::Value' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_GetCommodityPriorityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.GetCommodityPriorityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnManager_GetCommodityPriorityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnManager_GetCommodityPriorityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnManager_GetCommodityPriorityMinimum");
static_assert(sizeof(CommoditySpawnManager_GetCommodityPriorityMinimum) == 0x00000C, "Wrong size on CommoditySpawnManager_GetCommodityPriorityMinimum");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnManager_GetCommodityPriorityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMinimum, Value) == 0x000004, "Member 'CommoditySpawnManager_GetCommodityPriorityMinimum::Value' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_GetCommodityPriorityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnManager_GetCommodityPriorityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnManager.OnCommodityParamsModify
// 0x0030 (0x0030 - 0x0000)
struct CommoditySpawnManager_OnCommodityParamsModify final
{
public:
	TSubclassOf<class AActor>                     CommodityType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnProbabilityIn;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinIn;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxIn;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMinIn;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMaxIn;                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnProbabilityOut;                               // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinOut;                                    // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxOut;                                    // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMinOut;                             // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMaxOut;                             // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnManager_OnCommodityParamsModify) == 0x000008, "Wrong alignment on CommoditySpawnManager_OnCommodityParamsModify");
static_assert(sizeof(CommoditySpawnManager_OnCommodityParamsModify) == 0x000030, "Wrong size on CommoditySpawnManager_OnCommodityParamsModify");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, CommodityType) == 0x000000, "Member 'CommoditySpawnManager_OnCommodityParamsModify::CommodityType' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SpawnProbabilityIn) == 0x000008, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SpawnProbabilityIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, CapacityMinIn) == 0x00000C, "Member 'CommoditySpawnManager_OnCommodityParamsModify::CapacityMinIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, CapacityMaxIn) == 0x000010, "Member 'CommoditySpawnManager_OnCommodityParamsModify::CapacityMaxIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SubObjectsLimitMinIn) == 0x000014, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SubObjectsLimitMinIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SubObjectsLimitMaxIn) == 0x000018, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SubObjectsLimitMaxIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SpawnProbabilityOut) == 0x00001C, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SpawnProbabilityOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, CapacityMinOut) == 0x000020, "Member 'CommoditySpawnManager_OnCommodityParamsModify::CapacityMinOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, CapacityMaxOut) == 0x000024, "Member 'CommoditySpawnManager_OnCommodityParamsModify::CapacityMaxOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SubObjectsLimitMinOut) == 0x000028, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SubObjectsLimitMinOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnManager_OnCommodityParamsModify, SubObjectsLimitMaxOut) == 0x00002C, "Member 'CommoditySpawnManager_OnCommodityParamsModify::SubObjectsLimitMaxOut' has a wrong offset!");

// Function Flame.CommoditySpawnNode.OnCommodityParamsModify
// 0x0028 (0x0028 - 0x0000)
struct CommoditySpawnNode_OnCommodityParamsModify final
{
public:
	TSubclassOf<class AActor>                     CommodityType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinIn;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxIn;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMinIn;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMaxIn;                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinOut;                                    // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxOut;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMinOut;                             // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubObjectsLimitMaxOut;                             // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnNode_OnCommodityParamsModify) == 0x000008, "Wrong alignment on CommoditySpawnNode_OnCommodityParamsModify");
static_assert(sizeof(CommoditySpawnNode_OnCommodityParamsModify) == 0x000028, "Wrong size on CommoditySpawnNode_OnCommodityParamsModify");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, CommodityType) == 0x000000, "Member 'CommoditySpawnNode_OnCommodityParamsModify::CommodityType' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, CapacityMinIn) == 0x000008, "Member 'CommoditySpawnNode_OnCommodityParamsModify::CapacityMinIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, CapacityMaxIn) == 0x00000C, "Member 'CommoditySpawnNode_OnCommodityParamsModify::CapacityMaxIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, SubObjectsLimitMinIn) == 0x000010, "Member 'CommoditySpawnNode_OnCommodityParamsModify::SubObjectsLimitMinIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, SubObjectsLimitMaxIn) == 0x000014, "Member 'CommoditySpawnNode_OnCommodityParamsModify::SubObjectsLimitMaxIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, CapacityMinOut) == 0x000018, "Member 'CommoditySpawnNode_OnCommodityParamsModify::CapacityMinOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, CapacityMaxOut) == 0x00001C, "Member 'CommoditySpawnNode_OnCommodityParamsModify::CapacityMaxOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, SubObjectsLimitMinOut) == 0x000020, "Member 'CommoditySpawnNode_OnCommodityParamsModify::SubObjectsLimitMinOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnNode_OnCommodityParamsModify, SubObjectsLimitMaxOut) == 0x000024, "Member 'CommoditySpawnNode_OnCommodityParamsModify::SubObjectsLimitMaxOut' has a wrong offset!");

// Function Flame.FlameAssetManager.GetSoftClassReference
// 0x0050 (0x0050 - 0x0000)
struct FlameAssetManager_GetSoftClassReference final
{
public:
	TSoftClassPtr<class UClass>                   Reference;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_GetSoftClassReference) == 0x000008, "Wrong alignment on FlameAssetManager_GetSoftClassReference");
static_assert(sizeof(FlameAssetManager_GetSoftClassReference) == 0x000050, "Wrong size on FlameAssetManager_GetSoftClassReference");
static_assert(offsetof(FlameAssetManager_GetSoftClassReference, Reference) == 0x000000, "Member 'FlameAssetManager_GetSoftClassReference::Reference' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_GetSoftClassReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_GetSoftClassReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.GetSoftReference
// 0x0050 (0x0050 - 0x0000)
struct FlameAssetManager_GetSoftReference final
{
public:
	TSoftObjectPtr<class UObject>                 Reference;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UObject>                 ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_GetSoftReference) == 0x000008, "Wrong alignment on FlameAssetManager_GetSoftReference");
static_assert(sizeof(FlameAssetManager_GetSoftReference) == 0x000050, "Wrong size on FlameAssetManager_GetSoftReference");
static_assert(offsetof(FlameAssetManager_GetSoftReference, Reference) == 0x000000, "Member 'FlameAssetManager_GetSoftReference::Reference' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_GetSoftReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_GetSoftReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.LoadSoftClassReference
// 0x0030 (0x0030 - 0x0000)
struct FlameAssetManager_LoadSoftClassReference final
{
public:
	TSoftClassPtr<class UClass>                   Reference;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_LoadSoftClassReference) == 0x000008, "Wrong alignment on FlameAssetManager_LoadSoftClassReference");
static_assert(sizeof(FlameAssetManager_LoadSoftClassReference) == 0x000030, "Wrong size on FlameAssetManager_LoadSoftClassReference");
static_assert(offsetof(FlameAssetManager_LoadSoftClassReference, Reference) == 0x000000, "Member 'FlameAssetManager_LoadSoftClassReference::Reference' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_LoadSoftClassReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_LoadSoftClassReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.LoadSoftReference
// 0x0030 (0x0030 - 0x0000)
struct FlameAssetManager_LoadSoftReference final
{
public:
	TSoftObjectPtr<class UObject>                 Reference;                                         // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_LoadSoftReference) == 0x000008, "Wrong alignment on FlameAssetManager_LoadSoftReference");
static_assert(sizeof(FlameAssetManager_LoadSoftReference) == 0x000030, "Wrong size on FlameAssetManager_LoadSoftReference");
static_assert(offsetof(FlameAssetManager_LoadSoftReference, Reference) == 0x000000, "Member 'FlameAssetManager_LoadSoftReference::Reference' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_LoadSoftReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_LoadSoftReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.LoadAndTrackSoftClassReference
// 0x0030 (0x0030 - 0x0000)
struct FlameAssetManager_LoadAndTrackSoftClassReference final
{
public:
	TSoftClassPtr<class UClass>                   AssetToLoad;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_LoadAndTrackSoftClassReference) == 0x000008, "Wrong alignment on FlameAssetManager_LoadAndTrackSoftClassReference");
static_assert(sizeof(FlameAssetManager_LoadAndTrackSoftClassReference) == 0x000030, "Wrong size on FlameAssetManager_LoadAndTrackSoftClassReference");
static_assert(offsetof(FlameAssetManager_LoadAndTrackSoftClassReference, AssetToLoad) == 0x000000, "Member 'FlameAssetManager_LoadAndTrackSoftClassReference::AssetToLoad' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_LoadAndTrackSoftClassReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_LoadAndTrackSoftClassReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.LoadAndTrackSoftReference
// 0x0030 (0x0030 - 0x0000)
struct FlameAssetManager_LoadAndTrackSoftReference final
{
public:
	TSoftObjectPtr<class UObject>                 AssetToLoad;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_LoadAndTrackSoftReference) == 0x000008, "Wrong alignment on FlameAssetManager_LoadAndTrackSoftReference");
static_assert(sizeof(FlameAssetManager_LoadAndTrackSoftReference) == 0x000030, "Wrong size on FlameAssetManager_LoadAndTrackSoftReference");
static_assert(offsetof(FlameAssetManager_LoadAndTrackSoftReference, AssetToLoad) == 0x000000, "Member 'FlameAssetManager_LoadAndTrackSoftReference::AssetToLoad' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_LoadAndTrackSoftReference, ReturnValue) == 0x000028, "Member 'FlameAssetManager_LoadAndTrackSoftReference::ReturnValue' has a wrong offset!");

// Function Flame.FlameAssetManager.StreamAsset
// 0x0038 (0x0038 - 0x0000)
struct FlameAssetManager_StreamAsset final
{
public:
	TSoftObjectPtr<class UObject>                 AssetToStream;                                     // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnAssetLoaded;                                     // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_StreamAsset) == 0x000008, "Wrong alignment on FlameAssetManager_StreamAsset");
static_assert(sizeof(FlameAssetManager_StreamAsset) == 0x000038, "Wrong size on FlameAssetManager_StreamAsset");
static_assert(offsetof(FlameAssetManager_StreamAsset, AssetToStream) == 0x000000, "Member 'FlameAssetManager_StreamAsset::AssetToStream' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_StreamAsset, OnAssetLoaded) == 0x000028, "Member 'FlameAssetManager_StreamAsset::OnAssetLoaded' has a wrong offset!");

// Function Flame.FlameAssetManager.StreamAssets
// 0x0020 (0x0020 - 0x0000)
struct FlameAssetManager_StreamAssets final
{
public:
	TArray<TSoftObjectPtr<class UObject>>         AssetsToStream;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnAssetLoaded;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_StreamAssets) == 0x000008, "Wrong alignment on FlameAssetManager_StreamAssets");
static_assert(sizeof(FlameAssetManager_StreamAssets) == 0x000020, "Wrong size on FlameAssetManager_StreamAssets");
static_assert(offsetof(FlameAssetManager_StreamAssets, AssetsToStream) == 0x000000, "Member 'FlameAssetManager_StreamAssets::AssetsToStream' has a wrong offset!");
static_assert(offsetof(FlameAssetManager_StreamAssets, OnAssetLoaded) == 0x000010, "Member 'FlameAssetManager_StreamAssets::OnAssetLoaded' has a wrong offset!");

// Function Flame.FlameAssetManager.TrackObject
// 0x0008 (0x0008 - 0x0000)
struct FlameAssetManager_TrackObject final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAssetManager_TrackObject) == 0x000008, "Wrong alignment on FlameAssetManager_TrackObject");
static_assert(sizeof(FlameAssetManager_TrackObject) == 0x000008, "Wrong size on FlameAssetManager_TrackObject");
static_assert(offsetof(FlameAssetManager_TrackObject, Obj) == 0x000000, "Member 'FlameAssetManager_TrackObject::Obj' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.AddCommodity
// 0x0020 (0x0020 - 0x0000)
struct CommoditySpawnPoint_AddCommodity final
{
public:
	TSubclassOf<class AActor>                     Commodity;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_AddCommodity) == 0x000008, "Wrong alignment on CommoditySpawnPoint_AddCommodity");
static_assert(sizeof(CommoditySpawnPoint_AddCommodity) == 0x000020, "Wrong size on CommoditySpawnPoint_AddCommodity");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, Commodity) == 0x000000, "Member 'CommoditySpawnPoint_AddCommodity::Commodity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, MinCapacity) == 0x000008, "Member 'CommoditySpawnPoint_AddCommodity::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, MaxCapacity) == 0x00000C, "Member 'CommoditySpawnPoint_AddCommodity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, MinPriority) == 0x000010, "Member 'CommoditySpawnPoint_AddCommodity::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, MaxPriority) == 0x000014, "Member 'CommoditySpawnPoint_AddCommodity::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_AddCommodity, ReturnValue) == 0x000018, "Member 'CommoditySpawnPoint_AddCommodity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.ClearCommodities
// 0x0004 (0x0004 - 0x0000)
struct CommoditySpawnPoint_ClearCommodities final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnPoint_ClearCommodities) == 0x000004, "Wrong alignment on CommoditySpawnPoint_ClearCommodities");
static_assert(sizeof(CommoditySpawnPoint_ClearCommodities) == 0x000004, "Wrong size on CommoditySpawnPoint_ClearCommodities");
static_assert(offsetof(CommoditySpawnPoint_ClearCommodities, ReturnValue) == 0x000000, "Member 'CommoditySpawnPoint_ClearCommodities::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.RemoveCommodity
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnPoint_RemoveCommodity final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_RemoveCommodity) == 0x000004, "Wrong alignment on CommoditySpawnPoint_RemoveCommodity");
static_assert(sizeof(CommoditySpawnPoint_RemoveCommodity) == 0x000008, "Wrong size on CommoditySpawnPoint_RemoveCommodity");
static_assert(offsetof(CommoditySpawnPoint_RemoveCommodity, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_RemoveCommodity::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_RemoveCommodity, ReturnValue) == 0x000004, "Member 'CommoditySpawnPoint_RemoveCommodity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityCapacity
// 0x0010 (0x0010 - 0x0000)
struct CommoditySpawnPoint_SetCommodityCapacity final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityCapacity) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityCapacity");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityCapacity) == 0x000010, "Wrong size on CommoditySpawnPoint_SetCommodityCapacity");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacity, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityCapacity::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacity, MinCapacity) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityCapacity::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacity, MaxCapacity) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityCapacity::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacity, ReturnValue) == 0x00000C, "Member 'CommoditySpawnPoint_SetCommodityCapacity::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityCapacityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_SetCommodityCapacityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityCapacityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityCapacityMaximum");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityCapacityMaximum) == 0x00000C, "Wrong size on CommoditySpawnPoint_SetCommodityCapacityMaximum");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityCapacityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMaximum, MaxCapacity) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityCapacityMaximum::MaxCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityCapacityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityCapacityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_SetCommodityCapacityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinCapacity;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityCapacityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityCapacityMinimum");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityCapacityMinimum) == 0x00000C, "Wrong size on CommoditySpawnPoint_SetCommodityCapacityMinimum");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityCapacityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMinimum, MinCapacity) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityCapacityMinimum::MinCapacity' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityCapacityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityCapacityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityPriority
// 0x0010 (0x0010 - 0x0000)
struct CommoditySpawnPoint_SetCommodityPriority final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityPriority) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityPriority");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityPriority) == 0x000010, "Wrong size on CommoditySpawnPoint_SetCommodityPriority");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriority, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityPriority::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriority, MinPriority) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityPriority::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriority, MaxPriority) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityPriority::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriority, ReturnValue) == 0x00000C, "Member 'CommoditySpawnPoint_SetCommodityPriority::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityPriorityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_SetCommodityPriorityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityPriorityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityPriorityMaximum");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityPriorityMaximum) == 0x00000C, "Wrong size on CommoditySpawnPoint_SetCommodityPriorityMaximum");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityPriorityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMaximum, MaxPriority) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityPriorityMaximum::MaxPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityPriorityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.SetCommodityPriorityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_SetCommodityPriorityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPriority;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_SetCommodityPriorityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_SetCommodityPriorityMinimum");
static_assert(sizeof(CommoditySpawnPoint_SetCommodityPriorityMinimum) == 0x00000C, "Wrong size on CommoditySpawnPoint_SetCommodityPriorityMinimum");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_SetCommodityPriorityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMinimum, MinPriority) == 0x000004, "Member 'CommoditySpawnPoint_SetCommodityPriorityMinimum::MinPriority' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_SetCommodityPriorityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_SetCommodityPriorityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.GetCommodityCapacityMaximum
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnPoint_GetCommodityCapacityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnPoint_GetCommodityCapacityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_GetCommodityCapacityMaximum");
static_assert(sizeof(CommoditySpawnPoint_GetCommodityCapacityMaximum) == 0x000008, "Wrong size on CommoditySpawnPoint_GetCommodityCapacityMaximum");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityCapacityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_GetCommodityCapacityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityCapacityMaximum, ReturnValue) == 0x000004, "Member 'CommoditySpawnPoint_GetCommodityCapacityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.GetCommodityCapacityMinimum
// 0x0008 (0x0008 - 0x0000)
struct CommoditySpawnPoint_GetCommodityCapacityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnPoint_GetCommodityCapacityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_GetCommodityCapacityMinimum");
static_assert(sizeof(CommoditySpawnPoint_GetCommodityCapacityMinimum) == 0x000008, "Wrong size on CommoditySpawnPoint_GetCommodityCapacityMinimum");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityCapacityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_GetCommodityCapacityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityCapacityMinimum, ReturnValue) == 0x000004, "Member 'CommoditySpawnPoint_GetCommodityCapacityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.GetCommodityPriorityMaximum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_GetCommodityPriorityMaximum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_GetCommodityPriorityMaximum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_GetCommodityPriorityMaximum");
static_assert(sizeof(CommoditySpawnPoint_GetCommodityPriorityMaximum) == 0x00000C, "Wrong size on CommoditySpawnPoint_GetCommodityPriorityMaximum");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMaximum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_GetCommodityPriorityMaximum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMaximum, Value) == 0x000004, "Member 'CommoditySpawnPoint_GetCommodityPriorityMaximum::Value' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMaximum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_GetCommodityPriorityMaximum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.GetCommodityPriorityMinimum
// 0x000C (0x000C - 0x0000)
struct CommoditySpawnPoint_GetCommodityPriorityMinimum final
{
public:
	int32                                         CommodityIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommoditySpawnPoint_GetCommodityPriorityMinimum) == 0x000004, "Wrong alignment on CommoditySpawnPoint_GetCommodityPriorityMinimum");
static_assert(sizeof(CommoditySpawnPoint_GetCommodityPriorityMinimum) == 0x00000C, "Wrong size on CommoditySpawnPoint_GetCommodityPriorityMinimum");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMinimum, CommodityIndex) == 0x000000, "Member 'CommoditySpawnPoint_GetCommodityPriorityMinimum::CommodityIndex' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMinimum, Value) == 0x000004, "Member 'CommoditySpawnPoint_GetCommodityPriorityMinimum::Value' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_GetCommodityPriorityMinimum, ReturnValue) == 0x000008, "Member 'CommoditySpawnPoint_GetCommodityPriorityMinimum::ReturnValue' has a wrong offset!");

// Function Flame.CommoditySpawnPoint.OnCommodityParamsModify
// 0x0018 (0x0018 - 0x0000)
struct CommoditySpawnPoint_OnCommodityParamsModify final
{
public:
	TSubclassOf<class AActor>                     CommodityType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinIn;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxIn;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMinOut;                                    // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapacityMaxOut;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommoditySpawnPoint_OnCommodityParamsModify) == 0x000008, "Wrong alignment on CommoditySpawnPoint_OnCommodityParamsModify");
static_assert(sizeof(CommoditySpawnPoint_OnCommodityParamsModify) == 0x000018, "Wrong size on CommoditySpawnPoint_OnCommodityParamsModify");
static_assert(offsetof(CommoditySpawnPoint_OnCommodityParamsModify, CommodityType) == 0x000000, "Member 'CommoditySpawnPoint_OnCommodityParamsModify::CommodityType' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_OnCommodityParamsModify, CapacityMinIn) == 0x000008, "Member 'CommoditySpawnPoint_OnCommodityParamsModify::CapacityMinIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_OnCommodityParamsModify, CapacityMaxIn) == 0x00000C, "Member 'CommoditySpawnPoint_OnCommodityParamsModify::CapacityMaxIn' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_OnCommodityParamsModify, CapacityMinOut) == 0x000010, "Member 'CommoditySpawnPoint_OnCommodityParamsModify::CapacityMinOut' has a wrong offset!");
static_assert(offsetof(CommoditySpawnPoint_OnCommodityParamsModify, CapacityMaxOut) == 0x000014, "Member 'CommoditySpawnPoint_OnCommodityParamsModify::CapacityMaxOut' has a wrong offset!");

// Function Flame.CommonFunctions.AddComponentToActor
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_AddComponentToActor final
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        OutNewComponent;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_AddComponentToActor) == 0x000008, "Wrong alignment on CommonFunctions_AddComponentToActor");
static_assert(sizeof(CommonFunctions_AddComponentToActor) == 0x000018, "Wrong size on CommonFunctions_AddComponentToActor");
static_assert(offsetof(CommonFunctions_AddComponentToActor, ComponentClass) == 0x000000, "Member 'CommonFunctions_AddComponentToActor::ComponentClass' has a wrong offset!");
static_assert(offsetof(CommonFunctions_AddComponentToActor, Actor) == 0x000008, "Member 'CommonFunctions_AddComponentToActor::Actor' has a wrong offset!");
static_assert(offsetof(CommonFunctions_AddComponentToActor, OutNewComponent) == 0x000010, "Member 'CommonFunctions_AddComponentToActor::OutNewComponent' has a wrong offset!");

// Function Flame.CommonFunctions.AddViewSlaveLocation
// 0x000C (0x000C - 0x0000)
struct CommonFunctions_AddViewSlaveLocation final
{
public:
	struct FVector                                SlaveLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_AddViewSlaveLocation) == 0x000004, "Wrong alignment on CommonFunctions_AddViewSlaveLocation");
static_assert(sizeof(CommonFunctions_AddViewSlaveLocation) == 0x00000C, "Wrong size on CommonFunctions_AddViewSlaveLocation");
static_assert(offsetof(CommonFunctions_AddViewSlaveLocation, SlaveLocation) == 0x000000, "Member 'CommonFunctions_AddViewSlaveLocation::SlaveLocation' has a wrong offset!");

// Function Flame.CommonFunctions.AddViewSlaveLocationForDuration
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_AddViewSlaveLocationForDuration final
{
public:
	struct FVector                                SlaveLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_AddViewSlaveLocationForDuration) == 0x000004, "Wrong alignment on CommonFunctions_AddViewSlaveLocationForDuration");
static_assert(sizeof(CommonFunctions_AddViewSlaveLocationForDuration) == 0x000010, "Wrong size on CommonFunctions_AddViewSlaveLocationForDuration");
static_assert(offsetof(CommonFunctions_AddViewSlaveLocationForDuration, SlaveLocation) == 0x000000, "Member 'CommonFunctions_AddViewSlaveLocationForDuration::SlaveLocation' has a wrong offset!");
static_assert(offsetof(CommonFunctions_AddViewSlaveLocationForDuration, Duration) == 0x00000C, "Member 'CommonFunctions_AddViewSlaveLocationForDuration::Duration' has a wrong offset!");

// Function Flame.CommonFunctions.CaptureSceneDeferred
// 0x0008 (0x0008 - 0x0000)
struct CommonFunctions_CaptureSceneDeferred final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_CaptureSceneDeferred) == 0x000008, "Wrong alignment on CommonFunctions_CaptureSceneDeferred");
static_assert(sizeof(CommonFunctions_CaptureSceneDeferred) == 0x000008, "Wrong size on CommonFunctions_CaptureSceneDeferred");
static_assert(offsetof(CommonFunctions_CaptureSceneDeferred, CaptureComponent) == 0x000000, "Member 'CommonFunctions_CaptureSceneDeferred::CaptureComponent' has a wrong offset!");

// Function Flame.CommonFunctions.CubicInterpolation
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_CubicInterpolation final
{
public:
	float                                         Start;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTangent;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTangent;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         A;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_CubicInterpolation) == 0x000004, "Wrong alignment on CommonFunctions_CubicInterpolation");
static_assert(sizeof(CommonFunctions_CubicInterpolation) == 0x000018, "Wrong size on CommonFunctions_CubicInterpolation");
static_assert(offsetof(CommonFunctions_CubicInterpolation, Start) == 0x000000, "Member 'CommonFunctions_CubicInterpolation::Start' has a wrong offset!");
static_assert(offsetof(CommonFunctions_CubicInterpolation, StartTangent) == 0x000004, "Member 'CommonFunctions_CubicInterpolation::StartTangent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_CubicInterpolation, End) == 0x000008, "Member 'CommonFunctions_CubicInterpolation::End' has a wrong offset!");
static_assert(offsetof(CommonFunctions_CubicInterpolation, EndTangent) == 0x00000C, "Member 'CommonFunctions_CubicInterpolation::EndTangent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_CubicInterpolation, A) == 0x000010, "Member 'CommonFunctions_CubicInterpolation::A' has a wrong offset!");
static_assert(offsetof(CommonFunctions_CubicInterpolation, ReturnValue) == 0x000014, "Member 'CommonFunctions_CubicInterpolation::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.EnableMainViewRendering
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_EnableMainViewRendering final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_EnableMainViewRendering) == 0x000008, "Wrong alignment on CommonFunctions_EnableMainViewRendering");
static_assert(sizeof(CommonFunctions_EnableMainViewRendering) == 0x000010, "Wrong size on CommonFunctions_EnableMainViewRendering");
static_assert(offsetof(CommonFunctions_EnableMainViewRendering, Controller) == 0x000000, "Member 'CommonFunctions_EnableMainViewRendering::Controller' has a wrong offset!");
static_assert(offsetof(CommonFunctions_EnableMainViewRendering, bEnabled) == 0x000008, "Member 'CommonFunctions_EnableMainViewRendering::bEnabled' has a wrong offset!");

// Function Flame.CommonFunctions.EstimateSceneRenderTargetsSize
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_EstimateSceneRenderTargetsSize final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSizeX;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutSizeY;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_EstimateSceneRenderTargetsSize) == 0x000008, "Wrong alignment on CommonFunctions_EstimateSceneRenderTargetsSize");
static_assert(sizeof(CommonFunctions_EstimateSceneRenderTargetsSize) == 0x000010, "Wrong size on CommonFunctions_EstimateSceneRenderTargetsSize");
static_assert(offsetof(CommonFunctions_EstimateSceneRenderTargetsSize, WorldContextObject) == 0x000000, "Member 'CommonFunctions_EstimateSceneRenderTargetsSize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_EstimateSceneRenderTargetsSize, OutSizeX) == 0x000008, "Member 'CommonFunctions_EstimateSceneRenderTargetsSize::OutSizeX' has a wrong offset!");
static_assert(offsetof(CommonFunctions_EstimateSceneRenderTargetsSize, OutSizeY) == 0x00000C, "Member 'CommonFunctions_EstimateSceneRenderTargetsSize::OutSizeY' has a wrong offset!");

// Function Flame.CommonFunctions.FindComponentBySocketName
// 0x0020 (0x0020 - 0x0000)
struct CommonFunctions_FindComponentBySocketName final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USceneComponent>            ComponentClass;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        OutComponentWithSocket;                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_FindComponentBySocketName) == 0x000008, "Wrong alignment on CommonFunctions_FindComponentBySocketName");
static_assert(sizeof(CommonFunctions_FindComponentBySocketName) == 0x000020, "Wrong size on CommonFunctions_FindComponentBySocketName");
static_assert(offsetof(CommonFunctions_FindComponentBySocketName, Actor) == 0x000000, "Member 'CommonFunctions_FindComponentBySocketName::Actor' has a wrong offset!");
static_assert(offsetof(CommonFunctions_FindComponentBySocketName, SocketName) == 0x000008, "Member 'CommonFunctions_FindComponentBySocketName::SocketName' has a wrong offset!");
static_assert(offsetof(CommonFunctions_FindComponentBySocketName, ComponentClass) == 0x000010, "Member 'CommonFunctions_FindComponentBySocketName::ComponentClass' has a wrong offset!");
static_assert(offsetof(CommonFunctions_FindComponentBySocketName, OutComponentWithSocket) == 0x000018, "Member 'CommonFunctions_FindComponentBySocketName::OutComponentWithSocket' has a wrong offset!");

// Function Flame.CommonFunctions.GetActiveTopLevelWindowPositionOnScreen
// 0x0008 (0x0008 - 0x0000)
struct CommonFunctions_GetActiveTopLevelWindowPositionOnScreen final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetActiveTopLevelWindowPositionOnScreen) == 0x000004, "Wrong alignment on CommonFunctions_GetActiveTopLevelWindowPositionOnScreen");
static_assert(sizeof(CommonFunctions_GetActiveTopLevelWindowPositionOnScreen) == 0x000008, "Wrong size on CommonFunctions_GetActiveTopLevelWindowPositionOnScreen");
static_assert(offsetof(CommonFunctions_GetActiveTopLevelWindowPositionOnScreen, ReturnValue) == 0x000000, "Member 'CommonFunctions_GetActiveTopLevelWindowPositionOnScreen::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetAllUsedChildClassTypes
// 0x0020 (0x0020 - 0x0000)
struct CommonFunctions_GetAllUsedChildClassTypes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ParentActorClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetAllUsedChildClassTypes) == 0x000008, "Wrong alignment on CommonFunctions_GetAllUsedChildClassTypes");
static_assert(sizeof(CommonFunctions_GetAllUsedChildClassTypes) == 0x000020, "Wrong size on CommonFunctions_GetAllUsedChildClassTypes");
static_assert(offsetof(CommonFunctions_GetAllUsedChildClassTypes, WorldContextObject) == 0x000000, "Member 'CommonFunctions_GetAllUsedChildClassTypes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetAllUsedChildClassTypes, ParentActorClass) == 0x000008, "Member 'CommonFunctions_GetAllUsedChildClassTypes::ParentActorClass' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetAllUsedChildClassTypes, ReturnValue) == 0x000010, "Member 'CommonFunctions_GetAllUsedChildClassTypes::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetBuildConfiguration
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetBuildConfiguration final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetBuildConfiguration) == 0x000008, "Wrong alignment on CommonFunctions_GetBuildConfiguration");
static_assert(sizeof(CommonFunctions_GetBuildConfiguration) == 0x000010, "Wrong size on CommonFunctions_GetBuildConfiguration");
static_assert(offsetof(CommonFunctions_GetBuildConfiguration, ReturnValue) == 0x000000, "Member 'CommonFunctions_GetBuildConfiguration::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetBuildVersion
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetBuildVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetBuildVersion) == 0x000008, "Wrong alignment on CommonFunctions_GetBuildVersion");
static_assert(sizeof(CommonFunctions_GetBuildVersion) == 0x000010, "Wrong size on CommonFunctions_GetBuildVersion");
static_assert(offsetof(CommonFunctions_GetBuildVersion, ReturnValue) == 0x000000, "Member 'CommonFunctions_GetBuildVersion::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetClassDefaultObject final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetClassDefaultObject) == 0x000008, "Wrong alignment on CommonFunctions_GetClassDefaultObject");
static_assert(sizeof(CommonFunctions_GetClassDefaultObject) == 0x000010, "Wrong size on CommonFunctions_GetClassDefaultObject");
static_assert(offsetof(CommonFunctions_GetClassDefaultObject, Class_0) == 0x000000, "Member 'CommonFunctions_GetClassDefaultObject::Class_0' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetClassDisplayName
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetClassDisplayName final
{
public:
	const class UObject*                          Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetClassDisplayName) == 0x000008, "Wrong alignment on CommonFunctions_GetClassDisplayName");
static_assert(sizeof(CommonFunctions_GetClassDisplayName) == 0x000010, "Wrong size on CommonFunctions_GetClassDisplayName");
static_assert(offsetof(CommonFunctions_GetClassDisplayName, Item) == 0x000000, "Member 'CommonFunctions_GetClassDisplayName::Item' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetClassDisplayName, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetClassDisplayName::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetCurveValue
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetCurveValue final
{
public:
	class UCurveFloat*                            Curve;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetCurveValue) == 0x000008, "Wrong alignment on CommonFunctions_GetCurveValue");
static_assert(sizeof(CommonFunctions_GetCurveValue) == 0x000010, "Wrong size on CommonFunctions_GetCurveValue");
static_assert(offsetof(CommonFunctions_GetCurveValue, Curve) == 0x000000, "Member 'CommonFunctions_GetCurveValue::Curve' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetCurveValue, InValue) == 0x000008, "Member 'CommonFunctions_GetCurveValue::InValue' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetCurveValue, ReturnValue) == 0x00000C, "Member 'CommonFunctions_GetCurveValue::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetFrameNumber
// 0x0004 (0x0004 - 0x0000)
struct CommonFunctions_GetFrameNumber final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetFrameNumber) == 0x000004, "Wrong alignment on CommonFunctions_GetFrameNumber");
static_assert(sizeof(CommonFunctions_GetFrameNumber) == 0x000004, "Wrong size on CommonFunctions_GetFrameNumber");
static_assert(offsetof(CommonFunctions_GetFrameNumber, ReturnValue) == 0x000000, "Member 'CommonFunctions_GetFrameNumber::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetLastRenderTime
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetLastRenderTime final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_GetLastRenderTime) == 0x000008, "Wrong alignment on CommonFunctions_GetLastRenderTime");
static_assert(sizeof(CommonFunctions_GetLastRenderTime) == 0x000010, "Wrong size on CommonFunctions_GetLastRenderTime");
static_assert(offsetof(CommonFunctions_GetLastRenderTime, Component) == 0x000000, "Member 'CommonFunctions_GetLastRenderTime::Component' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetLastRenderTime, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetLastRenderTime::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetLastRenderTimeOnScreen
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetLastRenderTimeOnScreen final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_GetLastRenderTimeOnScreen) == 0x000008, "Wrong alignment on CommonFunctions_GetLastRenderTimeOnScreen");
static_assert(sizeof(CommonFunctions_GetLastRenderTimeOnScreen) == 0x000010, "Wrong size on CommonFunctions_GetLastRenderTimeOnScreen");
static_assert(offsetof(CommonFunctions_GetLastRenderTimeOnScreen, Component) == 0x000000, "Member 'CommonFunctions_GetLastRenderTimeOnScreen::Component' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetLastRenderTimeOnScreen, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetLastRenderTimeOnScreen::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetMainWindowPositionOnScreen
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetMainWindowPositionOnScreen final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetMainWindowPositionOnScreen) == 0x000008, "Wrong alignment on CommonFunctions_GetMainWindowPositionOnScreen");
static_assert(sizeof(CommonFunctions_GetMainWindowPositionOnScreen) == 0x000010, "Wrong size on CommonFunctions_GetMainWindowPositionOnScreen");
static_assert(offsetof(CommonFunctions_GetMainWindowPositionOnScreen, WorldContextObject) == 0x000000, "Member 'CommonFunctions_GetMainWindowPositionOnScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetMainWindowPositionOnScreen, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetMainWindowPositionOnScreen::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetNumStreamingTexturesForPrimitive
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetNumStreamingTexturesForPrimitive final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_GetNumStreamingTexturesForPrimitive) == 0x000008, "Wrong alignment on CommonFunctions_GetNumStreamingTexturesForPrimitive");
static_assert(sizeof(CommonFunctions_GetNumStreamingTexturesForPrimitive) == 0x000010, "Wrong size on CommonFunctions_GetNumStreamingTexturesForPrimitive");
static_assert(offsetof(CommonFunctions_GetNumStreamingTexturesForPrimitive, PrimitiveComponent) == 0x000000, "Member 'CommonFunctions_GetNumStreamingTexturesForPrimitive::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetNumStreamingTexturesForPrimitive, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetNumStreamingTexturesForPrimitive::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetRelativeDistanceFromBox
// 0x0020 (0x0020 - 0x0000)
struct CommonFunctions_GetRelativeDistanceFromBox final
{
public:
	struct FVector                                PointToTest;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamped;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetRelativeDistanceFromBox) == 0x000004, "Wrong alignment on CommonFunctions_GetRelativeDistanceFromBox");
static_assert(sizeof(CommonFunctions_GetRelativeDistanceFromBox) == 0x000020, "Wrong size on CommonFunctions_GetRelativeDistanceFromBox");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromBox, PointToTest) == 0x000000, "Member 'CommonFunctions_GetRelativeDistanceFromBox::PointToTest' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromBox, BoxExtent) == 0x00000C, "Member 'CommonFunctions_GetRelativeDistanceFromBox::BoxExtent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromBox, bClamped) == 0x000018, "Member 'CommonFunctions_GetRelativeDistanceFromBox::bClamped' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromBox, ReturnValue) == 0x00001C, "Member 'CommonFunctions_GetRelativeDistanceFromBox::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetRelativeDistanceFromCapsule
// 0x001C (0x001C - 0x0000)
struct CommonFunctions_GetRelativeDistanceFromCapsule final
{
public:
	struct FVector                                PointToTest;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamped;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetRelativeDistanceFromCapsule) == 0x000004, "Wrong alignment on CommonFunctions_GetRelativeDistanceFromCapsule");
static_assert(sizeof(CommonFunctions_GetRelativeDistanceFromCapsule) == 0x00001C, "Wrong size on CommonFunctions_GetRelativeDistanceFromCapsule");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromCapsule, PointToTest) == 0x000000, "Member 'CommonFunctions_GetRelativeDistanceFromCapsule::PointToTest' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromCapsule, HalfHeight) == 0x00000C, "Member 'CommonFunctions_GetRelativeDistanceFromCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromCapsule, Radius) == 0x000010, "Member 'CommonFunctions_GetRelativeDistanceFromCapsule::Radius' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromCapsule, bClamped) == 0x000014, "Member 'CommonFunctions_GetRelativeDistanceFromCapsule::bClamped' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromCapsule, ReturnValue) == 0x000018, "Member 'CommonFunctions_GetRelativeDistanceFromCapsule::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetRelativeDistanceFromSphere
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_GetRelativeDistanceFromSphere final
{
public:
	struct FVector                                PointToTest;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClamped;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetRelativeDistanceFromSphere) == 0x000004, "Wrong alignment on CommonFunctions_GetRelativeDistanceFromSphere");
static_assert(sizeof(CommonFunctions_GetRelativeDistanceFromSphere) == 0x000018, "Wrong size on CommonFunctions_GetRelativeDistanceFromSphere");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromSphere, PointToTest) == 0x000000, "Member 'CommonFunctions_GetRelativeDistanceFromSphere::PointToTest' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromSphere, Radius) == 0x00000C, "Member 'CommonFunctions_GetRelativeDistanceFromSphere::Radius' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromSphere, bClamped) == 0x000010, "Member 'CommonFunctions_GetRelativeDistanceFromSphere::bClamped' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetRelativeDistanceFromSphere, ReturnValue) == 0x000014, "Member 'CommonFunctions_GetRelativeDistanceFromSphere::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.GetSceneCaptureShowOnlyComponents
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_GetSceneCaptureShowOnlyComponents final
{
public:
	class USceneCaptureComponent2D*               CaptureComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            ShowOnlyComponents;                                // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetSceneCaptureShowOnlyComponents) == 0x000008, "Wrong alignment on CommonFunctions_GetSceneCaptureShowOnlyComponents");
static_assert(sizeof(CommonFunctions_GetSceneCaptureShowOnlyComponents) == 0x000018, "Wrong size on CommonFunctions_GetSceneCaptureShowOnlyComponents");
static_assert(offsetof(CommonFunctions_GetSceneCaptureShowOnlyComponents, CaptureComponent) == 0x000000, "Member 'CommonFunctions_GetSceneCaptureShowOnlyComponents::CaptureComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetSceneCaptureShowOnlyComponents, ShowOnlyComponents) == 0x000008, "Member 'CommonFunctions_GetSceneCaptureShowOnlyComponents::ShowOnlyComponents' has a wrong offset!");

// Function Flame.CommonFunctions.GetWorldLightingScenarioNames
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_GetWorldLightingScenarioNames final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutNames;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_GetWorldLightingScenarioNames) == 0x000008, "Wrong alignment on CommonFunctions_GetWorldLightingScenarioNames");
static_assert(sizeof(CommonFunctions_GetWorldLightingScenarioNames) == 0x000018, "Wrong size on CommonFunctions_GetWorldLightingScenarioNames");
static_assert(offsetof(CommonFunctions_GetWorldLightingScenarioNames, WorldContextObject) == 0x000000, "Member 'CommonFunctions_GetWorldLightingScenarioNames::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetWorldLightingScenarioNames, OutNames) == 0x000008, "Member 'CommonFunctions_GetWorldLightingScenarioNames::OutNames' has a wrong offset!");

// Function Flame.CommonFunctions.GetWorldTimeInSec
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_GetWorldTimeInSec final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_GetWorldTimeInSec) == 0x000008, "Wrong alignment on CommonFunctions_GetWorldTimeInSec");
static_assert(sizeof(CommonFunctions_GetWorldTimeInSec) == 0x000010, "Wrong size on CommonFunctions_GetWorldTimeInSec");
static_assert(offsetof(CommonFunctions_GetWorldTimeInSec, WorldContextObject) == 0x000000, "Member 'CommonFunctions_GetWorldTimeInSec::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_GetWorldTimeInSec, ReturnValue) == 0x000008, "Member 'CommonFunctions_GetWorldTimeInSec::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.IsEditor
// 0x0001 (0x0001 - 0x0000)
struct CommonFunctions_IsEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_IsEditor) == 0x000001, "Wrong alignment on CommonFunctions_IsEditor");
static_assert(sizeof(CommonFunctions_IsEditor) == 0x000001, "Wrong size on CommonFunctions_IsEditor");
static_assert(offsetof(CommonFunctions_IsEditor, ReturnValue) == 0x000000, "Member 'CommonFunctions_IsEditor::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.IsShipping
// 0x0001 (0x0001 - 0x0000)
struct CommonFunctions_IsShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_IsShipping) == 0x000001, "Wrong alignment on CommonFunctions_IsShipping");
static_assert(sizeof(CommonFunctions_IsShipping) == 0x000001, "Wrong size on CommonFunctions_IsShipping");
static_assert(offsetof(CommonFunctions_IsShipping, ReturnValue) == 0x000000, "Member 'CommonFunctions_IsShipping::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.IsStreamingTextureForPrimitive
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_IsStreamingTextureForPrimitive final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_IsStreamingTextureForPrimitive) == 0x000008, "Wrong alignment on CommonFunctions_IsStreamingTextureForPrimitive");
static_assert(sizeof(CommonFunctions_IsStreamingTextureForPrimitive) == 0x000010, "Wrong size on CommonFunctions_IsStreamingTextureForPrimitive");
static_assert(offsetof(CommonFunctions_IsStreamingTextureForPrimitive, PrimitiveComponent) == 0x000000, "Member 'CommonFunctions_IsStreamingTextureForPrimitive::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(CommonFunctions_IsStreamingTextureForPrimitive, ReturnValue) == 0x000008, "Member 'CommonFunctions_IsStreamingTextureForPrimitive::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.IsStreamingTextureForPrimitives
// 0x0018 (0x0018 - 0x0000)
struct CommonFunctions_IsStreamingTextureForPrimitives final
{
public:
	TArray<class UPrimitiveComponent*>            PrimitiveComponents;                               // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_IsStreamingTextureForPrimitives) == 0x000008, "Wrong alignment on CommonFunctions_IsStreamingTextureForPrimitives");
static_assert(sizeof(CommonFunctions_IsStreamingTextureForPrimitives) == 0x000018, "Wrong size on CommonFunctions_IsStreamingTextureForPrimitives");
static_assert(offsetof(CommonFunctions_IsStreamingTextureForPrimitives, PrimitiveComponents) == 0x000000, "Member 'CommonFunctions_IsStreamingTextureForPrimitives::PrimitiveComponents' has a wrong offset!");
static_assert(offsetof(CommonFunctions_IsStreamingTextureForPrimitives, ReturnValue) == 0x000010, "Member 'CommonFunctions_IsStreamingTextureForPrimitives::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.IsWorldDetailDropped
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_IsWorldDetailDropped final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_IsWorldDetailDropped) == 0x000008, "Wrong alignment on CommonFunctions_IsWorldDetailDropped");
static_assert(sizeof(CommonFunctions_IsWorldDetailDropped) == 0x000010, "Wrong size on CommonFunctions_IsWorldDetailDropped");
static_assert(offsetof(CommonFunctions_IsWorldDetailDropped, WorldContextObject) == 0x000000, "Member 'CommonFunctions_IsWorldDetailDropped::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CommonFunctions_IsWorldDetailDropped, ReturnValue) == 0x000008, "Member 'CommonFunctions_IsWorldDetailDropped::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.LoadSaveGame
// 0x0028 (0x0028 - 0x0000)
struct CommonFunctions_LoadSaveGame final
{
public:
	class FString                                 SaveGameName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIdx;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USaveGame>                  SaveGameClass;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_LoadSaveGame) == 0x000008, "Wrong alignment on CommonFunctions_LoadSaveGame");
static_assert(sizeof(CommonFunctions_LoadSaveGame) == 0x000028, "Wrong size on CommonFunctions_LoadSaveGame");
static_assert(offsetof(CommonFunctions_LoadSaveGame, SaveGameName) == 0x000000, "Member 'CommonFunctions_LoadSaveGame::SaveGameName' has a wrong offset!");
static_assert(offsetof(CommonFunctions_LoadSaveGame, UserIdx) == 0x000010, "Member 'CommonFunctions_LoadSaveGame::UserIdx' has a wrong offset!");
static_assert(offsetof(CommonFunctions_LoadSaveGame, SaveGameClass) == 0x000018, "Member 'CommonFunctions_LoadSaveGame::SaveGameClass' has a wrong offset!");
static_assert(offsetof(CommonFunctions_LoadSaveGame, ReturnValue) == 0x000020, "Member 'CommonFunctions_LoadSaveGame::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.RandomPointInCapsule
// 0x0014 (0x0014 - 0x0000)
struct CommonFunctions_RandomPointInCapsule final
{
public:
	float                                         HalfHeight;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_RandomPointInCapsule) == 0x000004, "Wrong alignment on CommonFunctions_RandomPointInCapsule");
static_assert(sizeof(CommonFunctions_RandomPointInCapsule) == 0x000014, "Wrong size on CommonFunctions_RandomPointInCapsule");
static_assert(offsetof(CommonFunctions_RandomPointInCapsule, HalfHeight) == 0x000000, "Member 'CommonFunctions_RandomPointInCapsule::HalfHeight' has a wrong offset!");
static_assert(offsetof(CommonFunctions_RandomPointInCapsule, Radius) == 0x000004, "Member 'CommonFunctions_RandomPointInCapsule::Radius' has a wrong offset!");
static_assert(offsetof(CommonFunctions_RandomPointInCapsule, ReturnValue) == 0x000008, "Member 'CommonFunctions_RandomPointInCapsule::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.SetComponentNetAddressable
// 0x0008 (0x0008 - 0x0000)
struct CommonFunctions_SetComponentNetAddressable final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_SetComponentNetAddressable) == 0x000008, "Wrong alignment on CommonFunctions_SetComponentNetAddressable");
static_assert(sizeof(CommonFunctions_SetComponentNetAddressable) == 0x000008, "Wrong size on CommonFunctions_SetComponentNetAddressable");
static_assert(offsetof(CommonFunctions_SetComponentNetAddressable, Component) == 0x000000, "Member 'CommonFunctions_SetComponentNetAddressable::Component' has a wrong offset!");

// Function Flame.CommonFunctions.SetForceMipStreaming
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_SetForceMipStreaming final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMipStreaming;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_SetForceMipStreaming) == 0x000008, "Wrong alignment on CommonFunctions_SetForceMipStreaming");
static_assert(sizeof(CommonFunctions_SetForceMipStreaming) == 0x000010, "Wrong size on CommonFunctions_SetForceMipStreaming");
static_assert(offsetof(CommonFunctions_SetForceMipStreaming, Component) == 0x000000, "Member 'CommonFunctions_SetForceMipStreaming::Component' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetForceMipStreaming, bForceMipStreaming) == 0x000008, "Member 'CommonFunctions_SetForceMipStreaming::bForceMipStreaming' has a wrong offset!");

// Function Flame.CommonFunctions.SetForceMipStreamingForActor
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_SetForceMipStreamingForActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMipStreaming;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_SetForceMipStreamingForActor) == 0x000008, "Wrong alignment on CommonFunctions_SetForceMipStreamingForActor");
static_assert(sizeof(CommonFunctions_SetForceMipStreamingForActor) == 0x000010, "Wrong size on CommonFunctions_SetForceMipStreamingForActor");
static_assert(offsetof(CommonFunctions_SetForceMipStreamingForActor, Actor) == 0x000000, "Member 'CommonFunctions_SetForceMipStreamingForActor::Actor' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetForceMipStreamingForActor, bForceMipStreaming) == 0x000008, "Member 'CommonFunctions_SetForceMipStreamingForActor::bForceMipStreaming' has a wrong offset!");

// Function Flame.CommonFunctions.SetViewTargetWithBlendShelter
// 0x0030 (0x0030 - 0x0000)
struct CommonFunctions_SetViewTargetWithBlendShelter final
{
public:
	class APlayerController*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewViewTarget;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EViewTargetBlendFunction                      BlendFunc;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockOutgoing;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SlaveLocation;                                     // 0x0020(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x002C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CommonFunctions_SetViewTargetWithBlendShelter) == 0x000008, "Wrong alignment on CommonFunctions_SetViewTargetWithBlendShelter");
static_assert(sizeof(CommonFunctions_SetViewTargetWithBlendShelter) == 0x000030, "Wrong size on CommonFunctions_SetViewTargetWithBlendShelter");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, Target) == 0x000000, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::Target' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, NewViewTarget) == 0x000008, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::NewViewTarget' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, BlendTime) == 0x000010, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::BlendTime' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, BlendFunc) == 0x000014, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::BlendFunc' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, BlendExp) == 0x000018, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::BlendExp' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, bLockOutgoing) == 0x00001C, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::bLockOutgoing' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, SlaveLocation) == 0x000020, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::SlaveLocation' has a wrong offset!");
static_assert(offsetof(CommonFunctions_SetViewTargetWithBlendShelter, ReturnValue) == 0x00002C, "Member 'CommonFunctions_SetViewTargetWithBlendShelter::ReturnValue' has a wrong offset!");

// Function Flame.CommonFunctions.StringToClipBoard
// 0x0010 (0x0010 - 0x0000)
struct CommonFunctions_StringToClipBoard final
{
public:
	class FString                                 StringToCopy;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_StringToClipBoard) == 0x000008, "Wrong alignment on CommonFunctions_StringToClipBoard");
static_assert(sizeof(CommonFunctions_StringToClipBoard) == 0x000010, "Wrong size on CommonFunctions_StringToClipBoard");
static_assert(offsetof(CommonFunctions_StringToClipBoard, StringToCopy) == 0x000000, "Member 'CommonFunctions_StringToClipBoard::StringToCopy' has a wrong offset!");

// Function Flame.CommonFunctions.TransformWorldSpaceToPreSkinnedLocalSpace
// 0x0028 (0x0028 - 0x0000)
struct CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         Component;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPosition;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace) == 0x000008, "Wrong alignment on CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace");
static_assert(sizeof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace) == 0x000028, "Wrong size on CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace");
static_assert(offsetof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace, BoneName) == 0x000000, "Member 'CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace::BoneName' has a wrong offset!");
static_assert(offsetof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace, Component) == 0x000008, "Member 'CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace::Component' has a wrong offset!");
static_assert(offsetof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace, WorldPosition) == 0x000010, "Member 'CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace::WorldPosition' has a wrong offset!");
static_assert(offsetof(CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace, ReturnValue) == 0x00001C, "Member 'CommonFunctions_TransformWorldSpaceToPreSkinnedLocalSpace::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetBoolValue
// 0x0038 (0x0038 - 0x0000)
struct OptionsMenuWidget_GetBoolValue final
{
public:
	struct FOptionsElementValue                   InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuWidget_GetBoolValue) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetBoolValue");
static_assert(sizeof(OptionsMenuWidget_GetBoolValue) == 0x000038, "Wrong size on OptionsMenuWidget_GetBoolValue");
static_assert(offsetof(OptionsMenuWidget_GetBoolValue, InValue) == 0x000000, "Member 'OptionsMenuWidget_GetBoolValue::InValue' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetBoolValue, ReturnValue) == 0x000030, "Member 'OptionsMenuWidget_GetBoolValue::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetFloatValue
// 0x0038 (0x0038 - 0x0000)
struct OptionsMenuWidget_GetFloatValue final
{
public:
	struct FOptionsElementValue                   InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuWidget_GetFloatValue) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetFloatValue");
static_assert(sizeof(OptionsMenuWidget_GetFloatValue) == 0x000038, "Wrong size on OptionsMenuWidget_GetFloatValue");
static_assert(offsetof(OptionsMenuWidget_GetFloatValue, InValue) == 0x000000, "Member 'OptionsMenuWidget_GetFloatValue::InValue' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetFloatValue, ReturnValue) == 0x000030, "Member 'OptionsMenuWidget_GetFloatValue::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetIntValue
// 0x0038 (0x0038 - 0x0000)
struct OptionsMenuWidget_GetIntValue final
{
public:
	struct FOptionsElementValue                   InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuWidget_GetIntValue) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetIntValue");
static_assert(sizeof(OptionsMenuWidget_GetIntValue) == 0x000038, "Wrong size on OptionsMenuWidget_GetIntValue");
static_assert(offsetof(OptionsMenuWidget_GetIntValue, InValue) == 0x000000, "Member 'OptionsMenuWidget_GetIntValue::InValue' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetIntValue, ReturnValue) == 0x000030, "Member 'OptionsMenuWidget_GetIntValue::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetNameValue
// 0x0038 (0x0038 - 0x0000)
struct OptionsMenuWidget_GetNameValue final
{
public:
	struct FOptionsElementValue                   InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetNameValue) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetNameValue");
static_assert(sizeof(OptionsMenuWidget_GetNameValue) == 0x000038, "Wrong size on OptionsMenuWidget_GetNameValue");
static_assert(offsetof(OptionsMenuWidget_GetNameValue, InValue) == 0x000000, "Member 'OptionsMenuWidget_GetNameValue::InValue' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetNameValue, ReturnValue) == 0x000030, "Member 'OptionsMenuWidget_GetNameValue::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetStringValue
// 0x0040 (0x0040 - 0x0000)
struct OptionsMenuWidget_GetStringValue final
{
public:
	struct FOptionsElementValue                   InValue;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetStringValue) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetStringValue");
static_assert(sizeof(OptionsMenuWidget_GetStringValue) == 0x000040, "Wrong size on OptionsMenuWidget_GetStringValue");
static_assert(offsetof(OptionsMenuWidget_GetStringValue, InValue) == 0x000000, "Member 'OptionsMenuWidget_GetStringValue::InValue' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetStringValue, ReturnValue) == 0x000030, "Member 'OptionsMenuWidget_GetStringValue::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.CommitValues
// 0x0060 (0x0060 - 0x0000)
struct OptionsMenuWidget_CommitValues final
{
public:
	TMap<class FName, struct FOptionsElementValue> InValues;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplySettings;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuWidget_CommitValues) == 0x000008, "Wrong alignment on OptionsMenuWidget_CommitValues");
static_assert(sizeof(OptionsMenuWidget_CommitValues) == 0x000060, "Wrong size on OptionsMenuWidget_CommitValues");
static_assert(offsetof(OptionsMenuWidget_CommitValues, InValues) == 0x000000, "Member 'OptionsMenuWidget_CommitValues::InValues' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_CommitValues, SaveGame) == 0x000050, "Member 'OptionsMenuWidget_CommitValues::SaveGame' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_CommitValues, ApplySettings) == 0x000058, "Member 'OptionsMenuWidget_CommitValues::ApplySettings' has a wrong offset!");

// Function Flame.OptionsMenuWidget.SetNewResolution
// 0x000C (0x000C - 0x0000)
struct OptionsMenuWidget_SetNewResolution final
{
public:
	int32                                         InResX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InResY;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWindowMode                                   InWindowMode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuWidget_SetNewResolution) == 0x000004, "Wrong alignment on OptionsMenuWidget_SetNewResolution");
static_assert(sizeof(OptionsMenuWidget_SetNewResolution) == 0x00000C, "Wrong size on OptionsMenuWidget_SetNewResolution");
static_assert(offsetof(OptionsMenuWidget_SetNewResolution, InResX) == 0x000000, "Member 'OptionsMenuWidget_SetNewResolution::InResX' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_SetNewResolution, InResY) == 0x000004, "Member 'OptionsMenuWidget_SetNewResolution::InResY' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_SetNewResolution, InWindowMode) == 0x000008, "Member 'OptionsMenuWidget_SetNewResolution::InWindowMode' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetAllOptionsElements
// 0x0010 (0x0010 - 0x0000)
struct OptionsMenuWidget_GetAllOptionsElements final
{
public:
	TArray<class UOptionsElementWidget*>          ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetAllOptionsElements) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetAllOptionsElements");
static_assert(sizeof(OptionsMenuWidget_GetAllOptionsElements) == 0x000010, "Wrong size on OptionsMenuWidget_GetAllOptionsElements");
static_assert(offsetof(OptionsMenuWidget_GetAllOptionsElements, ReturnValue) == 0x000000, "Member 'OptionsMenuWidget_GetAllOptionsElements::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetAllPanelWidgets
// 0x0010 (0x0010 - 0x0000)
struct OptionsMenuWidget_GetAllPanelWidgets final
{
public:
	TArray<class UPanelWidget*>                   ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetAllPanelWidgets) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetAllPanelWidgets");
static_assert(sizeof(OptionsMenuWidget_GetAllPanelWidgets) == 0x000010, "Wrong size on OptionsMenuWidget_GetAllPanelWidgets");
static_assert(offsetof(OptionsMenuWidget_GetAllPanelWidgets, ReturnValue) == 0x000000, "Member 'OptionsMenuWidget_GetAllPanelWidgets::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetPageName
// 0x0008 (0x0008 - 0x0000)
struct OptionsMenuWidget_GetPageName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetPageName) == 0x000004, "Wrong alignment on OptionsMenuWidget_GetPageName");
static_assert(sizeof(OptionsMenuWidget_GetPageName) == 0x000008, "Wrong size on OptionsMenuWidget_GetPageName");
static_assert(offsetof(OptionsMenuWidget_GetPageName, ReturnValue) == 0x000000, "Member 'OptionsMenuWidget_GetPageName::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetRootFocusWidget
// 0x0008 (0x0008 - 0x0000)
struct OptionsMenuWidget_GetRootFocusWidget final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetRootFocusWidget) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetRootFocusWidget");
static_assert(sizeof(OptionsMenuWidget_GetRootFocusWidget) == 0x000008, "Wrong size on OptionsMenuWidget_GetRootFocusWidget");
static_assert(offsetof(OptionsMenuWidget_GetRootFocusWidget, ReturnValue) == 0x000000, "Member 'OptionsMenuWidget_GetRootFocusWidget::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuWidget.GetValues
// 0x0058 (0x0058 - 0x0000)
struct OptionsMenuWidget_GetValues final
{
public:
	class USaveGame*                              SaveGame;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FOptionsElementValue> ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuWidget_GetValues) == 0x000008, "Wrong alignment on OptionsMenuWidget_GetValues");
static_assert(sizeof(OptionsMenuWidget_GetValues) == 0x000058, "Wrong size on OptionsMenuWidget_GetValues");
static_assert(offsetof(OptionsMenuWidget_GetValues, SaveGame) == 0x000000, "Member 'OptionsMenuWidget_GetValues::SaveGame' has a wrong offset!");
static_assert(offsetof(OptionsMenuWidget_GetValues, ReturnValue) == 0x000008, "Member 'OptionsMenuWidget_GetValues::ReturnValue' has a wrong offset!");

// Function Flame.FirstTimeOptions.OnConfirmPressed
// 0x0008 (0x0008 - 0x0000)
struct FirstTimeOptions_OnConfirmPressed final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FirstTimeOptions_OnConfirmPressed) == 0x000008, "Wrong alignment on FirstTimeOptions_OnConfirmPressed");
static_assert(sizeof(FirstTimeOptions_OnConfirmPressed) == 0x000008, "Wrong size on FirstTimeOptions_OnConfirmPressed");
static_assert(offsetof(FirstTimeOptions_OnConfirmPressed, Sender) == 0x000000, "Member 'FirstTimeOptions_OnConfirmPressed::Sender' has a wrong offset!");

// Function Flame.AchievementsFunctions.GetCachedAchievements
// 0x0020 (0x0020 - 0x0000)
struct AchievementsFunctions_GetCachedAchievements final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAchievementStruct>             AchievementsList;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AchievementsFunctions_GetCachedAchievements) == 0x000008, "Wrong alignment on AchievementsFunctions_GetCachedAchievements");
static_assert(sizeof(AchievementsFunctions_GetCachedAchievements) == 0x000020, "Wrong size on AchievementsFunctions_GetCachedAchievements");
static_assert(offsetof(AchievementsFunctions_GetCachedAchievements, WorldContextObject) == 0x000000, "Member 'AchievementsFunctions_GetCachedAchievements::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AchievementsFunctions_GetCachedAchievements, PlayerController) == 0x000008, "Member 'AchievementsFunctions_GetCachedAchievements::PlayerController' has a wrong offset!");
static_assert(offsetof(AchievementsFunctions_GetCachedAchievements, AchievementsList) == 0x000010, "Member 'AchievementsFunctions_GetCachedAchievements::AchievementsList' has a wrong offset!");

// Function Flame.StatisticsFunctions.SaveStatisticsArrayToFile
// 0x0030 (0x0030 - 0x0000)
struct StatisticsFunctions_SaveStatisticsArrayToFile final
{
public:
	TArray<class FString>                         Lines;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Directory;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatisticsFunctions_SaveStatisticsArrayToFile) == 0x000008, "Wrong alignment on StatisticsFunctions_SaveStatisticsArrayToFile");
static_assert(sizeof(StatisticsFunctions_SaveStatisticsArrayToFile) == 0x000030, "Wrong size on StatisticsFunctions_SaveStatisticsArrayToFile");
static_assert(offsetof(StatisticsFunctions_SaveStatisticsArrayToFile, Lines) == 0x000000, "Member 'StatisticsFunctions_SaveStatisticsArrayToFile::Lines' has a wrong offset!");
static_assert(offsetof(StatisticsFunctions_SaveStatisticsArrayToFile, Filename) == 0x000010, "Member 'StatisticsFunctions_SaveStatisticsArrayToFile::Filename' has a wrong offset!");
static_assert(offsetof(StatisticsFunctions_SaveStatisticsArrayToFile, Directory) == 0x000020, "Member 'StatisticsFunctions_SaveStatisticsArrayToFile::Directory' has a wrong offset!");

// Function Flame.Condition.Check
// 0x0010 (0x0010 - 0x0000)
struct Condition_Check final
{
public:
	const class AActor*                           ActorInteracting;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Condition_Check) == 0x000008, "Wrong alignment on Condition_Check");
static_assert(sizeof(Condition_Check) == 0x000010, "Wrong size on Condition_Check");
static_assert(offsetof(Condition_Check, ActorInteracting) == 0x000000, "Member 'Condition_Check::ActorInteracting' has a wrong offset!");
static_assert(offsetof(Condition_Check, ReturnValue) == 0x000008, "Member 'Condition_Check::ReturnValue' has a wrong offset!");

// Function Flame.FlameCheatManager.SetPlayerTransformFromParams
// 0x001C (0x001C - 0x0000)
struct FlameCheatManager_SetPlayerTransformFromParams final
{
public:
	float                                         PosX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosZ;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotZ;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotW;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameCheatManager_SetPlayerTransformFromParams) == 0x000004, "Wrong alignment on FlameCheatManager_SetPlayerTransformFromParams");
static_assert(sizeof(FlameCheatManager_SetPlayerTransformFromParams) == 0x00001C, "Wrong size on FlameCheatManager_SetPlayerTransformFromParams");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, PosX) == 0x000000, "Member 'FlameCheatManager_SetPlayerTransformFromParams::PosX' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, PosY) == 0x000004, "Member 'FlameCheatManager_SetPlayerTransformFromParams::PosY' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, PosZ) == 0x000008, "Member 'FlameCheatManager_SetPlayerTransformFromParams::PosZ' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, RotX) == 0x00000C, "Member 'FlameCheatManager_SetPlayerTransformFromParams::RotX' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, RotY) == 0x000010, "Member 'FlameCheatManager_SetPlayerTransformFromParams::RotY' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, RotZ) == 0x000014, "Member 'FlameCheatManager_SetPlayerTransformFromParams::RotZ' has a wrong offset!");
static_assert(offsetof(FlameCheatManager_SetPlayerTransformFromParams, RotW) == 0x000018, "Member 'FlameCheatManager_SetPlayerTransformFromParams::RotW' has a wrong offset!");

// Function Flame.ConsoleEvents.GetDefaultLanguage
// 0x0010 (0x0010 - 0x0000)
struct ConsoleEvents_GetDefaultLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_GetDefaultLanguage) == 0x000008, "Wrong alignment on ConsoleEvents_GetDefaultLanguage");
static_assert(sizeof(ConsoleEvents_GetDefaultLanguage) == 0x000010, "Wrong size on ConsoleEvents_GetDefaultLanguage");
static_assert(offsetof(ConsoleEvents_GetDefaultLanguage, ReturnValue) == 0x000000, "Member 'ConsoleEvents_GetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function Flame.ConsoleEvents.IsGameConnected
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_IsGameConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_IsGameConnected) == 0x000001, "Wrong alignment on ConsoleEvents_IsGameConnected");
static_assert(sizeof(ConsoleEvents_IsGameConnected) == 0x000001, "Wrong size on ConsoleEvents_IsGameConnected");
static_assert(offsetof(ConsoleEvents_IsGameConnected, ReturnValue) == 0x000000, "Member 'ConsoleEvents_IsGameConnected::ReturnValue' has a wrong offset!");

// Function Flame.ConsoleEvents.IsGamepadConnected
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_IsGamepadConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_IsGamepadConnected) == 0x000001, "Wrong alignment on ConsoleEvents_IsGamepadConnected");
static_assert(sizeof(ConsoleEvents_IsGamepadConnected) == 0x000001, "Wrong size on ConsoleEvents_IsGamepadConnected");
static_assert(offsetof(ConsoleEvents_IsGamepadConnected, ReturnValue) == 0x000000, "Member 'ConsoleEvents_IsGamepadConnected::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnCallPlatformLoginAsyncFinished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature final
{
public:
	bool                                          bWasSuccessful;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature) == 0x000001, "Wrong alignment on ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature) == 0x000001, "Wrong size on ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature, bWasSuccessful) == 0x000000, "Member 'ConsoleEvents_OnCallPlatformLoginAsyncFinished__DelegateSignature::bWasSuccessful' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnCheckUserCrossPlayAsyncFinished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature final
{
public:
	bool                                          CanUserCrossPlay;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature) == 0x000001, "Wrong alignment on ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature) == 0x000001, "Wrong size on ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature, CanUserCrossPlay) == 0x000000, "Member 'ConsoleEvents_OnCheckUserCrossPlayAsyncFinished__DelegateSignature::CanUserCrossPlay' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnCheckUserPlayOnlineFinished__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature final
{
public:
	bool                                          IsUserAllowedPlayOnline;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature) == 0x000001, "Wrong alignment on ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature) == 0x000001, "Wrong size on ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature, IsUserAllowedPlayOnline) == 0x000000, "Member 'ConsoleEvents_OnCheckUserPlayOnlineFinished__DelegateSignature::IsUserAllowedPlayOnline' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnControllerDisconnected__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct ConsoleEvents_OnControllerDisconnected__DelegateSignature final
{
public:
	bool                                          bIsConnection;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Userid;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControllerId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnControllerDisconnected__DelegateSignature) == 0x000004, "Wrong alignment on ConsoleEvents_OnControllerDisconnected__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnControllerDisconnected__DelegateSignature) == 0x00000C, "Wrong size on ConsoleEvents_OnControllerDisconnected__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnControllerDisconnected__DelegateSignature, bIsConnection) == 0x000000, "Member 'ConsoleEvents_OnControllerDisconnected__DelegateSignature::bIsConnection' has a wrong offset!");
static_assert(offsetof(ConsoleEvents_OnControllerDisconnected__DelegateSignature, Userid) == 0x000004, "Member 'ConsoleEvents_OnControllerDisconnected__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(ConsoleEvents_OnControllerDisconnected__DelegateSignature, ControllerId) == 0x000008, "Member 'ConsoleEvents_OnControllerDisconnected__DelegateSignature::ControllerId' has a wrong offset!");

// Function Flame.ConsoleEvents.OnControllerDisconnectedMessageBoxClosed
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_OnControllerDisconnectedMessageBoxClosed final
{
public:
	EMessageBoxAction                             Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnControllerDisconnectedMessageBoxClosed) == 0x000001, "Wrong alignment on ConsoleEvents_OnControllerDisconnectedMessageBoxClosed");
static_assert(sizeof(ConsoleEvents_OnControllerDisconnectedMessageBoxClosed) == 0x000001, "Wrong size on ConsoleEvents_OnControllerDisconnectedMessageBoxClosed");
static_assert(offsetof(ConsoleEvents_OnControllerDisconnectedMessageBoxClosed, Result) == 0x000000, "Member 'ConsoleEvents_OnControllerDisconnectedMessageBoxClosed::Result' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnControllerReconnected__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct ConsoleEvents_OnControllerReconnected__DelegateSignature final
{
public:
	int32                                         Userid;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnControllerReconnected__DelegateSignature) == 0x000004, "Wrong alignment on ConsoleEvents_OnControllerReconnected__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnControllerReconnected__DelegateSignature) == 0x000004, "Wrong size on ConsoleEvents_OnControllerReconnected__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnControllerReconnected__DelegateSignature, Userid) == 0x000000, "Member 'ConsoleEvents_OnControllerReconnected__DelegateSignature::Userid' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnReviewCompleted__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct ConsoleEvents_OnReviewCompleted__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ErrorCode;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserReviewResult                      Result;                                            // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnReviewCompleted__DelegateSignature) == 0x000008, "Wrong alignment on ConsoleEvents_OnReviewCompleted__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnReviewCompleted__DelegateSignature) == 0x000030, "Wrong size on ConsoleEvents_OnReviewCompleted__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnReviewCompleted__DelegateSignature, Success) == 0x000000, "Member 'ConsoleEvents_OnReviewCompleted__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(ConsoleEvents_OnReviewCompleted__DelegateSignature, ErrorCode) == 0x000004, "Member 'ConsoleEvents_OnReviewCompleted__DelegateSignature::ErrorCode' has a wrong offset!");
static_assert(offsetof(ConsoleEvents_OnReviewCompleted__DelegateSignature, Result) == 0x000008, "Member 'ConsoleEvents_OnReviewCompleted__DelegateSignature::Result' has a wrong offset!");

// DelegateFunction Flame.ConsoleEvents.OnUserLoginChanged__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ConsoleEvents_OnUserLoginChanged__DelegateSignature final
{
public:
	bool                                          bLogin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GameUserIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OnUserLoginChanged__DelegateSignature) == 0x000004, "Wrong alignment on ConsoleEvents_OnUserLoginChanged__DelegateSignature");
static_assert(sizeof(ConsoleEvents_OnUserLoginChanged__DelegateSignature) == 0x000008, "Wrong size on ConsoleEvents_OnUserLoginChanged__DelegateSignature");
static_assert(offsetof(ConsoleEvents_OnUserLoginChanged__DelegateSignature, bLogin) == 0x000000, "Member 'ConsoleEvents_OnUserLoginChanged__DelegateSignature::bLogin' has a wrong offset!");
static_assert(offsetof(ConsoleEvents_OnUserLoginChanged__DelegateSignature, GameUserIndex) == 0x000004, "Member 'ConsoleEvents_OnUserLoginChanged__DelegateSignature::GameUserIndex' has a wrong offset!");

// Function Flame.ConsoleEvents.OpenReviewScreen
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_OpenReviewScreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_OpenReviewScreen) == 0x000001, "Wrong alignment on ConsoleEvents_OpenReviewScreen");
static_assert(sizeof(ConsoleEvents_OpenReviewScreen) == 0x000001, "Wrong size on ConsoleEvents_OpenReviewScreen");
static_assert(offsetof(ConsoleEvents_OpenReviewScreen, ReturnValue) == 0x000000, "Member 'ConsoleEvents_OpenReviewScreen::ReturnValue' has a wrong offset!");

// Function Flame.ConsoleEvents.ShowAccountPicker
// 0x0004 (0x0004 - 0x0000)
struct ConsoleEvents_ShowAccountPicker final
{
public:
	int32                                         ControllerIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_ShowAccountPicker) == 0x000004, "Wrong alignment on ConsoleEvents_ShowAccountPicker");
static_assert(sizeof(ConsoleEvents_ShowAccountPicker) == 0x000004, "Wrong size on ConsoleEvents_ShowAccountPicker");
static_assert(offsetof(ConsoleEvents_ShowAccountPicker, ControllerIndex) == 0x000000, "Member 'ConsoleEvents_ShowAccountPicker::ControllerIndex' has a wrong offset!");

// Function Flame.ConsoleEvents.CanUserCrossPlay
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_CanUserCrossPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_CanUserCrossPlay) == 0x000001, "Wrong alignment on ConsoleEvents_CanUserCrossPlay");
static_assert(sizeof(ConsoleEvents_CanUserCrossPlay) == 0x000001, "Wrong size on ConsoleEvents_CanUserCrossPlay");
static_assert(offsetof(ConsoleEvents_CanUserCrossPlay, ReturnValue) == 0x000000, "Member 'ConsoleEvents_CanUserCrossPlay::ReturnValue' has a wrong offset!");

// Function Flame.ConsoleEvents.GetPlayerNickName
// 0x0018 (0x0018 - 0x0000)
struct ConsoleEvents_GetPlayerNickName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_GetPlayerNickName) == 0x000008, "Wrong alignment on ConsoleEvents_GetPlayerNickName");
static_assert(sizeof(ConsoleEvents_GetPlayerNickName) == 0x000018, "Wrong size on ConsoleEvents_GetPlayerNickName");
static_assert(offsetof(ConsoleEvents_GetPlayerNickName, ReturnValue) == 0x000000, "Member 'ConsoleEvents_GetPlayerNickName::ReturnValue' has a wrong offset!");

// Function Flame.ConsoleEvents.IsUserLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct ConsoleEvents_IsUserLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleEvents_IsUserLoggedIn) == 0x000001, "Wrong alignment on ConsoleEvents_IsUserLoggedIn");
static_assert(sizeof(ConsoleEvents_IsUserLoggedIn) == 0x000001, "Wrong size on ConsoleEvents_IsUserLoggedIn");
static_assert(offsetof(ConsoleEvents_IsUserLoggedIn, ReturnValue) == 0x000000, "Member 'ConsoleEvents_IsUserLoggedIn::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.GetTargetUnderCursor
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_GetTargetUnderCursor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_GetTargetUnderCursor) == 0x000008, "Wrong alignment on ConsumableItem_GetTargetUnderCursor");
static_assert(sizeof(ConsumableItem_GetTargetUnderCursor) == 0x000008, "Wrong size on ConsumableItem_GetTargetUnderCursor");
static_assert(offsetof(ConsumableItem_GetTargetUnderCursor, ReturnValue) == 0x000000, "Member 'ConsumableItem_GetTargetUnderCursor::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.IsTargetStillValid
// 0x0001 (0x0001 - 0x0000)
struct ConsumableItem_IsTargetStillValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_IsTargetStillValid) == 0x000001, "Wrong alignment on ConsumableItem_IsTargetStillValid");
static_assert(sizeof(ConsumableItem_IsTargetStillValid) == 0x000001, "Wrong size on ConsumableItem_IsTargetStillValid");
static_assert(offsetof(ConsumableItem_IsTargetStillValid, ReturnValue) == 0x000000, "Member 'ConsumableItem_IsTargetStillValid::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.OnGotIntoHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_OnGotIntoHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_OnGotIntoHandsImplementable) == 0x000008, "Wrong alignment on ConsumableItem_OnGotIntoHandsImplementable");
static_assert(sizeof(ConsumableItem_OnGotIntoHandsImplementable) == 0x000008, "Wrong size on ConsumableItem_OnGotIntoHandsImplementable");
static_assert(offsetof(ConsumableItem_OnGotIntoHandsImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItem_OnGotIntoHandsImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ConsumableItem.OnRep_ItemStateConsuming
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_OnRep_ItemStateConsuming final
{
public:
	class UItemUseState*                          OldState;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_OnRep_ItemStateConsuming) == 0x000008, "Wrong alignment on ConsumableItem_OnRep_ItemStateConsuming");
static_assert(sizeof(ConsumableItem_OnRep_ItemStateConsuming) == 0x000008, "Wrong size on ConsumableItem_OnRep_ItemStateConsuming");
static_assert(offsetof(ConsumableItem_OnRep_ItemStateConsuming, OldState) == 0x000000, "Member 'ConsumableItem_OnRep_ItemStateConsuming::OldState' has a wrong offset!");

// Function Flame.ConsumableItem.OnUngotFromHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_OnUngotFromHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_OnUngotFromHandsImplementable) == 0x000008, "Wrong alignment on ConsumableItem_OnUngotFromHandsImplementable");
static_assert(sizeof(ConsumableItem_OnUngotFromHandsImplementable) == 0x000008, "Wrong size on ConsumableItem_OnUngotFromHandsImplementable");
static_assert(offsetof(ConsumableItem_OnUngotFromHandsImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItem_OnUngotFromHandsImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ConsumableItem.OnUsedImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_OnUsedImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_OnUsedImplementable) == 0x000008, "Wrong alignment on ConsumableItem_OnUsedImplementable");
static_assert(sizeof(ConsumableItem_OnUsedImplementable) == 0x000008, "Wrong size on ConsumableItem_OnUsedImplementable");
static_assert(offsetof(ConsumableItem_OnUsedImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItem_OnUsedImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ConsumableItem.CanBeUsedOnCertainTarget
// 0x0010 (0x0010 - 0x0000)
struct ConsumableItem_CanBeUsedOnCertainTarget final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsumableItem_CanBeUsedOnCertainTarget) == 0x000008, "Wrong alignment on ConsumableItem_CanBeUsedOnCertainTarget");
static_assert(sizeof(ConsumableItem_CanBeUsedOnCertainTarget) == 0x000010, "Wrong size on ConsumableItem_CanBeUsedOnCertainTarget");
static_assert(offsetof(ConsumableItem_CanBeUsedOnCertainTarget, Target) == 0x000000, "Member 'ConsumableItem_CanBeUsedOnCertainTarget::Target' has a wrong offset!");
static_assert(offsetof(ConsumableItem_CanBeUsedOnCertainTarget, ReturnValue) == 0x000008, "Member 'ConsumableItem_CanBeUsedOnCertainTarget::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.CanBeUsedOnTarget
// 0x0001 (0x0001 - 0x0000)
struct ConsumableItem_CanBeUsedOnTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_CanBeUsedOnTarget) == 0x000001, "Wrong alignment on ConsumableItem_CanBeUsedOnTarget");
static_assert(sizeof(ConsumableItem_CanBeUsedOnTarget) == 0x000001, "Wrong size on ConsumableItem_CanBeUsedOnTarget");
static_assert(offsetof(ConsumableItem_CanBeUsedOnTarget, ReturnValue) == 0x000000, "Member 'ConsumableItem_CanBeUsedOnTarget::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.GetCurrentTarget
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_GetCurrentTarget final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_GetCurrentTarget) == 0x000008, "Wrong alignment on ConsumableItem_GetCurrentTarget");
static_assert(sizeof(ConsumableItem_GetCurrentTarget) == 0x000008, "Wrong size on ConsumableItem_GetCurrentTarget");
static_assert(offsetof(ConsumableItem_GetCurrentTarget, ReturnValue) == 0x000000, "Member 'ConsumableItem_GetCurrentTarget::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.GetIsCraftable
// 0x0001 (0x0001 - 0x0000)
struct ConsumableItem_GetIsCraftable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_GetIsCraftable) == 0x000001, "Wrong alignment on ConsumableItem_GetIsCraftable");
static_assert(sizeof(ConsumableItem_GetIsCraftable) == 0x000001, "Wrong size on ConsumableItem_GetIsCraftable");
static_assert(offsetof(ConsumableItem_GetIsCraftable, ReturnValue) == 0x000000, "Member 'ConsumableItem_GetIsCraftable::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.GetIsEquipableInShelter
// 0x0001 (0x0001 - 0x0000)
struct ConsumableItem_GetIsEquipableInShelter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_GetIsEquipableInShelter) == 0x000001, "Wrong alignment on ConsumableItem_GetIsEquipableInShelter");
static_assert(sizeof(ConsumableItem_GetIsEquipableInShelter) == 0x000001, "Wrong size on ConsumableItem_GetIsEquipableInShelter");
static_assert(offsetof(ConsumableItem_GetIsEquipableInShelter, ReturnValue) == 0x000000, "Member 'ConsumableItem_GetIsEquipableInShelter::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.GetPlan
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItem_GetPlan final
{
public:
	TSubclassOf<class AConsumablePlan>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_GetPlan) == 0x000008, "Wrong alignment on ConsumableItem_GetPlan");
static_assert(sizeof(ConsumableItem_GetPlan) == 0x000008, "Wrong size on ConsumableItem_GetPlan");
static_assert(offsetof(ConsumableItem_GetPlan, ReturnValue) == 0x000000, "Member 'ConsumableItem_GetPlan::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItem.IsUsageInProgress
// 0x0001 (0x0001 - 0x0000)
struct ConsumableItem_IsUsageInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItem_IsUsageInProgress) == 0x000001, "Wrong alignment on ConsumableItem_IsUsageInProgress");
static_assert(sizeof(ConsumableItem_IsUsageInProgress) == 0x000001, "Wrong size on ConsumableItem_IsUsageInProgress");
static_assert(offsetof(ConsumableItem_IsUsageInProgress, ReturnValue) == 0x000000, "Member 'ConsumableItem_IsUsageInProgress::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableItemComponent.OnGotIntoHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItemComponent_OnGotIntoHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItemComponent_OnGotIntoHandsImplementable) == 0x000008, "Wrong alignment on ConsumableItemComponent_OnGotIntoHandsImplementable");
static_assert(sizeof(ConsumableItemComponent_OnGotIntoHandsImplementable) == 0x000008, "Wrong size on ConsumableItemComponent_OnGotIntoHandsImplementable");
static_assert(offsetof(ConsumableItemComponent_OnGotIntoHandsImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItemComponent_OnGotIntoHandsImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ConsumableItemComponent.OnUngotFromHandsImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItemComponent_OnUngotFromHandsImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItemComponent_OnUngotFromHandsImplementable) == 0x000008, "Wrong alignment on ConsumableItemComponent_OnUngotFromHandsImplementable");
static_assert(sizeof(ConsumableItemComponent_OnUngotFromHandsImplementable) == 0x000008, "Wrong size on ConsumableItemComponent_OnUngotFromHandsImplementable");
static_assert(offsetof(ConsumableItemComponent_OnUngotFromHandsImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItemComponent_OnUngotFromHandsImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ConsumableItemComponent.OnUsedImplementable
// 0x0008 (0x0008 - 0x0000)
struct ConsumableItemComponent_OnUsedImplementable final
{
public:
	class AHumanCharacter*                        ParentCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableItemComponent_OnUsedImplementable) == 0x000008, "Wrong alignment on ConsumableItemComponent_OnUsedImplementable");
static_assert(sizeof(ConsumableItemComponent_OnUsedImplementable) == 0x000008, "Wrong size on ConsumableItemComponent_OnUsedImplementable");
static_assert(offsetof(ConsumableItemComponent_OnUsedImplementable, ParentCharacter) == 0x000000, "Member 'ConsumableItemComponent_OnUsedImplementable::ParentCharacter' has a wrong offset!");

// Function Flame.ContainerWidget.ContainsSlot
// 0x0010 (0x0010 - 0x0000)
struct ContainerWidget_ContainsSlot final
{
public:
	const class UFlameSlot*                       InFlameSlot;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContainerWidget_ContainsSlot) == 0x000008, "Wrong alignment on ContainerWidget_ContainsSlot");
static_assert(sizeof(ContainerWidget_ContainsSlot) == 0x000010, "Wrong size on ContainerWidget_ContainsSlot");
static_assert(offsetof(ContainerWidget_ContainsSlot, InFlameSlot) == 0x000000, "Member 'ContainerWidget_ContainsSlot::InFlameSlot' has a wrong offset!");
static_assert(offsetof(ContainerWidget_ContainsSlot, ReturnValue) == 0x000008, "Member 'ContainerWidget_ContainsSlot::ReturnValue' has a wrong offset!");

// Function Flame.ContainerWidget.GetFocusedSlot
// 0x0008 (0x0008 - 0x0000)
struct ContainerWidget_GetFocusedSlot final
{
public:
	class UFlameSlot*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContainerWidget_GetFocusedSlot) == 0x000008, "Wrong alignment on ContainerWidget_GetFocusedSlot");
static_assert(sizeof(ContainerWidget_GetFocusedSlot) == 0x000008, "Wrong size on ContainerWidget_GetFocusedSlot");
static_assert(offsetof(ContainerWidget_GetFocusedSlot, ReturnValue) == 0x000000, "Member 'ContainerWidget_GetFocusedSlot::ReturnValue' has a wrong offset!");

// Function Flame.ContainerWidget.GetSlotCount
// 0x0004 (0x0004 - 0x0000)
struct ContainerWidget_GetSlotCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContainerWidget_GetSlotCount) == 0x000004, "Wrong alignment on ContainerWidget_GetSlotCount");
static_assert(sizeof(ContainerWidget_GetSlotCount) == 0x000004, "Wrong size on ContainerWidget_GetSlotCount");
static_assert(offsetof(ContainerWidget_GetSlotCount, ReturnValue) == 0x000000, "Member 'ContainerWidget_GetSlotCount::ReturnValue' has a wrong offset!");

// Function Flame.ContainerWidget.GetSlots
// 0x0010 (0x0010 - 0x0000)
struct ContainerWidget_GetSlots final
{
public:
	TArray<class UFlameSlot*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContainerWidget_GetSlots) == 0x000008, "Wrong alignment on ContainerWidget_GetSlots");
static_assert(sizeof(ContainerWidget_GetSlots) == 0x000010, "Wrong size on ContainerWidget_GetSlots");
static_assert(offsetof(ContainerWidget_GetSlots, ReturnValue) == 0x000000, "Member 'ContainerWidget_GetSlots::ReturnValue' has a wrong offset!");

// Function Flame.DynamicContainerWidget.AddItemsDescriptors
// 0x0010 (0x0010 - 0x0000)
struct DynamicContainerWidget_AddItemsDescriptors final
{
public:
	const class UItemProvider*                    ItemProvider;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicContainerWidget_AddItemsDescriptors) == 0x000008, "Wrong alignment on DynamicContainerWidget_AddItemsDescriptors");
static_assert(sizeof(DynamicContainerWidget_AddItemsDescriptors) == 0x000010, "Wrong size on DynamicContainerWidget_AddItemsDescriptors");
static_assert(offsetof(DynamicContainerWidget_AddItemsDescriptors, ItemProvider) == 0x000000, "Member 'DynamicContainerWidget_AddItemsDescriptors::ItemProvider' has a wrong offset!");
static_assert(offsetof(DynamicContainerWidget_AddItemsDescriptors, ReturnValue) == 0x000008, "Member 'DynamicContainerWidget_AddItemsDescriptors::ReturnValue' has a wrong offset!");

// Function Flame.DynamicContainerWidget.AddItemsDescriptorsFromArray
// 0x0018 (0x0018 - 0x0000)
struct DynamicContainerWidget_AddItemsDescriptorsFromArray final
{
public:
	TArray<struct FInvetoryItemDescriptor>        DescriptorArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DynamicContainerWidget_AddItemsDescriptorsFromArray) == 0x000008, "Wrong alignment on DynamicContainerWidget_AddItemsDescriptorsFromArray");
static_assert(sizeof(DynamicContainerWidget_AddItemsDescriptorsFromArray) == 0x000018, "Wrong size on DynamicContainerWidget_AddItemsDescriptorsFromArray");
static_assert(offsetof(DynamicContainerWidget_AddItemsDescriptorsFromArray, DescriptorArray) == 0x000000, "Member 'DynamicContainerWidget_AddItemsDescriptorsFromArray::DescriptorArray' has a wrong offset!");
static_assert(offsetof(DynamicContainerWidget_AddItemsDescriptorsFromArray, ReturnValue) == 0x000010, "Member 'DynamicContainerWidget_AddItemsDescriptorsFromArray::ReturnValue' has a wrong offset!");

// Function Flame.DynamicContainerWidget.SetSlotClass
// 0x0008 (0x0008 - 0x0000)
struct DynamicContainerWidget_SetSlotClass final
{
public:
	TSubclassOf<class UFlameSlot>                 InSlotClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicContainerWidget_SetSlotClass) == 0x000008, "Wrong alignment on DynamicContainerWidget_SetSlotClass");
static_assert(sizeof(DynamicContainerWidget_SetSlotClass) == 0x000008, "Wrong size on DynamicContainerWidget_SetSlotClass");
static_assert(offsetof(DynamicContainerWidget_SetSlotClass, InSlotClass) == 0x000000, "Member 'DynamicContainerWidget_SetSlotClass::InSlotClass' has a wrong offset!");

// Function Flame.DynamicContainerWidget.SetUserFocusToSlot
// 0x0004 (0x0004 - 0x0000)
struct DynamicContainerWidget_SetUserFocusToSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DynamicContainerWidget_SetUserFocusToSlot) == 0x000004, "Wrong alignment on DynamicContainerWidget_SetUserFocusToSlot");
static_assert(sizeof(DynamicContainerWidget_SetUserFocusToSlot) == 0x000004, "Wrong size on DynamicContainerWidget_SetUserFocusToSlot");
static_assert(offsetof(DynamicContainerWidget_SetUserFocusToSlot, SlotIndex) == 0x000000, "Member 'DynamicContainerWidget_SetUserFocusToSlot::SlotIndex' has a wrong offset!");

// Function Flame.FlameListWidget.GetWidgetToFocus
// 0x0008 (0x0008 - 0x0000)
struct FlameListWidget_GetWidgetToFocus final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameListWidget_GetWidgetToFocus) == 0x000008, "Wrong alignment on FlameListWidget_GetWidgetToFocus");
static_assert(sizeof(FlameListWidget_GetWidgetToFocus) == 0x000008, "Wrong size on FlameListWidget_GetWidgetToFocus");
static_assert(offsetof(FlameListWidget_GetWidgetToFocus, ReturnValue) == 0x000000, "Member 'FlameListWidget_GetWidgetToFocus::ReturnValue' has a wrong offset!");

// Function Flame.FlameListWidget.GetBPSlots
// 0x0010 (0x0010 - 0x0000)
struct FlameListWidget_GetBPSlots final
{
public:
	TArray<class UFlameSlot*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameListWidget_GetBPSlots) == 0x000008, "Wrong alignment on FlameListWidget_GetBPSlots");
static_assert(sizeof(FlameListWidget_GetBPSlots) == 0x000010, "Wrong size on FlameListWidget_GetBPSlots");
static_assert(offsetof(FlameListWidget_GetBPSlots, ReturnValue) == 0x000000, "Member 'FlameListWidget_GetBPSlots::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.CanBeSelected
// 0x0001 (0x0001 - 0x0000)
struct WheelSegment_CanBeSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_CanBeSelected) == 0x000001, "Wrong alignment on WheelSegment_CanBeSelected");
static_assert(sizeof(WheelSegment_CanBeSelected) == 0x000001, "Wrong size on WheelSegment_CanBeSelected");
static_assert(offsetof(WheelSegment_CanBeSelected, ReturnValue) == 0x000000, "Member 'WheelSegment_CanBeSelected::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.GetAngularDistance
// 0x0008 (0x0008 - 0x0000)
struct WheelSegment_GetAngularDistance final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_GetAngularDistance) == 0x000004, "Wrong alignment on WheelSegment_GetAngularDistance");
static_assert(sizeof(WheelSegment_GetAngularDistance) == 0x000008, "Wrong size on WheelSegment_GetAngularDistance");
static_assert(offsetof(WheelSegment_GetAngularDistance, InAngle) == 0x000000, "Member 'WheelSegment_GetAngularDistance::InAngle' has a wrong offset!");
static_assert(offsetof(WheelSegment_GetAngularDistance, ReturnValue) == 0x000004, "Member 'WheelSegment_GetAngularDistance::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.GetContentPosition
// 0x000C (0x000C - 0x0000)
struct WheelSegment_GetContentPosition final
{
public:
	float                                         InWheelRadius;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_GetContentPosition) == 0x000004, "Wrong alignment on WheelSegment_GetContentPosition");
static_assert(sizeof(WheelSegment_GetContentPosition) == 0x00000C, "Wrong size on WheelSegment_GetContentPosition");
static_assert(offsetof(WheelSegment_GetContentPosition, InWheelRadius) == 0x000000, "Member 'WheelSegment_GetContentPosition::InWheelRadius' has a wrong offset!");
static_assert(offsetof(WheelSegment_GetContentPosition, ReturnValue) == 0x000004, "Member 'WheelSegment_GetContentPosition::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.GetEquipIndicatorColor
// 0x0010 (0x0010 - 0x0000)
struct WheelSegment_GetEquipIndicatorColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_GetEquipIndicatorColor) == 0x000004, "Wrong alignment on WheelSegment_GetEquipIndicatorColor");
static_assert(sizeof(WheelSegment_GetEquipIndicatorColor) == 0x000010, "Wrong size on WheelSegment_GetEquipIndicatorColor");
static_assert(offsetof(WheelSegment_GetEquipIndicatorColor, ReturnValue) == 0x000000, "Member 'WheelSegment_GetEquipIndicatorColor::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.GetWheelComponent
// 0x0008 (0x0008 - 0x0000)
struct WheelSegment_GetWheelComponent final
{
public:
	class USelectionWheelComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_GetWheelComponent) == 0x000008, "Wrong alignment on WheelSegment_GetWheelComponent");
static_assert(sizeof(WheelSegment_GetWheelComponent) == 0x000008, "Wrong size on WheelSegment_GetWheelComponent");
static_assert(offsetof(WheelSegment_GetWheelComponent, ReturnValue) == 0x000000, "Member 'WheelSegment_GetWheelComponent::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.IsAngleInSegment
// 0x0008 (0x0008 - 0x0000)
struct WheelSegment_IsAngleInSegment final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WheelSegment_IsAngleInSegment) == 0x000004, "Wrong alignment on WheelSegment_IsAngleInSegment");
static_assert(sizeof(WheelSegment_IsAngleInSegment) == 0x000008, "Wrong size on WheelSegment_IsAngleInSegment");
static_assert(offsetof(WheelSegment_IsAngleInSegment, InAngle) == 0x000000, "Member 'WheelSegment_IsAngleInSegment::InAngle' has a wrong offset!");
static_assert(offsetof(WheelSegment_IsAngleInSegment, ReturnValue) == 0x000004, "Member 'WheelSegment_IsAngleInSegment::ReturnValue' has a wrong offset!");

// Function Flame.WheelSegment.IsSelected
// 0x0001 (0x0001 - 0x0000)
struct WheelSegment_IsSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WheelSegment_IsSelected) == 0x000001, "Wrong alignment on WheelSegment_IsSelected");
static_assert(sizeof(WheelSegment_IsSelected) == 0x000001, "Wrong size on WheelSegment_IsSelected");
static_assert(offsetof(WheelSegment_IsSelected, ReturnValue) == 0x000000, "Member 'WheelSegment_IsSelected::ReturnValue' has a wrong offset!");

// Function Flame.FlameHUD.OnServerConnectionStateUpdated
// 0x0001 (0x0001 - 0x0000)
struct FlameHUD_OnServerConnectionStateUpdated final
{
public:
	bool                                          bClientHasConnectionIssues;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameHUD_OnServerConnectionStateUpdated) == 0x000001, "Wrong alignment on FlameHUD_OnServerConnectionStateUpdated");
static_assert(sizeof(FlameHUD_OnServerConnectionStateUpdated) == 0x000001, "Wrong size on FlameHUD_OnServerConnectionStateUpdated");
static_assert(offsetof(FlameHUD_OnServerConnectionStateUpdated, bClientHasConnectionIssues) == 0x000000, "Member 'FlameHUD_OnServerConnectionStateUpdated::bClientHasConnectionIssues' has a wrong offset!");

// Function Flame.FlameHUD.SetHUDVisibility
// 0x0001 (0x0001 - 0x0000)
struct FlameHUD_SetHUDVisibility final
{
public:
	ESlateVisibility                              Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameHUD_SetHUDVisibility) == 0x000001, "Wrong alignment on FlameHUD_SetHUDVisibility");
static_assert(sizeof(FlameHUD_SetHUDVisibility) == 0x000001, "Wrong size on FlameHUD_SetHUDVisibility");
static_assert(offsetof(FlameHUD_SetHUDVisibility, Visibility) == 0x000000, "Member 'FlameHUD_SetHUDVisibility::Visibility' has a wrong offset!");

// Function Flame.FlameHUD.ShouldInputAxisBeIgnored
// 0x000C (0x000C - 0x0000)
struct FlameHUD_ShouldInputAxisBeIgnored final
{
public:
	class FName                                   InAxisName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameHUD_ShouldInputAxisBeIgnored) == 0x000004, "Wrong alignment on FlameHUD_ShouldInputAxisBeIgnored");
static_assert(sizeof(FlameHUD_ShouldInputAxisBeIgnored) == 0x00000C, "Wrong size on FlameHUD_ShouldInputAxisBeIgnored");
static_assert(offsetof(FlameHUD_ShouldInputAxisBeIgnored, InAxisName) == 0x000000, "Member 'FlameHUD_ShouldInputAxisBeIgnored::InAxisName' has a wrong offset!");
static_assert(offsetof(FlameHUD_ShouldInputAxisBeIgnored, ReturnValue) == 0x000008, "Member 'FlameHUD_ShouldInputAxisBeIgnored::ReturnValue' has a wrong offset!");

// Function Flame.ConsumableSegment.SetConsumableClass
// 0x0008 (0x0008 - 0x0000)
struct ConsumableSegment_SetConsumableClass final
{
public:
	TSubclassOf<class AConsumableItem>            InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumableSegment_SetConsumableClass) == 0x000008, "Wrong alignment on ConsumableSegment_SetConsumableClass");
static_assert(sizeof(ConsumableSegment_SetConsumableClass) == 0x000008, "Wrong size on ConsumableSegment_SetConsumableClass");
static_assert(offsetof(ConsumableSegment_SetConsumableClass, InClass) == 0x000000, "Member 'ConsumableSegment_SetConsumableClass::InClass' has a wrong offset!");

// Function Flame.ConsumablesFunctions.GetAllAttachedCharactersInfo
// 0x0018 (0x0018 - 0x0000)
struct ConsumablesFunctions_GetAllAttachedCharactersInfo final
{
public:
	const class AHumanCharacter*                  OwnerCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAttachedCharacterInfo>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumablesFunctions_GetAllAttachedCharactersInfo) == 0x000008, "Wrong alignment on ConsumablesFunctions_GetAllAttachedCharactersInfo");
static_assert(sizeof(ConsumablesFunctions_GetAllAttachedCharactersInfo) == 0x000018, "Wrong size on ConsumablesFunctions_GetAllAttachedCharactersInfo");
static_assert(offsetof(ConsumablesFunctions_GetAllAttachedCharactersInfo, OwnerCharacter) == 0x000000, "Member 'ConsumablesFunctions_GetAllAttachedCharactersInfo::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ConsumablesFunctions_GetAllAttachedCharactersInfo, ReturnValue) == 0x000008, "Member 'ConsumablesFunctions_GetAllAttachedCharactersInfo::ReturnValue' has a wrong offset!");

// Function Flame.ConsumablesFunctions.GetAttachedCharacterInfo
// 0x0038 (0x0038 - 0x0000)
struct ConsumablesFunctions_GetAttachedCharacterInfo final
{
public:
	const class AHumanCharacter*                  AttachedCharacter;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachedCharacterInfo                 ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumablesFunctions_GetAttachedCharacterInfo) == 0x000008, "Wrong alignment on ConsumablesFunctions_GetAttachedCharacterInfo");
static_assert(sizeof(ConsumablesFunctions_GetAttachedCharacterInfo) == 0x000038, "Wrong size on ConsumablesFunctions_GetAttachedCharacterInfo");
static_assert(offsetof(ConsumablesFunctions_GetAttachedCharacterInfo, AttachedCharacter) == 0x000000, "Member 'ConsumablesFunctions_GetAttachedCharacterInfo::AttachedCharacter' has a wrong offset!");
static_assert(offsetof(ConsumablesFunctions_GetAttachedCharacterInfo, ReturnValue) == 0x000008, "Member 'ConsumablesFunctions_GetAttachedCharacterInfo::ReturnValue' has a wrong offset!");

// Function Flame.ConsumablesFunctions.GetInfoAboutAttachingTarget
// 0x0038 (0x0038 - 0x0000)
struct ConsumablesFunctions_GetInfoAboutAttachingTarget final
{
public:
	const class AHumanCharacter*                  OwnerCharacter;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAttachedCharacterInfo                 ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumablesFunctions_GetInfoAboutAttachingTarget) == 0x000008, "Wrong alignment on ConsumablesFunctions_GetInfoAboutAttachingTarget");
static_assert(sizeof(ConsumablesFunctions_GetInfoAboutAttachingTarget) == 0x000038, "Wrong size on ConsumablesFunctions_GetInfoAboutAttachingTarget");
static_assert(offsetof(ConsumablesFunctions_GetInfoAboutAttachingTarget, OwnerCharacter) == 0x000000, "Member 'ConsumablesFunctions_GetInfoAboutAttachingTarget::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(ConsumablesFunctions_GetInfoAboutAttachingTarget, ReturnValue) == 0x000008, "Member 'ConsumablesFunctions_GetInfoAboutAttachingTarget::ReturnValue' has a wrong offset!");

// Function Flame.GameplayStorage.OnLootStored
// 0x0008 (0x0008 - 0x0000)
struct GameplayStorage_OnLootStored final
{
public:
	class AItem*                                  Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayStorage_OnLootStored) == 0x000008, "Wrong alignment on GameplayStorage_OnLootStored");
static_assert(sizeof(GameplayStorage_OnLootStored) == 0x000008, "Wrong size on GameplayStorage_OnLootStored");
static_assert(offsetof(GameplayStorage_OnLootStored, Loot) == 0x000000, "Member 'GameplayStorage_OnLootStored::Loot' has a wrong offset!");

// Function Flame.GameplayStorage.OnLootStoredClass
// 0x0010 (0x0010 - 0x0000)
struct GameplayStorage_OnLootStoredClass final
{
public:
	TSubclassOf<class AItemForBackpack>           LootClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayStorage_OnLootStoredClass) == 0x000008, "Wrong alignment on GameplayStorage_OnLootStoredClass");
static_assert(sizeof(GameplayStorage_OnLootStoredClass) == 0x000010, "Wrong size on GameplayStorage_OnLootStoredClass");
static_assert(offsetof(GameplayStorage_OnLootStoredClass, LootClass) == 0x000000, "Member 'GameplayStorage_OnLootStoredClass::LootClass' has a wrong offset!");
static_assert(offsetof(GameplayStorage_OnLootStoredClass, Count) == 0x000008, "Member 'GameplayStorage_OnLootStoredClass::Count' has a wrong offset!");

// Function Flame.GameplayStorage.OnLootTaken
// 0x0008 (0x0008 - 0x0000)
struct GameplayStorage_OnLootTaken final
{
public:
	class AItem*                                  Loot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayStorage_OnLootTaken) == 0x000008, "Wrong alignment on GameplayStorage_OnLootTaken");
static_assert(sizeof(GameplayStorage_OnLootTaken) == 0x000008, "Wrong size on GameplayStorage_OnLootTaken");
static_assert(offsetof(GameplayStorage_OnLootTaken, Loot) == 0x000000, "Member 'GameplayStorage_OnLootTaken::Loot' has a wrong offset!");

// Function Flame.GameplayStorage.OnLootTakenClass
// 0x0010 (0x0010 - 0x0000)
struct GameplayStorage_OnLootTakenClass final
{
public:
	TSubclassOf<class AItemForBackpack>           LootClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayStorage_OnLootTakenClass) == 0x000008, "Wrong alignment on GameplayStorage_OnLootTakenClass");
static_assert(sizeof(GameplayStorage_OnLootTakenClass) == 0x000010, "Wrong size on GameplayStorage_OnLootTakenClass");
static_assert(offsetof(GameplayStorage_OnLootTakenClass, LootClass) == 0x000000, "Member 'GameplayStorage_OnLootTakenClass::LootClass' has a wrong offset!");
static_assert(offsetof(GameplayStorage_OnLootTakenClass, Count) == 0x000008, "Member 'GameplayStorage_OnLootTakenClass::Count' has a wrong offset!");

// Function Flame.GameplayStorage.UnlinkAndDestroyAllStoredItems
// 0x0004 (0x0004 - 0x0000)
struct GameplayStorage_UnlinkAndDestroyAllStoredItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayStorage_UnlinkAndDestroyAllStoredItems) == 0x000004, "Wrong alignment on GameplayStorage_UnlinkAndDestroyAllStoredItems");
static_assert(sizeof(GameplayStorage_UnlinkAndDestroyAllStoredItems) == 0x000004, "Wrong size on GameplayStorage_UnlinkAndDestroyAllStoredItems");
static_assert(offsetof(GameplayStorage_UnlinkAndDestroyAllStoredItems, ReturnValue) == 0x000000, "Member 'GameplayStorage_UnlinkAndDestroyAllStoredItems::ReturnValue' has a wrong offset!");

// Function Flame.Lootable.WasPlacedInEditor
// 0x0001 (0x0001 - 0x0000)
struct Lootable_WasPlacedInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Lootable_WasPlacedInEditor) == 0x000001, "Wrong alignment on Lootable_WasPlacedInEditor");
static_assert(sizeof(Lootable_WasPlacedInEditor) == 0x000001, "Wrong size on Lootable_WasPlacedInEditor");
static_assert(offsetof(Lootable_WasPlacedInEditor, ReturnValue) == 0x000000, "Member 'Lootable_WasPlacedInEditor::ReturnValue' has a wrong offset!");

// Function Flame.Grenade.MulticastNotifyExplosion
// 0x0010 (0x0010 - 0x0000)
struct Grenade_MulticastNotifyExplosion final
{
public:
	TArray<struct FExplosionEffect>               ExplosionEffects;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Grenade_MulticastNotifyExplosion) == 0x000008, "Wrong alignment on Grenade_MulticastNotifyExplosion");
static_assert(sizeof(Grenade_MulticastNotifyExplosion) == 0x000010, "Wrong size on Grenade_MulticastNotifyExplosion");
static_assert(offsetof(Grenade_MulticastNotifyExplosion, ExplosionEffects) == 0x000000, "Member 'Grenade_MulticastNotifyExplosion::ExplosionEffects' has a wrong offset!");

// Function Flame.Grenade.OnGrenadeExplode
// 0x0010 (0x0010 - 0x0000)
struct Grenade_OnGrenadeExplode final
{
public:
	TArray<struct FExplosionEffect>               ExplosionEffects;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Grenade_OnGrenadeExplode) == 0x000008, "Wrong alignment on Grenade_OnGrenadeExplode");
static_assert(sizeof(Grenade_OnGrenadeExplode) == 0x000010, "Wrong size on Grenade_OnGrenadeExplode");
static_assert(offsetof(Grenade_OnGrenadeExplode, ExplosionEffects) == 0x000000, "Member 'Grenade_OnGrenadeExplode::ExplosionEffects' has a wrong offset!");

// Function Flame.Grenade.OnImpact
// 0x0018 (0x0018 - 0x0000)
struct Grenade_OnImpact final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Grenade_OnImpact) == 0x000004, "Wrong alignment on Grenade_OnImpact");
static_assert(sizeof(Grenade_OnImpact) == 0x000018, "Wrong size on Grenade_OnImpact");
static_assert(offsetof(Grenade_OnImpact, HitLocation) == 0x000000, "Member 'Grenade_OnImpact::HitLocation' has a wrong offset!");
static_assert(offsetof(Grenade_OnImpact, NormalImpulse) == 0x00000C, "Member 'Grenade_OnImpact::NormalImpulse' has a wrong offset!");

// Function Flame.CraftingFunctions.BoostCraftingItem
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_BoostCraftingItem final
{
public:
	ECraftingQueueType                            Queue;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudCraftingBoosterPaymentType              PaymentType;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_BoostCraftingItem) == 0x000008, "Wrong alignment on CraftingFunctions_BoostCraftingItem");
static_assert(sizeof(CraftingFunctions_BoostCraftingItem) == 0x000018, "Wrong size on CraftingFunctions_BoostCraftingItem");
static_assert(offsetof(CraftingFunctions_BoostCraftingItem, Queue) == 0x000000, "Member 'CraftingFunctions_BoostCraftingItem::Queue' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_BoostCraftingItem, PaymentType) == 0x000001, "Member 'CraftingFunctions_BoostCraftingItem::PaymentType' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_BoostCraftingItem, Stash) == 0x000008, "Member 'CraftingFunctions_BoostCraftingItem::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_BoostCraftingItem, ReturnValue) == 0x000010, "Member 'CraftingFunctions_BoostCraftingItem::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CanBeCraft
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CanBeCraft final
{
public:
	TSubclassOf<class APlan>                      Plan;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CanBeCraft) == 0x000008, "Wrong alignment on CraftingFunctions_CanBeCraft");
static_assert(sizeof(CraftingFunctions_CanBeCraft) == 0x000018, "Wrong size on CraftingFunctions_CanBeCraft");
static_assert(offsetof(CraftingFunctions_CanBeCraft, Plan) == 0x000000, "Member 'CraftingFunctions_CanBeCraft::Plan' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanBeCraft, Stash) == 0x000008, "Member 'CraftingFunctions_CanBeCraft::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanBeCraft, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CanBeCraft::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CancelConsumableInQueue
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CancelConsumableInQueue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CancelConsumableInQueue) == 0x000008, "Wrong alignment on CraftingFunctions_CancelConsumableInQueue");
static_assert(sizeof(CraftingFunctions_CancelConsumableInQueue) == 0x000018, "Wrong size on CraftingFunctions_CancelConsumableInQueue");
static_assert(offsetof(CraftingFunctions_CancelConsumableInQueue, Index_0) == 0x000000, "Member 'CraftingFunctions_CancelConsumableInQueue::Index_0' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CancelConsumableInQueue, Stash) == 0x000008, "Member 'CraftingFunctions_CancelConsumableInQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CancelConsumableInQueue, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CancelConsumableInQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CancelWeaponInQueue
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CancelWeaponInQueue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CancelWeaponInQueue) == 0x000008, "Wrong alignment on CraftingFunctions_CancelWeaponInQueue");
static_assert(sizeof(CraftingFunctions_CancelWeaponInQueue) == 0x000018, "Wrong size on CraftingFunctions_CancelWeaponInQueue");
static_assert(offsetof(CraftingFunctions_CancelWeaponInQueue, Index_0) == 0x000000, "Member 'CraftingFunctions_CancelWeaponInQueue::Index_0' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CancelWeaponInQueue, Stash) == 0x000008, "Member 'CraftingFunctions_CancelWeaponInQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CancelWeaponInQueue, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CancelWeaponInQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CanCraftAmmo
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CanCraftAmmo final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoItemClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CanCraftAmmo) == 0x000008, "Wrong alignment on CraftingFunctions_CanCraftAmmo");
static_assert(sizeof(CraftingFunctions_CanCraftAmmo) == 0x000018, "Wrong size on CraftingFunctions_CanCraftAmmo");
static_assert(offsetof(CraftingFunctions_CanCraftAmmo, AmmoItemClass) == 0x000000, "Member 'CraftingFunctions_CanCraftAmmo::AmmoItemClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftAmmo, Stash) == 0x000008, "Member 'CraftingFunctions_CanCraftAmmo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftAmmo, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CanCraftAmmo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CanCraftConsumable
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CanCraftConsumable final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CanCraftConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_CanCraftConsumable");
static_assert(sizeof(CraftingFunctions_CanCraftConsumable) == 0x000018, "Wrong size on CraftingFunctions_CanCraftConsumable");
static_assert(offsetof(CraftingFunctions_CanCraftConsumable, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_CanCraftConsumable::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftConsumable, Stash) == 0x000008, "Member 'CraftingFunctions_CanCraftConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftConsumable, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CanCraftConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CanCraftWeapon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_CanCraftWeapon final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CanCraftWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_CanCraftWeapon");
static_assert(sizeof(CraftingFunctions_CanCraftWeapon) == 0x000018, "Wrong size on CraftingFunctions_CanCraftWeapon");
static_assert(offsetof(CraftingFunctions_CanCraftWeapon, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_CanCraftWeapon::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_CanCraftWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CanCraftWeapon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_CanCraftWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CraftAmmo
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_CraftAmmo final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AStash*                                 Stash;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CraftAmmo) == 0x000008, "Wrong alignment on CraftingFunctions_CraftAmmo");
static_assert(sizeof(CraftingFunctions_CraftAmmo) == 0x000030, "Wrong size on CraftingFunctions_CraftAmmo");
static_assert(offsetof(CraftingFunctions_CraftAmmo, AmmoClass) == 0x000000, "Member 'CraftingFunctions_CraftAmmo::AmmoClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftAmmo, Count) == 0x000008, "Member 'CraftingFunctions_CraftAmmo::Count' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftAmmo, Stash) == 0x000010, "Member 'CraftingFunctions_CraftAmmo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftAmmo, UICallback) == 0x000018, "Member 'CraftingFunctions_CraftAmmo::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftAmmo, ReturnValue) == 0x000028, "Member 'CraftingFunctions_CraftAmmo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CraftConsumable
// 0x0028 (0x0028 - 0x0000)
struct CraftingFunctions_CraftConsumable final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoosted;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             UICallback;                                        // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CraftConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_CraftConsumable");
static_assert(sizeof(CraftingFunctions_CraftConsumable) == 0x000028, "Wrong size on CraftingFunctions_CraftConsumable");
static_assert(offsetof(CraftingFunctions_CraftConsumable, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_CraftConsumable::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftConsumable, Stash) == 0x000008, "Member 'CraftingFunctions_CraftConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftConsumable, IsBoosted) == 0x000010, "Member 'CraftingFunctions_CraftConsumable::IsBoosted' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftConsumable, UICallback) == 0x000014, "Member 'CraftingFunctions_CraftConsumable::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftConsumable, ReturnValue) == 0x000024, "Member 'CraftingFunctions_CraftConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.CraftWeapon
// 0x0028 (0x0028 - 0x0000)
struct CraftingFunctions_CraftWeapon final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoosted;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             UICallback;                                        // 0x0014(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_CraftWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_CraftWeapon");
static_assert(sizeof(CraftingFunctions_CraftWeapon) == 0x000028, "Wrong size on CraftingFunctions_CraftWeapon");
static_assert(offsetof(CraftingFunctions_CraftWeapon, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_CraftWeapon::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_CraftWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftWeapon, IsBoosted) == 0x000010, "Member 'CraftingFunctions_CraftWeapon::IsBoosted' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftWeapon, UICallback) == 0x000014, "Member 'CraftingFunctions_CraftWeapon::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_CraftWeapon, ReturnValue) == 0x000024, "Member 'CraftingFunctions_CraftWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.DeconstructAmmo
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_DeconstructAmmo final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoForDeconstruct;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_DeconstructAmmo) == 0x000008, "Wrong alignment on CraftingFunctions_DeconstructAmmo");
static_assert(sizeof(CraftingFunctions_DeconstructAmmo) == 0x000030, "Wrong size on CraftingFunctions_DeconstructAmmo");
static_assert(offsetof(CraftingFunctions_DeconstructAmmo, AmmoForDeconstruct) == 0x000000, "Member 'CraftingFunctions_DeconstructAmmo::AmmoForDeconstruct' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructAmmo, Count) == 0x000008, "Member 'CraftingFunctions_DeconstructAmmo::Count' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructAmmo, Stash) == 0x000010, "Member 'CraftingFunctions_DeconstructAmmo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructAmmo, UICallback) == 0x000018, "Member 'CraftingFunctions_DeconstructAmmo::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructAmmo, ReturnValue) == 0x000028, "Member 'CraftingFunctions_DeconstructAmmo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.DeconstructConsumable
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_DeconstructConsumable final
{
public:
	TSubclassOf<class AConsumableItem>            OneConsumable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_DeconstructConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_DeconstructConsumable");
static_assert(sizeof(CraftingFunctions_DeconstructConsumable) == 0x000030, "Wrong size on CraftingFunctions_DeconstructConsumable");
static_assert(offsetof(CraftingFunctions_DeconstructConsumable, OneConsumable) == 0x000000, "Member 'CraftingFunctions_DeconstructConsumable::OneConsumable' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructConsumable, Count) == 0x000008, "Member 'CraftingFunctions_DeconstructConsumable::Count' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructConsumable, Stash) == 0x000010, "Member 'CraftingFunctions_DeconstructConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructConsumable, UICallback) == 0x000018, "Member 'CraftingFunctions_DeconstructConsumable::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructConsumable, ReturnValue) == 0x000028, "Member 'CraftingFunctions_DeconstructConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.DeconstructPart
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_DeconstructPart final
{
public:
	TSubclassOf<class APartItem>                  PartForDeconstruct;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_DeconstructPart) == 0x000008, "Wrong alignment on CraftingFunctions_DeconstructPart");
static_assert(sizeof(CraftingFunctions_DeconstructPart) == 0x000030, "Wrong size on CraftingFunctions_DeconstructPart");
static_assert(offsetof(CraftingFunctions_DeconstructPart, PartForDeconstruct) == 0x000000, "Member 'CraftingFunctions_DeconstructPart::PartForDeconstruct' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructPart, Count) == 0x000008, "Member 'CraftingFunctions_DeconstructPart::Count' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructPart, Stash) == 0x000010, "Member 'CraftingFunctions_DeconstructPart::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructPart, UICallback) == 0x000018, "Member 'CraftingFunctions_DeconstructPart::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructPart, ReturnValue) == 0x000028, "Member 'CraftingFunctions_DeconstructPart::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.DeconstructWeapon
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_DeconstructWeapon final
{
public:
	TSubclassOf<class AWeapon>                    OneWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_DeconstructWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_DeconstructWeapon");
static_assert(sizeof(CraftingFunctions_DeconstructWeapon) == 0x000030, "Wrong size on CraftingFunctions_DeconstructWeapon");
static_assert(offsetof(CraftingFunctions_DeconstructWeapon, OneWeapon) == 0x000000, "Member 'CraftingFunctions_DeconstructWeapon::OneWeapon' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructWeapon, Count) == 0x000008, "Member 'CraftingFunctions_DeconstructWeapon::Count' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructWeapon, Stash) == 0x000010, "Member 'CraftingFunctions_DeconstructWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructWeapon, UICallback) == 0x000018, "Member 'CraftingFunctions_DeconstructWeapon::UICallback' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_DeconstructWeapon, ReturnValue) == 0x000028, "Member 'CraftingFunctions_DeconstructWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAllUnlockedConsumablePlans
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetAllUnlockedConsumablePlans final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AConsumablePlan>>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetAllUnlockedConsumablePlans) == 0x000008, "Wrong alignment on CraftingFunctions_GetAllUnlockedConsumablePlans");
static_assert(sizeof(CraftingFunctions_GetAllUnlockedConsumablePlans) == 0x000018, "Wrong size on CraftingFunctions_GetAllUnlockedConsumablePlans");
static_assert(offsetof(CraftingFunctions_GetAllUnlockedConsumablePlans, Stash) == 0x000000, "Member 'CraftingFunctions_GetAllUnlockedConsumablePlans::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAllUnlockedConsumablePlans, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetAllUnlockedConsumablePlans::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAllUnlockedWeaponPlans
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetAllUnlockedWeaponPlans final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeaponPlan>>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetAllUnlockedWeaponPlans) == 0x000008, "Wrong alignment on CraftingFunctions_GetAllUnlockedWeaponPlans");
static_assert(sizeof(CraftingFunctions_GetAllUnlockedWeaponPlans) == 0x000018, "Wrong size on CraftingFunctions_GetAllUnlockedWeaponPlans");
static_assert(offsetof(CraftingFunctions_GetAllUnlockedWeaponPlans, Stash) == 0x000000, "Member 'CraftingFunctions_GetAllUnlockedWeaponPlans::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAllUnlockedWeaponPlans, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetAllUnlockedWeaponPlans::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAmmoCraftingTimeInSec
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetAmmoCraftingTimeInSec final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetAmmoCraftingTimeInSec) == 0x000008, "Wrong alignment on CraftingFunctions_GetAmmoCraftingTimeInSec");
static_assert(sizeof(CraftingFunctions_GetAmmoCraftingTimeInSec) == 0x000018, "Wrong size on CraftingFunctions_GetAmmoCraftingTimeInSec");
static_assert(offsetof(CraftingFunctions_GetAmmoCraftingTimeInSec, AmmoClass) == 0x000000, "Member 'CraftingFunctions_GetAmmoCraftingTimeInSec::AmmoClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoCraftingTimeInSec, Stash) == 0x000008, "Member 'CraftingFunctions_GetAmmoCraftingTimeInSec::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoCraftingTimeInSec, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetAmmoCraftingTimeInSec::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAmmoIcon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetAmmoIcon final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSize                                     Size;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetAmmoIcon) == 0x000008, "Wrong alignment on CraftingFunctions_GetAmmoIcon");
static_assert(sizeof(CraftingFunctions_GetAmmoIcon) == 0x000018, "Wrong size on CraftingFunctions_GetAmmoIcon");
static_assert(offsetof(CraftingFunctions_GetAmmoIcon, AmmoClass) == 0x000000, "Member 'CraftingFunctions_GetAmmoIcon::AmmoClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoIcon, Size) == 0x000008, "Member 'CraftingFunctions_GetAmmoIcon::Size' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoIcon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetAmmoIcon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAmmoName
// 0x0020 (0x0020 - 0x0000)
struct CraftingFunctions_GetAmmoName final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetAmmoName) == 0x000008, "Wrong alignment on CraftingFunctions_GetAmmoName");
static_assert(sizeof(CraftingFunctions_GetAmmoName) == 0x000020, "Wrong size on CraftingFunctions_GetAmmoName");
static_assert(offsetof(CraftingFunctions_GetAmmoName, AmmoClass) == 0x000000, "Member 'CraftingFunctions_GetAmmoName::AmmoClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoName, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetAmmoName::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetAmmoPrice
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetAmmoPrice final
{
public:
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetAmmoPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetAmmoPrice");
static_assert(sizeof(CraftingFunctions_GetAmmoPrice) == 0x000010, "Wrong size on CraftingFunctions_GetAmmoPrice");
static_assert(offsetof(CraftingFunctions_GetAmmoPrice, AmmoClass) == 0x000000, "Member 'CraftingFunctions_GetAmmoPrice::AmmoClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetAmmoPrice, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetAmmoPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetBonusAmmoForWeapon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetBonusAmmoForWeapon final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetBonusAmmoForWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_GetBonusAmmoForWeapon");
static_assert(sizeof(CraftingFunctions_GetBonusAmmoForWeapon) == 0x000018, "Wrong size on CraftingFunctions_GetBonusAmmoForWeapon");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeapon, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetBonusAmmoForWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_GetBonusAmmoForWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeapon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetBonusAmmoForWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetBonusAmmoForWeaponFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetBonusAmmoForWeaponFromPlan final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetBonusAmmoForWeaponFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetBonusAmmoForWeaponFromPlan");
static_assert(sizeof(CraftingFunctions_GetBonusAmmoForWeaponFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetBonusAmmoForWeaponFromPlan");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeaponFromPlan, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetBonusAmmoForWeaponFromPlan::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeaponFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetBonusAmmoForWeaponFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetBonusAmmoForWeaponFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetBonusAmmoForWeaponFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableCostInParts
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumableCostInParts final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumableCostInParts) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableCostInParts");
static_assert(sizeof(CraftingFunctions_GetConsumableCostInParts) == 0x000018, "Wrong size on CraftingFunctions_GetConsumableCostInParts");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInParts, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetConsumableCostInParts::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInParts, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumableCostInParts::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInParts, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumableCostInParts::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableCostInPartsFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumableCostInPartsFromPlan final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumableCostInPartsFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableCostInPartsFromPlan");
static_assert(sizeof(CraftingFunctions_GetConsumableCostInPartsFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetConsumableCostInPartsFromPlan");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInPartsFromPlan, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_GetConsumableCostInPartsFromPlan::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInPartsFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumableCostInPartsFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCostInPartsFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumableCostInPartsFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableCraftingBoosterPrice
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumableCraftingBoosterPrice final
{
public:
	TSubclassOf<class AConsumableItem>            ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumableCraftingBoosterPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableCraftingBoosterPrice");
static_assert(sizeof(CraftingFunctions_GetConsumableCraftingBoosterPrice) == 0x000018, "Wrong size on CraftingFunctions_GetConsumableCraftingBoosterPrice");
static_assert(offsetof(CraftingFunctions_GetConsumableCraftingBoosterPrice, ItemClass) == 0x000000, "Member 'CraftingFunctions_GetConsumableCraftingBoosterPrice::ItemClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCraftingBoosterPrice, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumableCraftingBoosterPrice::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCraftingBoosterPrice, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumableCraftingBoosterPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableCraftingQueue
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_GetConsumableCraftingQueue final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudCraftingQueue                    ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumableCraftingQueue) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableCraftingQueue");
static_assert(sizeof(CraftingFunctions_GetConsumableCraftingQueue) == 0x000030, "Wrong size on CraftingFunctions_GetConsumableCraftingQueue");
static_assert(offsetof(CraftingFunctions_GetConsumableCraftingQueue, Stash) == 0x000000, "Member 'CraftingFunctions_GetConsumableCraftingQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableCraftingQueue, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetConsumableCraftingQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableIcon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumableIcon final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSize                                     Size;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumableIcon) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableIcon");
static_assert(sizeof(CraftingFunctions_GetConsumableIcon) == 0x000018, "Wrong size on CraftingFunctions_GetConsumableIcon");
static_assert(offsetof(CraftingFunctions_GetConsumableIcon, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetConsumableIcon::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableIcon, Size) == 0x000008, "Member 'CraftingFunctions_GetConsumableIcon::Size' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableIcon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumableIcon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableInQueueInfo
// 0x0048 (0x0048 - 0x0000)
struct CraftingFunctions_GetConsumableInQueueInfo final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingItemStatus                    ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumableInQueueInfo) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableInQueueInfo");
static_assert(sizeof(CraftingFunctions_GetConsumableInQueueInfo) == 0x000048, "Wrong size on CraftingFunctions_GetConsumableInQueueInfo");
static_assert(offsetof(CraftingFunctions_GetConsumableInQueueInfo, Index_0) == 0x000000, "Member 'CraftingFunctions_GetConsumableInQueueInfo::Index_0' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableInQueueInfo, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumableInQueueInfo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableInQueueInfo, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumableInQueueInfo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumableName
// 0x0020 (0x0020 - 0x0000)
struct CraftingFunctions_GetConsumableName final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumableName) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumableName");
static_assert(sizeof(CraftingFunctions_GetConsumableName) == 0x000020, "Wrong size on CraftingFunctions_GetConsumableName");
static_assert(offsetof(CraftingFunctions_GetConsumableName, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetConsumableName::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumableName, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetConsumableName::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePartCount
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablePartCount final
{
public:
	TSubclassOf<class AConsumablePart>            ConsumablePartClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumablePartCount) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePartCount");
static_assert(sizeof(CraftingFunctions_GetConsumablePartCount) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablePartCount");
static_assert(offsetof(CraftingFunctions_GetConsumablePartCount, ConsumablePartClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePartCount::ConsumablePartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartCount, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumablePartCount::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartCount, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumablePartCount::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePartIcon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablePartIcon final
{
public:
	TSubclassOf<class AConsumablePart>            ConsumablePartClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSize                                     Size;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumablePartIcon) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePartIcon");
static_assert(sizeof(CraftingFunctions_GetConsumablePartIcon) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablePartIcon");
static_assert(offsetof(CraftingFunctions_GetConsumablePartIcon, ConsumablePartClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePartIcon::ConsumablePartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartIcon, Size) == 0x000008, "Member 'CraftingFunctions_GetConsumablePartIcon::Size' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartIcon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumablePartIcon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePartName
// 0x0020 (0x0020 - 0x0000)
struct CraftingFunctions_GetConsumablePartName final
{
public:
	TSubclassOf<class AConsumablePart>            ConsumablePartClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumablePartName) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePartName");
static_assert(sizeof(CraftingFunctions_GetConsumablePartName) == 0x000020, "Wrong size on CraftingFunctions_GetConsumablePartName");
static_assert(offsetof(CraftingFunctions_GetConsumablePartName, ConsumablePartClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePartName::ConsumablePartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartName, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetConsumablePartName::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePartPrice
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetConsumablePartPrice final
{
public:
	TSubclassOf<class AConsumablePart>            ConsumablePartClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumablePartPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePartPrice");
static_assert(sizeof(CraftingFunctions_GetConsumablePartPrice) == 0x000010, "Wrong size on CraftingFunctions_GetConsumablePartPrice");
static_assert(offsetof(CraftingFunctions_GetConsumablePartPrice, ConsumablePartClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePartPrice::ConsumablePartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartPrice, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetConsumablePartPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePartPriceForDeconstruction
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablePartPriceForDeconstruction final
{
public:
	TSubclassOf<class AConsumablePart>            ConsumablePartClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumablePartPriceForDeconstruction) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePartPriceForDeconstruction");
static_assert(sizeof(CraftingFunctions_GetConsumablePartPriceForDeconstruction) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablePartPriceForDeconstruction");
static_assert(offsetof(CraftingFunctions_GetConsumablePartPriceForDeconstruction, ConsumablePartClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePartPriceForDeconstruction::ConsumablePartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartPriceForDeconstruction, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumablePartPriceForDeconstruction::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePartPriceForDeconstruction, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumablePartPriceForDeconstruction::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablePlan final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AConsumablePlan>            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumablePlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePlan");
static_assert(sizeof(CraftingFunctions_GetConsumablePlan) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablePlan");
static_assert(offsetof(CraftingFunctions_GetConsumablePlan, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePlan::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumablePlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumablePlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablePrice
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablePrice final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetConsumablePrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablePrice");
static_assert(sizeof(CraftingFunctions_GetConsumablePrice) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablePrice");
static_assert(offsetof(CraftingFunctions_GetConsumablePrice, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablePrice::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePrice, Stash) == 0x000008, "Member 'CraftingFunctions_GetConsumablePrice::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablePrice, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetConsumablePrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetConsumablesPlanParts
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetConsumablesPlanParts final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AConsumablePart>>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetConsumablesPlanParts) == 0x000008, "Wrong alignment on CraftingFunctions_GetConsumablesPlanParts");
static_assert(sizeof(CraftingFunctions_GetConsumablesPlanParts) == 0x000018, "Wrong size on CraftingFunctions_GetConsumablesPlanParts");
static_assert(offsetof(CraftingFunctions_GetConsumablesPlanParts, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_GetConsumablesPlanParts::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetConsumablesPlanParts, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetConsumablesPlanParts::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCostForBoostCraftingItem
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetCostForBoostCraftingItem final
{
public:
	ECraftingQueueType                            Queue;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetCostForBoostCraftingItem) == 0x000008, "Wrong alignment on CraftingFunctions_GetCostForBoostCraftingItem");
static_assert(sizeof(CraftingFunctions_GetCostForBoostCraftingItem) == 0x000018, "Wrong size on CraftingFunctions_GetCostForBoostCraftingItem");
static_assert(offsetof(CraftingFunctions_GetCostForBoostCraftingItem, Queue) == 0x000000, "Member 'CraftingFunctions_GetCostForBoostCraftingItem::Queue' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCostForBoostCraftingItem, Stash) == 0x000008, "Member 'CraftingFunctions_GetCostForBoostCraftingItem::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCostForBoostCraftingItem, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetCostForBoostCraftingItem::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCraftManager
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetCraftManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACraftingConfigManager*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCraftManager) == 0x000008, "Wrong alignment on CraftingFunctions_GetCraftManager");
static_assert(sizeof(CraftingFunctions_GetCraftManager) == 0x000010, "Wrong size on CraftingFunctions_GetCraftManager");
static_assert(offsetof(CraftingFunctions_GetCraftManager, WorldContextObject) == 0x000000, "Member 'CraftingFunctions_GetCraftManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCraftManager, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCraftManager::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingAmmo
// 0x0038 (0x0038 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingAmmo final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingItemInfo                      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingAmmo) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingAmmo");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingAmmo) == 0x000038, "Wrong size on CraftingFunctions_GetCurrentCraftingAmmo");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingAmmo, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingAmmo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingAmmo, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingAmmo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingAmmoClass
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingAmmoClass final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAmmoItem>                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingAmmoClass) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingAmmoClass");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingAmmoClass) == 0x000010, "Wrong size on CraftingFunctions_GetCurrentCraftingAmmoClass");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingAmmoClass, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingAmmoClass::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingAmmoClass, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingAmmoClass::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingConsumableClass
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingConsumableClass final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AConsumableItem>            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingConsumableClass) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingConsumableClass");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingConsumableClass) == 0x000010, "Wrong size on CraftingFunctions_GetCurrentCraftingConsumableClass");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingConsumableClass, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingConsumableClass::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingConsumableClass, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingConsumableClass::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingConsumables
// 0x0038 (0x0038 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingConsumables final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingItemInfo                      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingConsumables) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingConsumables");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingConsumables) == 0x000038, "Wrong size on CraftingFunctions_GetCurrentCraftingConsumables");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingConsumables, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingConsumables::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingConsumables, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingConsumables::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingWeapon
// 0x0038 (0x0038 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingWeapon final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingItemInfo                      ReturnValue;                                       // 0x0008(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingWeapon");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingWeapon) == 0x000038, "Wrong size on CraftingFunctions_GetCurrentCraftingWeapon");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingWeapon, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingWeapon, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetCurrentCraftingWeaponClass
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetCurrentCraftingWeaponClass final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetCurrentCraftingWeaponClass) == 0x000008, "Wrong alignment on CraftingFunctions_GetCurrentCraftingWeaponClass");
static_assert(sizeof(CraftingFunctions_GetCurrentCraftingWeaponClass) == 0x000010, "Wrong size on CraftingFunctions_GetCurrentCraftingWeaponClass");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingWeaponClass, Stash) == 0x000000, "Member 'CraftingFunctions_GetCurrentCraftingWeaponClass::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetCurrentCraftingWeaponClass, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetCurrentCraftingWeaponClass::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetItemFromCraftingQueue
// 0x0040 (0x0040 - 0x0000)
struct CraftingFunctions_GetItemFromCraftingQueue final
{
public:
	struct FCloudCraftingQueue                    Queue;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AItem>                      ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetItemFromCraftingQueue) == 0x000008, "Wrong alignment on CraftingFunctions_GetItemFromCraftingQueue");
static_assert(sizeof(CraftingFunctions_GetItemFromCraftingQueue) == 0x000040, "Wrong size on CraftingFunctions_GetItemFromCraftingQueue");
static_assert(offsetof(CraftingFunctions_GetItemFromCraftingQueue, Queue) == 0x000000, "Member 'CraftingFunctions_GetItemFromCraftingQueue::Queue' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetItemFromCraftingQueue, WorldContextObject) == 0x000028, "Member 'CraftingFunctions_GetItemFromCraftingQueue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetItemFromCraftingQueue, Index_0) == 0x000030, "Member 'CraftingFunctions_GetItemFromCraftingQueue::Index_0' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetItemFromCraftingQueue, ReturnValue) == 0x000038, "Member 'CraftingFunctions_GetItemFromCraftingQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetItemsInConsumableCraftingQueue
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetItemsInConsumableCraftingQueue final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudCraftedItem>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetItemsInConsumableCraftingQueue) == 0x000008, "Wrong alignment on CraftingFunctions_GetItemsInConsumableCraftingQueue");
static_assert(sizeof(CraftingFunctions_GetItemsInConsumableCraftingQueue) == 0x000018, "Wrong size on CraftingFunctions_GetItemsInConsumableCraftingQueue");
static_assert(offsetof(CraftingFunctions_GetItemsInConsumableCraftingQueue, Stash) == 0x000000, "Member 'CraftingFunctions_GetItemsInConsumableCraftingQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetItemsInConsumableCraftingQueue, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetItemsInConsumableCraftingQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetItemsInWeaponsCraftingQueue
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetItemsInWeaponsCraftingQueue final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudCraftedItem>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetItemsInWeaponsCraftingQueue) == 0x000008, "Wrong alignment on CraftingFunctions_GetItemsInWeaponsCraftingQueue");
static_assert(sizeof(CraftingFunctions_GetItemsInWeaponsCraftingQueue) == 0x000018, "Wrong size on CraftingFunctions_GetItemsInWeaponsCraftingQueue");
static_assert(offsetof(CraftingFunctions_GetItemsInWeaponsCraftingQueue, Stash) == 0x000000, "Member 'CraftingFunctions_GetItemsInWeaponsCraftingQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetItemsInWeaponsCraftingQueue, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetItemsInWeaponsCraftingQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForConsumable
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForConsumable final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForConsumable");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForConsumable) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForConsumable");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumable, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForConsumable::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumable, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumable, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForConsumableFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForConsumableFromPlan final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForConsumableFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForConsumableFromPlan");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForConsumableFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForConsumableFromPlan");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumableFromPlan, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForConsumableFromPlan::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumableFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForConsumableFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForConsumableFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForConsumableFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForCraftConsumable
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForCraftConsumable final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForCraftConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForCraftConsumable");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForCraftConsumable) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForCraftConsumable");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftConsumable, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForCraftConsumable::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftConsumable, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForCraftConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftConsumable, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForCraftConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForCraftWeapon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForCraftWeapon final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForCraftWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForCraftWeapon");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForCraftWeapon) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForCraftWeapon");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftWeapon, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForCraftWeapon::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForCraftWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForCraftWeapon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForCraftWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForWeapon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForWeapon final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForWeapon");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForWeapon) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForWeapon");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeapon, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeapon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetNeededLevelForWeaponFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetNeededLevelForWeaponFromPlan final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetNeededLevelForWeaponFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetNeededLevelForWeaponFromPlan");
static_assert(sizeof(CraftingFunctions_GetNeededLevelForWeaponFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetNeededLevelForWeaponFromPlan");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeaponFromPlan, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetNeededLevelForWeaponFromPlan::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeaponFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetNeededLevelForWeaponFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetNeededLevelForWeaponFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetNeededLevelForWeaponFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetRemainingAmmoCraftingTime
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetRemainingAmmoCraftingTime final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetRemainingAmmoCraftingTime) == 0x000008, "Wrong alignment on CraftingFunctions_GetRemainingAmmoCraftingTime");
static_assert(sizeof(CraftingFunctions_GetRemainingAmmoCraftingTime) == 0x000010, "Wrong size on CraftingFunctions_GetRemainingAmmoCraftingTime");
static_assert(offsetof(CraftingFunctions_GetRemainingAmmoCraftingTime, Stash) == 0x000000, "Member 'CraftingFunctions_GetRemainingAmmoCraftingTime::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetRemainingAmmoCraftingTime, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetRemainingAmmoCraftingTime::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetRemainingConsumablesCraftingTime
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetRemainingConsumablesCraftingTime final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetRemainingConsumablesCraftingTime) == 0x000008, "Wrong alignment on CraftingFunctions_GetRemainingConsumablesCraftingTime");
static_assert(sizeof(CraftingFunctions_GetRemainingConsumablesCraftingTime) == 0x000010, "Wrong size on CraftingFunctions_GetRemainingConsumablesCraftingTime");
static_assert(offsetof(CraftingFunctions_GetRemainingConsumablesCraftingTime, Stash) == 0x000000, "Member 'CraftingFunctions_GetRemainingConsumablesCraftingTime::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetRemainingConsumablesCraftingTime, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetRemainingConsumablesCraftingTime::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetRemainingCraftingTime
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetRemainingCraftingTime final
{
public:
	ECraftingQueueType                            Queue;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetRemainingCraftingTime) == 0x000008, "Wrong alignment on CraftingFunctions_GetRemainingCraftingTime");
static_assert(sizeof(CraftingFunctions_GetRemainingCraftingTime) == 0x000018, "Wrong size on CraftingFunctions_GetRemainingCraftingTime");
static_assert(offsetof(CraftingFunctions_GetRemainingCraftingTime, Queue) == 0x000000, "Member 'CraftingFunctions_GetRemainingCraftingTime::Queue' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetRemainingCraftingTime, Stash) == 0x000008, "Member 'CraftingFunctions_GetRemainingCraftingTime::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetRemainingCraftingTime, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetRemainingCraftingTime::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetRemainingWeaponCraftingTime
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetRemainingWeaponCraftingTime final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetRemainingWeaponCraftingTime) == 0x000008, "Wrong alignment on CraftingFunctions_GetRemainingWeaponCraftingTime");
static_assert(sizeof(CraftingFunctions_GetRemainingWeaponCraftingTime) == 0x000010, "Wrong size on CraftingFunctions_GetRemainingWeaponCraftingTime");
static_assert(offsetof(CraftingFunctions_GetRemainingWeaponCraftingTime, Stash) == 0x000000, "Member 'CraftingFunctions_GetRemainingWeaponCraftingTime::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetRemainingWeaponCraftingTime, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetRemainingWeaponCraftingTime::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftConsumableFromMaterialInSec
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromMaterialInSec::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftConsumableFromPartsInSec
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec, ConsumableClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec::ConsumableClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSec::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftConsumableFromPartsInSecFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftConsumableFromPartsInSecFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftWeaponFromMaterialInSec
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromMaterialInSec::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftWeaponFromPartsInSec
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSec::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetTimeToCraftWeaponFromPartsInSecFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan");
static_assert(sizeof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetTimeToCraftWeaponFromPartsInSecFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponCostInParts
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponCostInParts final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponCostInParts) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponCostInParts");
static_assert(sizeof(CraftingFunctions_GetWeaponCostInParts) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponCostInParts");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInParts, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponCostInParts::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInParts, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponCostInParts::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInParts, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponCostInParts::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponCostInPartsFromPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponCostInPartsFromPlan final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponCostInPartsFromPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponCostInPartsFromPlan");
static_assert(sizeof(CraftingFunctions_GetWeaponCostInPartsFromPlan) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponCostInPartsFromPlan");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInPartsFromPlan, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponCostInPartsFromPlan::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInPartsFromPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponCostInPartsFromPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCostInPartsFromPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponCostInPartsFromPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponCraftingBoosterPrice
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetWeaponCraftingBoosterPrice final
{
public:
	TSubclassOf<class AWeapon>                    ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponCraftingBoosterPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponCraftingBoosterPrice");
static_assert(sizeof(CraftingFunctions_GetWeaponCraftingBoosterPrice) == 0x000010, "Wrong size on CraftingFunctions_GetWeaponCraftingBoosterPrice");
static_assert(offsetof(CraftingFunctions_GetWeaponCraftingBoosterPrice, ItemClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponCraftingBoosterPrice::ItemClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCraftingBoosterPrice, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponCraftingBoosterPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponCraftingQueue
// 0x0030 (0x0030 - 0x0000)
struct CraftingFunctions_GetWeaponCraftingQueue final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudCraftingQueue                    ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponCraftingQueue) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponCraftingQueue");
static_assert(sizeof(CraftingFunctions_GetWeaponCraftingQueue) == 0x000030, "Wrong size on CraftingFunctions_GetWeaponCraftingQueue");
static_assert(offsetof(CraftingFunctions_GetWeaponCraftingQueue, Stash) == 0x000000, "Member 'CraftingFunctions_GetWeaponCraftingQueue::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponCraftingQueue, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponCraftingQueue::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponIcon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponIcon final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSize                                     Size;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponIcon) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponIcon");
static_assert(sizeof(CraftingFunctions_GetWeaponIcon) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponIcon");
static_assert(offsetof(CraftingFunctions_GetWeaponIcon, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponIcon::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponIcon, Size) == 0x000008, "Member 'CraftingFunctions_GetWeaponIcon::Size' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponIcon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponIcon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponInQueueInfo
// 0x0048 (0x0048 - 0x0000)
struct CraftingFunctions_GetWeaponInQueueInfo final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCraftingItemStatus                    ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponInQueueInfo) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponInQueueInfo");
static_assert(sizeof(CraftingFunctions_GetWeaponInQueueInfo) == 0x000048, "Wrong size on CraftingFunctions_GetWeaponInQueueInfo");
static_assert(offsetof(CraftingFunctions_GetWeaponInQueueInfo, Index_0) == 0x000000, "Member 'CraftingFunctions_GetWeaponInQueueInfo::Index_0' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponInQueueInfo, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponInQueueInfo::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponInQueueInfo, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponInQueueInfo::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponName
// 0x0020 (0x0020 - 0x0000)
struct CraftingFunctions_GetWeaponName final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponName) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponName");
static_assert(sizeof(CraftingFunctions_GetWeaponName) == 0x000020, "Wrong size on CraftingFunctions_GetWeaponName");
static_assert(offsetof(CraftingFunctions_GetWeaponName, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponName::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponName, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponName::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPartCount
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPartCount final
{
public:
	TSubclassOf<class AWeaponPart>                WeaponPartClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponPartCount) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPartCount");
static_assert(sizeof(CraftingFunctions_GetWeaponPartCount) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPartCount");
static_assert(offsetof(CraftingFunctions_GetWeaponPartCount, WeaponPartClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPartCount::WeaponPartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartCount, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponPartCount::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartCount, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponPartCount::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPartIcon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPartIcon final
{
public:
	TSubclassOf<class AWeaponPart>                WeaponPartClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EIconSize                                     Size;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponPartIcon) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPartIcon");
static_assert(sizeof(CraftingFunctions_GetWeaponPartIcon) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPartIcon");
static_assert(offsetof(CraftingFunctions_GetWeaponPartIcon, WeaponPartClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPartIcon::WeaponPartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartIcon, Size) == 0x000008, "Member 'CraftingFunctions_GetWeaponPartIcon::Size' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartIcon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponPartIcon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPartName
// 0x0020 (0x0020 - 0x0000)
struct CraftingFunctions_GetWeaponPartName final
{
public:
	TSubclassOf<class AWeaponPart>                WeaponPartClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponPartName) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPartName");
static_assert(sizeof(CraftingFunctions_GetWeaponPartName) == 0x000020, "Wrong size on CraftingFunctions_GetWeaponPartName");
static_assert(offsetof(CraftingFunctions_GetWeaponPartName, WeaponPartClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPartName::WeaponPartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartName, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponPartName::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPartPrice
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_GetWeaponPartPrice final
{
public:
	TSubclassOf<class AWeaponPart>                WeaponPartClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponPartPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPartPrice");
static_assert(sizeof(CraftingFunctions_GetWeaponPartPrice) == 0x000010, "Wrong size on CraftingFunctions_GetWeaponPartPrice");
static_assert(offsetof(CraftingFunctions_GetWeaponPartPrice, WeaponPartClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPartPrice::WeaponPartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartPrice, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponPartPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPartPriceForDeconstruction
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPartPriceForDeconstruction final
{
public:
	TSubclassOf<class AWeaponPart>                WeaponPartClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponPartPriceForDeconstruction) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPartPriceForDeconstruction");
static_assert(sizeof(CraftingFunctions_GetWeaponPartPriceForDeconstruction) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPartPriceForDeconstruction");
static_assert(offsetof(CraftingFunctions_GetWeaponPartPriceForDeconstruction, WeaponPartClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPartPriceForDeconstruction::WeaponPartClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartPriceForDeconstruction, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponPartPriceForDeconstruction::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPartPriceForDeconstruction, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponPartPriceForDeconstruction::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPlan final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponPlan>                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponPlan) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPlan");
static_assert(sizeof(CraftingFunctions_GetWeaponPlan) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPlan");
static_assert(offsetof(CraftingFunctions_GetWeaponPlan, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPlan::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPlan, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponPlan::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPlanParts
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPlanParts final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeaponPart>>        ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingFunctions_GetWeaponPlanParts) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPlanParts");
static_assert(sizeof(CraftingFunctions_GetWeaponPlanParts) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPlanParts");
static_assert(offsetof(CraftingFunctions_GetWeaponPlanParts, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPlanParts::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPlanParts, ReturnValue) == 0x000008, "Member 'CraftingFunctions_GetWeaponPlanParts::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.GetWeaponPrice
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_GetWeaponPrice final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_GetWeaponPrice) == 0x000008, "Wrong alignment on CraftingFunctions_GetWeaponPrice");
static_assert(sizeof(CraftingFunctions_GetWeaponPrice) == 0x000018, "Wrong size on CraftingFunctions_GetWeaponPrice");
static_assert(offsetof(CraftingFunctions_GetWeaponPrice, WeaponClass) == 0x000000, "Member 'CraftingFunctions_GetWeaponPrice::WeaponClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPrice, Stash) == 0x000008, "Member 'CraftingFunctions_GetWeaponPrice::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_GetWeaponPrice, ReturnValue) == 0x000010, "Member 'CraftingFunctions_GetWeaponPrice::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.HasLevelForCraftConsumable
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_HasLevelForCraftConsumable final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_HasLevelForCraftConsumable) == 0x000008, "Wrong alignment on CraftingFunctions_HasLevelForCraftConsumable");
static_assert(sizeof(CraftingFunctions_HasLevelForCraftConsumable) == 0x000018, "Wrong size on CraftingFunctions_HasLevelForCraftConsumable");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftConsumable, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_HasLevelForCraftConsumable::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftConsumable, Stash) == 0x000008, "Member 'CraftingFunctions_HasLevelForCraftConsumable::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftConsumable, ReturnValue) == 0x000010, "Member 'CraftingFunctions_HasLevelForCraftConsumable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.HasLevelForCraftWeapon
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_HasLevelForCraftWeapon final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_HasLevelForCraftWeapon) == 0x000008, "Wrong alignment on CraftingFunctions_HasLevelForCraftWeapon");
static_assert(sizeof(CraftingFunctions_HasLevelForCraftWeapon) == 0x000018, "Wrong size on CraftingFunctions_HasLevelForCraftWeapon");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftWeapon, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_HasLevelForCraftWeapon::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftWeapon, Stash) == 0x000008, "Member 'CraftingFunctions_HasLevelForCraftWeapon::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_HasLevelForCraftWeapon, ReturnValue) == 0x000010, "Member 'CraftingFunctions_HasLevelForCraftWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.IsConsumableCraftable
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_IsConsumableCraftable final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_IsConsumableCraftable) == 0x000008, "Wrong alignment on CraftingFunctions_IsConsumableCraftable");
static_assert(sizeof(CraftingFunctions_IsConsumableCraftable) == 0x000010, "Wrong size on CraftingFunctions_IsConsumableCraftable");
static_assert(offsetof(CraftingFunctions_IsConsumableCraftable, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_IsConsumableCraftable::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsConsumableCraftable, ReturnValue) == 0x000008, "Member 'CraftingFunctions_IsConsumableCraftable::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.IsConsumableEquipableFromShelter
// 0x0010 (0x0010 - 0x0000)
struct CraftingFunctions_IsConsumableEquipableFromShelter final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_IsConsumableEquipableFromShelter) == 0x000008, "Wrong alignment on CraftingFunctions_IsConsumableEquipableFromShelter");
static_assert(sizeof(CraftingFunctions_IsConsumableEquipableFromShelter) == 0x000010, "Wrong size on CraftingFunctions_IsConsumableEquipableFromShelter");
static_assert(offsetof(CraftingFunctions_IsConsumableEquipableFromShelter, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_IsConsumableEquipableFromShelter::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsConsumableEquipableFromShelter, ReturnValue) == 0x000008, "Member 'CraftingFunctions_IsConsumableEquipableFromShelter::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.IsConsumablePlanUnlocked
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_IsConsumablePlanUnlocked final
{
public:
	TSubclassOf<class AConsumablePlan>            ConsumablePlanClass;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_IsConsumablePlanUnlocked) == 0x000008, "Wrong alignment on CraftingFunctions_IsConsumablePlanUnlocked");
static_assert(sizeof(CraftingFunctions_IsConsumablePlanUnlocked) == 0x000018, "Wrong size on CraftingFunctions_IsConsumablePlanUnlocked");
static_assert(offsetof(CraftingFunctions_IsConsumablePlanUnlocked, ConsumablePlanClass) == 0x000000, "Member 'CraftingFunctions_IsConsumablePlanUnlocked::ConsumablePlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsConsumablePlanUnlocked, Stash) == 0x000008, "Member 'CraftingFunctions_IsConsumablePlanUnlocked::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsConsumablePlanUnlocked, ReturnValue) == 0x000010, "Member 'CraftingFunctions_IsConsumablePlanUnlocked::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.IsWeaponPlanUnlocked
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_IsWeaponPlanUnlocked final
{
public:
	TSubclassOf<class AWeaponPlan>                WeaponPlanClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_IsWeaponPlanUnlocked) == 0x000008, "Wrong alignment on CraftingFunctions_IsWeaponPlanUnlocked");
static_assert(sizeof(CraftingFunctions_IsWeaponPlanUnlocked) == 0x000018, "Wrong size on CraftingFunctions_IsWeaponPlanUnlocked");
static_assert(offsetof(CraftingFunctions_IsWeaponPlanUnlocked, WeaponPlanClass) == 0x000000, "Member 'CraftingFunctions_IsWeaponPlanUnlocked::WeaponPlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsWeaponPlanUnlocked, Stash) == 0x000008, "Member 'CraftingFunctions_IsWeaponPlanUnlocked::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_IsWeaponPlanUnlocked, ReturnValue) == 0x000010, "Member 'CraftingFunctions_IsWeaponPlanUnlocked::ReturnValue' has a wrong offset!");

// Function Flame.CraftingFunctions.UnlockPlan
// 0x0018 (0x0018 - 0x0000)
struct CraftingFunctions_UnlockPlan final
{
public:
	TSubclassOf<class APlan>                      PlanClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CraftingFunctions_UnlockPlan) == 0x000008, "Wrong alignment on CraftingFunctions_UnlockPlan");
static_assert(sizeof(CraftingFunctions_UnlockPlan) == 0x000018, "Wrong size on CraftingFunctions_UnlockPlan");
static_assert(offsetof(CraftingFunctions_UnlockPlan, PlanClass) == 0x000000, "Member 'CraftingFunctions_UnlockPlan::PlanClass' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_UnlockPlan, Stash) == 0x000008, "Member 'CraftingFunctions_UnlockPlan::Stash' has a wrong offset!");
static_assert(offsetof(CraftingFunctions_UnlockPlan, ReturnValue) == 0x000010, "Member 'CraftingFunctions_UnlockPlan::ReturnValue' has a wrong offset!");

// Function Flame.HasItemInterface.SetItemInstance
// 0x0008 (0x0008 - 0x0000)
struct HasItemInterface_SetItemInstance final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemInterface_SetItemInstance) == 0x000008, "Wrong alignment on HasItemInterface_SetItemInstance");
static_assert(sizeof(HasItemInterface_SetItemInstance) == 0x000008, "Wrong size on HasItemInterface_SetItemInstance");
static_assert(offsetof(HasItemInterface_SetItemInstance, Item) == 0x000000, "Member 'HasItemInterface_SetItemInstance::Item' has a wrong offset!");

// Function Flame.HasItemInterface.SetItemType
// 0x0008 (0x0008 - 0x0000)
struct HasItemInterface_SetItemType final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemInterface_SetItemType) == 0x000008, "Wrong alignment on HasItemInterface_SetItemType");
static_assert(sizeof(HasItemInterface_SetItemType) == 0x000008, "Wrong size on HasItemInterface_SetItemType");
static_assert(offsetof(HasItemInterface_SetItemType, ItemClass) == 0x000000, "Member 'HasItemInterface_SetItemType::ItemClass' has a wrong offset!");

// Function Flame.HasItemInterface.GetItemObsolete
// 0x0008 (0x0008 - 0x0000)
struct HasItemInterface_GetItemObsolete final
{
public:
	class AItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemInterface_GetItemObsolete) == 0x000008, "Wrong alignment on HasItemInterface_GetItemObsolete");
static_assert(sizeof(HasItemInterface_GetItemObsolete) == 0x000008, "Wrong size on HasItemInterface_GetItemObsolete");
static_assert(offsetof(HasItemInterface_GetItemObsolete, ReturnValue) == 0x000000, "Member 'HasItemInterface_GetItemObsolete::ReturnValue' has a wrong offset!");

// Function Flame.HasItemInterface.GetItemType
// 0x0008 (0x0008 - 0x0000)
struct HasItemInterface_GetItemType final
{
public:
	TSubclassOf<class AItem>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemInterface_GetItemType) == 0x000008, "Wrong alignment on HasItemInterface_GetItemType");
static_assert(sizeof(HasItemInterface_GetItemType) == 0x000008, "Wrong size on HasItemInterface_GetItemType");
static_assert(offsetof(HasItemInterface_GetItemType, ReturnValue) == 0x000000, "Member 'HasItemInterface_GetItemType::ReturnValue' has a wrong offset!");

// Function Flame.CraftingTimerManager.GetCurrentTime
// 0x0008 (0x0008 - 0x0000)
struct CraftingTimerManager_GetCurrentTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingTimerManager_GetCurrentTime) == 0x000008, "Wrong alignment on CraftingTimerManager_GetCurrentTime");
static_assert(sizeof(CraftingTimerManager_GetCurrentTime) == 0x000008, "Wrong size on CraftingTimerManager_GetCurrentTime");
static_assert(offsetof(CraftingTimerManager_GetCurrentTime, ReturnValue) == 0x000000, "Member 'CraftingTimerManager_GetCurrentTime::ReturnValue' has a wrong offset!");

// Function Flame.CraftingTimerManager.GetLastUpdateTime
// 0x0008 (0x0008 - 0x0000)
struct CraftingTimerManager_GetLastUpdateTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CraftingTimerManager_GetLastUpdateTime) == 0x000008, "Wrong alignment on CraftingTimerManager_GetLastUpdateTime");
static_assert(sizeof(CraftingTimerManager_GetLastUpdateTime) == 0x000008, "Wrong size on CraftingTimerManager_GetLastUpdateTime");
static_assert(offsetof(CraftingTimerManager_GetLastUpdateTime, ReturnValue) == 0x000000, "Member 'CraftingTimerManager_GetLastUpdateTime::ReturnValue' has a wrong offset!");

// Function Flame.Mannequin.GetPlayerCurrentOutfitVariantSlots
// 0x0028 (0x0028 - 0x0000)
struct Mannequin_GetPlayerCurrentOutfitVariantSlots final
{
public:
	TArray<struct FCustomizationSlotVariant>      PairsToOverride;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationSlotVariant>      OutVariantSlotsPairs;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOutSucess;                                        // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mannequin_GetPlayerCurrentOutfitVariantSlots) == 0x000008, "Wrong alignment on Mannequin_GetPlayerCurrentOutfitVariantSlots");
static_assert(sizeof(Mannequin_GetPlayerCurrentOutfitVariantSlots) == 0x000028, "Wrong size on Mannequin_GetPlayerCurrentOutfitVariantSlots");
static_assert(offsetof(Mannequin_GetPlayerCurrentOutfitVariantSlots, PairsToOverride) == 0x000000, "Member 'Mannequin_GetPlayerCurrentOutfitVariantSlots::PairsToOverride' has a wrong offset!");
static_assert(offsetof(Mannequin_GetPlayerCurrentOutfitVariantSlots, OutVariantSlotsPairs) == 0x000010, "Member 'Mannequin_GetPlayerCurrentOutfitVariantSlots::OutVariantSlotsPairs' has a wrong offset!");
static_assert(offsetof(Mannequin_GetPlayerCurrentOutfitVariantSlots, bOutSucess) == 0x000020, "Member 'Mannequin_GetPlayerCurrentOutfitVariantSlots::bOutSucess' has a wrong offset!");

// Function Flame.Mannequin.InitFromCharacterNative
// 0x0010 (0x0010 - 0x0000)
struct Mannequin_InitFromCharacterNative final
{
public:
	const class AHumanCharacter*                  SourceCharacter;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Mannequin_InitFromCharacterNative) == 0x000008, "Wrong alignment on Mannequin_InitFromCharacterNative");
static_assert(sizeof(Mannequin_InitFromCharacterNative) == 0x000010, "Wrong size on Mannequin_InitFromCharacterNative");
static_assert(offsetof(Mannequin_InitFromCharacterNative, SourceCharacter) == 0x000000, "Member 'Mannequin_InitFromCharacterNative::SourceCharacter' has a wrong offset!");
static_assert(offsetof(Mannequin_InitFromCharacterNative, ReturnValue) == 0x000008, "Member 'Mannequin_InitFromCharacterNative::ReturnValue' has a wrong offset!");

// Function Flame.FlameScalableGridWidget.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct FlameScalableGridWidget_SetWidth final
{
public:
	int32                                         InWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameScalableGridWidget_SetWidth) == 0x000004, "Wrong alignment on FlameScalableGridWidget_SetWidth");
static_assert(sizeof(FlameScalableGridWidget_SetWidth) == 0x000004, "Wrong size on FlameScalableGridWidget_SetWidth");
static_assert(offsetof(FlameScalableGridWidget_SetWidth, InWidth) == 0x000000, "Member 'FlameScalableGridWidget_SetWidth::InWidth' has a wrong offset!");

// Function Flame.CurveMeleeArc.GetVectorValue
// 0x0010 (0x0010 - 0x0000)
struct CurveMeleeArc_GetVectorValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveMeleeArc_GetVectorValue) == 0x000004, "Wrong alignment on CurveMeleeArc_GetVectorValue");
static_assert(sizeof(CurveMeleeArc_GetVectorValue) == 0x000010, "Wrong size on CurveMeleeArc_GetVectorValue");
static_assert(offsetof(CurveMeleeArc_GetVectorValue, InTime) == 0x000000, "Member 'CurveMeleeArc_GetVectorValue::InTime' has a wrong offset!");
static_assert(offsetof(CurveMeleeArc_GetVectorValue, ReturnValue) == 0x000004, "Member 'CurveMeleeArc_GetVectorValue::ReturnValue' has a wrong offset!");

// Function Flame.CurveMovementSpeed.GetVectorValue
// 0x0010 (0x0010 - 0x0000)
struct CurveMovementSpeed_GetVectorValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveMovementSpeed_GetVectorValue) == 0x000004, "Wrong alignment on CurveMovementSpeed_GetVectorValue");
static_assert(sizeof(CurveMovementSpeed_GetVectorValue) == 0x000010, "Wrong size on CurveMovementSpeed_GetVectorValue");
static_assert(offsetof(CurveMovementSpeed_GetVectorValue, InTime) == 0x000000, "Member 'CurveMovementSpeed_GetVectorValue::InTime' has a wrong offset!");
static_assert(offsetof(CurveMovementSpeed_GetVectorValue, ReturnValue) == 0x000004, "Member 'CurveMovementSpeed_GetVectorValue::ReturnValue' has a wrong offset!");

// Function Flame.CurveSlopeSpeed.GetVectorValue
// 0x0010 (0x0010 - 0x0000)
struct CurveSlopeSpeed_GetVectorValue final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveSlopeSpeed_GetVectorValue) == 0x000004, "Wrong alignment on CurveSlopeSpeed_GetVectorValue");
static_assert(sizeof(CurveSlopeSpeed_GetVectorValue) == 0x000010, "Wrong size on CurveSlopeSpeed_GetVectorValue");
static_assert(offsetof(CurveSlopeSpeed_GetVectorValue, InTime) == 0x000000, "Member 'CurveSlopeSpeed_GetVectorValue::InTime' has a wrong offset!");
static_assert(offsetof(CurveSlopeSpeed_GetVectorValue, ReturnValue) == 0x000004, "Member 'CurveSlopeSpeed_GetVectorValue::ReturnValue' has a wrong offset!");

// Function Flame.CustomInputFilter.CheckFilter
// 0x0010 (0x0010 - 0x0000)
struct CustomInputFilter_CheckFilter final
{
public:
	const class AHumanPlayerController*           TargetController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputFilterResult                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputFilter_CheckFilter) == 0x000008, "Wrong alignment on CustomInputFilter_CheckFilter");
static_assert(sizeof(CustomInputFilter_CheckFilter) == 0x000010, "Wrong size on CustomInputFilter_CheckFilter");
static_assert(offsetof(CustomInputFilter_CheckFilter, TargetController) == 0x000000, "Member 'CustomInputFilter_CheckFilter::TargetController' has a wrong offset!");
static_assert(offsetof(CustomInputFilter_CheckFilter, ReturnValue) == 0x000008, "Member 'CustomInputFilter_CheckFilter::ReturnValue' has a wrong offset!");

// Function Flame.FlameSpectatorPawn.DrawDebugLocation
// 0x000C (0x000C - 0x0000)
struct FlameSpectatorPawn_DrawDebugLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpectatorPawn_DrawDebugLocation) == 0x000004, "Wrong alignment on FlameSpectatorPawn_DrawDebugLocation");
static_assert(sizeof(FlameSpectatorPawn_DrawDebugLocation) == 0x00000C, "Wrong size on FlameSpectatorPawn_DrawDebugLocation");
static_assert(offsetof(FlameSpectatorPawn_DrawDebugLocation, Location) == 0x000000, "Member 'FlameSpectatorPawn_DrawDebugLocation::Location' has a wrong offset!");

// Function Flame.CustomInputRule.CustomReactOnInput
// 0x0010 (0x0010 - 0x0000)
struct CustomInputRule_CustomReactOnInput final
{
public:
	const class AHumanPlayerController*           TargetController;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputRule                                    ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomInputRule_CustomReactOnInput) == 0x000008, "Wrong alignment on CustomInputRule_CustomReactOnInput");
static_assert(sizeof(CustomInputRule_CustomReactOnInput) == 0x000010, "Wrong size on CustomInputRule_CustomReactOnInput");
static_assert(offsetof(CustomInputRule_CustomReactOnInput, TargetController) == 0x000000, "Member 'CustomInputRule_CustomReactOnInput::TargetController' has a wrong offset!");
static_assert(offsetof(CustomInputRule_CustomReactOnInput, ReturnValue) == 0x000008, "Member 'CustomInputRule_CustomReactOnInput::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameSave.SaveGameToSlotByPlatform
// 0x0030 (0x0030 - 0x0000)
struct FlameGameSave_SaveGameToSlotByPlatform final
{
public:
	class UFlameGameInstance*                     FlameGameInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGameObject;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameGameSave*                         ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameSave_SaveGameToSlotByPlatform) == 0x000008, "Wrong alignment on FlameGameSave_SaveGameToSlotByPlatform");
static_assert(sizeof(FlameGameSave_SaveGameToSlotByPlatform) == 0x000030, "Wrong size on FlameGameSave_SaveGameToSlotByPlatform");
static_assert(offsetof(FlameGameSave_SaveGameToSlotByPlatform, FlameGameInstance) == 0x000000, "Member 'FlameGameSave_SaveGameToSlotByPlatform::FlameGameInstance' has a wrong offset!");
static_assert(offsetof(FlameGameSave_SaveGameToSlotByPlatform, SaveGameObject) == 0x000008, "Member 'FlameGameSave_SaveGameToSlotByPlatform::SaveGameObject' has a wrong offset!");
static_assert(offsetof(FlameGameSave_SaveGameToSlotByPlatform, SlotName) == 0x000010, "Member 'FlameGameSave_SaveGameToSlotByPlatform::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameSave_SaveGameToSlotByPlatform, UserIndex) == 0x000020, "Member 'FlameGameSave_SaveGameToSlotByPlatform::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameSave_SaveGameToSlotByPlatform, ReturnValue) == 0x000028, "Member 'FlameGameSave_SaveGameToSlotByPlatform::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameSave.ReceivedSaveResults
// 0x0018 (0x0018 - 0x0000)
struct FlameGameSave_ReceivedSaveResults final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSucceeded;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameSave_ReceivedSaveResults) == 0x000008, "Wrong alignment on FlameGameSave_ReceivedSaveResults");
static_assert(sizeof(FlameGameSave_ReceivedSaveResults) == 0x000018, "Wrong size on FlameGameSave_ReceivedSaveResults");
static_assert(offsetof(FlameGameSave_ReceivedSaveResults, SlotName) == 0x000000, "Member 'FlameGameSave_ReceivedSaveResults::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameSave_ReceivedSaveResults, UserIndex) == 0x000010, "Member 'FlameGameSave_ReceivedSaveResults::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameSave_ReceivedSaveResults, bSucceeded) == 0x000014, "Member 'FlameGameSave_ReceivedSaveResults::bSucceeded' has a wrong offset!");

// Function Flame.InventoryItemProvider.SetItemStorageComponent
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemProvider_SetItemStorageComponent final
{
public:
	const class UEquipmentStorageComponent*       Component;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemProvider_SetItemStorageComponent) == 0x000008, "Wrong alignment on InventoryItemProvider_SetItemStorageComponent");
static_assert(sizeof(InventoryItemProvider_SetItemStorageComponent) == 0x000008, "Wrong size on InventoryItemProvider_SetItemStorageComponent");
static_assert(offsetof(InventoryItemProvider_SetItemStorageComponent, Component) == 0x000000, "Member 'InventoryItemProvider_SetItemStorageComponent::Component' has a wrong offset!");

// Function Flame.InventoryItemProvider.SetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct InventoryItemProvider_SetPlayerController final
{
public:
	const class APlayerController*                InController;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryItemProvider_SetPlayerController) == 0x000008, "Wrong alignment on InventoryItemProvider_SetPlayerController");
static_assert(sizeof(InventoryItemProvider_SetPlayerController) == 0x000008, "Wrong size on InventoryItemProvider_SetPlayerController");
static_assert(offsetof(InventoryItemProvider_SetPlayerController, InController) == 0x000000, "Member 'InventoryItemProvider_SetPlayerController::InController' has a wrong offset!");

// Function Flame.Weapon.ActivateParticleSystem
// 0x0010 (0x0010 - 0x0000)
struct Weapon_ActivateParticleSystem final
{
public:
	class UParticleSystemComponent*               PS;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        Template;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_ActivateParticleSystem) == 0x000008, "Wrong alignment on Weapon_ActivateParticleSystem");
static_assert(sizeof(Weapon_ActivateParticleSystem) == 0x000010, "Wrong size on Weapon_ActivateParticleSystem");
static_assert(offsetof(Weapon_ActivateParticleSystem, PS) == 0x000000, "Member 'Weapon_ActivateParticleSystem::PS' has a wrong offset!");
static_assert(offsetof(Weapon_ActivateParticleSystem, Template) == 0x000008, "Member 'Weapon_ActivateParticleSystem::Template' has a wrong offset!");

// Function Flame.Weapon.GetSoundAttachementComponent
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetSoundAttachementComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetSoundAttachementComponent) == 0x000008, "Wrong alignment on Weapon_GetSoundAttachementComponent");
static_assert(sizeof(Weapon_GetSoundAttachementComponent) == 0x000008, "Wrong size on Weapon_GetSoundAttachementComponent");
static_assert(offsetof(Weapon_GetSoundAttachementComponent, ReturnValue) == 0x000000, "Member 'Weapon_GetSoundAttachementComponent::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.LoadAmmoFromBag
// 0x0001 (0x0001 - 0x0000)
struct Weapon_LoadAmmoFromBag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_LoadAmmoFromBag) == 0x000001, "Wrong alignment on Weapon_LoadAmmoFromBag");
static_assert(sizeof(Weapon_LoadAmmoFromBag) == 0x000001, "Wrong size on Weapon_LoadAmmoFromBag");
static_assert(offsetof(Weapon_LoadAmmoFromBag, ReturnValue) == 0x000000, "Member 'Weapon_LoadAmmoFromBag::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.MulticastPlayFireEffects
// 0x0001 (0x0001 - 0x0000)
struct Weapon_MulticastPlayFireEffects final
{
public:
	bool                                          bConsumedAmmo;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_MulticastPlayFireEffects) == 0x000001, "Wrong alignment on Weapon_MulticastPlayFireEffects");
static_assert(sizeof(Weapon_MulticastPlayFireEffects) == 0x000001, "Wrong size on Weapon_MulticastPlayFireEffects");
static_assert(offsetof(Weapon_MulticastPlayFireEffects, bConsumedAmmo) == 0x000000, "Member 'Weapon_MulticastPlayFireEffects::bConsumedAmmo' has a wrong offset!");

// Function Flame.Weapon.MulticastPlayMeleeEffects
// 0x0004 (0x0004 - 0x0000)
struct Weapon_MulticastPlayMeleeEffects final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_MulticastPlayMeleeEffects) == 0x000004, "Wrong alignment on Weapon_MulticastPlayMeleeEffects");
static_assert(sizeof(Weapon_MulticastPlayMeleeEffects) == 0x000004, "Wrong size on Weapon_MulticastPlayMeleeEffects");
static_assert(offsetof(Weapon_MulticastPlayMeleeEffects, Duration) == 0x000000, "Member 'Weapon_MulticastPlayMeleeEffects::Duration' has a wrong offset!");

// Function Flame.Weapon.OnRep_Skin
// 0x0008 (0x0008 - 0x0000)
struct Weapon_OnRep_Skin final
{
public:
	TSubclassOf<class AItemSkin>                  OldSkinClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_OnRep_Skin) == 0x000008, "Wrong alignment on Weapon_OnRep_Skin");
static_assert(sizeof(Weapon_OnRep_Skin) == 0x000008, "Wrong size on Weapon_OnRep_Skin");
static_assert(offsetof(Weapon_OnRep_Skin, OldSkinClass) == 0x000000, "Member 'Weapon_OnRep_Skin::OldSkinClass' has a wrong offset!");

// Function Flame.Weapon.OnRep_WeaponStateFiring
// 0x0010 (0x0010 - 0x0000)
struct Weapon_OnRep_WeaponStateFiring final
{
public:
	TArray<class UWeaponStateFiring*>             OldState;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_OnRep_WeaponStateFiring) == 0x000008, "Wrong alignment on Weapon_OnRep_WeaponStateFiring");
static_assert(sizeof(Weapon_OnRep_WeaponStateFiring) == 0x000010, "Wrong size on Weapon_OnRep_WeaponStateFiring");
static_assert(offsetof(Weapon_OnRep_WeaponStateFiring, OldState) == 0x000000, "Member 'Weapon_OnRep_WeaponStateFiring::OldState' has a wrong offset!");

// Function Flame.Weapon.PlayReloadSound
// 0x0008 (0x0008 - 0x0000)
struct Weapon_PlayReloadSound final
{
public:
	class USoundBase*                             SoundToPlay;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_PlayReloadSound) == 0x000008, "Wrong alignment on Weapon_PlayReloadSound");
static_assert(sizeof(Weapon_PlayReloadSound) == 0x000008, "Wrong size on Weapon_PlayReloadSound");
static_assert(offsetof(Weapon_PlayReloadSound, SoundToPlay) == 0x000000, "Member 'Weapon_PlayReloadSound::SoundToPlay' has a wrong offset!");

// Function Flame.Weapon.ReceiveMeleeHit
// 0x008C (0x008C - 0x0000)
struct Weapon_ReceiveMeleeHit final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_ReceiveMeleeHit) == 0x000004, "Wrong alignment on Weapon_ReceiveMeleeHit");
static_assert(sizeof(Weapon_ReceiveMeleeHit) == 0x00008C, "Wrong size on Weapon_ReceiveMeleeHit");
static_assert(offsetof(Weapon_ReceiveMeleeHit, HitResult) == 0x000000, "Member 'Weapon_ReceiveMeleeHit::HitResult' has a wrong offset!");

// Function Flame.Weapon.ReloadTimeEmpty
// 0x0004 (0x0004 - 0x0000)
struct Weapon_ReloadTimeEmpty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_ReloadTimeEmpty) == 0x000004, "Wrong alignment on Weapon_ReloadTimeEmpty");
static_assert(sizeof(Weapon_ReloadTimeEmpty) == 0x000004, "Wrong size on Weapon_ReloadTimeEmpty");
static_assert(offsetof(Weapon_ReloadTimeEmpty, ReturnValue) == 0x000000, "Member 'Weapon_ReloadTimeEmpty::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.ReloadTimeFull
// 0x0004 (0x0004 - 0x0000)
struct Weapon_ReloadTimeFull final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_ReloadTimeFull) == 0x000004, "Wrong alignment on Weapon_ReloadTimeFull");
static_assert(sizeof(Weapon_ReloadTimeFull) == 0x000004, "Wrong size on Weapon_ReloadTimeFull");
static_assert(offsetof(Weapon_ReloadTimeFull, ReturnValue) == 0x000000, "Member 'Weapon_ReloadTimeFull::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.SetSkinBP
// 0x0010 (0x0010 - 0x0000)
struct Weapon_SetSkinBP final
{
public:
	TSubclassOf<class AItemSkin>                  NewSkinClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Weapon_SetSkinBP) == 0x000008, "Wrong alignment on Weapon_SetSkinBP");
static_assert(sizeof(Weapon_SetSkinBP) == 0x000010, "Wrong size on Weapon_SetSkinBP");
static_assert(offsetof(Weapon_SetSkinBP, NewSkinClass) == 0x000000, "Member 'Weapon_SetSkinBP::NewSkinClass' has a wrong offset!");
static_assert(offsetof(Weapon_SetSkinBP, ReturnValue) == 0x000008, "Member 'Weapon_SetSkinBP::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.CanAcceptReplicatedAmmo
// 0x0001 (0x0001 - 0x0000)
struct Weapon_CanAcceptReplicatedAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_CanAcceptReplicatedAmmo) == 0x000001, "Wrong alignment on Weapon_CanAcceptReplicatedAmmo");
static_assert(sizeof(Weapon_CanAcceptReplicatedAmmo) == 0x000001, "Wrong size on Weapon_CanAcceptReplicatedAmmo");
static_assert(offsetof(Weapon_CanAcceptReplicatedAmmo, ReturnValue) == 0x000000, "Member 'Weapon_CanAcceptReplicatedAmmo::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.CanReload
// 0x0001 (0x0001 - 0x0000)
struct Weapon_CanReload final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_CanReload) == 0x000001, "Wrong alignment on Weapon_CanReload");
static_assert(sizeof(Weapon_CanReload) == 0x000001, "Wrong size on Weapon_CanReload");
static_assert(offsetof(Weapon_CanReload, ReturnValue) == 0x000000, "Member 'Weapon_CanReload::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetAimPointComponent
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetAimPointComponent final
{
public:
	class UAimPointComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetAimPointComponent) == 0x000008, "Wrong alignment on Weapon_GetAimPointComponent");
static_assert(sizeof(Weapon_GetAimPointComponent) == 0x000008, "Wrong size on Weapon_GetAimPointComponent");
static_assert(offsetof(Weapon_GetAimPointComponent, ReturnValue) == 0x000000, "Member 'Weapon_GetAimPointComponent::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetCurrentWeaponFireMode
// 0x0002 (0x0002 - 0x0000)
struct Weapon_GetCurrentWeaponFireMode final
{
public:
	EWeaponFireType                               OutType;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetCurrentWeaponFireMode) == 0x000001, "Wrong alignment on Weapon_GetCurrentWeaponFireMode");
static_assert(sizeof(Weapon_GetCurrentWeaponFireMode) == 0x000002, "Wrong size on Weapon_GetCurrentWeaponFireMode");
static_assert(offsetof(Weapon_GetCurrentWeaponFireMode, OutType) == 0x000000, "Member 'Weapon_GetCurrentWeaponFireMode::OutType' has a wrong offset!");
static_assert(offsetof(Weapon_GetCurrentWeaponFireMode, ReturnValue) == 0x000001, "Member 'Weapon_GetCurrentWeaponFireMode::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetExtraSkinGeometryMesh
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetExtraSkinGeometryMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetExtraSkinGeometryMesh) == 0x000008, "Wrong alignment on Weapon_GetExtraSkinGeometryMesh");
static_assert(sizeof(Weapon_GetExtraSkinGeometryMesh) == 0x000008, "Wrong size on Weapon_GetExtraSkinGeometryMesh");
static_assert(offsetof(Weapon_GetExtraSkinGeometryMesh, ReturnValue) == 0x000000, "Member 'Weapon_GetExtraSkinGeometryMesh::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetInventoryType
// 0x0001 (0x0001 - 0x0000)
struct Weapon_GetInventoryType final
{
public:
	EWeaponInventoryType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetInventoryType) == 0x000001, "Wrong alignment on Weapon_GetInventoryType");
static_assert(sizeof(Weapon_GetInventoryType) == 0x000001, "Wrong size on Weapon_GetInventoryType");
static_assert(offsetof(Weapon_GetInventoryType, ReturnValue) == 0x000000, "Member 'Weapon_GetInventoryType::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetMaterialInfoImplementation
// 0x0010 (0x0010 - 0x0000)
struct Weapon_GetMaterialInfoImplementation final
{
public:
	struct FFlameSkinMaterialInfo                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetMaterialInfoImplementation) == 0x000008, "Wrong alignment on Weapon_GetMaterialInfoImplementation");
static_assert(sizeof(Weapon_GetMaterialInfoImplementation) == 0x000010, "Wrong size on Weapon_GetMaterialInfoImplementation");
static_assert(offsetof(Weapon_GetMaterialInfoImplementation, ReturnValue) == 0x000000, "Member 'Weapon_GetMaterialInfoImplementation::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetParentDebugString
// 0x0010 (0x0010 - 0x0000)
struct Weapon_GetParentDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetParentDebugString) == 0x000008, "Wrong alignment on Weapon_GetParentDebugString");
static_assert(sizeof(Weapon_GetParentDebugString) == 0x000010, "Wrong size on Weapon_GetParentDebugString");
static_assert(offsetof(Weapon_GetParentDebugString, ReturnValue) == 0x000000, "Member 'Weapon_GetParentDebugString::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetPlan
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetPlan final
{
public:
	TSubclassOf<class AWeaponPlan>                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetPlan) == 0x000008, "Wrong alignment on Weapon_GetPlan");
static_assert(sizeof(Weapon_GetPlan) == 0x000008, "Wrong size on Weapon_GetPlan");
static_assert(offsetof(Weapon_GetPlan, ReturnValue) == 0x000000, "Member 'Weapon_GetPlan::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetShellImpactMaterialIndex
// 0x0004 (0x0004 - 0x0000)
struct Weapon_GetShellImpactMaterialIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetShellImpactMaterialIndex) == 0x000004, "Wrong alignment on Weapon_GetShellImpactMaterialIndex");
static_assert(sizeof(Weapon_GetShellImpactMaterialIndex) == 0x000004, "Wrong size on Weapon_GetShellImpactMaterialIndex");
static_assert(offsetof(Weapon_GetShellImpactMaterialIndex, ReturnValue) == 0x000000, "Member 'Weapon_GetShellImpactMaterialIndex::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetShellImpactSound
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetShellImpactSound final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetShellImpactSound) == 0x000008, "Wrong alignment on Weapon_GetShellImpactSound");
static_assert(sizeof(Weapon_GetShellImpactSound) == 0x000008, "Wrong size on Weapon_GetShellImpactSound");
static_assert(offsetof(Weapon_GetShellImpactSound, ReturnValue) == 0x000000, "Member 'Weapon_GetShellImpactSound::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetSightData
// 0x0030 (0x0030 - 0x0000)
struct Weapon_GetSightData final
{
public:
	struct FWeaponSightConfiguration              ReturnValue;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetSightData) == 0x000008, "Wrong alignment on Weapon_GetSightData");
static_assert(sizeof(Weapon_GetSightData) == 0x000030, "Wrong size on Weapon_GetSightData");
static_assert(offsetof(Weapon_GetSightData, ReturnValue) == 0x000000, "Member 'Weapon_GetSightData::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetSkeletalMeshLink
// 0x0028 (0x0028 - 0x0000)
struct Weapon_GetSkeletalMeshLink final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetSkeletalMeshLink) == 0x000008, "Wrong alignment on Weapon_GetSkeletalMeshLink");
static_assert(sizeof(Weapon_GetSkeletalMeshLink) == 0x000028, "Wrong size on Weapon_GetSkeletalMeshLink");
static_assert(offsetof(Weapon_GetSkeletalMeshLink, ReturnValue) == 0x000000, "Member 'Weapon_GetSkeletalMeshLink::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetSkin
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetSkin final
{
public:
	TSubclassOf<class AItemSkin>                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetSkin) == 0x000008, "Wrong alignment on Weapon_GetSkin");
static_assert(sizeof(Weapon_GetSkin) == 0x000008, "Wrong size on Weapon_GetSkin");
static_assert(offsetof(Weapon_GetSkin, ReturnValue) == 0x000000, "Member 'Weapon_GetSkin::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetSupportedAmmoType
// 0x0008 (0x0008 - 0x0000)
struct Weapon_GetSupportedAmmoType final
{
public:
	TSubclassOf<class AAmmoItem>                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetSupportedAmmoType) == 0x000008, "Wrong alignment on Weapon_GetSupportedAmmoType");
static_assert(sizeof(Weapon_GetSupportedAmmoType) == 0x000008, "Wrong size on Weapon_GetSupportedAmmoType");
static_assert(offsetof(Weapon_GetSupportedAmmoType, ReturnValue) == 0x000000, "Member 'Weapon_GetSupportedAmmoType::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetWeaponData
// 0x0418 (0x0418 - 0x0000)
struct Weapon_GetWeaponData final
{
public:
	struct FFirearmWeaponConfiguration            ReturnValue;                                       // 0x0000(0x0418)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetWeaponData) == 0x000008, "Wrong alignment on Weapon_GetWeaponData");
static_assert(sizeof(Weapon_GetWeaponData) == 0x000418, "Wrong size on Weapon_GetWeaponData");
static_assert(offsetof(Weapon_GetWeaponData, ReturnValue) == 0x000000, "Member 'Weapon_GetWeaponData::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.GetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct Weapon_GetWeaponType final
{
public:
	EWeaponType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_GetWeaponType) == 0x000001, "Wrong alignment on Weapon_GetWeaponType");
static_assert(sizeof(Weapon_GetWeaponType) == 0x000001, "Wrong size on Weapon_GetWeaponType");
static_assert(offsetof(Weapon_GetWeaponType, ReturnValue) == 0x000000, "Member 'Weapon_GetWeaponType::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.IsPrimaryWeapon
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsPrimaryWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsPrimaryWeapon) == 0x000001, "Wrong alignment on Weapon_IsPrimaryWeapon");
static_assert(sizeof(Weapon_IsPrimaryWeapon) == 0x000001, "Wrong size on Weapon_IsPrimaryWeapon");
static_assert(offsetof(Weapon_IsPrimaryWeapon, ReturnValue) == 0x000000, "Member 'Weapon_IsPrimaryWeapon::ReturnValue' has a wrong offset!");

// Function Flame.Weapon.IsSecondaryWeapon
// 0x0001 (0x0001 - 0x0000)
struct Weapon_IsSecondaryWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Weapon_IsSecondaryWeapon) == 0x000001, "Wrong alignment on Weapon_IsSecondaryWeapon");
static_assert(sizeof(Weapon_IsSecondaryWeapon) == 0x000001, "Wrong size on Weapon_IsSecondaryWeapon");
static_assert(offsetof(Weapon_IsSecondaryWeapon, ReturnValue) == 0x000000, "Member 'Weapon_IsSecondaryWeapon::ReturnValue' has a wrong offset!");

// Function Flame.CustomizableItemProvider.SetFilter
// 0x0004 (0x0004 - 0x0000)
struct CustomizableItemProvider_SetFilter final
{
public:
	int32                                         InFilter;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizableItemProvider_SetFilter) == 0x000004, "Wrong alignment on CustomizableItemProvider_SetFilter");
static_assert(sizeof(CustomizableItemProvider_SetFilter) == 0x000004, "Wrong size on CustomizableItemProvider_SetFilter");
static_assert(offsetof(CustomizableItemProvider_SetFilter, InFilter) == 0x000000, "Member 'CustomizableItemProvider_SetFilter::InFilter' has a wrong offset!");

// Function Flame.MarketplaceComponent.BlockCurrencyForItem
// 0x0038 (0x0038 - 0x0000)
struct MarketplaceComponent_BlockCurrencyForItem final
{
public:
	const class AHumanPlayerController*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudId;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductSku;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quantity;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalPrice;                                        // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriceListGeneration;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketplaceComponent_BlockCurrencyForItem) == 0x000008, "Wrong alignment on MarketplaceComponent_BlockCurrencyForItem");
static_assert(sizeof(MarketplaceComponent_BlockCurrencyForItem) == 0x000038, "Wrong size on MarketplaceComponent_BlockCurrencyForItem");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, Player) == 0x000000, "Member 'MarketplaceComponent_BlockCurrencyForItem::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, MatchCloudId) == 0x000008, "Member 'MarketplaceComponent_BlockCurrencyForItem::MatchCloudId' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, ProductSku) == 0x000018, "Member 'MarketplaceComponent_BlockCurrencyForItem::ProductSku' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, Quantity) == 0x000028, "Member 'MarketplaceComponent_BlockCurrencyForItem::Quantity' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, TotalPrice) == 0x00002C, "Member 'MarketplaceComponent_BlockCurrencyForItem::TotalPrice' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, PriceListGeneration) == 0x000030, "Member 'MarketplaceComponent_BlockCurrencyForItem::PriceListGeneration' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItem, ReturnValue) == 0x000034, "Member 'MarketplaceComponent_BlockCurrencyForItem::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MarketplaceComponent.BlockCurrencyForItemDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AHumanPlayerController*           Player;                                            // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudId;                                      // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductSku;                                        // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature");
static_assert(sizeof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature) == 0x000080, "Wrong size on MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature, Player) == 0x000058, "Member 'MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature, MatchCloudId) == 0x000060, "Member 'MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature::MatchCloudId' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature, ProductSku) == 0x000070, "Member 'MarketplaceComponent_BlockCurrencyForItemDelegate__DelegateSignature::ProductSku' has a wrong offset!");

// Function Flame.MarketplaceComponent.GetPriceList
// 0x0018 (0x0018 - 0x0000)
struct MarketplaceComponent_GetPriceList final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketplaceComponent_GetPriceList) == 0x000008, "Wrong alignment on MarketplaceComponent_GetPriceList");
static_assert(sizeof(MarketplaceComponent_GetPriceList) == 0x000018, "Wrong size on MarketplaceComponent_GetPriceList");
static_assert(offsetof(MarketplaceComponent_GetPriceList, MatchID) == 0x000000, "Member 'MarketplaceComponent_GetPriceList::MatchID' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_GetPriceList, ReturnValue) == 0x000010, "Member 'MarketplaceComponent_GetPriceList::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MarketplaceComponent.GetPriceListDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct MarketplaceComponent_GetPriceListDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudPriceList                        PriceList;                                         // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketplaceComponent_GetPriceListDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarketplaceComponent_GetPriceListDelegate__DelegateSignature");
static_assert(sizeof(MarketplaceComponent_GetPriceListDelegate__DelegateSignature) == 0x000070, "Wrong size on MarketplaceComponent_GetPriceListDelegate__DelegateSignature");
static_assert(offsetof(MarketplaceComponent_GetPriceListDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MarketplaceComponent_GetPriceListDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_GetPriceListDelegate__DelegateSignature, PriceList) == 0x000058, "Member 'MarketplaceComponent_GetPriceListDelegate__DelegateSignature::PriceList' has a wrong offset!");

// Function Flame.MarketplaceComponent.GetUserBalance
// 0x0010 (0x0010 - 0x0000)
struct MarketplaceComponent_GetUserBalance final
{
public:
	const class AHumanPlayerController*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketplaceComponent_GetUserBalance) == 0x000008, "Wrong alignment on MarketplaceComponent_GetUserBalance");
static_assert(sizeof(MarketplaceComponent_GetUserBalance) == 0x000010, "Wrong size on MarketplaceComponent_GetUserBalance");
static_assert(offsetof(MarketplaceComponent_GetUserBalance, Player) == 0x000000, "Member 'MarketplaceComponent_GetUserBalance::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_GetUserBalance, ReturnValue) == 0x000008, "Member 'MarketplaceComponent_GetUserBalance::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MarketplaceComponent.GetUserBalanceDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AHumanPlayerController*           Player;                                            // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudUserBalance                      Balance;                                           // 0x0060(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature");
static_assert(sizeof(MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature) == 0x000068, "Wrong size on MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature");
static_assert(offsetof(MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature, Player) == 0x000058, "Member 'MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature, Balance) == 0x000060, "Member 'MarketplaceComponent_GetUserBalanceDelegate__DelegateSignature::Balance' has a wrong offset!");

// Function Flame.MarketplaceComponent.UnBlockCurrencyForItem
// 0x0030 (0x0030 - 0x0000)
struct MarketplaceComponent_UnBlockCurrencyForItem final
{
public:
	const class AHumanPlayerController*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudId;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductSku;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MarketplaceComponent_UnBlockCurrencyForItem) == 0x000008, "Wrong alignment on MarketplaceComponent_UnBlockCurrencyForItem");
static_assert(sizeof(MarketplaceComponent_UnBlockCurrencyForItem) == 0x000030, "Wrong size on MarketplaceComponent_UnBlockCurrencyForItem");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItem, Player) == 0x000000, "Member 'MarketplaceComponent_UnBlockCurrencyForItem::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItem, MatchCloudId) == 0x000008, "Member 'MarketplaceComponent_UnBlockCurrencyForItem::MatchCloudId' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItem, ProductSku) == 0x000018, "Member 'MarketplaceComponent_UnBlockCurrencyForItem::ProductSku' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItem, ReturnValue) == 0x000028, "Member 'MarketplaceComponent_UnBlockCurrencyForItem::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MarketplaceComponent.UnBlockCurrencyForItemDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AHumanPlayerController*           Player;                                            // 0x0058(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudId;                                      // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductSku;                                        // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature");
static_assert(sizeof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature) == 0x000080, "Wrong size on MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature, Player) == 0x000058, "Member 'MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature, MatchCloudId) == 0x000060, "Member 'MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature::MatchCloudId' has a wrong offset!");
static_assert(offsetof(MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature, ProductSku) == 0x000070, "Member 'MarketplaceComponent_UnBlockCurrencyForItemDelegate__DelegateSignature::ProductSku' has a wrong offset!");

// Function Flame.LobbyComponent.GetBoosterEnumFromSKU
// 0x0018 (0x0018 - 0x0000)
struct LobbyComponent_GetBoosterEnumFromSKU final
{
public:
	class FString                                 BoosterSKU;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidityCheck;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoosterTypes                                 ReturnValue;                                       // 0x0011(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyComponent_GetBoosterEnumFromSKU) == 0x000008, "Wrong alignment on LobbyComponent_GetBoosterEnumFromSKU");
static_assert(sizeof(LobbyComponent_GetBoosterEnumFromSKU) == 0x000018, "Wrong size on LobbyComponent_GetBoosterEnumFromSKU");
static_assert(offsetof(LobbyComponent_GetBoosterEnumFromSKU, BoosterSKU) == 0x000000, "Member 'LobbyComponent_GetBoosterEnumFromSKU::BoosterSKU' has a wrong offset!");
static_assert(offsetof(LobbyComponent_GetBoosterEnumFromSKU, ValidityCheck) == 0x000010, "Member 'LobbyComponent_GetBoosterEnumFromSKU::ValidityCheck' has a wrong offset!");
static_assert(offsetof(LobbyComponent_GetBoosterEnumFromSKU, ReturnValue) == 0x000011, "Member 'LobbyComponent_GetBoosterEnumFromSKU::ReturnValue' has a wrong offset!");

// Function Flame.LobbyComponent.GetBoosterSKU
// 0x0018 (0x0018 - 0x0000)
struct LobbyComponent_GetBoosterSKU final
{
public:
	EBoosterTypes                                 Booster;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyComponent_GetBoosterSKU) == 0x000008, "Wrong alignment on LobbyComponent_GetBoosterSKU");
static_assert(sizeof(LobbyComponent_GetBoosterSKU) == 0x000018, "Wrong size on LobbyComponent_GetBoosterSKU");
static_assert(offsetof(LobbyComponent_GetBoosterSKU, Booster) == 0x000000, "Member 'LobbyComponent_GetBoosterSKU::Booster' has a wrong offset!");
static_assert(offsetof(LobbyComponent_GetBoosterSKU, ReturnValue) == 0x000008, "Member 'LobbyComponent_GetBoosterSKU::ReturnValue' has a wrong offset!");

// Function Flame.LobbyComponent.GetUsedBoosterTicketCount
// 0x0008 (0x0008 - 0x0000)
struct LobbyComponent_GetUsedBoosterTicketCount final
{
public:
	EBoosterTypes                                 Booster;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyComponent_GetUsedBoosterTicketCount) == 0x000004, "Wrong alignment on LobbyComponent_GetUsedBoosterTicketCount");
static_assert(sizeof(LobbyComponent_GetUsedBoosterTicketCount) == 0x000008, "Wrong size on LobbyComponent_GetUsedBoosterTicketCount");
static_assert(offsetof(LobbyComponent_GetUsedBoosterTicketCount, Booster) == 0x000000, "Member 'LobbyComponent_GetUsedBoosterTicketCount::Booster' has a wrong offset!");
static_assert(offsetof(LobbyComponent_GetUsedBoosterTicketCount, ReturnValue) == 0x000004, "Member 'LobbyComponent_GetUsedBoosterTicketCount::ReturnValue' has a wrong offset!");

// Function Flame.FootprintManager.AddFootPrint
// 0x0048 (0x0048 - 0x0000)
struct FootprintManager_AddFootPrint final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSize;                                         // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientationCoef;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameIdx;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                        ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootprintManager_AddFootPrint) == 0x000008, "Wrong alignment on FootprintManager_AddFootPrint");
static_assert(sizeof(FootprintManager_AddFootPrint) == 0x000048, "Wrong size on FootprintManager_AddFootPrint");
static_assert(offsetof(FootprintManager_AddFootPrint, Location) == 0x000000, "Member 'FootprintManager_AddFootPrint::Location' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, Normal) == 0x00000C, "Member 'FootprintManager_AddFootPrint::Normal' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, Direction) == 0x000018, "Member 'FootprintManager_AddFootPrint::Direction' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, DecalSize) == 0x000024, "Member 'FootprintManager_AddFootPrint::DecalSize' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, OrientationCoef) == 0x000030, "Member 'FootprintManager_AddFootPrint::OrientationCoef' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, FrameIdx) == 0x000034, "Member 'FootprintManager_AddFootPrint::FrameIdx' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, Material) == 0x000038, "Member 'FootprintManager_AddFootPrint::Material' has a wrong offset!");
static_assert(offsetof(FootprintManager_AddFootPrint, ReturnValue) == 0x000040, "Member 'FootprintManager_AddFootPrint::ReturnValue' has a wrong offset!");

// Function Flame.MatchmakingStatus.OnMenuClosed
// 0x0008 (0x0008 - 0x0000)
struct MatchmakingStatus_OnMenuClosed final
{
public:
	class UMenuWidget*                            MenuWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_OnMenuClosed) == 0x000008, "Wrong alignment on MatchmakingStatus_OnMenuClosed");
static_assert(sizeof(MatchmakingStatus_OnMenuClosed) == 0x000008, "Wrong size on MatchmakingStatus_OnMenuClosed");
static_assert(offsetof(MatchmakingStatus_OnMenuClosed, MenuWidget) == 0x000000, "Member 'MatchmakingStatus_OnMenuClosed::MenuWidget' has a wrong offset!");

// Function Flame.MatchmakingStatus.OnMenuOpened
// 0x0008 (0x0008 - 0x0000)
struct MatchmakingStatus_OnMenuOpened final
{
public:
	class UMenuWidget*                            MenuWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_OnMenuOpened) == 0x000008, "Wrong alignment on MatchmakingStatus_OnMenuOpened");
static_assert(sizeof(MatchmakingStatus_OnMenuOpened) == 0x000008, "Wrong size on MatchmakingStatus_OnMenuOpened");
static_assert(offsetof(MatchmakingStatus_OnMenuOpened, MenuWidget) == 0x000000, "Member 'MatchmakingStatus_OnMenuOpened::MenuWidget' has a wrong offset!");

// Function Flame.MatchmakingStatus.OnPlayerCancelledMatchmaking
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingStatus_OnPlayerCancelledMatchmaking final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_OnPlayerCancelledMatchmaking) == 0x000008, "Wrong alignment on MatchmakingStatus_OnPlayerCancelledMatchmaking");
static_assert(sizeof(MatchmakingStatus_OnPlayerCancelledMatchmaking) == 0x000028, "Wrong size on MatchmakingStatus_OnPlayerCancelledMatchmaking");
static_assert(offsetof(MatchmakingStatus_OnPlayerCancelledMatchmaking, NetId) == 0x000000, "Member 'MatchmakingStatus_OnPlayerCancelledMatchmaking::NetId' has a wrong offset!");

// Function Flame.MatchmakingStatus.OnPlayerStartedMatchmaking
// 0x0028 (0x0028 - 0x0000)
struct MatchmakingStatus_OnPlayerStartedMatchmaking final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_OnPlayerStartedMatchmaking) == 0x000008, "Wrong alignment on MatchmakingStatus_OnPlayerStartedMatchmaking");
static_assert(sizeof(MatchmakingStatus_OnPlayerStartedMatchmaking) == 0x000028, "Wrong size on MatchmakingStatus_OnPlayerStartedMatchmaking");
static_assert(offsetof(MatchmakingStatus_OnPlayerStartedMatchmaking, NetId) == 0x000000, "Member 'MatchmakingStatus_OnPlayerStartedMatchmaking::NetId' has a wrong offset!");

// Function Flame.MatchmakingStatus.SetLevelName
// 0x0008 (0x0008 - 0x0000)
struct MatchmakingStatus_SetLevelName final
{
public:
	class FName                                   InLevelName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_SetLevelName) == 0x000004, "Wrong alignment on MatchmakingStatus_SetLevelName");
static_assert(sizeof(MatchmakingStatus_SetLevelName) == 0x000008, "Wrong size on MatchmakingStatus_SetLevelName");
static_assert(offsetof(MatchmakingStatus_SetLevelName, InLevelName) == 0x000000, "Member 'MatchmakingStatus_SetLevelName::InLevelName' has a wrong offset!");

// Function Flame.MatchmakingStatus.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct MatchmakingStatus_SetMessage final
{
public:
	class FText                                   InMessage;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_SetMessage) == 0x000008, "Wrong alignment on MatchmakingStatus_SetMessage");
static_assert(sizeof(MatchmakingStatus_SetMessage) == 0x000018, "Wrong size on MatchmakingStatus_SetMessage");
static_assert(offsetof(MatchmakingStatus_SetMessage, InMessage) == 0x000000, "Member 'MatchmakingStatus_SetMessage::InMessage' has a wrong offset!");

// Function Flame.MatchmakingStatus.SetState
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingStatus_SetState final
{
public:
	EMatchmakingStatusState                       InState;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_SetState) == 0x000001, "Wrong alignment on MatchmakingStatus_SetState");
static_assert(sizeof(MatchmakingStatus_SetState) == 0x000001, "Wrong size on MatchmakingStatus_SetState");
static_assert(offsetof(MatchmakingStatus_SetState, InState) == 0x000000, "Member 'MatchmakingStatus_SetState::InState' has a wrong offset!");

// Function Flame.MatchmakingStatus.ShowElapsedTime
// 0x0001 (0x0001 - 0x0000)
struct MatchmakingStatus_ShowElapsedTime final
{
public:
	bool                                          bInShowElapsedTime;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchmakingStatus_ShowElapsedTime) == 0x000001, "Wrong alignment on MatchmakingStatus_ShowElapsedTime");
static_assert(sizeof(MatchmakingStatus_ShowElapsedTime) == 0x000001, "Wrong size on MatchmakingStatus_ShowElapsedTime");
static_assert(offsetof(MatchmakingStatus_ShowElapsedTime, bInShowElapsedTime) == 0x000000, "Member 'MatchmakingStatus_ShowElapsedTime::bInShowElapsedTime' has a wrong offset!");

// Function Flame.FlameSpringArmComponent.SetArmPercentage
// 0x0004 (0x0004 - 0x0000)
struct FlameSpringArmComponent_SetArmPercentage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpringArmComponent_SetArmPercentage) == 0x000004, "Wrong alignment on FlameSpringArmComponent_SetArmPercentage");
static_assert(sizeof(FlameSpringArmComponent_SetArmPercentage) == 0x000004, "Wrong size on FlameSpringArmComponent_SetArmPercentage");
static_assert(offsetof(FlameSpringArmComponent_SetArmPercentage, Percentage) == 0x000000, "Member 'FlameSpringArmComponent_SetArmPercentage::Percentage' has a wrong offset!");

// Function Flame.FlameSpringArmComponent.SetMaxRelativeZSettings
// 0x000C (0x000C - 0x0000)
struct FlameSpringArmComponent_SetMaxRelativeZSettings final
{
public:
	float                                         NewMaxRelativeZ;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewSmoothness;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionSpeed;                                   // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpringArmComponent_SetMaxRelativeZSettings) == 0x000004, "Wrong alignment on FlameSpringArmComponent_SetMaxRelativeZSettings");
static_assert(sizeof(FlameSpringArmComponent_SetMaxRelativeZSettings) == 0x00000C, "Wrong size on FlameSpringArmComponent_SetMaxRelativeZSettings");
static_assert(offsetof(FlameSpringArmComponent_SetMaxRelativeZSettings, NewMaxRelativeZ) == 0x000000, "Member 'FlameSpringArmComponent_SetMaxRelativeZSettings::NewMaxRelativeZ' has a wrong offset!");
static_assert(offsetof(FlameSpringArmComponent_SetMaxRelativeZSettings, NewSmoothness) == 0x000004, "Member 'FlameSpringArmComponent_SetMaxRelativeZSettings::NewSmoothness' has a wrong offset!");
static_assert(offsetof(FlameSpringArmComponent_SetMaxRelativeZSettings, TransitionSpeed) == 0x000008, "Member 'FlameSpringArmComponent_SetMaxRelativeZSettings::TransitionSpeed' has a wrong offset!");

// Function Flame.FlameSpringArmComponent.SetTargetArmPercentage
// 0x0004 (0x0004 - 0x0000)
struct FlameSpringArmComponent_SetTargetArmPercentage final
{
public:
	float                                         TargetArmPercentage;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpringArmComponent_SetTargetArmPercentage) == 0x000004, "Wrong alignment on FlameSpringArmComponent_SetTargetArmPercentage");
static_assert(sizeof(FlameSpringArmComponent_SetTargetArmPercentage) == 0x000004, "Wrong size on FlameSpringArmComponent_SetTargetArmPercentage");
static_assert(offsetof(FlameSpringArmComponent_SetTargetArmPercentage, TargetArmPercentage) == 0x000000, "Member 'FlameSpringArmComponent_SetTargetArmPercentage::TargetArmPercentage' has a wrong offset!");

// Function Flame.FlameSpringArmComponent.GetArmPercentage
// 0x0004 (0x0004 - 0x0000)
struct FlameSpringArmComponent_GetArmPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpringArmComponent_GetArmPercentage) == 0x000004, "Wrong alignment on FlameSpringArmComponent_GetArmPercentage");
static_assert(sizeof(FlameSpringArmComponent_GetArmPercentage) == 0x000004, "Wrong size on FlameSpringArmComponent_GetArmPercentage");
static_assert(offsetof(FlameSpringArmComponent_GetArmPercentage, ReturnValue) == 0x000000, "Member 'FlameSpringArmComponent_GetArmPercentage::ReturnValue' has a wrong offset!");

// Function Flame.FlameSpringArmComponent.HasRecentHit
// 0x0001 (0x0001 - 0x0000)
struct FlameSpringArmComponent_HasRecentHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpringArmComponent_HasRecentHit) == 0x000001, "Wrong alignment on FlameSpringArmComponent_HasRecentHit");
static_assert(sizeof(FlameSpringArmComponent_HasRecentHit) == 0x000001, "Wrong size on FlameSpringArmComponent_HasRecentHit");
static_assert(offsetof(FlameSpringArmComponent_HasRecentHit, ReturnValue) == 0x000000, "Member 'FlameSpringArmComponent_HasRecentHit::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.ApplyCustomizationOnMannequin
// 0x0028 (0x0028 - 0x0000)
struct CustomizationFunctions_ApplyCustomizationOnMannequin final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMannequin*                             TargetMannequin;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationContainer                SourceCustomizationsArray;                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationFunctions_ApplyCustomizationOnMannequin) == 0x000008, "Wrong alignment on CustomizationFunctions_ApplyCustomizationOnMannequin");
static_assert(sizeof(CustomizationFunctions_ApplyCustomizationOnMannequin) == 0x000028, "Wrong size on CustomizationFunctions_ApplyCustomizationOnMannequin");
static_assert(offsetof(CustomizationFunctions_ApplyCustomizationOnMannequin, Player) == 0x000000, "Member 'CustomizationFunctions_ApplyCustomizationOnMannequin::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_ApplyCustomizationOnMannequin, TargetMannequin) == 0x000008, "Member 'CustomizationFunctions_ApplyCustomizationOnMannequin::TargetMannequin' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_ApplyCustomizationOnMannequin, SourceCustomizationsArray) == 0x000010, "Member 'CustomizationFunctions_ApplyCustomizationOnMannequin::SourceCustomizationsArray' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_ApplyCustomizationOnMannequin, ReturnValue) == 0x000020, "Member 'CustomizationFunctions_ApplyCustomizationOnMannequin::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.CaptureTextureFromRenderTarget
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_CaptureTextureFromRenderTarget final
{
public:
	class USceneCaptureComponent2D*               SceneCapture;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextureName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_CaptureTextureFromRenderTarget) == 0x000008, "Wrong alignment on CustomizationFunctions_CaptureTextureFromRenderTarget");
static_assert(sizeof(CustomizationFunctions_CaptureTextureFromRenderTarget) == 0x000020, "Wrong size on CustomizationFunctions_CaptureTextureFromRenderTarget");
static_assert(offsetof(CustomizationFunctions_CaptureTextureFromRenderTarget, SceneCapture) == 0x000000, "Member 'CustomizationFunctions_CaptureTextureFromRenderTarget::SceneCapture' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_CaptureTextureFromRenderTarget, TextureName) == 0x000008, "Member 'CustomizationFunctions_CaptureTextureFromRenderTarget::TextureName' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_CaptureTextureFromRenderTarget, ReturnValue) == 0x000018, "Member 'CustomizationFunctions_CaptureTextureFromRenderTarget::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.ClearCustomizationSlot
// 0x0010 (0x0010 - 0x0000)
struct CustomizationFunctions_ClearCustomizationSlot final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_ClearCustomizationSlot) == 0x000008, "Wrong alignment on CustomizationFunctions_ClearCustomizationSlot");
static_assert(sizeof(CustomizationFunctions_ClearCustomizationSlot) == 0x000010, "Wrong size on CustomizationFunctions_ClearCustomizationSlot");
static_assert(offsetof(CustomizationFunctions_ClearCustomizationSlot, Player) == 0x000000, "Member 'CustomizationFunctions_ClearCustomizationSlot::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_ClearCustomizationSlot, Slot) == 0x000008, "Member 'CustomizationFunctions_ClearCustomizationSlot::Slot' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetAllCustomizations
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetAllCustomizations final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomization>>     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetAllCustomizations) == 0x000008, "Wrong alignment on CustomizationFunctions_GetAllCustomizations");
static_assert(sizeof(CustomizationFunctions_GetAllCustomizations) == 0x000018, "Wrong size on CustomizationFunctions_GetAllCustomizations");
static_assert(offsetof(CustomizationFunctions_GetAllCustomizations, Player) == 0x000000, "Member 'CustomizationFunctions_GetAllCustomizations::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetAllCustomizations, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetAllCustomizations::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetClothesComponent
// 0x0010 (0x0010 - 0x0000)
struct CustomizationFunctions_GetClothesComponent final
{
public:
	const class AHumanPlayerController*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInventoryCustomizationComponent*       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetClothesComponent) == 0x000008, "Wrong alignment on CustomizationFunctions_GetClothesComponent");
static_assert(sizeof(CustomizationFunctions_GetClothesComponent) == 0x000010, "Wrong size on CustomizationFunctions_GetClothesComponent");
static_assert(offsetof(CustomizationFunctions_GetClothesComponent, Player) == 0x000000, "Member 'CustomizationFunctions_GetClothesComponent::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetClothesComponent, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetClothesComponent::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationInfo
// 0x0048 (0x0048 - 0x0000)
struct CustomizationFunctions_GetCustomizationInfo final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationInfo                     ReturnValue;                                       // 0x0010(0x0038)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationInfo) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationInfo");
static_assert(sizeof(CustomizationFunctions_GetCustomizationInfo) == 0x000048, "Wrong size on CustomizationFunctions_GetCustomizationInfo");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInfo, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationInfo::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInfo, Customization) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationInfo::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInfo, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationInfo::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationInSlot
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_GetCustomizationInSlot final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationPair                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationInSlot) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationInSlot");
static_assert(sizeof(CustomizationFunctions_GetCustomizationInSlot) == 0x000020, "Wrong size on CustomizationFunctions_GetCustomizationInSlot");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInSlot, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationInSlot::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInSlot, Slot) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationInSlot::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationInSlot, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationInSlot::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationMesh
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetCustomizationMesh final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationMesh) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationMesh");
static_assert(sizeof(CustomizationFunctions_GetCustomizationMesh) == 0x000018, "Wrong size on CustomizationFunctions_GetCustomizationMesh");
static_assert(offsetof(CustomizationFunctions_GetCustomizationMesh, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationMesh::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationMesh, Customization) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationMesh::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationMesh, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationMesh::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationPreview
// 0x0028 (0x0028 - 0x0000)
struct CustomizationFunctions_GetCustomizationPreview final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMannequin*                             TargetMannequin;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationPreview) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationPreview");
static_assert(sizeof(CustomizationFunctions_GetCustomizationPreview) == 0x000028, "Wrong size on CustomizationFunctions_GetCustomizationPreview");
static_assert(offsetof(CustomizationFunctions_GetCustomizationPreview, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationPreview::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationPreview, TargetMannequin) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationPreview::TargetMannequin' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationPreview, Slot) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationPreview::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationPreview, Customization) == 0x000018, "Member 'CustomizationFunctions_GetCustomizationPreview::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationPreview, Variant) == 0x000020, "Member 'CustomizationFunctions_GetCustomizationPreview::Variant' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationsByClass
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_GetCustomizationsByClass final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Filter;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomization>>     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationsByClass) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationsByClass");
static_assert(sizeof(CustomizationFunctions_GetCustomizationsByClass) == 0x000020, "Wrong size on CustomizationFunctions_GetCustomizationsByClass");
static_assert(offsetof(CustomizationFunctions_GetCustomizationsByClass, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationsByClass::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationsByClass, Filter) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationsByClass::Filter' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationsByClass, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationsByClass::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetCustomizationVariantsForBundle
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_GetCustomizationVariantsForBundle final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariantBundle> Bundle;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetCustomizationVariantsForBundle) == 0x000008, "Wrong alignment on CustomizationFunctions_GetCustomizationVariantsForBundle");
static_assert(sizeof(CustomizationFunctions_GetCustomizationVariantsForBundle) == 0x000020, "Wrong size on CustomizationFunctions_GetCustomizationVariantsForBundle");
static_assert(offsetof(CustomizationFunctions_GetCustomizationVariantsForBundle, Player) == 0x000000, "Member 'CustomizationFunctions_GetCustomizationVariantsForBundle::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationVariantsForBundle, Bundle) == 0x000008, "Member 'CustomizationFunctions_GetCustomizationVariantsForBundle::Bundle' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetCustomizationVariantsForBundle, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_GetCustomizationVariantsForBundle::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetGender
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetGender final
{
public:
	TSubclassOf<class ACustomizationVariant>      ArchetypeVariant;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AGender>                    Gender;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFemale;                                          // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationFunctions_GetGender) == 0x000008, "Wrong alignment on CustomizationFunctions_GetGender");
static_assert(sizeof(CustomizationFunctions_GetGender) == 0x000018, "Wrong size on CustomizationFunctions_GetGender");
static_assert(offsetof(CustomizationFunctions_GetGender, ArchetypeVariant) == 0x000000, "Member 'CustomizationFunctions_GetGender::ArchetypeVariant' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetGender, Gender) == 0x000008, "Member 'CustomizationFunctions_GetGender::Gender' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetGender, IsFemale) == 0x000010, "Member 'CustomizationFunctions_GetGender::IsFemale' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetHighlightedCustomizations
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetHighlightedCustomizations final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomization>>     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetHighlightedCustomizations) == 0x000008, "Wrong alignment on CustomizationFunctions_GetHighlightedCustomizations");
static_assert(sizeof(CustomizationFunctions_GetHighlightedCustomizations) == 0x000018, "Wrong size on CustomizationFunctions_GetHighlightedCustomizations");
static_assert(offsetof(CustomizationFunctions_GetHighlightedCustomizations, Player) == 0x000000, "Member 'CustomizationFunctions_GetHighlightedCustomizations::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetHighlightedCustomizations, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetHighlightedCustomizations::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetOwnedCustomizations
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetOwnedCustomizations final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomization>>     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetOwnedCustomizations) == 0x000008, "Wrong alignment on CustomizationFunctions_GetOwnedCustomizations");
static_assert(sizeof(CustomizationFunctions_GetOwnedCustomizations) == 0x000018, "Wrong size on CustomizationFunctions_GetOwnedCustomizations");
static_assert(offsetof(CustomizationFunctions_GetOwnedCustomizations, Player) == 0x000000, "Member 'CustomizationFunctions_GetOwnedCustomizations::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetOwnedCustomizations, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetOwnedCustomizations::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetOwnedCustomizationVariants
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_GetOwnedCustomizationVariants final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationVariant>> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetOwnedCustomizationVariants) == 0x000008, "Wrong alignment on CustomizationFunctions_GetOwnedCustomizationVariants");
static_assert(sizeof(CustomizationFunctions_GetOwnedCustomizationVariants) == 0x000018, "Wrong size on CustomizationFunctions_GetOwnedCustomizationVariants");
static_assert(offsetof(CustomizationFunctions_GetOwnedCustomizationVariants, Player) == 0x000000, "Member 'CustomizationFunctions_GetOwnedCustomizationVariants::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetOwnedCustomizationVariants, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetOwnedCustomizationVariants::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.GetWardrobeComponent
// 0x0010 (0x0010 - 0x0000)
struct CustomizationFunctions_GetWardrobeComponent final
{
public:
	const class AHumanPlayerController*           Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShelterCustomizationComponent*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_GetWardrobeComponent) == 0x000008, "Wrong alignment on CustomizationFunctions_GetWardrobeComponent");
static_assert(sizeof(CustomizationFunctions_GetWardrobeComponent) == 0x000010, "Wrong size on CustomizationFunctions_GetWardrobeComponent");
static_assert(offsetof(CustomizationFunctions_GetWardrobeComponent, Player) == 0x000000, "Member 'CustomizationFunctions_GetWardrobeComponent::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_GetWardrobeComponent, ReturnValue) == 0x000008, "Member 'CustomizationFunctions_GetWardrobeComponent::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.IsCustomizationCompatibleWithSlot
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_IsCustomizationCompatibleWithSlot final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationFunctions_IsCustomizationCompatibleWithSlot) == 0x000008, "Wrong alignment on CustomizationFunctions_IsCustomizationCompatibleWithSlot");
static_assert(sizeof(CustomizationFunctions_IsCustomizationCompatibleWithSlot) == 0x000020, "Wrong size on CustomizationFunctions_IsCustomizationCompatibleWithSlot");
static_assert(offsetof(CustomizationFunctions_IsCustomizationCompatibleWithSlot, Player) == 0x000000, "Member 'CustomizationFunctions_IsCustomizationCompatibleWithSlot::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_IsCustomizationCompatibleWithSlot, Customization) == 0x000008, "Member 'CustomizationFunctions_IsCustomizationCompatibleWithSlot::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_IsCustomizationCompatibleWithSlot, Slot) == 0x000010, "Member 'CustomizationFunctions_IsCustomizationCompatibleWithSlot::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_IsCustomizationCompatibleWithSlot, ReturnValue) == 0x000018, "Member 'CustomizationFunctions_IsCustomizationCompatibleWithSlot::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.IsCustomizationSlotAvailable
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_IsCustomizationSlotAvailable final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationFunctions_IsCustomizationSlotAvailable) == 0x000008, "Wrong alignment on CustomizationFunctions_IsCustomizationSlotAvailable");
static_assert(sizeof(CustomizationFunctions_IsCustomizationSlotAvailable) == 0x000018, "Wrong size on CustomizationFunctions_IsCustomizationSlotAvailable");
static_assert(offsetof(CustomizationFunctions_IsCustomizationSlotAvailable, Player) == 0x000000, "Member 'CustomizationFunctions_IsCustomizationSlotAvailable::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_IsCustomizationSlotAvailable, Slot) == 0x000008, "Member 'CustomizationFunctions_IsCustomizationSlotAvailable::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_IsCustomizationSlotAvailable, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_IsCustomizationSlotAvailable::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.LinkedCustomizationsInNeededSlots
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_LinkedCustomizationsInNeededSlots final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomization>>     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_LinkedCustomizationsInNeededSlots) == 0x000008, "Wrong alignment on CustomizationFunctions_LinkedCustomizationsInNeededSlots");
static_assert(sizeof(CustomizationFunctions_LinkedCustomizationsInNeededSlots) == 0x000020, "Wrong size on CustomizationFunctions_LinkedCustomizationsInNeededSlots");
static_assert(offsetof(CustomizationFunctions_LinkedCustomizationsInNeededSlots, Player) == 0x000000, "Member 'CustomizationFunctions_LinkedCustomizationsInNeededSlots::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_LinkedCustomizationsInNeededSlots, Customization) == 0x000008, "Member 'CustomizationFunctions_LinkedCustomizationsInNeededSlots::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_LinkedCustomizationsInNeededSlots, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_LinkedCustomizationsInNeededSlots::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.NeededSlotsForCustomization
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_NeededSlotsForCustomization final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ACustomizationSlot>> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_NeededSlotsForCustomization) == 0x000008, "Wrong alignment on CustomizationFunctions_NeededSlotsForCustomization");
static_assert(sizeof(CustomizationFunctions_NeededSlotsForCustomization) == 0x000020, "Wrong size on CustomizationFunctions_NeededSlotsForCustomization");
static_assert(offsetof(CustomizationFunctions_NeededSlotsForCustomization, Player) == 0x000000, "Member 'CustomizationFunctions_NeededSlotsForCustomization::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_NeededSlotsForCustomization, Customization) == 0x000008, "Member 'CustomizationFunctions_NeededSlotsForCustomization::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_NeededSlotsForCustomization, ReturnValue) == 0x000010, "Member 'CustomizationFunctions_NeededSlotsForCustomization::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationFunctions.SetCustomizationToSlot
// 0x0020 (0x0020 - 0x0000)
struct CustomizationFunctions_SetCustomizationToSlot final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_SetCustomizationToSlot) == 0x000008, "Wrong alignment on CustomizationFunctions_SetCustomizationToSlot");
static_assert(sizeof(CustomizationFunctions_SetCustomizationToSlot) == 0x000020, "Wrong size on CustomizationFunctions_SetCustomizationToSlot");
static_assert(offsetof(CustomizationFunctions_SetCustomizationToSlot, Player) == 0x000000, "Member 'CustomizationFunctions_SetCustomizationToSlot::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetCustomizationToSlot, Slot) == 0x000008, "Member 'CustomizationFunctions_SetCustomizationToSlot::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetCustomizationToSlot, Customization) == 0x000010, "Member 'CustomizationFunctions_SetCustomizationToSlot::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetCustomizationToSlot, Variant) == 0x000018, "Member 'CustomizationFunctions_SetCustomizationToSlot::Variant' has a wrong offset!");

// Function Flame.CustomizationFunctions.SetGestureToSlot
// 0x0018 (0x0018 - 0x0000)
struct CustomizationFunctions_SetGestureToSlot final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationFunctions_SetGestureToSlot) == 0x000008, "Wrong alignment on CustomizationFunctions_SetGestureToSlot");
static_assert(sizeof(CustomizationFunctions_SetGestureToSlot) == 0x000018, "Wrong size on CustomizationFunctions_SetGestureToSlot");
static_assert(offsetof(CustomizationFunctions_SetGestureToSlot, Player) == 0x000000, "Member 'CustomizationFunctions_SetGestureToSlot::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetGestureToSlot, Slot) == 0x000008, "Member 'CustomizationFunctions_SetGestureToSlot::Slot' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetGestureToSlot, Variant) == 0x000010, "Member 'CustomizationFunctions_SetGestureToSlot::Variant' has a wrong offset!");

// Function Flame.CustomizationFunctions.SetMeshFromCustomizationToComponent
// 0x0028 (0x0028 - 0x0000)
struct CustomizationFunctions_SetMeshFromCustomizationToComponent final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCustomisationMeshComponent*            TargetComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Customization;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationVariant>      Variant;                                           // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizationFunctions_SetMeshFromCustomizationToComponent) == 0x000008, "Wrong alignment on CustomizationFunctions_SetMeshFromCustomizationToComponent");
static_assert(sizeof(CustomizationFunctions_SetMeshFromCustomizationToComponent) == 0x000028, "Wrong size on CustomizationFunctions_SetMeshFromCustomizationToComponent");
static_assert(offsetof(CustomizationFunctions_SetMeshFromCustomizationToComponent, Player) == 0x000000, "Member 'CustomizationFunctions_SetMeshFromCustomizationToComponent::Player' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetMeshFromCustomizationToComponent, TargetComponent) == 0x000008, "Member 'CustomizationFunctions_SetMeshFromCustomizationToComponent::TargetComponent' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetMeshFromCustomizationToComponent, Customization) == 0x000010, "Member 'CustomizationFunctions_SetMeshFromCustomizationToComponent::Customization' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetMeshFromCustomizationToComponent, Variant) == 0x000018, "Member 'CustomizationFunctions_SetMeshFromCustomizationToComponent::Variant' has a wrong offset!");
static_assert(offsetof(CustomizationFunctions_SetMeshFromCustomizationToComponent, ReturnValue) == 0x000020, "Member 'CustomizationFunctions_SetMeshFromCustomizationToComponent::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationHair.GetMeshForGenderAndOverlapCustomization
// 0x0018 (0x0018 - 0x0000)
struct CustomizationHair_GetMeshForGenderAndOverlapCustomization final
{
public:
	TSubclassOf<class AGender>                    Gender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomization>             Headgear;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationHair_GetMeshForGenderAndOverlapCustomization) == 0x000008, "Wrong alignment on CustomizationHair_GetMeshForGenderAndOverlapCustomization");
static_assert(sizeof(CustomizationHair_GetMeshForGenderAndOverlapCustomization) == 0x000018, "Wrong size on CustomizationHair_GetMeshForGenderAndOverlapCustomization");
static_assert(offsetof(CustomizationHair_GetMeshForGenderAndOverlapCustomization, Gender) == 0x000000, "Member 'CustomizationHair_GetMeshForGenderAndOverlapCustomization::Gender' has a wrong offset!");
static_assert(offsetof(CustomizationHair_GetMeshForGenderAndOverlapCustomization, Headgear) == 0x000008, "Member 'CustomizationHair_GetMeshForGenderAndOverlapCustomization::Headgear' has a wrong offset!");
static_assert(offsetof(CustomizationHair_GetMeshForGenderAndOverlapCustomization, ReturnValue) == 0x000010, "Member 'CustomizationHair_GetMeshForGenderAndOverlapCustomization::ReturnValue' has a wrong offset!");

// Function Flame.EquipmentStorageComponent.BlueprintStoreObject
// 0x0010 (0x0010 - 0x0000)
struct EquipmentStorageComponent_BlueprintStoreObject final
{
public:
	class AItem*                                  OneItem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquipmentStorageComponent_BlueprintStoreObject) == 0x000008, "Wrong alignment on EquipmentStorageComponent_BlueprintStoreObject");
static_assert(sizeof(EquipmentStorageComponent_BlueprintStoreObject) == 0x000010, "Wrong size on EquipmentStorageComponent_BlueprintStoreObject");
static_assert(offsetof(EquipmentStorageComponent_BlueprintStoreObject, OneItem) == 0x000000, "Member 'EquipmentStorageComponent_BlueprintStoreObject::OneItem' has a wrong offset!");
static_assert(offsetof(EquipmentStorageComponent_BlueprintStoreObject, ReturnValue) == 0x000008, "Member 'EquipmentStorageComponent_BlueprintStoreObject::ReturnValue' has a wrong offset!");

// Function Flame.EquipmentStorageComponent.OnRep_PostChangeItems
// 0x0008 (0x0008 - 0x0000)
struct EquipmentStorageComponent_OnRep_PostChangeItems final
{
public:
	class UItemsList*                             OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentStorageComponent_OnRep_PostChangeItems) == 0x000008, "Wrong alignment on EquipmentStorageComponent_OnRep_PostChangeItems");
static_assert(sizeof(EquipmentStorageComponent_OnRep_PostChangeItems) == 0x000008, "Wrong size on EquipmentStorageComponent_OnRep_PostChangeItems");
static_assert(offsetof(EquipmentStorageComponent_OnRep_PostChangeItems, OldContainer) == 0x000000, "Member 'EquipmentStorageComponent_OnRep_PostChangeItems::OldContainer' has a wrong offset!");

// Function Flame.EquipmentStorageComponent.OnRep_PostChangeWeapons
// 0x0008 (0x0008 - 0x0000)
struct EquipmentStorageComponent_OnRep_PostChangeWeapons final
{
public:
	class UWeaponsStorage*                        OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipmentStorageComponent_OnRep_PostChangeWeapons) == 0x000008, "Wrong alignment on EquipmentStorageComponent_OnRep_PostChangeWeapons");
static_assert(sizeof(EquipmentStorageComponent_OnRep_PostChangeWeapons) == 0x000008, "Wrong size on EquipmentStorageComponent_OnRep_PostChangeWeapons");
static_assert(offsetof(EquipmentStorageComponent_OnRep_PostChangeWeapons, OldContainer) == 0x000000, "Member 'EquipmentStorageComponent_OnRep_PostChangeWeapons::OldContainer' has a wrong offset!");

// Function Flame.LootOnGroundComponent.ClearItems
// 0x0001 (0x0001 - 0x0000)
struct LootOnGroundComponent_ClearItems final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootOnGroundComponent_ClearItems) == 0x000001, "Wrong alignment on LootOnGroundComponent_ClearItems");
static_assert(sizeof(LootOnGroundComponent_ClearItems) == 0x000001, "Wrong size on LootOnGroundComponent_ClearItems");
static_assert(offsetof(LootOnGroundComponent_ClearItems, ReturnValue) == 0x000000, "Member 'LootOnGroundComponent_ClearItems::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationSlot.IsMandatory
// 0x0001 (0x0001 - 0x0000)
struct CustomizationSlot_IsMandatory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationSlot_IsMandatory) == 0x000001, "Wrong alignment on CustomizationSlot_IsMandatory");
static_assert(sizeof(CustomizationSlot_IsMandatory) == 0x000001, "Wrong size on CustomizationSlot_IsMandatory");
static_assert(offsetof(CustomizationSlot_IsMandatory, ReturnValue) == 0x000000, "Member 'CustomizationSlot_IsMandatory::ReturnValue' has a wrong offset!");

// Function Flame.GamepadIconWidget.ConsumeActions
// 0x0001 (0x0001 - 0x0000)
struct GamepadIconWidget_ConsumeActions final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadIconWidget_ConsumeActions) == 0x000001, "Wrong alignment on GamepadIconWidget_ConsumeActions");
static_assert(sizeof(GamepadIconWidget_ConsumeActions) == 0x000001, "Wrong size on GamepadIconWidget_ConsumeActions");
static_assert(offsetof(GamepadIconWidget_ConsumeActions, InValue) == 0x000000, "Member 'GamepadIconWidget_ConsumeActions::InValue' has a wrong offset!");

// Function Flame.GamepadIconWidget.SetHoldTime
// 0x0004 (0x0004 - 0x0000)
struct GamepadIconWidget_SetHoldTime final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadIconWidget_SetHoldTime) == 0x000004, "Wrong alignment on GamepadIconWidget_SetHoldTime");
static_assert(sizeof(GamepadIconWidget_SetHoldTime) == 0x000004, "Wrong size on GamepadIconWidget_SetHoldTime");
static_assert(offsetof(GamepadIconWidget_SetHoldTime, TimeInSeconds) == 0x000000, "Member 'GamepadIconWidget_SetHoldTime::TimeInSeconds' has a wrong offset!");

// Function Flame.GamepadIconWidget.SetIcon
// 0x0002 (0x0002 - 0x0000)
struct GamepadIconWidget_SetIcon final
{
public:
	EInputIcon                                    InIcon;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsHoldable;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadIconWidget_SetIcon) == 0x000001, "Wrong alignment on GamepadIconWidget_SetIcon");
static_assert(sizeof(GamepadIconWidget_SetIcon) == 0x000002, "Wrong size on GamepadIconWidget_SetIcon");
static_assert(offsetof(GamepadIconWidget_SetIcon, InIcon) == 0x000000, "Member 'GamepadIconWidget_SetIcon::InIcon' has a wrong offset!");
static_assert(offsetof(GamepadIconWidget_SetIcon, bInIsHoldable) == 0x000001, "Member 'GamepadIconWidget_SetIcon::bInIsHoldable' has a wrong offset!");

// Function Flame.GamepadChoiceWidget.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct GamepadChoiceWidget_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadChoiceWidget_GetSelectedIndex) == 0x000004, "Wrong alignment on GamepadChoiceWidget_GetSelectedIndex");
static_assert(sizeof(GamepadChoiceWidget_GetSelectedIndex) == 0x000004, "Wrong size on GamepadChoiceWidget_GetSelectedIndex");
static_assert(offsetof(GamepadChoiceWidget_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'GamepadChoiceWidget_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function Flame.FirstPersonFunctions.ConvertWorldToFirstPerson
// 0x0640 (0x0640 - 0x0000)
struct FirstPersonFunctions_ConvertWorldToFirstPerson final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalViewInfo                       ViewInfo;                                          // 0x0010(0x0620)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0630(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FirstPersonFunctions_ConvertWorldToFirstPerson) == 0x000010, "Wrong alignment on FirstPersonFunctions_ConvertWorldToFirstPerson");
static_assert(sizeof(FirstPersonFunctions_ConvertWorldToFirstPerson) == 0x000640, "Wrong size on FirstPersonFunctions_ConvertWorldToFirstPerson");
static_assert(offsetof(FirstPersonFunctions_ConvertWorldToFirstPerson, WorldPos) == 0x000000, "Member 'FirstPersonFunctions_ConvertWorldToFirstPerson::WorldPos' has a wrong offset!");
static_assert(offsetof(FirstPersonFunctions_ConvertWorldToFirstPerson, ViewInfo) == 0x000010, "Member 'FirstPersonFunctions_ConvertWorldToFirstPerson::ViewInfo' has a wrong offset!");
static_assert(offsetof(FirstPersonFunctions_ConvertWorldToFirstPerson, ReturnValue) == 0x000630, "Member 'FirstPersonFunctions_ConvertWorldToFirstPerson::ReturnValue' has a wrong offset!");

// Function Flame.GameMenuTeamScreen.IsInviteAllowed
// 0x0001 (0x0001 - 0x0000)
struct GameMenuTeamScreen_IsInviteAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameMenuTeamScreen_IsInviteAllowed) == 0x000001, "Wrong alignment on GameMenuTeamScreen_IsInviteAllowed");
static_assert(sizeof(GameMenuTeamScreen_IsInviteAllowed) == 0x000001, "Wrong size on GameMenuTeamScreen_IsInviteAllowed");
static_assert(offsetof(GameMenuTeamScreen_IsInviteAllowed, ReturnValue) == 0x000000, "Member 'GameMenuTeamScreen_IsInviteAllowed::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GameStoreOffers.GameStoreOffersStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature final
{
public:
	EGameStoreOffersState                         OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStoreOffersState                         NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature");
static_assert(sizeof(GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature");
static_assert(offsetof(GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'GameStoreOffers_GameStoreOffersStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.GameStoreOffers.OnPlatformStoreOffersChanges
// 0x0002 (0x0002 - 0x0000)
struct GameStoreOffers_OnPlatformStoreOffersChanges final
{
public:
	EPlatformStoreOffersState                     OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformStoreOffersState                     NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_OnPlatformStoreOffersChanges) == 0x000001, "Wrong alignment on GameStoreOffers_OnPlatformStoreOffersChanges");
static_assert(sizeof(GameStoreOffers_OnPlatformStoreOffersChanges) == 0x000002, "Wrong size on GameStoreOffers_OnPlatformStoreOffersChanges");
static_assert(offsetof(GameStoreOffers_OnPlatformStoreOffersChanges, OldState) == 0x000000, "Member 'GameStoreOffers_OnPlatformStoreOffersChanges::OldState' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_OnPlatformStoreOffersChanges, NewState) == 0x000001, "Member 'GameStoreOffers_OnPlatformStoreOffersChanges::NewState' has a wrong offset!");

// Function Flame.GameStoreOffers.StartDownloadOfOffers
// 0x0001 (0x0001 - 0x0000)
struct GameStoreOffers_StartDownloadOfOffers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_StartDownloadOfOffers) == 0x000001, "Wrong alignment on GameStoreOffers_StartDownloadOfOffers");
static_assert(sizeof(GameStoreOffers_StartDownloadOfOffers) == 0x000001, "Wrong size on GameStoreOffers_StartDownloadOfOffers");
static_assert(offsetof(GameStoreOffers_StartDownloadOfOffers, ReturnValue) == 0x000000, "Member 'GameStoreOffers_StartDownloadOfOffers::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreOffers.GetGameStoreData
// 0x0010 (0x0010 - 0x0000)
struct GameStoreOffers_GetGameStoreData final
{
public:
	struct FGameStoreData                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GetGameStoreData) == 0x000008, "Wrong alignment on GameStoreOffers_GetGameStoreData");
static_assert(sizeof(GameStoreOffers_GetGameStoreData) == 0x000010, "Wrong size on GameStoreOffers_GetGameStoreData");
static_assert(offsetof(GameStoreOffers_GetGameStoreData, ReturnValue) == 0x000000, "Member 'GameStoreOffers_GetGameStoreData::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreOffers.GetGameStoreProductInfo
// 0x0068 (0x0068 - 0x0000)
struct GameStoreOffers_GetGameStoreProductInfo final
{
public:
	struct FGameStoreProductId                    ProductId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ProductFound;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductInfo                  ReturnValue;                                       // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GetGameStoreProductInfo) == 0x000008, "Wrong alignment on GameStoreOffers_GetGameStoreProductInfo");
static_assert(sizeof(GameStoreOffers_GetGameStoreProductInfo) == 0x000068, "Wrong size on GameStoreOffers_GetGameStoreProductInfo");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfo, ProductId) == 0x000000, "Member 'GameStoreOffers_GetGameStoreProductInfo::ProductId' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfo, ProductFound) == 0x000010, "Member 'GameStoreOffers_GetGameStoreProductInfo::ProductFound' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfo, ReturnValue) == 0x000018, "Member 'GameStoreOffers_GetGameStoreProductInfo::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreOffers.GetGameStoreProductInfoById
// 0x0068 (0x0068 - 0x0000)
struct GameStoreOffers_GetGameStoreProductInfoById final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProductFound;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductInfo                  ReturnValue;                                       // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GetGameStoreProductInfoById) == 0x000008, "Wrong alignment on GameStoreOffers_GetGameStoreProductInfoById");
static_assert(sizeof(GameStoreOffers_GetGameStoreProductInfoById) == 0x000068, "Wrong size on GameStoreOffers_GetGameStoreProductInfoById");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfoById, ProductId) == 0x000000, "Member 'GameStoreOffers_GetGameStoreProductInfoById::ProductId' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfoById, ProductFound) == 0x000010, "Member 'GameStoreOffers_GetGameStoreProductInfoById::ProductFound' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreProductInfoById, ReturnValue) == 0x000018, "Member 'GameStoreOffers_GetGameStoreProductInfoById::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreOffers.GetGameStoreSlotInfo
// 0x0040 (0x0040 - 0x0000)
struct GameStoreOffers_GetGameStoreSlotInfo final
{
public:
	class FString                                 StoreName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StoreFound;                                        // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreInfo                         ReturnValue;                                       // 0x0018(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GetGameStoreSlotInfo) == 0x000008, "Wrong alignment on GameStoreOffers_GetGameStoreSlotInfo");
static_assert(sizeof(GameStoreOffers_GetGameStoreSlotInfo) == 0x000040, "Wrong size on GameStoreOffers_GetGameStoreSlotInfo");
static_assert(offsetof(GameStoreOffers_GetGameStoreSlotInfo, StoreName) == 0x000000, "Member 'GameStoreOffers_GetGameStoreSlotInfo::StoreName' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreSlotInfo, StoreFound) == 0x000010, "Member 'GameStoreOffers_GetGameStoreSlotInfo::StoreFound' has a wrong offset!");
static_assert(offsetof(GameStoreOffers_GetGameStoreSlotInfo, ReturnValue) == 0x000018, "Member 'GameStoreOffers_GetGameStoreSlotInfo::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreOffers.GetOffersManagerState
// 0x0001 (0x0001 - 0x0000)
struct GameStoreOffers_GetOffersManagerState final
{
public:
	EGameStoreOffersState                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreOffers_GetOffersManagerState) == 0x000001, "Wrong alignment on GameStoreOffers_GetOffersManagerState");
static_assert(sizeof(GameStoreOffers_GetOffersManagerState) == 0x000001, "Wrong size on GameStoreOffers_GetOffersManagerState");
static_assert(offsetof(GameStoreOffers_GetOffersManagerState, ReturnValue) == 0x000000, "Member 'GameStoreOffers_GetOffersManagerState::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationVariant.GetArchetypeMaterialOverrides
// 0x0058 (0x0058 - 0x0000)
struct CustomizationVariant_GetArchetypeMaterialOverrides final
{
public:
	TSubclassOf<class ACustomizationArchetype>    Archetype;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizatinMaterials                 ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationVariant_GetArchetypeMaterialOverrides) == 0x000008, "Wrong alignment on CustomizationVariant_GetArchetypeMaterialOverrides");
static_assert(sizeof(CustomizationVariant_GetArchetypeMaterialOverrides) == 0x000058, "Wrong size on CustomizationVariant_GetArchetypeMaterialOverrides");
static_assert(offsetof(CustomizationVariant_GetArchetypeMaterialOverrides, Archetype) == 0x000000, "Member 'CustomizationVariant_GetArchetypeMaterialOverrides::Archetype' has a wrong offset!");
static_assert(offsetof(CustomizationVariant_GetArchetypeMaterialOverrides, ReturnValue) == 0x000008, "Member 'CustomizationVariant_GetArchetypeMaterialOverrides::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationVariant.GetCustomizationBundle
// 0x0008 (0x0008 - 0x0000)
struct CustomizationVariant_GetCustomizationBundle final
{
public:
	TSubclassOf<class ACustomizationVariantBundle> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationVariant_GetCustomizationBundle) == 0x000008, "Wrong alignment on CustomizationVariant_GetCustomizationBundle");
static_assert(sizeof(CustomizationVariant_GetCustomizationBundle) == 0x000008, "Wrong size on CustomizationVariant_GetCustomizationBundle");
static_assert(offsetof(CustomizationVariant_GetCustomizationBundle, ReturnValue) == 0x000000, "Member 'CustomizationVariant_GetCustomizationBundle::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationVariant.GetCustomizationClass
// 0x0008 (0x0008 - 0x0000)
struct CustomizationVariant_GetCustomizationClass final
{
public:
	TSubclassOf<class ACustomization>             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationVariant_GetCustomizationClass) == 0x000008, "Wrong alignment on CustomizationVariant_GetCustomizationClass");
static_assert(sizeof(CustomizationVariant_GetCustomizationClass) == 0x000008, "Wrong size on CustomizationVariant_GetCustomizationClass");
static_assert(offsetof(CustomizationVariant_GetCustomizationClass, ReturnValue) == 0x000000, "Member 'CustomizationVariant_GetCustomizationClass::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationVariant.GetSoundTexture
// 0x0001 (0x0001 - 0x0000)
struct CustomizationVariant_GetSoundTexture final
{
public:
	ESoundTextureType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationVariant_GetSoundTexture) == 0x000001, "Wrong alignment on CustomizationVariant_GetSoundTexture");
static_assert(sizeof(CustomizationVariant_GetSoundTexture) == 0x000001, "Wrong size on CustomizationVariant_GetSoundTexture");
static_assert(offsetof(CustomizationVariant_GetSoundTexture, ReturnValue) == 0x000000, "Member 'CustomizationVariant_GetSoundTexture::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationVariant.GetVoiceModifier
// 0x0001 (0x0001 - 0x0000)
struct CustomizationVariant_GetVoiceModifier final
{
public:
	EVoiceModifierType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationVariant_GetVoiceModifier) == 0x000001, "Wrong alignment on CustomizationVariant_GetVoiceModifier");
static_assert(sizeof(CustomizationVariant_GetVoiceModifier) == 0x000001, "Wrong size on CustomizationVariant_GetVoiceModifier");
static_assert(offsetof(CustomizationVariant_GetVoiceModifier, ReturnValue) == 0x000000, "Member 'CustomizationVariant_GetVoiceModifier::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationGestureVariant.GetAnimationMontage
// 0x0008 (0x0008 - 0x0000)
struct CustomizationGestureVariant_GetAnimationMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGestureVariant_GetAnimationMontage) == 0x000008, "Wrong alignment on CustomizationGestureVariant_GetAnimationMontage");
static_assert(sizeof(CustomizationGestureVariant_GetAnimationMontage) == 0x000008, "Wrong size on CustomizationGestureVariant_GetAnimationMontage");
static_assert(offsetof(CustomizationGestureVariant_GetAnimationMontage, ReturnValue) == 0x000000, "Member 'CustomizationGestureVariant_GetAnimationMontage::ReturnValue' has a wrong offset!");

// Function Flame.CustomizationGestureVariant.GetShelterPreviewStaticPose
// 0x0008 (0x0008 - 0x0000)
struct CustomizationGestureVariant_GetShelterPreviewStaticPose final
{
public:
	class UAnimSequence*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationGestureVariant_GetShelterPreviewStaticPose) == 0x000008, "Wrong alignment on CustomizationGestureVariant_GetShelterPreviewStaticPose");
static_assert(sizeof(CustomizationGestureVariant_GetShelterPreviewStaticPose) == 0x000008, "Wrong size on CustomizationGestureVariant_GetShelterPreviewStaticPose");
static_assert(offsetof(CustomizationGestureVariant_GetShelterPreviewStaticPose, ReturnValue) == 0x000000, "Member 'CustomizationGestureVariant_GetShelterPreviewStaticPose::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GameStoreSellingPoints.GameStoreSellingPointsStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature final
{
public:
	EGameStoreSellingPointsState                  OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStoreSellingPointsState                  NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature");
static_assert(sizeof(GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature");
static_assert(offsetof(GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'GameStoreSellingPoints_GameStoreSellingPointsStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.GetSellingPointsFilteredDebug
// 0x0220 (0x0220 - 0x0000)
struct GameStoreSellingPoints_GetSellingPointsFilteredDebug final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              NowTime;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSortedSellingpoints                   ReturnValue;                                       // 0x0010(0x0210)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GetSellingPointsFilteredDebug) == 0x000008, "Wrong alignment on GameStoreSellingPoints_GetSellingPointsFilteredDebug");
static_assert(sizeof(GameStoreSellingPoints_GetSellingPointsFilteredDebug) == 0x000220, "Wrong size on GameStoreSellingPoints_GetSellingPointsFilteredDebug");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsFilteredDebug, Player) == 0x000000, "Member 'GameStoreSellingPoints_GetSellingPointsFilteredDebug::Player' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsFilteredDebug, NowTime) == 0x000008, "Member 'GameStoreSellingPoints_GetSellingPointsFilteredDebug::NowTime' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsFilteredDebug, ReturnValue) == 0x000010, "Member 'GameStoreSellingPoints_GetSellingPointsFilteredDebug::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.GetSellingPointsFilteredOwnedAndActive
// 0x0218 (0x0218 - 0x0000)
struct GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSortedSellingpoints                   ReturnValue;                                       // 0x0008(0x0210)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive) == 0x000008, "Wrong alignment on GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive");
static_assert(sizeof(GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive) == 0x000218, "Wrong size on GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive, Player) == 0x000000, "Member 'GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive::Player' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive, ReturnValue) == 0x000008, "Member 'GameStoreSellingPoints_GetSellingPointsFilteredOwnedAndActive::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.StartDownloadOfSellingPoints
// 0x0001 (0x0001 - 0x0000)
struct GameStoreSellingPoints_StartDownloadOfSellingPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_StartDownloadOfSellingPoints) == 0x000001, "Wrong alignment on GameStoreSellingPoints_StartDownloadOfSellingPoints");
static_assert(sizeof(GameStoreSellingPoints_StartDownloadOfSellingPoints) == 0x000001, "Wrong size on GameStoreSellingPoints_StartDownloadOfSellingPoints");
static_assert(offsetof(GameStoreSellingPoints_StartDownloadOfSellingPoints, ReturnValue) == 0x000000, "Member 'GameStoreSellingPoints_StartDownloadOfSellingPoints::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.GetGameSellingPointInfoForItem
// 0x0070 (0x0070 - 0x0000)
struct GameStoreSellingPoints_GetGameSellingPointInfoForItem final
{
public:
	TSubclassOf<class AItem>                      Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProductFound;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreSellingPointInfo             ReturnValue;                                       // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GetGameSellingPointInfoForItem) == 0x000008, "Wrong alignment on GameStoreSellingPoints_GetGameSellingPointInfoForItem");
static_assert(sizeof(GameStoreSellingPoints_GetGameSellingPointInfoForItem) == 0x000070, "Wrong size on GameStoreSellingPoints_GetGameSellingPointInfoForItem");
static_assert(offsetof(GameStoreSellingPoints_GetGameSellingPointInfoForItem, Item) == 0x000000, "Member 'GameStoreSellingPoints_GetGameSellingPointInfoForItem::Item' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GetGameSellingPointInfoForItem, ProductFound) == 0x000008, "Member 'GameStoreSellingPoints_GetGameSellingPointInfoForItem::ProductFound' has a wrong offset!");
static_assert(offsetof(GameStoreSellingPoints_GetGameSellingPointInfoForItem, ReturnValue) == 0x000010, "Member 'GameStoreSellingPoints_GetGameSellingPointInfoForItem::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.GetSellingPointsData
// 0x0050 (0x0050 - 0x0000)
struct GameStoreSellingPoints_GetSellingPointsData final
{
public:
	struct FGameStoreSellingPointsData            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GetSellingPointsData) == 0x000008, "Wrong alignment on GameStoreSellingPoints_GetSellingPointsData");
static_assert(sizeof(GameStoreSellingPoints_GetSellingPointsData) == 0x000050, "Wrong size on GameStoreSellingPoints_GetSellingPointsData");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsData, ReturnValue) == 0x000000, "Member 'GameStoreSellingPoints_GetSellingPointsData::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSellingPoints.GetSellingPointsManagerState
// 0x0001 (0x0001 - 0x0000)
struct GameStoreSellingPoints_GetSellingPointsManagerState final
{
public:
	EGameStoreSellingPointsState                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSellingPoints_GetSellingPointsManagerState) == 0x000001, "Wrong alignment on GameStoreSellingPoints_GetSellingPointsManagerState");
static_assert(sizeof(GameStoreSellingPoints_GetSellingPointsManagerState) == 0x000001, "Wrong size on GameStoreSellingPoints_GetSellingPointsManagerState");
static_assert(offsetof(GameStoreSellingPoints_GetSellingPointsManagerState, ReturnValue) == 0x000000, "Member 'GameStoreSellingPoints_GetSellingPointsManagerState::ReturnValue' has a wrong offset!");

// Function Flame.UpdateableWidget.IsViewUpdateNecessary
// 0x0001 (0x0001 - 0x0000)
struct UpdateableWidget_IsViewUpdateNecessary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UpdateableWidget_IsViewUpdateNecessary) == 0x000001, "Wrong alignment on UpdateableWidget_IsViewUpdateNecessary");
static_assert(sizeof(UpdateableWidget_IsViewUpdateNecessary) == 0x000001, "Wrong size on UpdateableWidget_IsViewUpdateNecessary");
static_assert(offsetof(UpdateableWidget_IsViewUpdateNecessary, ReturnValue) == 0x000000, "Member 'UpdateableWidget_IsViewUpdateNecessary::ReturnValue' has a wrong offset!");

// Function Flame.DataProvider.GetCloudStructures
// 0x0010 (0x0010 - 0x0000)
struct DataProvider_GetCloudStructures final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudDataStructures*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_GetCloudStructures) == 0x000008, "Wrong alignment on DataProvider_GetCloudStructures");
static_assert(sizeof(DataProvider_GetCloudStructures) == 0x000010, "Wrong size on DataProvider_GetCloudStructures");
static_assert(offsetof(DataProvider_GetCloudStructures, WorldContextObject) == 0x000000, "Member 'DataProvider_GetCloudStructures::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DataProvider_GetCloudStructures, ReturnValue) == 0x000008, "Member 'DataProvider_GetCloudStructures::ReturnValue' has a wrong offset!");

// Function Flame.DataProvider.GetCloudTables
// 0x0010 (0x0010 - 0x0000)
struct DataProvider_GetCloudTables final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudDataTables*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_GetCloudTables) == 0x000008, "Wrong alignment on DataProvider_GetCloudTables");
static_assert(sizeof(DataProvider_GetCloudTables) == 0x000010, "Wrong size on DataProvider_GetCloudTables");
static_assert(offsetof(DataProvider_GetCloudTables, WorldContextObject) == 0x000000, "Member 'DataProvider_GetCloudTables::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DataProvider_GetCloudTables, ReturnValue) == 0x000008, "Member 'DataProvider_GetCloudTables::ReturnValue' has a wrong offset!");

// Function Flame.DataProvider.GetDataProvider
// 0x0010 (0x0010 - 0x0000)
struct DataProvider_GetDataProvider final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataProvider*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_GetDataProvider) == 0x000008, "Wrong alignment on DataProvider_GetDataProvider");
static_assert(sizeof(DataProvider_GetDataProvider) == 0x000010, "Wrong size on DataProvider_GetDataProvider");
static_assert(offsetof(DataProvider_GetDataProvider, WorldContextObject) == 0x000000, "Member 'DataProvider_GetDataProvider::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DataProvider_GetDataProvider, ReturnValue) == 0x000008, "Member 'DataProvider_GetDataProvider::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.DataProvider.DataProviderStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct DataProvider_DataProviderStateChanged__DelegateSignature final
{
public:
	EDataProviderState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataProviderState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_DataProviderStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on DataProvider_DataProviderStateChanged__DelegateSignature");
static_assert(sizeof(DataProvider_DataProviderStateChanged__DelegateSignature) == 0x000002, "Wrong size on DataProvider_DataProviderStateChanged__DelegateSignature");
static_assert(offsetof(DataProvider_DataProviderStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'DataProvider_DataProviderStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(DataProvider_DataProviderStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'DataProvider_DataProviderStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.DataProvider.GetDataVersion
// 0x0010 (0x0010 - 0x0000)
struct DataProvider_GetDataVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_GetDataVersion) == 0x000008, "Wrong alignment on DataProvider_GetDataVersion");
static_assert(sizeof(DataProvider_GetDataVersion) == 0x000010, "Wrong size on DataProvider_GetDataVersion");
static_assert(offsetof(DataProvider_GetDataVersion, ReturnValue) == 0x000000, "Member 'DataProvider_GetDataVersion::ReturnValue' has a wrong offset!");

// Function Flame.DataProvider.GetState
// 0x0001 (0x0001 - 0x0000)
struct DataProvider_GetState final
{
public:
	EDataProviderState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DataProvider_GetState) == 0x000001, "Wrong alignment on DataProvider_GetState");
static_assert(sizeof(DataProvider_GetState) == 0x000001, "Wrong size on DataProvider_GetState");
static_assert(offsetof(DataProvider_GetState, ReturnValue) == 0x000000, "Member 'DataProvider_GetState::ReturnValue' has a wrong offset!");

// Function Flame.PlayerListWidget.AddPlayer
// 0x0028 (0x0028 - 0x0000)
struct PlayerListWidget_AddPlayer final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_AddPlayer) == 0x000008, "Wrong alignment on PlayerListWidget_AddPlayer");
static_assert(sizeof(PlayerListWidget_AddPlayer) == 0x000028, "Wrong size on PlayerListWidget_AddPlayer");
static_assert(offsetof(PlayerListWidget_AddPlayer, InPlayerNetId) == 0x000000, "Member 'PlayerListWidget_AddPlayer::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayerListWidget.NativeOnPlayerClicked
// 0x0008 (0x0008 - 0x0000)
struct PlayerListWidget_NativeOnPlayerClicked final
{
public:
	class UListButtonWidget*                      ListButtonWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_NativeOnPlayerClicked) == 0x000008, "Wrong alignment on PlayerListWidget_NativeOnPlayerClicked");
static_assert(sizeof(PlayerListWidget_NativeOnPlayerClicked) == 0x000008, "Wrong size on PlayerListWidget_NativeOnPlayerClicked");
static_assert(offsetof(PlayerListWidget_NativeOnPlayerClicked, ListButtonWidget) == 0x000000, "Member 'PlayerListWidget_NativeOnPlayerClicked::ListButtonWidget' has a wrong offset!");

// Function Flame.PlayerListWidget.NativeOnPlayerFocused
// 0x0008 (0x0008 - 0x0000)
struct PlayerListWidget_NativeOnPlayerFocused final
{
public:
	class UListButtonWidget*                      ListButtonWidget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_NativeOnPlayerFocused) == 0x000008, "Wrong alignment on PlayerListWidget_NativeOnPlayerFocused");
static_assert(sizeof(PlayerListWidget_NativeOnPlayerFocused) == 0x000008, "Wrong size on PlayerListWidget_NativeOnPlayerFocused");
static_assert(offsetof(PlayerListWidget_NativeOnPlayerFocused, ListButtonWidget) == 0x000000, "Member 'PlayerListWidget_NativeOnPlayerFocused::ListButtonWidget' has a wrong offset!");

// Function Flame.PlayerListWidget.OnPlayerAdded
// 0x0008 (0x0008 - 0x0000)
struct PlayerListWidget_OnPlayerAdded final
{
public:
	class UPlayerInfoWidget*                      AddedWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_OnPlayerAdded) == 0x000008, "Wrong alignment on PlayerListWidget_OnPlayerAdded");
static_assert(sizeof(PlayerListWidget_OnPlayerAdded) == 0x000008, "Wrong size on PlayerListWidget_OnPlayerAdded");
static_assert(offsetof(PlayerListWidget_OnPlayerAdded, AddedWidget) == 0x000000, "Member 'PlayerListWidget_OnPlayerAdded::AddedWidget' has a wrong offset!");

// Function Flame.PlayerListWidget.RemovePlayer
// 0x0028 (0x0028 - 0x0000)
struct PlayerListWidget_RemovePlayer final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_RemovePlayer) == 0x000008, "Wrong alignment on PlayerListWidget_RemovePlayer");
static_assert(sizeof(PlayerListWidget_RemovePlayer) == 0x000028, "Wrong size on PlayerListWidget_RemovePlayer");
static_assert(offsetof(PlayerListWidget_RemovePlayer, InPlayerNetId) == 0x000000, "Member 'PlayerListWidget_RemovePlayer::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayerListWidget.GetFocusedPlayer
// 0x0028 (0x0028 - 0x0000)
struct PlayerListWidget_GetFocusedPlayer final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_GetFocusedPlayer) == 0x000008, "Wrong alignment on PlayerListWidget_GetFocusedPlayer");
static_assert(sizeof(PlayerListWidget_GetFocusedPlayer) == 0x000028, "Wrong size on PlayerListWidget_GetFocusedPlayer");
static_assert(offsetof(PlayerListWidget_GetFocusedPlayer, ReturnValue) == 0x000000, "Member 'PlayerListWidget_GetFocusedPlayer::ReturnValue' has a wrong offset!");

// Function Flame.PlayerListWidget.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerListWidget_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerListWidget_GetPlayerCount) == 0x000004, "Wrong alignment on PlayerListWidget_GetPlayerCount");
static_assert(sizeof(PlayerListWidget_GetPlayerCount) == 0x000004, "Wrong size on PlayerListWidget_GetPlayerCount");
static_assert(offsetof(PlayerListWidget_GetPlayerCount, ReturnValue) == 0x000000, "Member 'PlayerListWidget_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Flame.GroupMemberListWidget.OnPlayerChangedState
// 0x0030 (0x0030 - 0x0000)
struct GroupMemberListWidget_OnPlayerChangedState final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGroupState                             OldState;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGroupState                             NewState;                                          // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GroupMemberListWidget_OnPlayerChangedState) == 0x000008, "Wrong alignment on GroupMemberListWidget_OnPlayerChangedState");
static_assert(sizeof(GroupMemberListWidget_OnPlayerChangedState) == 0x000030, "Wrong size on GroupMemberListWidget_OnPlayerChangedState");
static_assert(offsetof(GroupMemberListWidget_OnPlayerChangedState, NetId) == 0x000000, "Member 'GroupMemberListWidget_OnPlayerChangedState::NetId' has a wrong offset!");
static_assert(offsetof(GroupMemberListWidget_OnPlayerChangedState, OldState) == 0x000028, "Member 'GroupMemberListWidget_OnPlayerChangedState::OldState' has a wrong offset!");
static_assert(offsetof(GroupMemberListWidget_OnPlayerChangedState, NewState) == 0x000029, "Member 'GroupMemberListWidget_OnPlayerChangedState::NewState' has a wrong offset!");

// Function Flame.GroupMemberListWidget.OnPlayerJoined
// 0x0038 (0x0038 - 0x0000)
struct GroupMemberListWidget_OnPlayerJoined final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupMemberListWidget_OnPlayerJoined) == 0x000008, "Wrong alignment on GroupMemberListWidget_OnPlayerJoined");
static_assert(sizeof(GroupMemberListWidget_OnPlayerJoined) == 0x000038, "Wrong size on GroupMemberListWidget_OnPlayerJoined");
static_assert(offsetof(GroupMemberListWidget_OnPlayerJoined, NetId) == 0x000000, "Member 'GroupMemberListWidget_OnPlayerJoined::NetId' has a wrong offset!");
static_assert(offsetof(GroupMemberListWidget_OnPlayerJoined, GroupId) == 0x000028, "Member 'GroupMemberListWidget_OnPlayerJoined::GroupId' has a wrong offset!");

// Function Flame.GroupMemberListWidget.OnPlayerLeft
// 0x0038 (0x0038 - 0x0000)
struct GroupMemberListWidget_OnPlayerLeft final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupMemberListWidget_OnPlayerLeft) == 0x000008, "Wrong alignment on GroupMemberListWidget_OnPlayerLeft");
static_assert(sizeof(GroupMemberListWidget_OnPlayerLeft) == 0x000038, "Wrong size on GroupMemberListWidget_OnPlayerLeft");
static_assert(offsetof(GroupMemberListWidget_OnPlayerLeft, NetId) == 0x000000, "Member 'GroupMemberListWidget_OnPlayerLeft::NetId' has a wrong offset!");
static_assert(offsetof(GroupMemberListWidget_OnPlayerLeft, GroupId) == 0x000028, "Member 'GroupMemberListWidget_OnPlayerLeft::GroupId' has a wrong offset!");

// Function Flame.Gate.Travel
// 0x0008 (0x0008 - 0x0000)
struct Gate_Travel final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gate_Travel) == 0x000008, "Wrong alignment on Gate_Travel");
static_assert(sizeof(Gate_Travel) == 0x000008, "Wrong size on Gate_Travel");
static_assert(offsetof(Gate_Travel, PlayerController) == 0x000000, "Member 'Gate_Travel::PlayerController' has a wrong offset!");

// Function Flame.SelectionWheel.CreateConsumableSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_CreateConsumableSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_CreateConsumableSegments) == 0x000008, "Wrong alignment on SelectionWheel_CreateConsumableSegments");
static_assert(sizeof(SelectionWheel_CreateConsumableSegments) == 0x000010, "Wrong size on SelectionWheel_CreateConsumableSegments");
static_assert(offsetof(SelectionWheel_CreateConsumableSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_CreateConsumableSegments::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.CreateDevSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_CreateDevSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_CreateDevSegments) == 0x000008, "Wrong alignment on SelectionWheel_CreateDevSegments");
static_assert(sizeof(SelectionWheel_CreateDevSegments) == 0x000010, "Wrong size on SelectionWheel_CreateDevSegments");
static_assert(offsetof(SelectionWheel_CreateDevSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_CreateDevSegments::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.CreateGestureSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_CreateGestureSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_CreateGestureSegments) == 0x000008, "Wrong alignment on SelectionWheel_CreateGestureSegments");
static_assert(sizeof(SelectionWheel_CreateGestureSegments) == 0x000010, "Wrong size on SelectionWheel_CreateGestureSegments");
static_assert(offsetof(SelectionWheel_CreateGestureSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_CreateGestureSegments::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.CreateToolSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_CreateToolSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_CreateToolSegments) == 0x000008, "Wrong alignment on SelectionWheel_CreateToolSegments");
static_assert(sizeof(SelectionWheel_CreateToolSegments) == 0x000010, "Wrong size on SelectionWheel_CreateToolSegments");
static_assert(offsetof(SelectionWheel_CreateToolSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_CreateToolSegments::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.CreateWeaponSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_CreateWeaponSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_CreateWeaponSegments) == 0x000008, "Wrong alignment on SelectionWheel_CreateWeaponSegments");
static_assert(sizeof(SelectionWheel_CreateWeaponSegments) == 0x000010, "Wrong size on SelectionWheel_CreateWeaponSegments");
static_assert(offsetof(SelectionWheel_CreateWeaponSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_CreateWeaponSegments::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.ProcessInputAxisX
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheel_ProcessInputAxisX final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_ProcessInputAxisX) == 0x000004, "Wrong alignment on SelectionWheel_ProcessInputAxisX");
static_assert(sizeof(SelectionWheel_ProcessInputAxisX) == 0x000004, "Wrong size on SelectionWheel_ProcessInputAxisX");
static_assert(offsetof(SelectionWheel_ProcessInputAxisX, Value) == 0x000000, "Member 'SelectionWheel_ProcessInputAxisX::Value' has a wrong offset!");

// Function Flame.SelectionWheel.ProcessInputAxisY
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheel_ProcessInputAxisY final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_ProcessInputAxisY) == 0x000004, "Wrong alignment on SelectionWheel_ProcessInputAxisY");
static_assert(sizeof(SelectionWheel_ProcessInputAxisY) == 0x000004, "Wrong size on SelectionWheel_ProcessInputAxisY");
static_assert(offsetof(SelectionWheel_ProcessInputAxisY, Value) == 0x000000, "Member 'SelectionWheel_ProcessInputAxisY::Value' has a wrong offset!");

// Function Flame.SelectionWheel.SelectSegment
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheel_SelectSegment final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_SelectSegment) == 0x000004, "Wrong alignment on SelectionWheel_SelectSegment");
static_assert(sizeof(SelectionWheel_SelectSegment) == 0x000004, "Wrong size on SelectionWheel_SelectSegment");
static_assert(offsetof(SelectionWheel_SelectSegment, Index_0) == 0x000000, "Member 'SelectionWheel_SelectSegment::Index_0' has a wrong offset!");

// Function Flame.SelectionWheel.SetDescription
// 0x0020 (0x0020 - 0x0000)
struct SelectionWheel_SetDescription final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESlateVisibility                              InVisibility;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SelectionWheel_SetDescription) == 0x000008, "Wrong alignment on SelectionWheel_SetDescription");
static_assert(sizeof(SelectionWheel_SetDescription) == 0x000020, "Wrong size on SelectionWheel_SetDescription");
static_assert(offsetof(SelectionWheel_SetDescription, InDescription) == 0x000000, "Member 'SelectionWheel_SetDescription::InDescription' has a wrong offset!");
static_assert(offsetof(SelectionWheel_SetDescription, InVisibility) == 0x000018, "Member 'SelectionWheel_SetDescription::InVisibility' has a wrong offset!");

// Function Flame.SelectionWheel.SetEquippedItemIndex
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheel_SetEquippedItemIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_SetEquippedItemIndex) == 0x000004, "Wrong alignment on SelectionWheel_SetEquippedItemIndex");
static_assert(sizeof(SelectionWheel_SetEquippedItemIndex) == 0x000004, "Wrong size on SelectionWheel_SetEquippedItemIndex");
static_assert(offsetof(SelectionWheel_SetEquippedItemIndex, Index_0) == 0x000000, "Member 'SelectionWheel_SetEquippedItemIndex::Index_0' has a wrong offset!");

// Function Flame.SelectionWheel.SetSmallDescription
// 0x0020 (0x0020 - 0x0000)
struct SelectionWheel_SetSmallDescription final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESlateVisibility                              InVisibility;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SelectionWheel_SetSmallDescription) == 0x000008, "Wrong alignment on SelectionWheel_SetSmallDescription");
static_assert(sizeof(SelectionWheel_SetSmallDescription) == 0x000020, "Wrong size on SelectionWheel_SetSmallDescription");
static_assert(offsetof(SelectionWheel_SetSmallDescription, InDescription) == 0x000000, "Member 'SelectionWheel_SetSmallDescription::InDescription' has a wrong offset!");
static_assert(offsetof(SelectionWheel_SetSmallDescription, InVisibility) == 0x000018, "Member 'SelectionWheel_SetSmallDescription::InVisibility' has a wrong offset!");

// Function Flame.SelectionWheel.GetAngleOffset
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheel_GetAngleOffset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_GetAngleOffset) == 0x000004, "Wrong alignment on SelectionWheel_GetAngleOffset");
static_assert(sizeof(SelectionWheel_GetAngleOffset) == 0x000004, "Wrong size on SelectionWheel_GetAngleOffset");
static_assert(offsetof(SelectionWheel_GetAngleOffset, ReturnValue) == 0x000000, "Member 'SelectionWheel_GetAngleOffset::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.GetWheelComponent
// 0x0008 (0x0008 - 0x0000)
struct SelectionWheel_GetWheelComponent final
{
public:
	class USelectionWheelComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_GetWheelComponent) == 0x000008, "Wrong alignment on SelectionWheel_GetWheelComponent");
static_assert(sizeof(SelectionWheel_GetWheelComponent) == 0x000008, "Wrong size on SelectionWheel_GetWheelComponent");
static_assert(offsetof(SelectionWheel_GetWheelComponent, ReturnValue) == 0x000000, "Member 'SelectionWheel_GetWheelComponent::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheel.GetWheelSegments
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheel_GetWheelSegments final
{
public:
	TArray<class UWheelSegment*>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheel_GetWheelSegments) == 0x000008, "Wrong alignment on SelectionWheel_GetWheelSegments");
static_assert(sizeof(SelectionWheel_GetWheelSegments) == 0x000010, "Wrong size on SelectionWheel_GetWheelSegments");
static_assert(offsetof(SelectionWheel_GetWheelSegments, ReturnValue) == 0x000000, "Member 'SelectionWheel_GetWheelSegments::ReturnValue' has a wrong offset!");

// Function Flame.DirectionRestrictedInteractionComponent.SetEnforcedInteractionAngle
// 0x0010 (0x0010 - 0x0000)
struct DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle final
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DotRestriction;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle) == 0x000004, "Wrong alignment on DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle");
static_assert(sizeof(DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle) == 0x000010, "Wrong size on DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle");
static_assert(offsetof(DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle, Direction) == 0x000000, "Member 'DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle::Direction' has a wrong offset!");
static_assert(offsetof(DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle, DotRestriction) == 0x00000C, "Member 'DirectionRestrictedInteractionComponent_SetEnforcedInteractionAngle::DotRestriction' has a wrong offset!");

// Function Flame.OptionsElementCheckbox.OnCheckStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OptionsElementCheckbox_OnCheckStateChanged final
{
public:
	bool                                          bIsChecked;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsElementCheckbox_OnCheckStateChanged) == 0x000001, "Wrong alignment on OptionsElementCheckbox_OnCheckStateChanged");
static_assert(sizeof(OptionsElementCheckbox_OnCheckStateChanged) == 0x000001, "Wrong size on OptionsElementCheckbox_OnCheckStateChanged");
static_assert(offsetof(OptionsElementCheckbox_OnCheckStateChanged, bIsChecked) == 0x000000, "Member 'OptionsElementCheckbox_OnCheckStateChanged::bIsChecked' has a wrong offset!");

// Function Flame.EditorActor.PostRebuildBuildings
// 0x0050 (0x0050 - 0x0000)
struct EditorActor_PostRebuildBuildings final
{
public:
	TMap<class FName, float>                      Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorActor_PostRebuildBuildings) == 0x000008, "Wrong alignment on EditorActor_PostRebuildBuildings");
static_assert(sizeof(EditorActor_PostRebuildBuildings) == 0x000050, "Wrong size on EditorActor_PostRebuildBuildings");
static_assert(offsetof(EditorActor_PostRebuildBuildings, Data) == 0x000000, "Member 'EditorActor_PostRebuildBuildings::Data' has a wrong offset!");

// Function Flame.EditorActor.PreRebuildBuildings
// 0x0008 (0x0008 - 0x0000)
struct EditorActor_PreRebuildBuildings final
{
public:
	class UEditorRebuildDataStorage*              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorActor_PreRebuildBuildings) == 0x000008, "Wrong alignment on EditorActor_PreRebuildBuildings");
static_assert(sizeof(EditorActor_PreRebuildBuildings) == 0x000008, "Wrong size on EditorActor_PreRebuildBuildings");
static_assert(offsetof(EditorActor_PreRebuildBuildings, Data) == 0x000000, "Member 'EditorActor_PreRebuildBuildings::Data' has a wrong offset!");

// Function Flame.EditorActor.GenerateEditorActorIdentifier
// 0x0008 (0x0008 - 0x0000)
struct EditorActor_GenerateEditorActorIdentifier final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorActor_GenerateEditorActorIdentifier) == 0x000004, "Wrong alignment on EditorActor_GenerateEditorActorIdentifier");
static_assert(sizeof(EditorActor_GenerateEditorActorIdentifier) == 0x000008, "Wrong size on EditorActor_GenerateEditorActorIdentifier");
static_assert(offsetof(EditorActor_GenerateEditorActorIdentifier, ReturnValue) == 0x000000, "Member 'EditorActor_GenerateEditorActorIdentifier::ReturnValue' has a wrong offset!");

// Function Flame.EditorActor.GetRebuildReferencedTags
// 0x0050 (0x0050 - 0x0000)
struct EditorActor_GetRebuildReferencedTags final
{
public:
	TSet<class FName>                             OutNames;                                          // 0x0000(0x0050)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EditorActor_GetRebuildReferencedTags) == 0x000008, "Wrong alignment on EditorActor_GetRebuildReferencedTags");
static_assert(sizeof(EditorActor_GetRebuildReferencedTags) == 0x000050, "Wrong size on EditorActor_GetRebuildReferencedTags");
static_assert(offsetof(EditorActor_GetRebuildReferencedTags, OutNames) == 0x000000, "Member 'EditorActor_GetRebuildReferencedTags::OutNames' has a wrong offset!");

// Function Flame.ThrowableConsumable.OnAimingChanged
// 0x0001 (0x0001 - 0x0000)
struct ThrowableConsumable_OnAimingChanged final
{
public:
	bool                                          ShowArc;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableConsumable_OnAimingChanged) == 0x000001, "Wrong alignment on ThrowableConsumable_OnAimingChanged");
static_assert(sizeof(ThrowableConsumable_OnAimingChanged) == 0x000001, "Wrong size on ThrowableConsumable_OnAimingChanged");
static_assert(offsetof(ThrowableConsumable_OnAimingChanged, ShowArc) == 0x000000, "Member 'ThrowableConsumable_OnAimingChanged::ShowArc' has a wrong offset!");

// Function Flame.ThrowableConsumable.OnThrown
// 0x0008 (0x0008 - 0x0000)
struct ThrowableConsumable_OnThrown final
{
public:
	class AActor*                                 ThrownActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableConsumable_OnThrown) == 0x000008, "Wrong alignment on ThrowableConsumable_OnThrown");
static_assert(sizeof(ThrowableConsumable_OnThrown) == 0x000008, "Wrong size on ThrowableConsumable_OnThrown");
static_assert(offsetof(ThrowableConsumable_OnThrown, ThrownActor) == 0x000000, "Member 'ThrowableConsumable_OnThrown::ThrownActor' has a wrong offset!");

// Function Flame.ThrowableConsumable.UpdateThrowParams
// 0x0001 (0x0001 - 0x0000)
struct ThrowableConsumable_UpdateThrowParams final
{
public:
	bool                                          WasAiming;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableConsumable_UpdateThrowParams) == 0x000001, "Wrong alignment on ThrowableConsumable_UpdateThrowParams");
static_assert(sizeof(ThrowableConsumable_UpdateThrowParams) == 0x000001, "Wrong size on ThrowableConsumable_UpdateThrowParams");
static_assert(offsetof(ThrowableConsumable_UpdateThrowParams, WasAiming) == 0x000000, "Member 'ThrowableConsumable_UpdateThrowParams::WasAiming' has a wrong offset!");

// Function Flame.ThrowableConsumable.GetThrowStrength
// 0x0004 (0x0004 - 0x0000)
struct ThrowableConsumable_GetThrowStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrowableConsumable_GetThrowStrength) == 0x000004, "Wrong alignment on ThrowableConsumable_GetThrowStrength");
static_assert(sizeof(ThrowableConsumable_GetThrowStrength) == 0x000004, "Wrong size on ThrowableConsumable_GetThrowStrength");
static_assert(offsetof(ThrowableConsumable_GetThrowStrength, ReturnValue) == 0x000000, "Member 'ThrowableConsumable_GetThrowStrength::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.PlatformTools.GetUserAuthToken__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct PlatformTools_GetUserAuthToken__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       LocalUserId;                                       // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserAuthToken;                                     // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_GetUserAuthToken__DelegateSignature) == 0x000008, "Wrong alignment on PlatformTools_GetUserAuthToken__DelegateSignature");
static_assert(sizeof(PlatformTools_GetUserAuthToken__DelegateSignature) == 0x000038, "Wrong size on PlatformTools_GetUserAuthToken__DelegateSignature");
static_assert(offsetof(PlatformTools_GetUserAuthToken__DelegateSignature, LocalUserId) == 0x000000, "Member 'PlatformTools_GetUserAuthToken__DelegateSignature::LocalUserId' has a wrong offset!");
static_assert(offsetof(PlatformTools_GetUserAuthToken__DelegateSignature, UserAuthToken) == 0x000028, "Member 'PlatformTools_GetUserAuthToken__DelegateSignature::UserAuthToken' has a wrong offset!");

// Function Flame.PlatformTools.OpenSystemUserProfile
// 0x0058 (0x0058 - 0x0000)
struct PlatformTools_OpenSystemUserProfile final
{
public:
	struct FUniqueNetIdRepl                       RequestorId;                                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ProfileToShowId;                                   // 0x0028(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformTools_OpenSystemUserProfile) == 0x000008, "Wrong alignment on PlatformTools_OpenSystemUserProfile");
static_assert(sizeof(PlatformTools_OpenSystemUserProfile) == 0x000058, "Wrong size on PlatformTools_OpenSystemUserProfile");
static_assert(offsetof(PlatformTools_OpenSystemUserProfile, RequestorId) == 0x000000, "Member 'PlatformTools_OpenSystemUserProfile::RequestorId' has a wrong offset!");
static_assert(offsetof(PlatformTools_OpenSystemUserProfile, ProfileToShowId) == 0x000028, "Member 'PlatformTools_OpenSystemUserProfile::ProfileToShowId' has a wrong offset!");
static_assert(offsetof(PlatformTools_OpenSystemUserProfile, ReturnValue) == 0x000050, "Member 'PlatformTools_OpenSystemUserProfile::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.GetEnvironmentTypeName
// 0x0010 (0x0010 - 0x0000)
struct PlatformTools_GetEnvironmentTypeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_GetEnvironmentTypeName) == 0x000008, "Wrong alignment on PlatformTools_GetEnvironmentTypeName");
static_assert(sizeof(PlatformTools_GetEnvironmentTypeName) == 0x000010, "Wrong size on PlatformTools_GetEnvironmentTypeName");
static_assert(offsetof(PlatformTools_GetEnvironmentTypeName, ReturnValue) == 0x000000, "Member 'PlatformTools_GetEnvironmentTypeName::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.GetSandboxName
// 0x0010 (0x0010 - 0x0000)
struct PlatformTools_GetSandboxName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_GetSandboxName) == 0x000008, "Wrong alignment on PlatformTools_GetSandboxName");
static_assert(sizeof(PlatformTools_GetSandboxName) == 0x000010, "Wrong size on PlatformTools_GetSandboxName");
static_assert(offsetof(PlatformTools_GetSandboxName, ReturnValue) == 0x000000, "Member 'PlatformTools_GetSandboxName::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.GetUserAuthToken
// 0x0030 (0x0030 - 0x0000)
struct PlatformTools_GetUserAuthToken final
{
public:
	struct FUniqueNetIdRepl                       ProfileId;                                         // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformTools_GetUserAuthToken) == 0x000008, "Wrong alignment on PlatformTools_GetUserAuthToken");
static_assert(sizeof(PlatformTools_GetUserAuthToken) == 0x000030, "Wrong size on PlatformTools_GetUserAuthToken");
static_assert(offsetof(PlatformTools_GetUserAuthToken, ProfileId) == 0x000000, "Member 'PlatformTools_GetUserAuthToken::ProfileId' has a wrong offset!");
static_assert(offsetof(PlatformTools_GetUserAuthToken, ReturnValue) == 0x000028, "Member 'PlatformTools_GetUserAuthToken::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.GetUserHash
// 0x0018 (0x0018 - 0x0000)
struct PlatformTools_GetUserHash final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_GetUserHash) == 0x000008, "Wrong alignment on PlatformTools_GetUserHash");
static_assert(sizeof(PlatformTools_GetUserHash) == 0x000018, "Wrong size on PlatformTools_GetUserHash");
static_assert(offsetof(PlatformTools_GetUserHash, ControllerId) == 0x000000, "Member 'PlatformTools_GetUserHash::ControllerId' has a wrong offset!");
static_assert(offsetof(PlatformTools_GetUserHash, ReturnValue) == 0x000008, "Member 'PlatformTools_GetUserHash::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.IsLicenseActive
// 0x0001 (0x0001 - 0x0000)
struct PlatformTools_IsLicenseActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_IsLicenseActive) == 0x000001, "Wrong alignment on PlatformTools_IsLicenseActive");
static_assert(sizeof(PlatformTools_IsLicenseActive) == 0x000001, "Wrong size on PlatformTools_IsLicenseActive");
static_assert(offsetof(PlatformTools_IsLicenseActive, ReturnValue) == 0x000000, "Member 'PlatformTools_IsLicenseActive::ReturnValue' has a wrong offset!");

// Function Flame.PlatformTools.IsRunningTrial
// 0x0001 (0x0001 - 0x0000)
struct PlatformTools_IsRunningTrial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformTools_IsRunningTrial) == 0x000001, "Wrong alignment on PlatformTools_IsRunningTrial");
static_assert(sizeof(PlatformTools_IsRunningTrial) == 0x000001, "Wrong size on PlatformTools_IsRunningTrial");
static_assert(offsetof(PlatformTools_IsRunningTrial, ReturnValue) == 0x000000, "Member 'PlatformTools_IsRunningTrial::ReturnValue' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.SetAmmoToCraftCount
// 0x0004 (0x0004 - 0x0000)
struct EquipWeaponModalWidget_SetAmmoToCraftCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_SetAmmoToCraftCount) == 0x000004, "Wrong alignment on EquipWeaponModalWidget_SetAmmoToCraftCount");
static_assert(sizeof(EquipWeaponModalWidget_SetAmmoToCraftCount) == 0x000004, "Wrong size on EquipWeaponModalWidget_SetAmmoToCraftCount");
static_assert(offsetof(EquipWeaponModalWidget_SetAmmoToCraftCount, InCount) == 0x000000, "Member 'EquipWeaponModalWidget_SetAmmoToCraftCount::InCount' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.SetAmmoToEquipCount
// 0x0004 (0x0004 - 0x0000)
struct EquipWeaponModalWidget_SetAmmoToEquipCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_SetAmmoToEquipCount) == 0x000004, "Wrong alignment on EquipWeaponModalWidget_SetAmmoToEquipCount");
static_assert(sizeof(EquipWeaponModalWidget_SetAmmoToEquipCount) == 0x000004, "Wrong size on EquipWeaponModalWidget_SetAmmoToEquipCount");
static_assert(offsetof(EquipWeaponModalWidget_SetAmmoToEquipCount, InCount) == 0x000000, "Member 'EquipWeaponModalWidget_SetAmmoToEquipCount::InCount' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.GetAmmoClass
// 0x0008 (0x0008 - 0x0000)
struct EquipWeaponModalWidget_GetAmmoClass final
{
public:
	TSubclassOf<class AAmmoItem>                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_GetAmmoClass) == 0x000008, "Wrong alignment on EquipWeaponModalWidget_GetAmmoClass");
static_assert(sizeof(EquipWeaponModalWidget_GetAmmoClass) == 0x000008, "Wrong size on EquipWeaponModalWidget_GetAmmoClass");
static_assert(offsetof(EquipWeaponModalWidget_GetAmmoClass, ReturnValue) == 0x000000, "Member 'EquipWeaponModalWidget_GetAmmoClass::ReturnValue' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.GetAmmoToCraftCount
// 0x0004 (0x0004 - 0x0000)
struct EquipWeaponModalWidget_GetAmmoToCraftCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_GetAmmoToCraftCount) == 0x000004, "Wrong alignment on EquipWeaponModalWidget_GetAmmoToCraftCount");
static_assert(sizeof(EquipWeaponModalWidget_GetAmmoToCraftCount) == 0x000004, "Wrong size on EquipWeaponModalWidget_GetAmmoToCraftCount");
static_assert(offsetof(EquipWeaponModalWidget_GetAmmoToCraftCount, ReturnValue) == 0x000000, "Member 'EquipWeaponModalWidget_GetAmmoToCraftCount::ReturnValue' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.GetAmmoToEquipCount
// 0x0004 (0x0004 - 0x0000)
struct EquipWeaponModalWidget_GetAmmoToEquipCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_GetAmmoToEquipCount) == 0x000004, "Wrong alignment on EquipWeaponModalWidget_GetAmmoToEquipCount");
static_assert(sizeof(EquipWeaponModalWidget_GetAmmoToEquipCount) == 0x000004, "Wrong size on EquipWeaponModalWidget_GetAmmoToEquipCount");
static_assert(offsetof(EquipWeaponModalWidget_GetAmmoToEquipCount, ReturnValue) == 0x000000, "Member 'EquipWeaponModalWidget_GetAmmoToEquipCount::ReturnValue' has a wrong offset!");

// Function Flame.EquipWeaponModalWidget.GetWeaponToEquip
// 0x0008 (0x0008 - 0x0000)
struct EquipWeaponModalWidget_GetWeaponToEquip final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquipWeaponModalWidget_GetWeaponToEquip) == 0x000008, "Wrong alignment on EquipWeaponModalWidget_GetWeaponToEquip");
static_assert(sizeof(EquipWeaponModalWidget_GetWeaponToEquip) == 0x000008, "Wrong size on EquipWeaponModalWidget_GetWeaponToEquip");
static_assert(offsetof(EquipWeaponModalWidget_GetWeaponToEquip, ReturnValue) == 0x000000, "Member 'EquipWeaponModalWidget_GetWeaponToEquip::ReturnValue' has a wrong offset!");

// Function Flame.ExplosionComponent.CalculateExposure
// 0x0028 (0x0028 - 0x0000)
struct ExplosionComponent_CalculateExposure final
{
public:
	class AActor*                                 InstigatingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ActorToBeDestroyed;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExplosionLocation;                                 // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThickness;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExplosionComponent_CalculateExposure) == 0x000008, "Wrong alignment on ExplosionComponent_CalculateExposure");
static_assert(sizeof(ExplosionComponent_CalculateExposure) == 0x000028, "Wrong size on ExplosionComponent_CalculateExposure");
static_assert(offsetof(ExplosionComponent_CalculateExposure, InstigatingActor) == 0x000000, "Member 'ExplosionComponent_CalculateExposure::InstigatingActor' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_CalculateExposure, ActorToBeDestroyed) == 0x000008, "Member 'ExplosionComponent_CalculateExposure::ActorToBeDestroyed' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_CalculateExposure, ExplosionLocation) == 0x000010, "Member 'ExplosionComponent_CalculateExposure::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_CalculateExposure, MaxThickness) == 0x00001C, "Member 'ExplosionComponent_CalculateExposure::MaxThickness' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_CalculateExposure, ReturnValue) == 0x000020, "Member 'ExplosionComponent_CalculateExposure::ReturnValue' has a wrong offset!");

// Function Flame.ExplosionComponent.Explode
// 0x0020 (0x0020 - 0x0000)
struct ExplosionComponent_Explode final
{
public:
	float                                         MaxExplosionRadius;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FExplosionEffect>               ExplosionEffect;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExplosionComponent_Explode) == 0x000008, "Wrong alignment on ExplosionComponent_Explode");
static_assert(sizeof(ExplosionComponent_Explode) == 0x000020, "Wrong size on ExplosionComponent_Explode");
static_assert(offsetof(ExplosionComponent_Explode, MaxExplosionRadius) == 0x000000, "Member 'ExplosionComponent_Explode::MaxExplosionRadius' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_Explode, ExplosionEffect) == 0x000008, "Member 'ExplosionComponent_Explode::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_Explode, DamageType) == 0x000018, "Member 'ExplosionComponent_Explode::DamageType' has a wrong offset!");

// Function Flame.ExplosionComponent.MulticastNotifyExplosion
// 0x0010 (0x0010 - 0x0000)
struct ExplosionComponent_MulticastNotifyExplosion final
{
public:
	TArray<struct FExplosionEffect>               ExplosionEffects;                                  // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_MulticastNotifyExplosion) == 0x000008, "Wrong alignment on ExplosionComponent_MulticastNotifyExplosion");
static_assert(sizeof(ExplosionComponent_MulticastNotifyExplosion) == 0x000010, "Wrong size on ExplosionComponent_MulticastNotifyExplosion");
static_assert(offsetof(ExplosionComponent_MulticastNotifyExplosion, ExplosionEffects) == 0x000000, "Member 'ExplosionComponent_MulticastNotifyExplosion::ExplosionEffects' has a wrong offset!");

// Function Flame.ExplosionComponent.OnExplosionComponentExplode
// 0x0010 (0x0010 - 0x0000)
struct ExplosionComponent_OnExplosionComponentExplode final
{
public:
	TArray<struct FExplosionEffect>               ExplosionEffects;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_OnExplosionComponentExplode) == 0x000008, "Wrong alignment on ExplosionComponent_OnExplosionComponentExplode");
static_assert(sizeof(ExplosionComponent_OnExplosionComponentExplode) == 0x000010, "Wrong size on ExplosionComponent_OnExplosionComponentExplode");
static_assert(offsetof(ExplosionComponent_OnExplosionComponentExplode, ExplosionEffects) == 0x000000, "Member 'ExplosionComponent_OnExplosionComponentExplode::ExplosionEffects' has a wrong offset!");

// Function Flame.ExplosionComponent.ProccessExplosion
// 0x0018 (0x0018 - 0x0000)
struct ExplosionComponent_ProccessExplosion final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionRadius;                                   // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_ProccessExplosion) == 0x000008, "Wrong alignment on ExplosionComponent_ProccessExplosion");
static_assert(sizeof(ExplosionComponent_ProccessExplosion) == 0x000018, "Wrong size on ExplosionComponent_ProccessExplosion");
static_assert(offsetof(ExplosionComponent_ProccessExplosion, Location) == 0x000000, "Member 'ExplosionComponent_ProccessExplosion::Location' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ProccessExplosion, ExplosionRadius) == 0x00000C, "Member 'ExplosionComponent_ProccessExplosion::ExplosionRadius' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ProccessExplosion, InstigatorController) == 0x000010, "Member 'ExplosionComponent_ProccessExplosion::InstigatorController' has a wrong offset!");

// Function Flame.ExplosionComponent.ProcessExplosionInteractions
// 0x0028 (0x0028 - 0x0000)
struct ExplosionComponent_ProcessExplosionInteractions final
{
public:
	class AActor*                                 InstigatingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExplosionLocation;                                 // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxExplosionRadius;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_ProcessExplosionInteractions) == 0x000008, "Wrong alignment on ExplosionComponent_ProcessExplosionInteractions");
static_assert(sizeof(ExplosionComponent_ProcessExplosionInteractions) == 0x000028, "Wrong size on ExplosionComponent_ProcessExplosionInteractions");
static_assert(offsetof(ExplosionComponent_ProcessExplosionInteractions, InstigatingActor) == 0x000000, "Member 'ExplosionComponent_ProcessExplosionInteractions::InstigatingActor' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ProcessExplosionInteractions, ExplosionLocation) == 0x000008, "Member 'ExplosionComponent_ProcessExplosionInteractions::ExplosionLocation' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ProcessExplosionInteractions, MaxExplosionRadius) == 0x000014, "Member 'ExplosionComponent_ProcessExplosionInteractions::MaxExplosionRadius' has a wrong offset!");
static_assert(offsetof(ExplosionComponent_ProcessExplosionInteractions, ReturnValue) == 0x000018, "Member 'ExplosionComponent_ProcessExplosionInteractions::ReturnValue' has a wrong offset!");

// Function Flame.ExplosionComponent.GetExplosionLocation
// 0x000C (0x000C - 0x0000)
struct ExplosionComponent_GetExplosionLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExplosionComponent_GetExplosionLocation) == 0x000004, "Wrong alignment on ExplosionComponent_GetExplosionLocation");
static_assert(sizeof(ExplosionComponent_GetExplosionLocation) == 0x00000C, "Wrong size on ExplosionComponent_GetExplosionLocation");
static_assert(offsetof(ExplosionComponent_GetExplosionLocation, ReturnValue) == 0x000000, "Member 'ExplosionComponent_GetExplosionLocation::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.GreaterEqualStringString
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_GreaterEqualStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_GreaterEqualStringString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_GreaterEqualStringString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_GreaterEqualStringString) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_GreaterEqualStringString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterEqualStringString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_GreaterEqualStringString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterEqualStringString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_GreaterEqualStringString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterEqualStringString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_GreaterEqualStringString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.GreaterStringString
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_GreaterStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_GreaterStringString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_GreaterStringString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_GreaterStringString) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_GreaterStringString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterStringString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_GreaterStringString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterStringString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_GreaterStringString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_GreaterStringString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_GreaterStringString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.LessEqualStringString
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_LessEqualStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_LessEqualStringString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_LessEqualStringString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_LessEqualStringString) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_LessEqualStringString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessEqualStringString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_LessEqualStringString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessEqualStringString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_LessEqualStringString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessEqualStringString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_LessEqualStringString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.LessStringString
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_LessStringString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_LessStringString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_LessStringString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_LessStringString) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_LessStringString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessStringString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_LessStringString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessStringString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_LessStringString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_LessStringString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_LessStringString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.MaxString
// 0x0030 (0x0030 - 0x0000)
struct ExtendedStandardLibraryFunctions_MaxString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_MaxString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_MaxString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_MaxString) == 0x000030, "Wrong size on ExtendedStandardLibraryFunctions_MaxString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MaxString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_MaxString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MaxString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_MaxString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MaxString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_MaxString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.MinString
// 0x0030 (0x0030 - 0x0000)
struct ExtendedStandardLibraryFunctions_MinString final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_MinString) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_MinString");
static_assert(sizeof(ExtendedStandardLibraryFunctions_MinString) == 0x000030, "Wrong size on ExtendedStandardLibraryFunctions_MinString");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MinString, A) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_MinString::A' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MinString, B) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_MinString::B' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_MinString, ReturnValue) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_MinString::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortByteArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortByteArray final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortByteArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortByteArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortByteArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortByteArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortByteArray, ByteArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortByteArray::ByteArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortByteArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortByteArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortByteArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortByteArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortByteArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortByteArrayDirectly final
{
public:
	TArray<uint8>                                 ByteArray;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortByteArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortByteArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortByteArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortByteArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortByteArrayDirectly, ByteArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortByteArrayDirectly::ByteArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortByteArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortByteArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortClassArray
// 0x0038 (0x0038 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortClassArray final
{
public:
	TArray<TSubclassOf<class UObject>>            ClassArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(TSubclassOf<class UObject> ClassA, TSubclassOf<class UObject> ClassB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UObject>>            ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortClassArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortClassArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortClassArray) == 0x000038, "Wrong size on ExtendedStandardLibraryFunctions_SortClassArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArray, ClassArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortClassArray::ClassArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArray, Comparator) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortClassArray::Comparator' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArray, Reversed) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_SortClassArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArray, ReturnValue) == 0x000028, "Member 'ExtendedStandardLibraryFunctions_SortClassArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortClassArrayDirectly
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortClassArrayDirectly final
{
public:
	TArray<TSubclassOf<class UObject>>            ClassArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(TSubclassOf<class UObject> ClassA, TSubclassOf<class UObject> ClassB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortClassArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortClassArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortClassArrayDirectly) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortClassArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArrayDirectly, ClassArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortClassArrayDirectly::ClassArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArrayDirectly, Comparator) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortClassArrayDirectly::Comparator' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortClassArrayDirectly, Reversed) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_SortClassArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortDateTimeArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortDateTimeArray final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDateTime>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortDateTimeArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortDateTimeArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortDateTimeArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortDateTimeArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortDateTimeArray, DateTimeArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortDateTimeArray::DateTimeArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortDateTimeArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortDateTimeArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortDateTimeArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortDateTimeArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortDateTimeArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly final
{
public:
	TArray<struct FDateTime>                      DateTimeArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly, DateTimeArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly::DateTimeArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortDateTimeArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortFloatArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortFloatArray final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortFloatArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortFloatArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortFloatArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortFloatArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortFloatArray, FloatArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortFloatArray::FloatArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortFloatArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortFloatArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortFloatArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortFloatArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortFloatArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortFloatArrayDirectly final
{
public:
	TArray<float>                                 FloatArray;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortFloatArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortFloatArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortFloatArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortFloatArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortFloatArrayDirectly, FloatArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortFloatArrayDirectly::FloatArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortFloatArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortFloatArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortIntegerArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortIntegerArray final
{
public:
	TArray<int32>                                 IntegerArray;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortIntegerArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortIntegerArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortIntegerArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortIntegerArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortIntegerArray, IntegerArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortIntegerArray::IntegerArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortIntegerArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortIntegerArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortIntegerArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortIntegerArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortIntegerArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly final
{
public:
	TArray<int32>                                 IntegerArray;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly, IntegerArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly::IntegerArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortIntegerArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortObjectArray
// 0x0038 (0x0038 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortObjectArray final
{
public:
	TArray<class UObject*>                        ObjectArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortObjectArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortObjectArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortObjectArray) == 0x000038, "Wrong size on ExtendedStandardLibraryFunctions_SortObjectArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArray, ObjectArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortObjectArray::ObjectArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArray, Comparator) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortObjectArray::Comparator' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArray, Reversed) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_SortObjectArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArray, ReturnValue) == 0x000028, "Member 'ExtendedStandardLibraryFunctions_SortObjectArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortObjectArrayDirectly
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortObjectArrayDirectly final
{
public:
	TArray<class UObject*>                        ObjectArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* ObjectA, class UObject* ObjectB, bool* Result)> Comparator;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortObjectArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortObjectArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortObjectArrayDirectly) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortObjectArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArrayDirectly, ObjectArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortObjectArrayDirectly::ObjectArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArrayDirectly, Comparator) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortObjectArrayDirectly::Comparator' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortObjectArrayDirectly, Reversed) == 0x000020, "Member 'ExtendedStandardLibraryFunctions_SortObjectArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortStringArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortStringArray final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortStringArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortStringArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortStringArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortStringArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortStringArray, StringArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortStringArray::StringArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortStringArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortStringArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortStringArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortStringArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortStringArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortStringArrayDirectly final
{
public:
	TArray<class FString>                         StringArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortStringArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortStringArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortStringArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortStringArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortStringArrayDirectly, StringArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortStringArrayDirectly::StringArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortStringArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortStringArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortTimespanArray
// 0x0028 (0x0028 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortTimespanArray final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimespan>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortTimespanArray) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortTimespanArray");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortTimespanArray) == 0x000028, "Wrong size on ExtendedStandardLibraryFunctions_SortTimespanArray");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortTimespanArray, TimespanArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortTimespanArray::TimespanArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortTimespanArray, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortTimespanArray::Reversed' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortTimespanArray, ReturnValue) == 0x000018, "Member 'ExtendedStandardLibraryFunctions_SortTimespanArray::ReturnValue' has a wrong offset!");

// Function Flame.ExtendedStandardLibraryFunctions.SortTimespanArrayDirectly
// 0x0018 (0x0018 - 0x0000)
struct ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly final
{
public:
	TArray<struct FTimespan>                      TimespanArray;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Reversed;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly) == 0x000008, "Wrong alignment on ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly");
static_assert(sizeof(ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly) == 0x000018, "Wrong size on ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly, TimespanArray) == 0x000000, "Member 'ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly::TimespanArray' has a wrong offset!");
static_assert(offsetof(ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly, Reversed) == 0x000010, "Member 'ExtendedStandardLibraryFunctions_SortTimespanArrayDirectly::Reversed' has a wrong offset!");

// Function Flame.WaterComponent.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_OnActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_OnActorBeginOverlap) == 0x000008, "Wrong alignment on WaterComponent_OnActorBeginOverlap");
static_assert(sizeof(WaterComponent_OnActorBeginOverlap) == 0x000010, "Wrong size on WaterComponent_OnActorBeginOverlap");
static_assert(offsetof(WaterComponent_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'WaterComponent_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(WaterComponent_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'WaterComponent_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function Flame.WaterComponent.OnActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_OnActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_OnActorEndOverlap) == 0x000008, "Wrong alignment on WaterComponent_OnActorEndOverlap");
static_assert(sizeof(WaterComponent_OnActorEndOverlap) == 0x000010, "Wrong size on WaterComponent_OnActorEndOverlap");
static_assert(offsetof(WaterComponent_OnActorEndOverlap, OverlappedActor) == 0x000000, "Member 'WaterComponent_OnActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(WaterComponent_OnActorEndOverlap, OtherActor) == 0x000008, "Member 'WaterComponent_OnActorEndOverlap::OtherActor' has a wrong offset!");

// Function Flame.WaterComponent.SetStartEndLocations
// 0x0018 (0x0018 - 0x0000)
struct WaterComponent_SetStartEndLocations final
{
public:
	struct FVector                                StartLocation;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndLocation;                                       // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_SetStartEndLocations) == 0x000004, "Wrong alignment on WaterComponent_SetStartEndLocations");
static_assert(sizeof(WaterComponent_SetStartEndLocations) == 0x000018, "Wrong size on WaterComponent_SetStartEndLocations");
static_assert(offsetof(WaterComponent_SetStartEndLocations, StartLocation) == 0x000000, "Member 'WaterComponent_SetStartEndLocations::StartLocation' has a wrong offset!");
static_assert(offsetof(WaterComponent_SetStartEndLocations, EndLocation) == 0x00000C, "Member 'WaterComponent_SetStartEndLocations::EndLocation' has a wrong offset!");

// Function Flame.WaterComponent.SetSurfaceHeight
// 0x0004 (0x0004 - 0x0000)
struct WaterComponent_SetSurfaceHeight final
{
public:
	float                                         SurfaceHeight;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_SetSurfaceHeight) == 0x000004, "Wrong alignment on WaterComponent_SetSurfaceHeight");
static_assert(sizeof(WaterComponent_SetSurfaceHeight) == 0x000004, "Wrong size on WaterComponent_SetSurfaceHeight");
static_assert(offsetof(WaterComponent_SetSurfaceHeight, SurfaceHeight) == 0x000000, "Member 'WaterComponent_SetSurfaceHeight::SurfaceHeight' has a wrong offset!");

// Function Flame.WaterComponent.SetWaterType
// 0x0001 (0x0001 - 0x0000)
struct WaterComponent_SetWaterType final
{
public:
	EWaterType                                    Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_SetWaterType) == 0x000001, "Wrong alignment on WaterComponent_SetWaterType");
static_assert(sizeof(WaterComponent_SetWaterType) == 0x000001, "Wrong size on WaterComponent_SetWaterType");
static_assert(offsetof(WaterComponent_SetWaterType, Type) == 0x000000, "Member 'WaterComponent_SetWaterType::Type' has a wrong offset!");

// Function Flame.WaterComponent.GetDepth
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_GetDepth final
{
public:
	struct FVector                                InPoint;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_GetDepth) == 0x000004, "Wrong alignment on WaterComponent_GetDepth");
static_assert(sizeof(WaterComponent_GetDepth) == 0x000010, "Wrong size on WaterComponent_GetDepth");
static_assert(offsetof(WaterComponent_GetDepth, InPoint) == 0x000000, "Member 'WaterComponent_GetDepth::InPoint' has a wrong offset!");
static_assert(offsetof(WaterComponent_GetDepth, ReturnValue) == 0x00000C, "Member 'WaterComponent_GetDepth::ReturnValue' has a wrong offset!");

// Function Flame.WaterComponent.GetMaxDepthAtPoint
// 0x0010 (0x0010 - 0x0000)
struct WaterComponent_GetMaxDepthAtPoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_GetMaxDepthAtPoint) == 0x000004, "Wrong alignment on WaterComponent_GetMaxDepthAtPoint");
static_assert(sizeof(WaterComponent_GetMaxDepthAtPoint) == 0x000010, "Wrong size on WaterComponent_GetMaxDepthAtPoint");
static_assert(offsetof(WaterComponent_GetMaxDepthAtPoint, Point) == 0x000000, "Member 'WaterComponent_GetMaxDepthAtPoint::Point' has a wrong offset!");
static_assert(offsetof(WaterComponent_GetMaxDepthAtPoint, ReturnValue) == 0x00000C, "Member 'WaterComponent_GetMaxDepthAtPoint::ReturnValue' has a wrong offset!");

// Function Flame.WaterComponent.GetSurfacePoint
// 0x0018 (0x0018 - 0x0000)
struct WaterComponent_GetSurfacePoint final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterComponent_GetSurfacePoint) == 0x000004, "Wrong alignment on WaterComponent_GetSurfacePoint");
static_assert(sizeof(WaterComponent_GetSurfacePoint) == 0x000018, "Wrong size on WaterComponent_GetSurfacePoint");
static_assert(offsetof(WaterComponent_GetSurfacePoint, Point) == 0x000000, "Member 'WaterComponent_GetSurfacePoint::Point' has a wrong offset!");
static_assert(offsetof(WaterComponent_GetSurfacePoint, ReturnValue) == 0x00000C, "Member 'WaterComponent_GetSurfacePoint::ReturnValue' has a wrong offset!");

// Function Flame.FlameAchievementsSystem.CacheAchievements
// 0x0010 (0x0010 - 0x0000)
struct FlameAchievementsSystem_CacheAchievements final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAchievementsSystem_CacheAchievements) == 0x000008, "Wrong alignment on FlameAchievementsSystem_CacheAchievements");
static_assert(sizeof(FlameAchievementsSystem_CacheAchievements) == 0x000010, "Wrong size on FlameAchievementsSystem_CacheAchievements");
static_assert(offsetof(FlameAchievementsSystem_CacheAchievements, PlayerController) == 0x000000, "Member 'FlameAchievementsSystem_CacheAchievements::PlayerController' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_CacheAchievements, ReturnValue) == 0x000008, "Member 'FlameAchievementsSystem_CacheAchievements::ReturnValue' has a wrong offset!");

// Function Flame.FlameAchievementsSystem.GetCachedAchievementProgress
// 0x0018 (0x0018 - 0x0000)
struct FlameAchievementsSystem_GetCachedAchievementProgress final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AchievementName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAchievementFound;                                 // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Progress;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAchievementsSystem_GetCachedAchievementProgress) == 0x000008, "Wrong alignment on FlameAchievementsSystem_GetCachedAchievementProgress");
static_assert(sizeof(FlameAchievementsSystem_GetCachedAchievementProgress) == 0x000018, "Wrong size on FlameAchievementsSystem_GetCachedAchievementProgress");
static_assert(offsetof(FlameAchievementsSystem_GetCachedAchievementProgress, PlayerController) == 0x000000, "Member 'FlameAchievementsSystem_GetCachedAchievementProgress::PlayerController' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_GetCachedAchievementProgress, AchievementName) == 0x000008, "Member 'FlameAchievementsSystem_GetCachedAchievementProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_GetCachedAchievementProgress, bAchievementFound) == 0x000010, "Member 'FlameAchievementsSystem_GetCachedAchievementProgress::bAchievementFound' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_GetCachedAchievementProgress, Progress) == 0x000014, "Member 'FlameAchievementsSystem_GetCachedAchievementProgress::Progress' has a wrong offset!");

// Function Flame.FlameAchievementsSystem.IsAchievementSystemValid
// 0x0001 (0x0001 - 0x0000)
struct FlameAchievementsSystem_IsAchievementSystemValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAchievementsSystem_IsAchievementSystemValid) == 0x000001, "Wrong alignment on FlameAchievementsSystem_IsAchievementSystemValid");
static_assert(sizeof(FlameAchievementsSystem_IsAchievementSystemValid) == 0x000001, "Wrong size on FlameAchievementsSystem_IsAchievementSystemValid");
static_assert(offsetof(FlameAchievementsSystem_IsAchievementSystemValid, ReturnValue) == 0x000000, "Member 'FlameAchievementsSystem_IsAchievementSystemValid::ReturnValue' has a wrong offset!");

// Function Flame.FlameAchievementsSystem.ResetAchievements
// 0x0001 (0x0001 - 0x0000)
struct FlameAchievementsSystem_ResetAchievements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAchievementsSystem_ResetAchievements) == 0x000001, "Wrong alignment on FlameAchievementsSystem_ResetAchievements");
static_assert(sizeof(FlameAchievementsSystem_ResetAchievements) == 0x000001, "Wrong size on FlameAchievementsSystem_ResetAchievements");
static_assert(offsetof(FlameAchievementsSystem_ResetAchievements, ReturnValue) == 0x000000, "Member 'FlameAchievementsSystem_ResetAchievements::ReturnValue' has a wrong offset!");

// Function Flame.FlameAchievementsSystem.WriteAchievementProgress
// 0x0020 (0x0020 - 0x0000)
struct FlameAchievementsSystem_WriteAchievementProgress final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AchievementName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserTag;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAchievementsSystem_WriteAchievementProgress) == 0x000008, "Wrong alignment on FlameAchievementsSystem_WriteAchievementProgress");
static_assert(sizeof(FlameAchievementsSystem_WriteAchievementProgress) == 0x000020, "Wrong size on FlameAchievementsSystem_WriteAchievementProgress");
static_assert(offsetof(FlameAchievementsSystem_WriteAchievementProgress, PlayerController) == 0x000000, "Member 'FlameAchievementsSystem_WriteAchievementProgress::PlayerController' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_WriteAchievementProgress, AchievementName) == 0x000008, "Member 'FlameAchievementsSystem_WriteAchievementProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_WriteAchievementProgress, Progress) == 0x000010, "Member 'FlameAchievementsSystem_WriteAchievementProgress::Progress' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_WriteAchievementProgress, UserTag) == 0x000014, "Member 'FlameAchievementsSystem_WriteAchievementProgress::UserTag' has a wrong offset!");
static_assert(offsetof(FlameAchievementsSystem_WriteAchievementProgress, ReturnValue) == 0x000018, "Member 'FlameAchievementsSystem_WriteAchievementProgress::ReturnValue' has a wrong offset!");

// Function Flame.FlameAIController.GetPerceptionActive
// 0x0001 (0x0001 - 0x0000)
struct FlameAIController_GetPerceptionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAIController_GetPerceptionActive) == 0x000001, "Wrong alignment on FlameAIController_GetPerceptionActive");
static_assert(sizeof(FlameAIController_GetPerceptionActive) == 0x000001, "Wrong size on FlameAIController_GetPerceptionActive");
static_assert(offsetof(FlameAIController_GetPerceptionActive, ReturnValue) == 0x000000, "Member 'FlameAIController_GetPerceptionActive::ReturnValue' has a wrong offset!");

// Function Flame.FlameAIController.IsEnemy
// 0x0010 (0x0010 - 0x0000)
struct FlameAIController_IsEnemy final
{
public:
	const class AActor*                           Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAIController_IsEnemy) == 0x000008, "Wrong alignment on FlameAIController_IsEnemy");
static_assert(sizeof(FlameAIController_IsEnemy) == 0x000010, "Wrong size on FlameAIController_IsEnemy");
static_assert(offsetof(FlameAIController_IsEnemy, Other) == 0x000000, "Member 'FlameAIController_IsEnemy::Other' has a wrong offset!");
static_assert(offsetof(FlameAIController_IsEnemy, ReturnValue) == 0x000008, "Member 'FlameAIController_IsEnemy::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.AnimDone
// 0x000C (0x000C - 0x0000)
struct FlameAnimInstance_AnimDone final
{
public:
	int32                                         MachineIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAnimInstance_AnimDone) == 0x000004, "Wrong alignment on FlameAnimInstance_AnimDone");
static_assert(sizeof(FlameAnimInstance_AnimDone) == 0x00000C, "Wrong size on FlameAnimInstance_AnimDone");
static_assert(offsetof(FlameAnimInstance_AnimDone, MachineIndex) == 0x000000, "Member 'FlameAnimInstance_AnimDone::MachineIndex' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_AnimDone, StateIndex) == 0x000004, "Member 'FlameAnimInstance_AnimDone::StateIndex' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_AnimDone, ReturnValue) == 0x000008, "Member 'FlameAnimInstance_AnimDone::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.AnimRemaining
// 0x0010 (0x0010 - 0x0000)
struct FlameAnimInstance_AnimRemaining final
{
public:
	int32                                         MachineIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StateIndex;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Remaining;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameAnimInstance_AnimRemaining) == 0x000004, "Wrong alignment on FlameAnimInstance_AnimRemaining");
static_assert(sizeof(FlameAnimInstance_AnimRemaining) == 0x000010, "Wrong size on FlameAnimInstance_AnimRemaining");
static_assert(offsetof(FlameAnimInstance_AnimRemaining, MachineIndex) == 0x000000, "Member 'FlameAnimInstance_AnimRemaining::MachineIndex' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_AnimRemaining, StateIndex) == 0x000004, "Member 'FlameAnimInstance_AnimRemaining::StateIndex' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_AnimRemaining, Remaining) == 0x000008, "Member 'FlameAnimInstance_AnimRemaining::Remaining' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_AnimRemaining, ReturnValue) == 0x00000C, "Member 'FlameAnimInstance_AnimRemaining::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.IsLowerState
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_IsLowerState final
{
public:
	ELowerBodyState                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_IsLowerState) == 0x000001, "Wrong alignment on FlameAnimInstance_IsLowerState");
static_assert(sizeof(FlameAnimInstance_IsLowerState) == 0x000002, "Wrong size on FlameAnimInstance_IsLowerState");
static_assert(offsetof(FlameAnimInstance_IsLowerState, Value) == 0x000000, "Member 'FlameAnimInstance_IsLowerState::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_IsLowerState, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_IsLowerState::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.IsStance
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_IsStance final
{
public:
	EStance                                       Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_IsStance) == 0x000001, "Wrong alignment on FlameAnimInstance_IsStance");
static_assert(sizeof(FlameAnimInstance_IsStance) == 0x000002, "Wrong size on FlameAnimInstance_IsStance");
static_assert(offsetof(FlameAnimInstance_IsStance, Value) == 0x000000, "Member 'FlameAnimInstance_IsStance::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_IsStance, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_IsStance::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.IsUpperState
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_IsUpperState final
{
public:
	EUpperBodyState                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_IsUpperState) == 0x000001, "Wrong alignment on FlameAnimInstance_IsUpperState");
static_assert(sizeof(FlameAnimInstance_IsUpperState) == 0x000002, "Wrong size on FlameAnimInstance_IsUpperState");
static_assert(offsetof(FlameAnimInstance_IsUpperState, Value) == 0x000000, "Member 'FlameAnimInstance_IsUpperState::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_IsUpperState, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_IsUpperState::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.NotLowerState
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_NotLowerState final
{
public:
	ELowerBodyState                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_NotLowerState) == 0x000001, "Wrong alignment on FlameAnimInstance_NotLowerState");
static_assert(sizeof(FlameAnimInstance_NotLowerState) == 0x000002, "Wrong size on FlameAnimInstance_NotLowerState");
static_assert(offsetof(FlameAnimInstance_NotLowerState, Value) == 0x000000, "Member 'FlameAnimInstance_NotLowerState::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_NotLowerState, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_NotLowerState::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.NotStance
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_NotStance final
{
public:
	EStance                                       Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_NotStance) == 0x000001, "Wrong alignment on FlameAnimInstance_NotStance");
static_assert(sizeof(FlameAnimInstance_NotStance) == 0x000002, "Wrong size on FlameAnimInstance_NotStance");
static_assert(offsetof(FlameAnimInstance_NotStance, Value) == 0x000000, "Member 'FlameAnimInstance_NotStance::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_NotStance, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_NotStance::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.NotUpperState
// 0x0002 (0x0002 - 0x0000)
struct FlameAnimInstance_NotUpperState final
{
public:
	EUpperBodyState                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_NotUpperState) == 0x000001, "Wrong alignment on FlameAnimInstance_NotUpperState");
static_assert(sizeof(FlameAnimInstance_NotUpperState) == 0x000002, "Wrong size on FlameAnimInstance_NotUpperState");
static_assert(offsetof(FlameAnimInstance_NotUpperState, Value) == 0x000000, "Member 'FlameAnimInstance_NotUpperState::Value' has a wrong offset!");
static_assert(offsetof(FlameAnimInstance_NotUpperState, ReturnValue) == 0x000001, "Member 'FlameAnimInstance_NotUpperState::ReturnValue' has a wrong offset!");

// Function Flame.FlameAnimInstance.PrintDiagnostic
// 0x0001 (0x0001 - 0x0000)
struct FlameAnimInstance_PrintDiagnostic final
{
public:
	bool                                          AllowPreview;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameAnimInstance_PrintDiagnostic) == 0x000001, "Wrong alignment on FlameAnimInstance_PrintDiagnostic");
static_assert(sizeof(FlameAnimInstance_PrintDiagnostic) == 0x000001, "Wrong size on FlameAnimInstance_PrintDiagnostic");
static_assert(offsetof(FlameAnimInstance_PrintDiagnostic, AllowPreview) == 0x000000, "Member 'FlameAnimInstance_PrintDiagnostic::AllowPreview' has a wrong offset!");

// Function Flame.ShelterMap.IsMatchmakingAllowed
// 0x0001 (0x0001 - 0x0000)
struct ShelterMap_IsMatchmakingAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMap_IsMatchmakingAllowed) == 0x000001, "Wrong alignment on ShelterMap_IsMatchmakingAllowed");
static_assert(sizeof(ShelterMap_IsMatchmakingAllowed) == 0x000001, "Wrong size on ShelterMap_IsMatchmakingAllowed");
static_assert(offsetof(ShelterMap_IsMatchmakingAllowed, ReturnValue) == 0x000000, "Member 'ShelterMap_IsMatchmakingAllowed::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetAchievementsSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetAchievementsSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFlameAchievementsSystem*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetAchievementsSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetAchievementsSystem");
static_assert(sizeof(FlameGameInstance_GetAchievementsSystem) == 0x000010, "Wrong size on FlameGameInstance_GetAchievementsSystem");
static_assert(offsetof(FlameGameInstance_GetAchievementsSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetAchievementsSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetAchievementsSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetAchievementsSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetAssetManagerSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetAssetManagerSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFlameAssetManager*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetAssetManagerSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetAssetManagerSystem");
static_assert(sizeof(FlameGameInstance_GetAssetManagerSystem) == 0x000010, "Wrong size on FlameGameInstance_GetAssetManagerSystem");
static_assert(offsetof(FlameGameInstance_GetAssetManagerSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetAssetManagerSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetAssetManagerSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetAssetManagerSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetBattlePassSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetBattlePassSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattlePassSystem*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetBattlePassSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetBattlePassSystem");
static_assert(sizeof(FlameGameInstance_GetBattlePassSystem) == 0x000010, "Wrong size on FlameGameInstance_GetBattlePassSystem");
static_assert(offsetof(FlameGameInstance_GetBattlePassSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetBattlePassSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetBattlePassSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetBattlePassSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetChallengeManager
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetChallengeManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChallengeManager*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetChallengeManager) == 0x000008, "Wrong alignment on FlameGameInstance_GetChallengeManager");
static_assert(sizeof(FlameGameInstance_GetChallengeManager) == 0x000010, "Wrong size on FlameGameInstance_GetChallengeManager");
static_assert(offsetof(FlameGameInstance_GetChallengeManager, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetChallengeManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetChallengeManager, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetChallengeManager::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCloudSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetCloudSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCloudSystem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCloudSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetCloudSystem");
static_assert(sizeof(FlameGameInstance_GetCloudSystem) == 0x000010, "Wrong size on FlameGameInstance_GetCloudSystem");
static_assert(offsetof(FlameGameInstance_GetCloudSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetCloudSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetCloudSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetCloudSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetConsoleEvents
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetConsoleEvents final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConsoleEvents*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetConsoleEvents) == 0x000008, "Wrong alignment on FlameGameInstance_GetConsoleEvents");
static_assert(sizeof(FlameGameInstance_GetConsoleEvents) == 0x000010, "Wrong size on FlameGameInstance_GetConsoleEvents");
static_assert(offsetof(FlameGameInstance_GetConsoleEvents, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetConsoleEvents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetConsoleEvents, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetConsoleEvents::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCurrentNintendoSwitchOperationMode
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_GetCurrentNintendoSwitchOperationMode final
{
public:
	ENintendoSwitchOperationMode                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCurrentNintendoSwitchOperationMode) == 0x000001, "Wrong alignment on FlameGameInstance_GetCurrentNintendoSwitchOperationMode");
static_assert(sizeof(FlameGameInstance_GetCurrentNintendoSwitchOperationMode) == 0x000001, "Wrong size on FlameGameInstance_GetCurrentNintendoSwitchOperationMode");
static_assert(offsetof(FlameGameInstance_GetCurrentNintendoSwitchOperationMode, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetCurrentNintendoSwitchOperationMode::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetEventSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetEventSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEventSystem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetEventSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetEventSystem");
static_assert(sizeof(FlameGameInstance_GetEventSystem) == 0x000010, "Wrong size on FlameGameInstance_GetEventSystem");
static_assert(offsetof(FlameGameInstance_GetEventSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetEventSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetEventSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetEventSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetFlameGameInstance
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetFlameGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFlameGameInstance*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetFlameGameInstance) == 0x000008, "Wrong alignment on FlameGameInstance_GetFlameGameInstance");
static_assert(sizeof(FlameGameInstance_GetFlameGameInstance) == 0x000010, "Wrong size on FlameGameInstance_GetFlameGameInstance");
static_assert(offsetof(FlameGameInstance_GetFlameGameInstance, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetFlameGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetFlameGameInstance, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetFlameGameInstance::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetGameStoreSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetGameStoreSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStoreSystem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetGameStoreSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetGameStoreSystem");
static_assert(sizeof(FlameGameInstance_GetGameStoreSystem) == 0x000010, "Wrong size on FlameGameInstance_GetGameStoreSystem");
static_assert(offsetof(FlameGameInstance_GetGameStoreSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetGameStoreSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetGameStoreSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetGameStoreSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetGroupSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetGroupSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGroupSystem*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetGroupSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetGroupSystem");
static_assert(sizeof(FlameGameInstance_GetGroupSystem) == 0x000010, "Wrong size on FlameGameInstance_GetGroupSystem");
static_assert(offsetof(FlameGameInstance_GetGroupSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetGroupSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetGroupSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetGroupSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetHumanPlayerControllerByControllerId
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_GetHumanPlayerControllerByControllerId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanPlayerController*                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetHumanPlayerControllerByControllerId) == 0x000008, "Wrong alignment on FlameGameInstance_GetHumanPlayerControllerByControllerId");
static_assert(sizeof(FlameGameInstance_GetHumanPlayerControllerByControllerId) == 0x000018, "Wrong size on FlameGameInstance_GetHumanPlayerControllerByControllerId");
static_assert(offsetof(FlameGameInstance_GetHumanPlayerControllerByControllerId, ID) == 0x000000, "Member 'FlameGameInstance_GetHumanPlayerControllerByControllerId::ID' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetHumanPlayerControllerByControllerId, WorldContextObject) == 0x000008, "Member 'FlameGameInstance_GetHumanPlayerControllerByControllerId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetHumanPlayerControllerByControllerId, ReturnValue) == 0x000010, "Member 'FlameGameInstance_GetHumanPlayerControllerByControllerId::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLeaderboardSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetLeaderboardSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULeaderboardSystem*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLeaderboardSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetLeaderboardSystem");
static_assert(sizeof(FlameGameInstance_GetLeaderboardSystem) == 0x000010, "Wrong size on FlameGameInstance_GetLeaderboardSystem");
static_assert(offsetof(FlameGameInstance_GetLeaderboardSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetLeaderboardSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLeaderboardSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetLeaderboardSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetMapsManager
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetMapsManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMapsManager*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetMapsManager) == 0x000008, "Wrong alignment on FlameGameInstance_GetMapsManager");
static_assert(sizeof(FlameGameInstance_GetMapsManager) == 0x000010, "Wrong size on FlameGameInstance_GetMapsManager");
static_assert(offsetof(FlameGameInstance_GetMapsManager, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetMapsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetMapsManager, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetMapsManager::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetPlatformStoreSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetPlatformStoreSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformStoreSystem*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetPlatformStoreSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetPlatformStoreSystem");
static_assert(sizeof(FlameGameInstance_GetPlatformStoreSystem) == 0x000010, "Wrong size on FlameGameInstance_GetPlatformStoreSystem");
static_assert(offsetof(FlameGameInstance_GetPlatformStoreSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetPlatformStoreSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetPlatformStoreSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetPlatformStoreSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetPlatformTools
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetPlatformTools final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformTools*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetPlatformTools) == 0x000008, "Wrong alignment on FlameGameInstance_GetPlatformTools");
static_assert(sizeof(FlameGameInstance_GetPlatformTools) == 0x000010, "Wrong size on FlameGameInstance_GetPlatformTools");
static_assert(offsetof(FlameGameInstance_GetPlatformTools, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetPlatformTools::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetPlatformTools, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetPlatformTools::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetPoolingManagerSystem
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetPoolingManagerSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFlameObjectPoolManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetPoolingManagerSystem) == 0x000008, "Wrong alignment on FlameGameInstance_GetPoolingManagerSystem");
static_assert(sizeof(FlameGameInstance_GetPoolingManagerSystem) == 0x000010, "Wrong size on FlameGameInstance_GetPoolingManagerSystem");
static_assert(offsetof(FlameGameInstance_GetPoolingManagerSystem, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetPoolingManagerSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetPoolingManagerSystem, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetPoolingManagerSystem::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetRichPresence
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetRichPresence final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URichPresence*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetRichPresence) == 0x000008, "Wrong alignment on FlameGameInstance_GetRichPresence");
static_assert(sizeof(FlameGameInstance_GetRichPresence) == 0x000010, "Wrong size on FlameGameInstance_GetRichPresence");
static_assert(offsetof(FlameGameInstance_GetRichPresence, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetRichPresence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetRichPresence, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetRichPresence::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetServerAuthorityConfig
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetServerAuthorityConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UServerAuthorityConfig*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetServerAuthorityConfig) == 0x000008, "Wrong alignment on FlameGameInstance_GetServerAuthorityConfig");
static_assert(sizeof(FlameGameInstance_GetServerAuthorityConfig) == 0x000010, "Wrong size on FlameGameInstance_GetServerAuthorityConfig");
static_assert(offsetof(FlameGameInstance_GetServerAuthorityConfig, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetServerAuthorityConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetServerAuthorityConfig, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetServerAuthorityConfig::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetSteamTools
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetSteamTools final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformToolsSteam*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetSteamTools) == 0x000008, "Wrong alignment on FlameGameInstance_GetSteamTools");
static_assert(sizeof(FlameGameInstance_GetSteamTools) == 0x000010, "Wrong size on FlameGameInstance_GetSteamTools");
static_assert(offsetof(FlameGameInstance_GetSteamTools, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetSteamTools::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetSteamTools, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetSteamTools::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetUserControllerId
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetUserControllerId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_GetUserControllerId) == 0x000008, "Wrong alignment on FlameGameInstance_GetUserControllerId");
static_assert(sizeof(FlameGameInstance_GetUserControllerId) == 0x000010, "Wrong size on FlameGameInstance_GetUserControllerId");
static_assert(offsetof(FlameGameInstance_GetUserControllerId, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_GetUserControllerId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetUserControllerId, ReturnValue) == 0x000008, "Member 'FlameGameInstance_GetUserControllerId::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.InitDataProvider
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_InitDataProvider final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_InitDataProvider) == 0x000008, "Wrong alignment on FlameGameInstance_InitDataProvider");
static_assert(sizeof(FlameGameInstance_InitDataProvider) == 0x000008, "Wrong size on FlameGameInstance_InitDataProvider");
static_assert(offsetof(FlameGameInstance_InitDataProvider, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_InitDataProvider::WorldContextObject' has a wrong offset!");

// Function Flame.FlameGameInstance.IsAutotestRunning
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_IsAutotestRunning final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_IsAutotestRunning) == 0x000008, "Wrong alignment on FlameGameInstance_IsAutotestRunning");
static_assert(sizeof(FlameGameInstance_IsAutotestRunning) == 0x000010, "Wrong size on FlameGameInstance_IsAutotestRunning");
static_assert(offsetof(FlameGameInstance_IsAutotestRunning, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_IsAutotestRunning::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_IsAutotestRunning, ReturnValue) == 0x000008, "Member 'FlameGameInstance_IsAutotestRunning::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.LoginToCloud
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_LoginToCloud final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_LoginToCloud) == 0x000008, "Wrong alignment on FlameGameInstance_LoginToCloud");
static_assert(sizeof(FlameGameInstance_LoginToCloud) == 0x000010, "Wrong size on FlameGameInstance_LoginToCloud");
static_assert(offsetof(FlameGameInstance_LoginToCloud, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_LoginToCloud::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_LoginToCloud, ReturnValue) == 0x000008, "Member 'FlameGameInstance_LoginToCloud::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.LogOutFromCloud
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_LogOutFromCloud final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudManagerLogoutReason                     ELogoutReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_LogOutFromCloud) == 0x000008, "Wrong alignment on FlameGameInstance_LogOutFromCloud");
static_assert(sizeof(FlameGameInstance_LogOutFromCloud) == 0x000010, "Wrong size on FlameGameInstance_LogOutFromCloud");
static_assert(offsetof(FlameGameInstance_LogOutFromCloud, WorldContextObject) == 0x000000, "Member 'FlameGameInstance_LogOutFromCloud::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_LogOutFromCloud, ELogoutReason) == 0x000008, "Member 'FlameGameInstance_LogOutFromCloud::ELogoutReason' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_LogOutFromCloud, ReturnValue) == 0x000009, "Member 'FlameGameInstance_LogOutFromCloud::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.AchievementsSetProgress
// 0x000C (0x000C - 0x0000)
struct FlameGameInstance_AchievementsSetProgress final
{
public:
	class FName                                   AchievementName;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_AchievementsSetProgress) == 0x000004, "Wrong alignment on FlameGameInstance_AchievementsSetProgress");
static_assert(sizeof(FlameGameInstance_AchievementsSetProgress) == 0x00000C, "Wrong size on FlameGameInstance_AchievementsSetProgress");
static_assert(offsetof(FlameGameInstance_AchievementsSetProgress, AchievementName) == 0x000000, "Member 'FlameGameInstance_AchievementsSetProgress::AchievementName' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_AchievementsSetProgress, Progress) == 0x000008, "Member 'FlameGameInstance_AchievementsSetProgress::Progress' has a wrong offset!");

// Function Flame.FlameGameInstance.ApplyShouldRecompileSettings
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_ApplyShouldRecompileSettings final
{
public:
	class UOptionsSaveGame*                       OptionSaveGame;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_ApplyShouldRecompileSettings) == 0x000008, "Wrong alignment on FlameGameInstance_ApplyShouldRecompileSettings");
static_assert(sizeof(FlameGameInstance_ApplyShouldRecompileSettings) == 0x000008, "Wrong size on FlameGameInstance_ApplyShouldRecompileSettings");
static_assert(offsetof(FlameGameInstance_ApplyShouldRecompileSettings, OptionSaveGame) == 0x000000, "Member 'FlameGameInstance_ApplyShouldRecompileSettings::OptionSaveGame' has a wrong offset!");

// Function Flame.FlameGameInstance.ChangeDisplayMonitor
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_ChangeDisplayMonitor final
{
public:
	int32                                         MonitorNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_ChangeDisplayMonitor) == 0x000004, "Wrong alignment on FlameGameInstance_ChangeDisplayMonitor");
static_assert(sizeof(FlameGameInstance_ChangeDisplayMonitor) == 0x000004, "Wrong size on FlameGameInstance_ChangeDisplayMonitor");
static_assert(offsetof(FlameGameInstance_ChangeDisplayMonitor, MonitorNumber) == 0x000000, "Member 'FlameGameInstance_ChangeDisplayMonitor::MonitorNumber' has a wrong offset!");

// Function Flame.FlameGameInstance.CheckFPSEnabled
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_CheckFPSEnabled final
{
public:
	int32                                         ZOrder;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateNew;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_CheckFPSEnabled) == 0x000004, "Wrong alignment on FlameGameInstance_CheckFPSEnabled");
static_assert(sizeof(FlameGameInstance_CheckFPSEnabled) == 0x000008, "Wrong size on FlameGameInstance_CheckFPSEnabled");
static_assert(offsetof(FlameGameInstance_CheckFPSEnabled, ZOrder) == 0x000000, "Member 'FlameGameInstance_CheckFPSEnabled::ZOrder' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_CheckFPSEnabled, CreateNew) == 0x000004, "Member 'FlameGameInstance_CheckFPSEnabled::CreateNew' has a wrong offset!");

// Function Flame.FlameGameInstance.FadeOutLoadingSound
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_FadeOutLoadingSound final
{
public:
	float                                         FadeOutTimeOverride;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_FadeOutLoadingSound) == 0x000004, "Wrong alignment on FlameGameInstance_FadeOutLoadingSound");
static_assert(sizeof(FlameGameInstance_FadeOutLoadingSound) == 0x000004, "Wrong size on FlameGameInstance_FadeOutLoadingSound");
static_assert(offsetof(FlameGameInstance_FadeOutLoadingSound, FadeOutTimeOverride) == 0x000000, "Member 'FlameGameInstance_FadeOutLoadingSound::FadeOutTimeOverride' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCachedUserSettings
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_GetCachedUserSettings final
{
public:
	class UGameUserSettings*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCachedUserSettings) == 0x000008, "Wrong alignment on FlameGameInstance_GetCachedUserSettings");
static_assert(sizeof(FlameGameInstance_GetCachedUserSettings) == 0x000008, "Wrong size on FlameGameInstance_GetCachedUserSettings");
static_assert(offsetof(FlameGameInstance_GetCachedUserSettings, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetCachedUserSettings::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCPUBrandName
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetCPUBrandName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCPUBrandName) == 0x000008, "Wrong alignment on FlameGameInstance_GetCPUBrandName");
static_assert(sizeof(FlameGameInstance_GetCPUBrandName) == 0x000010, "Wrong size on FlameGameInstance_GetCPUBrandName");
static_assert(offsetof(FlameGameInstance_GetCPUBrandName, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetCPUBrandName::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCPUCores
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_GetCPUCores final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCPUCores) == 0x000004, "Wrong alignment on FlameGameInstance_GetCPUCores");
static_assert(sizeof(FlameGameInstance_GetCPUCores) == 0x000004, "Wrong size on FlameGameInstance_GetCPUCores");
static_assert(offsetof(FlameGameInstance_GetCPUCores, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetCPUCores::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetCPUVendorName
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetCPUVendorName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetCPUVendorName) == 0x000008, "Wrong alignment on FlameGameInstance_GetCPUVendorName");
static_assert(sizeof(FlameGameInstance_GetCPUVendorName) == 0x000010, "Wrong size on FlameGameInstance_GetCPUVendorName");
static_assert(offsetof(FlameGameInstance_GetCPUVendorName, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetCPUVendorName::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetDefaultOptionsSaveGame
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_GetDefaultOptionsSaveGame final
{
public:
	class UOptionsSaveGame*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetDefaultOptionsSaveGame) == 0x000008, "Wrong alignment on FlameGameInstance_GetDefaultOptionsSaveGame");
static_assert(sizeof(FlameGameInstance_GetDefaultOptionsSaveGame) == 0x000008, "Wrong size on FlameGameInstance_GetDefaultOptionsSaveGame");
static_assert(offsetof(FlameGameInstance_GetDefaultOptionsSaveGame, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetDefaultOptionsSaveGame::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetGPUBrandName
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetGPUBrandName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetGPUBrandName) == 0x000008, "Wrong alignment on FlameGameInstance_GetGPUBrandName");
static_assert(sizeof(FlameGameInstance_GetGPUBrandName) == 0x000010, "Wrong size on FlameGameInstance_GetGPUBrandName");
static_assert(offsetof(FlameGameInstance_GetGPUBrandName, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetGPUBrandName::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLastInputMode
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_GetLastInputMode final
{
public:
	EInputMode                                    ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLastInputMode) == 0x000001, "Wrong alignment on FlameGameInstance_GetLastInputMode");
static_assert(sizeof(FlameGameInstance_GetLastInputMode) == 0x000001, "Wrong size on FlameGameInstance_GetLastInputMode");
static_assert(offsetof(FlameGameInstance_GetLastInputMode, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetLastInputMode::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLoadingSound
// 0x0020 (0x0020 - 0x0000)
struct FlameGameInstance_GetLoadingSound final
{
public:
	float                                         TimeToTravel;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0004(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInTime;                                        // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTime;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutDelay;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLoadingSound) == 0x000008, "Wrong alignment on FlameGameInstance_GetLoadingSound");
static_assert(sizeof(FlameGameInstance_GetLoadingSound) == 0x000020, "Wrong size on FlameGameInstance_GetLoadingSound");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, TimeToTravel) == 0x000000, "Member 'FlameGameInstance_GetLoadingSound::TimeToTravel' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, LevelName) == 0x000004, "Member 'FlameGameInstance_GetLoadingSound::LevelName' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, FadeInTime) == 0x00000C, "Member 'FlameGameInstance_GetLoadingSound::FadeInTime' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, FadeOutTime) == 0x000010, "Member 'FlameGameInstance_GetLoadingSound::FadeOutTime' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, FadeOutDelay) == 0x000014, "Member 'FlameGameInstance_GetLoadingSound::FadeOutDelay' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GetLoadingSound, ReturnValue) == 0x000018, "Member 'FlameGameInstance_GetLoadingSound::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetNumMonitors
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_GetNumMonitors final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetNumMonitors) == 0x000004, "Wrong alignment on FlameGameInstance_GetNumMonitors");
static_assert(sizeof(FlameGameInstance_GetNumMonitors) == 0x000004, "Wrong size on FlameGameInstance_GetNumMonitors");
static_assert(offsetof(FlameGameInstance_GetNumMonitors, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetNumMonitors::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetOptionsSaveGame
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_GetOptionsSaveGame final
{
public:
	class USaveGame*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetOptionsSaveGame) == 0x000008, "Wrong alignment on FlameGameInstance_GetOptionsSaveGame");
static_assert(sizeof(FlameGameInstance_GetOptionsSaveGame) == 0x000008, "Wrong size on FlameGameInstance_GetOptionsSaveGame");
static_assert(offsetof(FlameGameInstance_GetOptionsSaveGame, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetOptionsSaveGame::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetPerformanceModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_GetPerformanceModeEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetPerformanceModeEnabled) == 0x000001, "Wrong alignment on FlameGameInstance_GetPerformanceModeEnabled");
static_assert(sizeof(FlameGameInstance_GetPerformanceModeEnabled) == 0x000001, "Wrong size on FlameGameInstance_GetPerformanceModeEnabled");
static_assert(offsetof(FlameGameInstance_GetPerformanceModeEnabled, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetPerformanceModeEnabled::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetWindowMode
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_GetWindowMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetWindowMode) == 0x000004, "Wrong alignment on FlameGameInstance_GetWindowMode");
static_assert(sizeof(FlameGameInstance_GetWindowMode) == 0x000004, "Wrong size on FlameGameInstance_GetWindowMode");
static_assert(offsetof(FlameGameInstance_GetWindowMode, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetWindowMode::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GroupSimulate
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_GroupSimulate final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupSize;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_GroupSimulate) == 0x000008, "Wrong alignment on FlameGameInstance_GroupSimulate");
static_assert(sizeof(FlameGameInstance_GroupSimulate) == 0x000018, "Wrong size on FlameGameInstance_GroupSimulate");
static_assert(offsetof(FlameGameInstance_GroupSimulate, GroupId) == 0x000000, "Member 'FlameGameInstance_GroupSimulate::GroupId' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_GroupSimulate, GroupSize) == 0x000010, "Member 'FlameGameInstance_GroupSimulate::GroupSize' has a wrong offset!");

// Function Flame.FlameGameInstance.HasPSONumPrecompilesActive
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_HasPSONumPrecompilesActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_HasPSONumPrecompilesActive) == 0x000001, "Wrong alignment on FlameGameInstance_HasPSONumPrecompilesActive");
static_assert(sizeof(FlameGameInstance_HasPSONumPrecompilesActive) == 0x000001, "Wrong size on FlameGameInstance_HasPSONumPrecompilesActive");
static_assert(offsetof(FlameGameInstance_HasPSONumPrecompilesActive, ReturnValue) == 0x000000, "Member 'FlameGameInstance_HasPSONumPrecompilesActive::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.HasPSONumPrecompilesRemaining
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_HasPSONumPrecompilesRemaining final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_HasPSONumPrecompilesRemaining) == 0x000001, "Wrong alignment on FlameGameInstance_HasPSONumPrecompilesRemaining");
static_assert(sizeof(FlameGameInstance_HasPSONumPrecompilesRemaining) == 0x000001, "Wrong size on FlameGameInstance_HasPSONumPrecompilesRemaining");
static_assert(offsetof(FlameGameInstance_HasPSONumPrecompilesRemaining, ReturnValue) == 0x000000, "Member 'FlameGameInstance_HasPSONumPrecompilesRemaining::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.IsOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_IsOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_IsOnSteamDeck) == 0x000001, "Wrong alignment on FlameGameInstance_IsOnSteamDeck");
static_assert(sizeof(FlameGameInstance_IsOnSteamDeck) == 0x000001, "Wrong size on FlameGameInstance_IsOnSteamDeck");
static_assert(offsetof(FlameGameInstance_IsOnSteamDeck, ReturnValue) == 0x000000, "Member 'FlameGameInstance_IsOnSteamDeck::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.IsPerfModeSupported
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_IsPerfModeSupported final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_IsPerfModeSupported) == 0x000001, "Wrong alignment on FlameGameInstance_IsPerfModeSupported");
static_assert(sizeof(FlameGameInstance_IsPerfModeSupported) == 0x000001, "Wrong size on FlameGameInstance_IsPerfModeSupported");
static_assert(offsetof(FlameGameInstance_IsPerfModeSupported, ReturnValue) == 0x000000, "Member 'FlameGameInstance_IsPerfModeSupported::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.IsRunningSteam
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_IsRunningSteam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_IsRunningSteam) == 0x000001, "Wrong alignment on FlameGameInstance_IsRunningSteam");
static_assert(sizeof(FlameGameInstance_IsRunningSteam) == 0x000001, "Wrong size on FlameGameInstance_IsRunningSteam");
static_assert(offsetof(FlameGameInstance_IsRunningSteam, ReturnValue) == 0x000000, "Member 'FlameGameInstance_IsRunningSteam::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.IsWindowModeBorderless
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_IsWindowModeBorderless final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_IsWindowModeBorderless) == 0x000001, "Wrong alignment on FlameGameInstance_IsWindowModeBorderless");
static_assert(sizeof(FlameGameInstance_IsWindowModeBorderless) == 0x000001, "Wrong size on FlameGameInstance_IsWindowModeBorderless");
static_assert(offsetof(FlameGameInstance_IsWindowModeBorderless, ReturnValue) == 0x000000, "Member 'FlameGameInstance_IsWindowModeBorderless::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.OnCheckUserCrossPlayFinished
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_OnCheckUserCrossPlayFinished final
{
public:
	bool                                          CanUserCrossPlay;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnCheckUserCrossPlayFinished) == 0x000001, "Wrong alignment on FlameGameInstance_OnCheckUserCrossPlayFinished");
static_assert(sizeof(FlameGameInstance_OnCheckUserCrossPlayFinished) == 0x000001, "Wrong size on FlameGameInstance_OnCheckUserCrossPlayFinished");
static_assert(offsetof(FlameGameInstance_OnCheckUserCrossPlayFinished, CanUserCrossPlay) == 0x000000, "Member 'FlameGameInstance_OnCheckUserCrossPlayFinished::CanUserCrossPlay' has a wrong offset!");

// Function Flame.FlameGameInstance.OnCloudSystemStateChanged
// 0x0002 (0x0002 - 0x0000)
struct FlameGameInstance_OnCloudSystemStateChanged final
{
public:
	ECloudManagerState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudManagerState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnCloudSystemStateChanged) == 0x000001, "Wrong alignment on FlameGameInstance_OnCloudSystemStateChanged");
static_assert(sizeof(FlameGameInstance_OnCloudSystemStateChanged) == 0x000002, "Wrong size on FlameGameInstance_OnCloudSystemStateChanged");
static_assert(offsetof(FlameGameInstance_OnCloudSystemStateChanged, OldState) == 0x000000, "Member 'FlameGameInstance_OnCloudSystemStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnCloudSystemStateChanged, NewState) == 0x000001, "Member 'FlameGameInstance_OnCloudSystemStateChanged::NewState' has a wrong offset!");

// Function Flame.FlameGameInstance.OnDataProviderStateChanged
// 0x0002 (0x0002 - 0x0000)
struct FlameGameInstance_OnDataProviderStateChanged final
{
public:
	EDataProviderState                            OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDataProviderState                            NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnDataProviderStateChanged) == 0x000001, "Wrong alignment on FlameGameInstance_OnDataProviderStateChanged");
static_assert(sizeof(FlameGameInstance_OnDataProviderStateChanged) == 0x000002, "Wrong size on FlameGameInstance_OnDataProviderStateChanged");
static_assert(offsetof(FlameGameInstance_OnDataProviderStateChanged, OldState) == 0x000000, "Member 'FlameGameInstance_OnDataProviderStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnDataProviderStateChanged, NewState) == 0x000001, "Member 'FlameGameInstance_OnDataProviderStateChanged::NewState' has a wrong offset!");

// Function Flame.FlameGameInstance.OnNetworkFailure
// 0x0028 (0x0028 - 0x0000)
struct FlameGameInstance_OnNetworkFailure final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNetDriver*                             NetDriver;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENetworkFailure                               FailureType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnNetworkFailure) == 0x000008, "Wrong alignment on FlameGameInstance_OnNetworkFailure");
static_assert(sizeof(FlameGameInstance_OnNetworkFailure) == 0x000028, "Wrong size on FlameGameInstance_OnNetworkFailure");
static_assert(offsetof(FlameGameInstance_OnNetworkFailure, InWorld) == 0x000000, "Member 'FlameGameInstance_OnNetworkFailure::InWorld' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnNetworkFailure, NetDriver) == 0x000008, "Member 'FlameGameInstance_OnNetworkFailure::NetDriver' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnNetworkFailure, FailureType) == 0x000010, "Member 'FlameGameInstance_OnNetworkFailure::FailureType' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnNetworkFailure, ErrorString) == 0x000018, "Member 'FlameGameInstance_OnNetworkFailure::ErrorString' has a wrong offset!");

// Function Flame.FlameGameInstance.OnPlatformStoreOverlayActivated
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_OnPlatformStoreOverlayActivated final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnPlatformStoreOverlayActivated) == 0x000001, "Wrong alignment on FlameGameInstance_OnPlatformStoreOverlayActivated");
static_assert(sizeof(FlameGameInstance_OnPlatformStoreOverlayActivated) == 0x000001, "Wrong size on FlameGameInstance_OnPlatformStoreOverlayActivated");
static_assert(offsetof(FlameGameInstance_OnPlatformStoreOverlayActivated, bIsActive) == 0x000000, "Member 'FlameGameInstance_OnPlatformStoreOverlayActivated::bIsActive' has a wrong offset!");

// Function Flame.FlameGameInstance.OnPostLoadMap
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_OnPostLoadMap final
{
public:
	class UWorld*                                 NewWorld;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnPostLoadMap) == 0x000008, "Wrong alignment on FlameGameInstance_OnPostLoadMap");
static_assert(sizeof(FlameGameInstance_OnPostLoadMap) == 0x000008, "Wrong size on FlameGameInstance_OnPostLoadMap");
static_assert(offsetof(FlameGameInstance_OnPostLoadMap, NewWorld) == 0x000000, "Member 'FlameGameInstance_OnPostLoadMap::NewWorld' has a wrong offset!");

// Function Flame.FlameGameInstance.OnTravelFailure
// 0x0020 (0x0020 - 0x0000)
struct FlameGameInstance_OnTravelFailure final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETravelFailure                                FailureType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorString;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_OnTravelFailure) == 0x000008, "Wrong alignment on FlameGameInstance_OnTravelFailure");
static_assert(sizeof(FlameGameInstance_OnTravelFailure) == 0x000020, "Wrong size on FlameGameInstance_OnTravelFailure");
static_assert(offsetof(FlameGameInstance_OnTravelFailure, InWorld) == 0x000000, "Member 'FlameGameInstance_OnTravelFailure::InWorld' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnTravelFailure, FailureType) == 0x000008, "Member 'FlameGameInstance_OnTravelFailure::FailureType' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_OnTravelFailure, ErrorString) == 0x000010, "Member 'FlameGameInstance_OnTravelFailure::ErrorString' has a wrong offset!");

// Function Flame.FlameGameInstance.PerfModeChanged
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_PerfModeChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_PerfModeChanged) == 0x000001, "Wrong alignment on FlameGameInstance_PerfModeChanged");
static_assert(sizeof(FlameGameInstance_PerfModeChanged) == 0x000001, "Wrong size on FlameGameInstance_PerfModeChanged");
static_assert(offsetof(FlameGameInstance_PerfModeChanged, ReturnValue) == 0x000000, "Member 'FlameGameInstance_PerfModeChanged::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.PlayLoadingSound
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_PlayLoadingSound final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_PlayLoadingSound) == 0x000004, "Wrong alignment on FlameGameInstance_PlayLoadingSound");
static_assert(sizeof(FlameGameInstance_PlayLoadingSound) == 0x000008, "Wrong size on FlameGameInstance_PlayLoadingSound");
static_assert(offsetof(FlameGameInstance_PlayLoadingSound, LevelName) == 0x000000, "Member 'FlameGameInstance_PlayLoadingSound::LevelName' has a wrong offset!");

// Function Flame.FlameGameInstance.ReloadOptionsSaveGame
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_ReloadOptionsSaveGame final
{
public:
	bool                                          bSkipReset;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_ReloadOptionsSaveGame) == 0x000001, "Wrong alignment on FlameGameInstance_ReloadOptionsSaveGame");
static_assert(sizeof(FlameGameInstance_ReloadOptionsSaveGame) == 0x000001, "Wrong size on FlameGameInstance_ReloadOptionsSaveGame");
static_assert(offsetof(FlameGameInstance_ReloadOptionsSaveGame, bSkipReset) == 0x000000, "Member 'FlameGameInstance_ReloadOptionsSaveGame::bSkipReset' has a wrong offset!");

// Function Flame.FlameGameInstance.SetLastMatchID
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_SetLastMatchID final
{
public:
	class FString                                 NewMatchID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_SetLastMatchID) == 0x000008, "Wrong alignment on FlameGameInstance_SetLastMatchID");
static_assert(sizeof(FlameGameInstance_SetLastMatchID) == 0x000010, "Wrong size on FlameGameInstance_SetLastMatchID");
static_assert(offsetof(FlameGameInstance_SetLastMatchID, NewMatchID) == 0x000000, "Member 'FlameGameInstance_SetLastMatchID::NewMatchID' has a wrong offset!");

// Function Flame.FlameGameInstance.SetLastMatchMakingMatchID
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_SetLastMatchMakingMatchID final
{
public:
	class FString                                 MatchID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_SetLastMatchMakingMatchID) == 0x000008, "Wrong alignment on FlameGameInstance_SetLastMatchMakingMatchID");
static_assert(sizeof(FlameGameInstance_SetLastMatchMakingMatchID) == 0x000010, "Wrong size on FlameGameInstance_SetLastMatchMakingMatchID");
static_assert(offsetof(FlameGameInstance_SetLastMatchMakingMatchID, MatchID) == 0x000000, "Member 'FlameGameInstance_SetLastMatchMakingMatchID::MatchID' has a wrong offset!");

// Function Flame.FlameGameInstance.SetNumberOfPlayedGames
// 0x0004 (0x0004 - 0x0000)
struct FlameGameInstance_SetNumberOfPlayedGames final
{
public:
	int32                                         NumberOfPlayedGames;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_SetNumberOfPlayedGames) == 0x000004, "Wrong alignment on FlameGameInstance_SetNumberOfPlayedGames");
static_assert(sizeof(FlameGameInstance_SetNumberOfPlayedGames) == 0x000004, "Wrong size on FlameGameInstance_SetNumberOfPlayedGames");
static_assert(offsetof(FlameGameInstance_SetNumberOfPlayedGames, NumberOfPlayedGames) == 0x000000, "Member 'FlameGameInstance_SetNumberOfPlayedGames::NumberOfPlayedGames' has a wrong offset!");

// Function Flame.FlameGameInstance.SetPerformanceMode
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_SetPerformanceMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_SetPerformanceMode) == 0x000001, "Wrong alignment on FlameGameInstance_SetPerformanceMode");
static_assert(sizeof(FlameGameInstance_SetPerformanceMode) == 0x000001, "Wrong size on FlameGameInstance_SetPerformanceMode");
static_assert(offsetof(FlameGameInstance_SetPerformanceMode, Value) == 0x000000, "Member 'FlameGameInstance_SetPerformanceMode::Value' has a wrong offset!");

// Function Flame.FlameGameInstance.StartLoadingSoundFadeOutCountdown
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_StartLoadingSoundFadeOutCountdown final
{
public:
	float                                         FadeOutDelayTimeOverride;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutTimeOverride;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_StartLoadingSoundFadeOutCountdown) == 0x000004, "Wrong alignment on FlameGameInstance_StartLoadingSoundFadeOutCountdown");
static_assert(sizeof(FlameGameInstance_StartLoadingSoundFadeOutCountdown) == 0x000008, "Wrong size on FlameGameInstance_StartLoadingSoundFadeOutCountdown");
static_assert(offsetof(FlameGameInstance_StartLoadingSoundFadeOutCountdown, FadeOutDelayTimeOverride) == 0x000000, "Member 'FlameGameInstance_StartLoadingSoundFadeOutCountdown::FadeOutDelayTimeOverride' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_StartLoadingSoundFadeOutCountdown, FadeOutTimeOverride) == 0x000004, "Member 'FlameGameInstance_StartLoadingSoundFadeOutCountdown::FadeOutTimeOverride' has a wrong offset!");

// Function Flame.FlameGameInstance.StartMatchmaking
// 0x0028 (0x0028 - 0x0000)
struct FlameGameInstance_StartMatchmaking final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceParty;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_StartMatchmaking) == 0x000008, "Wrong alignment on FlameGameInstance_StartMatchmaking");
static_assert(sizeof(FlameGameInstance_StartMatchmaking) == 0x000028, "Wrong size on FlameGameInstance_StartMatchmaking");
static_assert(offsetof(FlameGameInstance_StartMatchmaking, Map) == 0x000000, "Member 'FlameGameInstance_StartMatchmaking::Map' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_StartMatchmaking, GameMode) == 0x000010, "Member 'FlameGameInstance_StartMatchmaking::GameMode' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_StartMatchmaking, bForceParty) == 0x000020, "Member 'FlameGameInstance_StartMatchmaking::bForceParty' has a wrong offset!");

// Function Flame.FlameGameInstance.CanBeCanceledMatchmaking
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_CanBeCanceledMatchmaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_CanBeCanceledMatchmaking) == 0x000001, "Wrong alignment on FlameGameInstance_CanBeCanceledMatchmaking");
static_assert(sizeof(FlameGameInstance_CanBeCanceledMatchmaking) == 0x000001, "Wrong size on FlameGameInstance_CanBeCanceledMatchmaking");
static_assert(offsetof(FlameGameInstance_CanBeCanceledMatchmaking, ReturnValue) == 0x000000, "Member 'FlameGameInstance_CanBeCanceledMatchmaking::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetAllFormattedVersions
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_GetAllFormattedVersions final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetAllFormattedVersions) == 0x000008, "Wrong alignment on FlameGameInstance_GetAllFormattedVersions");
static_assert(sizeof(FlameGameInstance_GetAllFormattedVersions) == 0x000018, "Wrong size on FlameGameInstance_GetAllFormattedVersions");
static_assert(offsetof(FlameGameInstance_GetAllFormattedVersions, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetAllFormattedVersions::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetAssetManager
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_GetAssetManager final
{
public:
	class UFlameAssetManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetAssetManager) == 0x000008, "Wrong alignment on FlameGameInstance_GetAssetManager");
static_assert(sizeof(FlameGameInstance_GetAssetManager) == 0x000008, "Wrong size on FlameGameInstance_GetAssetManager");
static_assert(offsetof(FlameGameInstance_GetAssetManager, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetAssetManager::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetFormattedVersion
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_GetFormattedVersion final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetFormattedVersion) == 0x000008, "Wrong alignment on FlameGameInstance_GetFormattedVersion");
static_assert(sizeof(FlameGameInstance_GetFormattedVersion) == 0x000018, "Wrong size on FlameGameInstance_GetFormattedVersion");
static_assert(offsetof(FlameGameInstance_GetFormattedVersion, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetFormattedVersion::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetFormattedVersionForUI
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_GetFormattedVersionForUI final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetFormattedVersionForUI) == 0x000008, "Wrong alignment on FlameGameInstance_GetFormattedVersionForUI");
static_assert(sizeof(FlameGameInstance_GetFormattedVersionForUI) == 0x000018, "Wrong size on FlameGameInstance_GetFormattedVersionForUI");
static_assert(offsetof(FlameGameInstance_GetFormattedVersionForUI, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetFormattedVersionForUI::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLastGameModeAlias
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetLastGameModeAlias final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLastGameModeAlias) == 0x000008, "Wrong alignment on FlameGameInstance_GetLastGameModeAlias");
static_assert(sizeof(FlameGameInstance_GetLastGameModeAlias) == 0x000010, "Wrong size on FlameGameInstance_GetLastGameModeAlias");
static_assert(offsetof(FlameGameInstance_GetLastGameModeAlias, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetLastGameModeAlias::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLastMatchID
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetLastMatchID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLastMatchID) == 0x000008, "Wrong alignment on FlameGameInstance_GetLastMatchID");
static_assert(sizeof(FlameGameInstance_GetLastMatchID) == 0x000010, "Wrong size on FlameGameInstance_GetLastMatchID");
static_assert(offsetof(FlameGameInstance_GetLastMatchID, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetLastMatchID::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLastMatchMakingMatchID
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetLastMatchMakingMatchID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLastMatchMakingMatchID) == 0x000008, "Wrong alignment on FlameGameInstance_GetLastMatchMakingMatchID");
static_assert(sizeof(FlameGameInstance_GetLastMatchMakingMatchID) == 0x000010, "Wrong size on FlameGameInstance_GetLastMatchMakingMatchID");
static_assert(offsetof(FlameGameInstance_GetLastMatchMakingMatchID, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetLastMatchMakingMatchID::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetLoadingSoundAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_GetLoadingSoundAudioComponent final
{
public:
	class UAudioComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetLoadingSoundAudioComponent) == 0x000008, "Wrong alignment on FlameGameInstance_GetLoadingSoundAudioComponent");
static_assert(sizeof(FlameGameInstance_GetLoadingSoundAudioComponent) == 0x000008, "Wrong size on FlameGameInstance_GetLoadingSoundAudioComponent");
static_assert(offsetof(FlameGameInstance_GetLoadingSoundAudioComponent, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetLoadingSoundAudioComponent::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.GetMatchmakingGameMode
// 0x0010 (0x0010 - 0x0000)
struct FlameGameInstance_GetMatchmakingGameMode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_GetMatchmakingGameMode) == 0x000008, "Wrong alignment on FlameGameInstance_GetMatchmakingGameMode");
static_assert(sizeof(FlameGameInstance_GetMatchmakingGameMode) == 0x000010, "Wrong size on FlameGameInstance_GetMatchmakingGameMode");
static_assert(offsetof(FlameGameInstance_GetMatchmakingGameMode, ReturnValue) == 0x000000, "Member 'FlameGameInstance_GetMatchmakingGameMode::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.LoadPlayerOptionsSaveGameFromDisk
// 0x0008 (0x0008 - 0x0000)
struct FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk final
{
public:
	class USaveGame*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk) == 0x000008, "Wrong alignment on FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk");
static_assert(sizeof(FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk) == 0x000008, "Wrong size on FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk");
static_assert(offsetof(FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk, ReturnValue) == 0x000000, "Member 'FlameGameInstance_LoadPlayerOptionsSaveGameFromDisk::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.MatchmakingInProgress
// 0x0001 (0x0001 - 0x0000)
struct FlameGameInstance_MatchmakingInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_MatchmakingInProgress) == 0x000001, "Wrong alignment on FlameGameInstance_MatchmakingInProgress");
static_assert(sizeof(FlameGameInstance_MatchmakingInProgress) == 0x000001, "Wrong size on FlameGameInstance_MatchmakingInProgress");
static_assert(offsetof(FlameGameInstance_MatchmakingInProgress, ReturnValue) == 0x000000, "Member 'FlameGameInstance_MatchmakingInProgress::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.SafeSyncDeleteGameFromSlot
// 0x0018 (0x0018 - 0x0000)
struct FlameGameInstance_SafeSyncDeleteGameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_SafeSyncDeleteGameFromSlot) == 0x000008, "Wrong alignment on FlameGameInstance_SafeSyncDeleteGameFromSlot");
static_assert(sizeof(FlameGameInstance_SafeSyncDeleteGameFromSlot) == 0x000018, "Wrong size on FlameGameInstance_SafeSyncDeleteGameFromSlot");
static_assert(offsetof(FlameGameInstance_SafeSyncDeleteGameFromSlot, SlotName) == 0x000000, "Member 'FlameGameInstance_SafeSyncDeleteGameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncDeleteGameFromSlot, UserIndex) == 0x000010, "Member 'FlameGameInstance_SafeSyncDeleteGameFromSlot::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncDeleteGameFromSlot, ReturnValue) == 0x000014, "Member 'FlameGameInstance_SafeSyncDeleteGameFromSlot::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.SafeSyncLoadGameFromSlot
// 0x0020 (0x0020 - 0x0000)
struct FlameGameInstance_SafeSyncLoadGameFromSlot final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameInstance_SafeSyncLoadGameFromSlot) == 0x000008, "Wrong alignment on FlameGameInstance_SafeSyncLoadGameFromSlot");
static_assert(sizeof(FlameGameInstance_SafeSyncLoadGameFromSlot) == 0x000020, "Wrong size on FlameGameInstance_SafeSyncLoadGameFromSlot");
static_assert(offsetof(FlameGameInstance_SafeSyncLoadGameFromSlot, SlotName) == 0x000000, "Member 'FlameGameInstance_SafeSyncLoadGameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncLoadGameFromSlot, UserIndex) == 0x000010, "Member 'FlameGameInstance_SafeSyncLoadGameFromSlot::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncLoadGameFromSlot, ReturnValue) == 0x000018, "Member 'FlameGameInstance_SafeSyncLoadGameFromSlot::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameInstance.SafeSyncSaveGameToSlot
// 0x0020 (0x0020 - 0x0000)
struct FlameGameInstance_SafeSyncSaveGameToSlot final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameGameInstance_SafeSyncSaveGameToSlot) == 0x000008, "Wrong alignment on FlameGameInstance_SafeSyncSaveGameToSlot");
static_assert(sizeof(FlameGameInstance_SafeSyncSaveGameToSlot) == 0x000020, "Wrong size on FlameGameInstance_SafeSyncSaveGameToSlot");
static_assert(offsetof(FlameGameInstance_SafeSyncSaveGameToSlot, SaveGameObject) == 0x000000, "Member 'FlameGameInstance_SafeSyncSaveGameToSlot::SaveGameObject' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncSaveGameToSlot, SlotName) == 0x000008, "Member 'FlameGameInstance_SafeSyncSaveGameToSlot::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncSaveGameToSlot, UserIndex) == 0x000018, "Member 'FlameGameInstance_SafeSyncSaveGameToSlot::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameInstance_SafeSyncSaveGameToSlot, ReturnValue) == 0x00001C, "Member 'FlameGameInstance_SafeSyncSaveGameToSlot::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuManager.AddElementToStack
// 0x0018 (0x0018 - 0x0000)
struct OptionsMenuManager_AddElementToStack final
{
public:
	class UOptionsElementWidget*                  Element;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPending;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Page;                                              // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuManager_AddElementToStack) == 0x000008, "Wrong alignment on OptionsMenuManager_AddElementToStack");
static_assert(sizeof(OptionsMenuManager_AddElementToStack) == 0x000018, "Wrong size on OptionsMenuManager_AddElementToStack");
static_assert(offsetof(OptionsMenuManager_AddElementToStack, Element) == 0x000000, "Member 'OptionsMenuManager_AddElementToStack::Element' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_AddElementToStack, bIsPending) == 0x000008, "Member 'OptionsMenuManager_AddElementToStack::bIsPending' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_AddElementToStack, Page) == 0x00000C, "Member 'OptionsMenuManager_AddElementToStack::Page' has a wrong offset!");

// Function Flame.OptionsMenuManager.AddManuallyToStack
// 0x0048 (0x0048 - 0x0000)
struct OptionsMenuManager_AddManuallyToStack final
{
public:
	class FName                                   Identifier;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOptionsElementValue                   Values;                                            // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsPending;                                        // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Page;                                              // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuManager_AddManuallyToStack) == 0x000008, "Wrong alignment on OptionsMenuManager_AddManuallyToStack");
static_assert(sizeof(OptionsMenuManager_AddManuallyToStack) == 0x000048, "Wrong size on OptionsMenuManager_AddManuallyToStack");
static_assert(offsetof(OptionsMenuManager_AddManuallyToStack, Identifier) == 0x000000, "Member 'OptionsMenuManager_AddManuallyToStack::Identifier' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_AddManuallyToStack, Values) == 0x000008, "Member 'OptionsMenuManager_AddManuallyToStack::Values' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_AddManuallyToStack, bIsPending) == 0x000038, "Member 'OptionsMenuManager_AddManuallyToStack::bIsPending' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_AddManuallyToStack, Page) == 0x00003C, "Member 'OptionsMenuManager_AddManuallyToStack::Page' has a wrong offset!");

// Function Flame.OptionsMenuManager.ApplyStack
// 0x0018 (0x0018 - 0x0000)
struct OptionsMenuManager_ApplyStack final
{
public:
	class FName                                   Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionsMenuWidget*                     OptionsMenuWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuManager_ApplyStack) == 0x000008, "Wrong alignment on OptionsMenuManager_ApplyStack");
static_assert(sizeof(OptionsMenuManager_ApplyStack) == 0x000018, "Wrong size on OptionsMenuManager_ApplyStack");
static_assert(offsetof(OptionsMenuManager_ApplyStack, Page) == 0x000000, "Member 'OptionsMenuManager_ApplyStack::Page' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_ApplyStack, OptionsMenuWidget) == 0x000008, "Member 'OptionsMenuManager_ApplyStack::OptionsMenuWidget' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_ApplyStack, SaveGame) == 0x000010, "Member 'OptionsMenuManager_ApplyStack::SaveGame' has a wrong offset!");

// Function Flame.OptionsMenuManager.ClearStack
// 0x0008 (0x0008 - 0x0000)
struct OptionsMenuManager_ClearStack final
{
public:
	class FName                                   Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuManager_ClearStack) == 0x000004, "Wrong alignment on OptionsMenuManager_ClearStack");
static_assert(sizeof(OptionsMenuManager_ClearStack) == 0x000008, "Wrong size on OptionsMenuManager_ClearStack");
static_assert(offsetof(OptionsMenuManager_ClearStack, Page) == 0x000000, "Member 'OptionsMenuManager_ClearStack::Page' has a wrong offset!");

// Function Flame.OptionsMenuManager.HasStack
// 0x000C (0x000C - 0x0000)
struct OptionsMenuManager_HasStack final
{
public:
	class FName                                   Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OptionsMenuManager_HasStack) == 0x000004, "Wrong alignment on OptionsMenuManager_HasStack");
static_assert(sizeof(OptionsMenuManager_HasStack) == 0x00000C, "Wrong size on OptionsMenuManager_HasStack");
static_assert(offsetof(OptionsMenuManager_HasStack, Page) == 0x000000, "Member 'OptionsMenuManager_HasStack::Page' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_HasStack, ReturnValue) == 0x000008, "Member 'OptionsMenuManager_HasStack::ReturnValue' has a wrong offset!");

// Function Flame.OptionsMenuManager.RemoveWidgetReferences
// 0x0008 (0x0008 - 0x0000)
struct OptionsMenuManager_RemoveWidgetReferences final
{
public:
	class FName                                   Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuManager_RemoveWidgetReferences) == 0x000004, "Wrong alignment on OptionsMenuManager_RemoveWidgetReferences");
static_assert(sizeof(OptionsMenuManager_RemoveWidgetReferences) == 0x000008, "Wrong size on OptionsMenuManager_RemoveWidgetReferences");
static_assert(offsetof(OptionsMenuManager_RemoveWidgetReferences, Page) == 0x000000, "Member 'OptionsMenuManager_RemoveWidgetReferences::Page' has a wrong offset!");

// Function Flame.OptionsMenuManager.RevertStack
// 0x0018 (0x0018 - 0x0000)
struct OptionsMenuManager_RevertStack final
{
public:
	class FName                                   Page;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOptionsMenuWidget*                     OptionsMenuWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              SaveGame;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsMenuManager_RevertStack) == 0x000008, "Wrong alignment on OptionsMenuManager_RevertStack");
static_assert(sizeof(OptionsMenuManager_RevertStack) == 0x000018, "Wrong size on OptionsMenuManager_RevertStack");
static_assert(offsetof(OptionsMenuManager_RevertStack, Page) == 0x000000, "Member 'OptionsMenuManager_RevertStack::Page' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_RevertStack, OptionsMenuWidget) == 0x000008, "Member 'OptionsMenuManager_RevertStack::OptionsMenuWidget' has a wrong offset!");
static_assert(offsetof(OptionsMenuManager_RevertStack, SaveGame) == 0x000010, "Member 'OptionsMenuManager_RevertStack::SaveGame' has a wrong offset!");

// Function Flame.FlameGridWidget.SetGridDimensions
// 0x0008 (0x0008 - 0x0000)
struct FlameGridWidget_SetGridDimensions final
{
public:
	int32                                         GridWidth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GridHeight;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGridWidget_SetGridDimensions) == 0x000004, "Wrong alignment on FlameGridWidget_SetGridDimensions");
static_assert(sizeof(FlameGridWidget_SetGridDimensions) == 0x000008, "Wrong size on FlameGridWidget_SetGridDimensions");
static_assert(offsetof(FlameGridWidget_SetGridDimensions, GridWidth) == 0x000000, "Member 'FlameGridWidget_SetGridDimensions::GridWidth' has a wrong offset!");
static_assert(offsetof(FlameGridWidget_SetGridDimensions, GridHeight) == 0x000004, "Member 'FlameGridWidget_SetGridDimensions::GridHeight' has a wrong offset!");

// Function Flame.QRDisplayer.GenerateQrCode
// 0x0018 (0x0018 - 0x0000)
struct QRDisplayer_GenerateQrCode final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QRDisplayer_GenerateQrCode) == 0x000008, "Wrong alignment on QRDisplayer_GenerateQrCode");
static_assert(sizeof(QRDisplayer_GenerateQrCode) == 0x000018, "Wrong size on QRDisplayer_GenerateQrCode");
static_assert(offsetof(QRDisplayer_GenerateQrCode, String) == 0x000000, "Member 'QRDisplayer_GenerateQrCode::String' has a wrong offset!");
static_assert(offsetof(QRDisplayer_GenerateQrCode, ReturnValue) == 0x000010, "Member 'QRDisplayer_GenerateQrCode::ReturnValue' has a wrong offset!");

// Function Flame.FlameInputKeySelector.GetSelectorTextDesiredSize
// 0x0008 (0x0008 - 0x0000)
struct FlameInputKeySelector_GetSelectorTextDesiredSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_GetSelectorTextDesiredSize) == 0x000004, "Wrong alignment on FlameInputKeySelector_GetSelectorTextDesiredSize");
static_assert(sizeof(FlameInputKeySelector_GetSelectorTextDesiredSize) == 0x000008, "Wrong size on FlameInputKeySelector_GetSelectorTextDesiredSize");
static_assert(offsetof(FlameInputKeySelector_GetSelectorTextDesiredSize, ReturnValue) == 0x000000, "Member 'FlameInputKeySelector_GetSelectorTextDesiredSize::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.FlameInputKeySelector.OnKeySelected__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct FlameInputKeySelector_OnKeySelected__DelegateSignature final
{
public:
	struct FInputChord                            SelectedKey_0;                                     // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_OnKeySelected__DelegateSignature) == 0x000008, "Wrong alignment on FlameInputKeySelector_OnKeySelected__DelegateSignature");
static_assert(sizeof(FlameInputKeySelector_OnKeySelected__DelegateSignature) == 0x000020, "Wrong size on FlameInputKeySelector_OnKeySelected__DelegateSignature");
static_assert(offsetof(FlameInputKeySelector_OnKeySelected__DelegateSignature, SelectedKey_0) == 0x000000, "Member 'FlameInputKeySelector_OnKeySelected__DelegateSignature::SelectedKey_0' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetAdditionalKeyText
// 0x0018 (0x0018 - 0x0000)
struct FlameInputKeySelector_SetAdditionalKeyText final
{
public:
	class FText                                   InAdditionalKeyText;                               // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetAdditionalKeyText) == 0x000008, "Wrong alignment on FlameInputKeySelector_SetAdditionalKeyText");
static_assert(sizeof(FlameInputKeySelector_SetAdditionalKeyText) == 0x000018, "Wrong size on FlameInputKeySelector_SetAdditionalKeyText");
static_assert(offsetof(FlameInputKeySelector_SetAdditionalKeyText, InAdditionalKeyText) == 0x000000, "Member 'FlameInputKeySelector_SetAdditionalKeyText::InAdditionalKeyText' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetAllowGamepadKeys
// 0x0001 (0x0001 - 0x0000)
struct FlameInputKeySelector_SetAllowGamepadKeys final
{
public:
	bool                                          bInAllowGamepadKeys;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetAllowGamepadKeys) == 0x000001, "Wrong alignment on FlameInputKeySelector_SetAllowGamepadKeys");
static_assert(sizeof(FlameInputKeySelector_SetAllowGamepadKeys) == 0x000001, "Wrong size on FlameInputKeySelector_SetAllowGamepadKeys");
static_assert(offsetof(FlameInputKeySelector_SetAllowGamepadKeys, bInAllowGamepadKeys) == 0x000000, "Member 'FlameInputKeySelector_SetAllowGamepadKeys::bInAllowGamepadKeys' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetAllowModifierKeys
// 0x0001 (0x0001 - 0x0000)
struct FlameInputKeySelector_SetAllowModifierKeys final
{
public:
	bool                                          bInAllowModifierKeys;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetAllowModifierKeys) == 0x000001, "Wrong alignment on FlameInputKeySelector_SetAllowModifierKeys");
static_assert(sizeof(FlameInputKeySelector_SetAllowModifierKeys) == 0x000001, "Wrong size on FlameInputKeySelector_SetAllowModifierKeys");
static_assert(offsetof(FlameInputKeySelector_SetAllowModifierKeys, bInAllowModifierKeys) == 0x000000, "Member 'FlameInputKeySelector_SetAllowModifierKeys::bInAllowModifierKeys' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetEscapeKeys
// 0x0010 (0x0010 - 0x0000)
struct FlameInputKeySelector_SetEscapeKeys final
{
public:
	TArray<struct FKey>                           InKeys;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetEscapeKeys) == 0x000008, "Wrong alignment on FlameInputKeySelector_SetEscapeKeys");
static_assert(sizeof(FlameInputKeySelector_SetEscapeKeys) == 0x000010, "Wrong size on FlameInputKeySelector_SetEscapeKeys");
static_assert(offsetof(FlameInputKeySelector_SetEscapeKeys, InKeys) == 0x000000, "Member 'FlameInputKeySelector_SetEscapeKeys::InKeys' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetKeySelectionText
// 0x0018 (0x0018 - 0x0000)
struct FlameInputKeySelector_SetKeySelectionText final
{
public:
	class FText                                   InKeySelectionText;                                // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetKeySelectionText) == 0x000008, "Wrong alignment on FlameInputKeySelector_SetKeySelectionText");
static_assert(sizeof(FlameInputKeySelector_SetKeySelectionText) == 0x000018, "Wrong size on FlameInputKeySelector_SetKeySelectionText");
static_assert(offsetof(FlameInputKeySelector_SetKeySelectionText, InKeySelectionText) == 0x000000, "Member 'FlameInputKeySelector_SetKeySelectionText::InKeySelectionText' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetNoKeySpecifiedText
// 0x0018 (0x0018 - 0x0000)
struct FlameInputKeySelector_SetNoKeySpecifiedText final
{
public:
	class FText                                   InNoKeySpecifiedText;                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetNoKeySpecifiedText) == 0x000008, "Wrong alignment on FlameInputKeySelector_SetNoKeySpecifiedText");
static_assert(sizeof(FlameInputKeySelector_SetNoKeySpecifiedText) == 0x000018, "Wrong size on FlameInputKeySelector_SetNoKeySpecifiedText");
static_assert(offsetof(FlameInputKeySelector_SetNoKeySpecifiedText, InNoKeySpecifiedText) == 0x000000, "Member 'FlameInputKeySelector_SetNoKeySpecifiedText::InNoKeySpecifiedText' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetSelectedKey
// 0x0020 (0x0020 - 0x0000)
struct FlameInputKeySelector_SetSelectedKey final
{
public:
	struct FInputChord                            InSelectedKey;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetSelectedKey) == 0x000008, "Wrong alignment on FlameInputKeySelector_SetSelectedKey");
static_assert(sizeof(FlameInputKeySelector_SetSelectedKey) == 0x000020, "Wrong size on FlameInputKeySelector_SetSelectedKey");
static_assert(offsetof(FlameInputKeySelector_SetSelectedKey, InSelectedKey) == 0x000000, "Member 'FlameInputKeySelector_SetSelectedKey::InSelectedKey' has a wrong offset!");

// Function Flame.FlameInputKeySelector.SetTextBlockVisibility
// 0x0001 (0x0001 - 0x0000)
struct FlameInputKeySelector_SetTextBlockVisibility final
{
public:
	ESlateVisibility                              InVisibility;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_SetTextBlockVisibility) == 0x000001, "Wrong alignment on FlameInputKeySelector_SetTextBlockVisibility");
static_assert(sizeof(FlameInputKeySelector_SetTextBlockVisibility) == 0x000001, "Wrong size on FlameInputKeySelector_SetTextBlockVisibility");
static_assert(offsetof(FlameInputKeySelector_SetTextBlockVisibility, InVisibility) == 0x000000, "Member 'FlameInputKeySelector_SetTextBlockVisibility::InVisibility' has a wrong offset!");

// Function Flame.FlameInputKeySelector.GetIsSelectingKey
// 0x0001 (0x0001 - 0x0000)
struct FlameInputKeySelector_GetIsSelectingKey final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong alignment on FlameInputKeySelector_GetIsSelectingKey");
static_assert(sizeof(FlameInputKeySelector_GetIsSelectingKey) == 0x000001, "Wrong size on FlameInputKeySelector_GetIsSelectingKey");
static_assert(offsetof(FlameInputKeySelector_GetIsSelectingKey, ReturnValue) == 0x000000, "Member 'FlameInputKeySelector_GetIsSelectingKey::ReturnValue' has a wrong offset!");

// Function Flame.OnboardingLoginRewardsComponent.ClaimOnboardingLoginRewards
// 0x0010 (0x0010 - 0x0000)
struct OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards) == 0x000008, "Wrong alignment on OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards");
static_assert(sizeof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards) == 0x000010, "Wrong size on OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards");
static_assert(offsetof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards, Player) == 0x000000, "Member 'OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards::Player' has a wrong offset!");
static_assert(offsetof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards, ReturnValue) == 0x000008, "Member 'OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnboardingLoginRewardsComponent.ClaimOnboardingLoginRewardsDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudClaimOnboardingLoginRewardsResult Data;                                              // 0x0058(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature) == 0x000078, "Wrong size on OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnboardingLoginRewardsComponent_ClaimOnboardingLoginRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnboardingLoginRewardsComponent.GetOnboardingLoginRewards
// 0x0010 (0x0010 - 0x0000)
struct OnboardingLoginRewardsComponent_GetOnboardingLoginRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewards) == 0x000008, "Wrong alignment on OnboardingLoginRewardsComponent_GetOnboardingLoginRewards");
static_assert(sizeof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewards) == 0x000010, "Wrong size on OnboardingLoginRewardsComponent_GetOnboardingLoginRewards");
static_assert(offsetof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewards, Player) == 0x000000, "Member 'OnboardingLoginRewardsComponent_GetOnboardingLoginRewards::Player' has a wrong offset!");
static_assert(offsetof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewards, ReturnValue) == 0x000008, "Member 'OnboardingLoginRewardsComponent_GetOnboardingLoginRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnboardingLoginRewardsComponent.GetOnboardingLoginRewardsDelegate__DelegateSignature
// 0x00B8 (0x00B8 - 0x0000)
struct OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetOnboardingLoginRewardsResult  Data;                                              // 0x0058(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature) == 0x0000B8, "Wrong size on OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnboardingLoginRewardsComponent_GetOnboardingLoginRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.FlameLocomotionInstance.IsSpeed
// 0x0002 (0x0002 - 0x0000)
struct FlameLocomotionInstance_IsSpeed final
{
public:
	ESpeedMode                                    Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameLocomotionInstance_IsSpeed) == 0x000001, "Wrong alignment on FlameLocomotionInstance_IsSpeed");
static_assert(sizeof(FlameLocomotionInstance_IsSpeed) == 0x000002, "Wrong size on FlameLocomotionInstance_IsSpeed");
static_assert(offsetof(FlameLocomotionInstance_IsSpeed, Value) == 0x000000, "Member 'FlameLocomotionInstance_IsSpeed::Value' has a wrong offset!");
static_assert(offsetof(FlameLocomotionInstance_IsSpeed, ReturnValue) == 0x000001, "Member 'FlameLocomotionInstance_IsSpeed::ReturnValue' has a wrong offset!");

// Function Flame.FlameObjectPoolManager.Create
// 0x0010 (0x0010 - 0x0000)
struct FlameObjectPoolManager_Create final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameObjectPoolManager_Create) == 0x000008, "Wrong alignment on FlameObjectPoolManager_Create");
static_assert(sizeof(FlameObjectPoolManager_Create) == 0x000010, "Wrong size on FlameObjectPoolManager_Create");
static_assert(offsetof(FlameObjectPoolManager_Create, Class_0) == 0x000000, "Member 'FlameObjectPoolManager_Create::Class_0' has a wrong offset!");
static_assert(offsetof(FlameObjectPoolManager_Create, ReturnValue) == 0x000008, "Member 'FlameObjectPoolManager_Create::ReturnValue' has a wrong offset!");

// Function Flame.FlameObjectPoolManager.Get
// 0x0010 (0x0010 - 0x0000)
struct FlameObjectPoolManager_Get final
{
public:
	class UClass*                                 Class_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameObjectPoolManager_Get) == 0x000008, "Wrong alignment on FlameObjectPoolManager_Get");
static_assert(sizeof(FlameObjectPoolManager_Get) == 0x000010, "Wrong size on FlameObjectPoolManager_Get");
static_assert(offsetof(FlameObjectPoolManager_Get, Class_0) == 0x000000, "Member 'FlameObjectPoolManager_Get::Class_0' has a wrong offset!");
static_assert(offsetof(FlameObjectPoolManager_Get, ReturnValue) == 0x000008, "Member 'FlameObjectPoolManager_Get::ReturnValue' has a wrong offset!");

// Function Flame.FlameObjectPoolManager.OnWorldCleanup
// 0x0010 (0x0010 - 0x0000)
struct FlameObjectPoolManager_OnWorldCleanup final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSessionEnded;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleanupResources;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameObjectPoolManager_OnWorldCleanup) == 0x000008, "Wrong alignment on FlameObjectPoolManager_OnWorldCleanup");
static_assert(sizeof(FlameObjectPoolManager_OnWorldCleanup) == 0x000010, "Wrong size on FlameObjectPoolManager_OnWorldCleanup");
static_assert(offsetof(FlameObjectPoolManager_OnWorldCleanup, World) == 0x000000, "Member 'FlameObjectPoolManager_OnWorldCleanup::World' has a wrong offset!");
static_assert(offsetof(FlameObjectPoolManager_OnWorldCleanup, bSessionEnded) == 0x000008, "Member 'FlameObjectPoolManager_OnWorldCleanup::bSessionEnded' has a wrong offset!");
static_assert(offsetof(FlameObjectPoolManager_OnWorldCleanup, bCleanupResources) == 0x000009, "Member 'FlameObjectPoolManager_OnWorldCleanup::bCleanupResources' has a wrong offset!");

// Function Flame.FlameObjectPoolManager.PutBack
// 0x0010 (0x0010 - 0x0000)
struct FlameObjectPoolManager_PutBack final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FlameObjectPoolManager_PutBack) == 0x000008, "Wrong alignment on FlameObjectPoolManager_PutBack");
static_assert(sizeof(FlameObjectPoolManager_PutBack) == 0x000010, "Wrong size on FlameObjectPoolManager_PutBack");
static_assert(offsetof(FlameObjectPoolManager_PutBack, Object) == 0x000000, "Member 'FlameObjectPoolManager_PutBack::Object' has a wrong offset!");
static_assert(offsetof(FlameObjectPoolManager_PutBack, LifeSpan) == 0x000008, "Member 'FlameObjectPoolManager_PutBack::LifeSpan' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.ClearCloudRawKeyData
// 0x0030 (0x0030 - 0x0000)
struct OnlineRawDataComponent_ClearCloudRawKeyData final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_ClearCloudRawKeyData) == 0x000008, "Wrong alignment on OnlineRawDataComponent_ClearCloudRawKeyData");
static_assert(sizeof(OnlineRawDataComponent_ClearCloudRawKeyData) == 0x000030, "Wrong size on OnlineRawDataComponent_ClearCloudRawKeyData");
static_assert(offsetof(OnlineRawDataComponent_ClearCloudRawKeyData, Player) == 0x000000, "Member 'OnlineRawDataComponent_ClearCloudRawKeyData::Player' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_ClearCloudRawKeyData, CategoryName) == 0x000008, "Member 'OnlineRawDataComponent_ClearCloudRawKeyData::CategoryName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_ClearCloudRawKeyData, KeyName) == 0x000018, "Member 'OnlineRawDataComponent_ClearCloudRawKeyData::KeyName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_ClearCloudRawKeyData, ReturnValue) == 0x000028, "Member 'OnlineRawDataComponent_ClearCloudRawKeyData::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.ClearCloudRawKeyDataDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature) == 0x000058, "Wrong size on OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_ClearCloudRawKeyDataDelegate__DelegateSignature::RequestResult' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.GetCloudAllRawDataForUser
// 0x0010 (0x0010 - 0x0000)
struct OnlineRawDataComponent_GetCloudAllRawDataForUser final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_GetCloudAllRawDataForUser) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudAllRawDataForUser");
static_assert(sizeof(OnlineRawDataComponent_GetCloudAllRawDataForUser) == 0x000010, "Wrong size on OnlineRawDataComponent_GetCloudAllRawDataForUser");
static_assert(offsetof(OnlineRawDataComponent_GetCloudAllRawDataForUser, Player) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudAllRawDataForUser::Player' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudAllRawDataForUser, ReturnValue) == 0x000008, "Member 'OnlineRawDataComponent_GetCloudAllRawDataForUser::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.GetCloudAllRawDataForUserDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetAllRawDataForUserResult       Data;                                              // 0x0058(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature) == 0x000068, "Wrong size on OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineRawDataComponent_GetCloudAllRawDataForUserDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.GetCloudRawDataAllUsers
// 0x0028 (0x0028 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataAllUsers final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataAllUsers) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataAllUsers");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataAllUsers) == 0x000028, "Wrong size on OnlineRawDataComponent_GetCloudRawDataAllUsers");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsers, CategoryName) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsers::CategoryName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsers, KeyName) == 0x000010, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsers::KeyName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsers, ReturnValue) == 0x000020, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsers::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.GetCloudRawDataAllUsersDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetRawDataAllUsersResult         Data;                                              // 0x0058(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature) == 0x000068, "Wrong size on OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.GetCloudRawDataAllUsersOrdered
// 0x0048 (0x0048 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered final
{
public:
	class FString                                 CategoryName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGetAllRawDataOrder                           Order;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SortValue;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageIndex;                                         // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PageSize;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered) == 0x000048, "Wrong size on OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, CategoryName) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::CategoryName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, KeyName) == 0x000010, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::KeyName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, Order) == 0x000020, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::Order' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, SortValue) == 0x000028, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::SortValue' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, PageIndex) == 0x000038, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::PageIndex' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, PageSize) == 0x00003C, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::PageSize' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered, ReturnValue) == 0x000040, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrdered::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetRawDataAllUsersOrderedResult  Data;                                              // 0x0058(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature) == 0x000088, "Wrong size on OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineRawDataComponent_GetCloudRawDataAllUsersOrderedDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.GetCloudRawDataKey
// 0x0030 (0x0030 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataKey final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataKey) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataKey");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataKey) == 0x000030, "Wrong size on OnlineRawDataComponent_GetCloudRawDataKey");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKey, Player) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataKey::Player' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKey, CategoryName) == 0x000008, "Member 'OnlineRawDataComponent_GetCloudRawDataKey::CategoryName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKey, KeyName) == 0x000018, "Member 'OnlineRawDataComponent_GetCloudRawDataKey::KeyName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKey, ReturnValue) == 0x000028, "Member 'OnlineRawDataComponent_GetCloudRawDataKey::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.GetCloudRawDataKeyDelegate__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetRawDataKeyResult              Data;                                              // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature) == 0x0000A8, "Wrong size on OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineRawDataComponent_GetCloudRawDataKeyDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineRawDataComponent.SetCloudRawDataKey
// 0x0038 (0x0038 - 0x0000)
struct OnlineRawDataComponent_SetCloudRawDataKey final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CategoryName;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KeyName;                                           // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UJsonValue*                       Data;                                              // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineRawDataComponent_SetCloudRawDataKey) == 0x000008, "Wrong alignment on OnlineRawDataComponent_SetCloudRawDataKey");
static_assert(sizeof(OnlineRawDataComponent_SetCloudRawDataKey) == 0x000038, "Wrong size on OnlineRawDataComponent_SetCloudRawDataKey");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKey, Player) == 0x000000, "Member 'OnlineRawDataComponent_SetCloudRawDataKey::Player' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKey, CategoryName) == 0x000008, "Member 'OnlineRawDataComponent_SetCloudRawDataKey::CategoryName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKey, KeyName) == 0x000018, "Member 'OnlineRawDataComponent_SetCloudRawDataKey::KeyName' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKey, Data) == 0x000028, "Member 'OnlineRawDataComponent_SetCloudRawDataKey::Data' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKey, ReturnValue) == 0x000030, "Member 'OnlineRawDataComponent_SetCloudRawDataKey::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineRawDataComponent.SetCloudRawDataKeyDelegate__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudRawDataInfo                      Data;                                              // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature");
static_assert(sizeof(OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature) == 0x0000A8, "Wrong size on OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineRawDataComponent_SetCloudRawDataKeyDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OptionsSaveGame.GetGlobalSafeZoneScale
// 0x0004 (0x0004 - 0x0000)
struct OptionsSaveGame_GetGlobalSafeZoneScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_GetGlobalSafeZoneScale) == 0x000004, "Wrong alignment on OptionsSaveGame_GetGlobalSafeZoneScale");
static_assert(sizeof(OptionsSaveGame_GetGlobalSafeZoneScale) == 0x000004, "Wrong size on OptionsSaveGame_GetGlobalSafeZoneScale");
static_assert(offsetof(OptionsSaveGame_GetGlobalSafeZoneScale, ReturnValue) == 0x000000, "Member 'OptionsSaveGame_GetGlobalSafeZoneScale::ReturnValue' has a wrong offset!");

// Function Flame.OptionsSaveGame.ApplyMouseSettings
// 0x0008 (0x0008 - 0x0000)
struct OptionsSaveGame_ApplyMouseSettings final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_ApplyMouseSettings) == 0x000008, "Wrong alignment on OptionsSaveGame_ApplyMouseSettings");
static_assert(sizeof(OptionsSaveGame_ApplyMouseSettings) == 0x000008, "Wrong size on OptionsSaveGame_ApplyMouseSettings");
static_assert(offsetof(OptionsSaveGame_ApplyMouseSettings, PC) == 0x000000, "Member 'OptionsSaveGame_ApplyMouseSettings::PC' has a wrong offset!");

// Function Flame.OptionsSaveGame.ClearAllKeyBindings
// 0x0020 (0x0020 - 0x0000)
struct OptionsSaveGame_ClearAllKeyBindings final
{
public:
	bool                                          IsRightHanded;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0008(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_ClearAllKeyBindings) == 0x000008, "Wrong alignment on OptionsSaveGame_ClearAllKeyBindings");
static_assert(sizeof(OptionsSaveGame_ClearAllKeyBindings) == 0x000020, "Wrong size on OptionsSaveGame_ClearAllKeyBindings");
static_assert(offsetof(OptionsSaveGame_ClearAllKeyBindings, IsRightHanded) == 0x000000, "Member 'OptionsSaveGame_ClearAllKeyBindings::IsRightHanded' has a wrong offset!");
static_assert(offsetof(OptionsSaveGame_ClearAllKeyBindings, Key) == 0x000008, "Member 'OptionsSaveGame_ClearAllKeyBindings::Key' has a wrong offset!");

// Function Flame.OptionsSaveGame.GetQualitySettingsLevel
// 0x0010 (0x0010 - 0x0000)
struct OptionsSaveGame_GetQualitySettingsLevel final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_GetQualitySettingsLevel) == 0x000008, "Wrong alignment on OptionsSaveGame_GetQualitySettingsLevel");
static_assert(sizeof(OptionsSaveGame_GetQualitySettingsLevel) == 0x000010, "Wrong size on OptionsSaveGame_GetQualitySettingsLevel");
static_assert(offsetof(OptionsSaveGame_GetQualitySettingsLevel, ReturnValue) == 0x000000, "Member 'OptionsSaveGame_GetQualitySettingsLevel::ReturnValue' has a wrong offset!");

// Function Flame.OptionsSaveGame.SaveKeyBinding
// 0x0040 (0x0040 - 0x0000)
struct OptionsSaveGame_SaveKeyBinding final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRightHanded;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key1;                                              // 0x0010(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key2;                                              // 0x0028(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_SaveKeyBinding) == 0x000008, "Wrong alignment on OptionsSaveGame_SaveKeyBinding");
static_assert(sizeof(OptionsSaveGame_SaveKeyBinding) == 0x000040, "Wrong size on OptionsSaveGame_SaveKeyBinding");
static_assert(offsetof(OptionsSaveGame_SaveKeyBinding, Name_0) == 0x000000, "Member 'OptionsSaveGame_SaveKeyBinding::Name_0' has a wrong offset!");
static_assert(offsetof(OptionsSaveGame_SaveKeyBinding, IsRightHanded) == 0x000008, "Member 'OptionsSaveGame_SaveKeyBinding::IsRightHanded' has a wrong offset!");
static_assert(offsetof(OptionsSaveGame_SaveKeyBinding, Key1) == 0x000010, "Member 'OptionsSaveGame_SaveKeyBinding::Key1' has a wrong offset!");
static_assert(offsetof(OptionsSaveGame_SaveKeyBinding, Key2) == 0x000028, "Member 'OptionsSaveGame_SaveKeyBinding::Key2' has a wrong offset!");

// Function Flame.OptionsSaveGame.GetGameSettings
// 0x0048 (0x0048 - 0x0000)
struct OptionsSaveGame_GetGameSettings final
{
public:
	struct FGameSaveSettings                      ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_GetGameSettings) == 0x000008, "Wrong alignment on OptionsSaveGame_GetGameSettings");
static_assert(sizeof(OptionsSaveGame_GetGameSettings) == 0x000048, "Wrong size on OptionsSaveGame_GetGameSettings");
static_assert(offsetof(OptionsSaveGame_GetGameSettings, ReturnValue) == 0x000000, "Member 'OptionsSaveGame_GetGameSettings::ReturnValue' has a wrong offset!");

// Function Flame.OptionsSaveGame.GetVideoSettings
// 0x0060 (0x0060 - 0x0000)
struct OptionsSaveGame_GetVideoSettings final
{
public:
	struct FVideoSaveSettings                     ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OptionsSaveGame_GetVideoSettings) == 0x000008, "Wrong alignment on OptionsSaveGame_GetVideoSettings");
static_assert(sizeof(OptionsSaveGame_GetVideoSettings) == 0x000060, "Wrong size on OptionsSaveGame_GetVideoSettings");
static_assert(offsetof(OptionsSaveGame_GetVideoSettings, ReturnValue) == 0x000000, "Member 'OptionsSaveGame_GetVideoSettings::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameLoad.LoadGameFromSlotByPlatform
// 0x0028 (0x0028 - 0x0000)
struct FlameGameLoad_LoadGameFromSlotByPlatform final
{
public:
	class UFlameGameInstance*                     FlameGameInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameGameLoad*                         ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameLoad_LoadGameFromSlotByPlatform) == 0x000008, "Wrong alignment on FlameGameLoad_LoadGameFromSlotByPlatform");
static_assert(sizeof(FlameGameLoad_LoadGameFromSlotByPlatform) == 0x000028, "Wrong size on FlameGameLoad_LoadGameFromSlotByPlatform");
static_assert(offsetof(FlameGameLoad_LoadGameFromSlotByPlatform, FlameGameInstance) == 0x000000, "Member 'FlameGameLoad_LoadGameFromSlotByPlatform::FlameGameInstance' has a wrong offset!");
static_assert(offsetof(FlameGameLoad_LoadGameFromSlotByPlatform, SlotName) == 0x000008, "Member 'FlameGameLoad_LoadGameFromSlotByPlatform::SlotName' has a wrong offset!");
static_assert(offsetof(FlameGameLoad_LoadGameFromSlotByPlatform, UserIndex) == 0x000018, "Member 'FlameGameLoad_LoadGameFromSlotByPlatform::UserIndex' has a wrong offset!");
static_assert(offsetof(FlameGameLoad_LoadGameFromSlotByPlatform, ReturnValue) == 0x000020, "Member 'FlameGameLoad_LoadGameFromSlotByPlatform::ReturnValue' has a wrong offset!");

// Function Flame.FlameGameLoad.ReceivedLoadResults
// 0x0008 (0x0008 - 0x0000)
struct FlameGameLoad_ReceivedLoadResults final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameGameLoad_ReceivedLoadResults) == 0x000008, "Wrong alignment on FlameGameLoad_ReceivedLoadResults");
static_assert(sizeof(FlameGameLoad_ReceivedLoadResults) == 0x000008, "Wrong size on FlameGameLoad_ReceivedLoadResults");
static_assert(offsetof(FlameGameLoad_ReceivedLoadResults, SaveGameObject) == 0x000000, "Member 'FlameGameLoad_ReceivedLoadResults::SaveGameObject' has a wrong offset!");

// Function Flame.FlameSpectator.OnSpectateTargetChanged
// 0x0008 (0x0008 - 0x0000)
struct FlameSpectator_OnSpectateTargetChanged final
{
public:
	class AHumanCharacter*                        NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlameSpectator_OnSpectateTargetChanged) == 0x000008, "Wrong alignment on FlameSpectator_OnSpectateTargetChanged");
static_assert(sizeof(FlameSpectator_OnSpectateTargetChanged) == 0x000008, "Wrong size on FlameSpectator_OnSpectateTargetChanged");
static_assert(offsetof(FlameSpectator_OnSpectateTargetChanged, NewTarget) == 0x000000, "Member 'FlameSpectator_OnSpectateTargetChanged::NewTarget' has a wrong offset!");

// Function Flame.FootStepComponent.OnFootStep
// 0x0018 (0x0018 - 0x0000)
struct FootStepComponent_OnFootStep final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootStepLegIndex                             FootStepLegIndex;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootStepMovementType                         FootStepMovementType;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootStepComponent_OnFootStep) == 0x000008, "Wrong alignment on FootStepComponent_OnFootStep");
static_assert(sizeof(FootStepComponent_OnFootStep) == 0x000018, "Wrong size on FootStepComponent_OnFootStep");
static_assert(offsetof(FootStepComponent_OnFootStep, MeshComp) == 0x000000, "Member 'FootStepComponent_OnFootStep::MeshComp' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnFootStep, Animation) == 0x000008, "Member 'FootStepComponent_OnFootStep::Animation' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnFootStep, FootStepLegIndex) == 0x000010, "Member 'FootStepComponent_OnFootStep::FootStepLegIndex' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnFootStep, FootStepMovementType) == 0x000011, "Member 'FootStepComponent_OnFootStep::FootStepMovementType' has a wrong offset!");

// Function Flame.FootStepComponent.OnLadderStep
// 0x0018 (0x0018 - 0x0000)
struct FootStepComponent_OnLadderStep final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELadderStepLimbIndex                          LadderStepLimbIndex;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootStepComponent_OnLadderStep) == 0x000008, "Wrong alignment on FootStepComponent_OnLadderStep");
static_assert(sizeof(FootStepComponent_OnLadderStep) == 0x000018, "Wrong size on FootStepComponent_OnLadderStep");
static_assert(offsetof(FootStepComponent_OnLadderStep, MeshComp) == 0x000000, "Member 'FootStepComponent_OnLadderStep::MeshComp' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnLadderStep, Animation) == 0x000008, "Member 'FootStepComponent_OnLadderStep::Animation' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnLadderStep, SurfaceType) == 0x000010, "Member 'FootStepComponent_OnLadderStep::SurfaceType' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnLadderStep, LadderStepLimbIndex) == 0x000011, "Member 'FootStepComponent_OnLadderStep::LadderStepLimbIndex' has a wrong offset!");

// Function Flame.FootStepComponent.OnProneStep
// 0x0018 (0x0018 - 0x0000)
struct FootStepComponent_OnProneStep final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProneStepLimbIndex                           ProneStepLimbIndex;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootStepComponent_OnProneStep) == 0x000008, "Wrong alignment on FootStepComponent_OnProneStep");
static_assert(sizeof(FootStepComponent_OnProneStep) == 0x000018, "Wrong size on FootStepComponent_OnProneStep");
static_assert(offsetof(FootStepComponent_OnProneStep, MeshComp) == 0x000000, "Member 'FootStepComponent_OnProneStep::MeshComp' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnProneStep, Animation) == 0x000008, "Member 'FootStepComponent_OnProneStep::Animation' has a wrong offset!");
static_assert(offsetof(FootStepComponent_OnProneStep, ProneStepLimbIndex) == 0x000010, "Member 'FootStepComponent_OnProneStep::ProneStepLimbIndex' has a wrong offset!");

// Function Flame.ShelterStash.CloseItemPreviewScreen
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_CloseItemPreviewScreen final
{
public:
	TSubclassOf<class AItem>                      InPreviewedItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_CloseItemPreviewScreen) == 0x000008, "Wrong alignment on ShelterStash_CloseItemPreviewScreen");
static_assert(sizeof(ShelterStash_CloseItemPreviewScreen) == 0x000008, "Wrong size on ShelterStash_CloseItemPreviewScreen");
static_assert(offsetof(ShelterStash_CloseItemPreviewScreen, InPreviewedItem) == 0x000000, "Member 'ShelterStash_CloseItemPreviewScreen::InPreviewedItem' has a wrong offset!");

// Function Flame.ShelterStash.EnterSubmenu
// 0x0048 (0x0048 - 0x0000)
struct ShelterStash_EnterSubmenu final
{
public:
	struct FStashViewContext                      InContext;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_EnterSubmenu) == 0x000008, "Wrong alignment on ShelterStash_EnterSubmenu");
static_assert(sizeof(ShelterStash_EnterSubmenu) == 0x000048, "Wrong size on ShelterStash_EnterSubmenu");
static_assert(offsetof(ShelterStash_EnterSubmenu, InContext) == 0x000000, "Member 'ShelterStash_EnterSubmenu::InContext' has a wrong offset!");

// Function Flame.ShelterStash.OnEquipWeaponAfterSwapClosed
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OnEquipWeaponAfterSwapClosed final
{
public:
	class UFlameWidget*                           FlameWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnEquipWeaponAfterSwapClosed) == 0x000008, "Wrong alignment on ShelterStash_OnEquipWeaponAfterSwapClosed");
static_assert(sizeof(ShelterStash_OnEquipWeaponAfterSwapClosed) == 0x000008, "Wrong size on ShelterStash_OnEquipWeaponAfterSwapClosed");
static_assert(offsetof(ShelterStash_OnEquipWeaponAfterSwapClosed, FlameWidget) == 0x000000, "Member 'ShelterStash_OnEquipWeaponAfterSwapClosed::FlameWidget' has a wrong offset!");

// Function Flame.ShelterStash.OnEquipWeaponClosed
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OnEquipWeaponClosed final
{
public:
	class UFlameWidget*                           FlameWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnEquipWeaponClosed) == 0x000008, "Wrong alignment on ShelterStash_OnEquipWeaponClosed");
static_assert(sizeof(ShelterStash_OnEquipWeaponClosed) == 0x000008, "Wrong size on ShelterStash_OnEquipWeaponClosed");
static_assert(offsetof(ShelterStash_OnEquipWeaponClosed, FlameWidget) == 0x000000, "Member 'ShelterStash_OnEquipWeaponClosed::FlameWidget' has a wrong offset!");

// Function Flame.ShelterStash.OnItemPreviewClosed
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OnItemPreviewClosed final
{
public:
	TSubclassOf<class AItem>                      InPreviewedItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnItemPreviewClosed) == 0x000008, "Wrong alignment on ShelterStash_OnItemPreviewClosed");
static_assert(sizeof(ShelterStash_OnItemPreviewClosed) == 0x000008, "Wrong size on ShelterStash_OnItemPreviewClosed");
static_assert(offsetof(ShelterStash_OnItemPreviewClosed, InPreviewedItem) == 0x000000, "Member 'ShelterStash_OnItemPreviewClosed::InPreviewedItem' has a wrong offset!");

// Function Flame.ShelterStash.OnItemPreviewOpened
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OnItemPreviewOpened final
{
public:
	TSubclassOf<class AItem>                      InItemToPreview;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnItemPreviewOpened) == 0x000008, "Wrong alignment on ShelterStash_OnItemPreviewOpened");
static_assert(sizeof(ShelterStash_OnItemPreviewOpened) == 0x000008, "Wrong size on ShelterStash_OnItemPreviewOpened");
static_assert(offsetof(ShelterStash_OnItemPreviewOpened, InItemToPreview) == 0x000000, "Member 'ShelterStash_OnItemPreviewOpened::InItemToPreview' has a wrong offset!");

// Function Flame.ShelterStash.OnSubmenuEntered
// 0x0048 (0x0048 - 0x0000)
struct ShelterStash_OnSubmenuEntered final
{
public:
	struct FStashViewContext                      InContext;                                         // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnSubmenuEntered) == 0x000008, "Wrong alignment on ShelterStash_OnSubmenuEntered");
static_assert(sizeof(ShelterStash_OnSubmenuEntered) == 0x000048, "Wrong size on ShelterStash_OnSubmenuEntered");
static_assert(offsetof(ShelterStash_OnSubmenuEntered, InContext) == 0x000000, "Member 'ShelterStash_OnSubmenuEntered::InContext' has a wrong offset!");

// Function Flame.ShelterStash.OnSubmenuLeft
// 0x0001 (0x0001 - 0x0000)
struct ShelterStash_OnSubmenuLeft final
{
public:
	EInventoryView                                InView;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnSubmenuLeft) == 0x000001, "Wrong alignment on ShelterStash_OnSubmenuLeft");
static_assert(sizeof(ShelterStash_OnSubmenuLeft) == 0x000001, "Wrong size on ShelterStash_OnSubmenuLeft");
static_assert(offsetof(ShelterStash_OnSubmenuLeft, InView) == 0x000000, "Member 'ShelterStash_OnSubmenuLeft::InView' has a wrong offset!");

// Function Flame.ShelterStash.OnSwapWeaponsClosed
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OnSwapWeaponsClosed final
{
public:
	class UFlameWidget*                           FlameWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnSwapWeaponsClosed) == 0x000008, "Wrong alignment on ShelterStash_OnSwapWeaponsClosed");
static_assert(sizeof(ShelterStash_OnSwapWeaponsClosed) == 0x000008, "Wrong size on ShelterStash_OnSwapWeaponsClosed");
static_assert(offsetof(ShelterStash_OnSwapWeaponsClosed, FlameWidget) == 0x000000, "Member 'ShelterStash_OnSwapWeaponsClosed::FlameWidget' has a wrong offset!");

// Function Flame.ShelterStash.OnViewChanged
// 0x0001 (0x0001 - 0x0000)
struct ShelterStash_OnViewChanged final
{
public:
	EInventoryView                                InView;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OnViewChanged) == 0x000001, "Wrong alignment on ShelterStash_OnViewChanged");
static_assert(sizeof(ShelterStash_OnViewChanged) == 0x000001, "Wrong size on ShelterStash_OnViewChanged");
static_assert(offsetof(ShelterStash_OnViewChanged, InView) == 0x000000, "Member 'ShelterStash_OnViewChanged::InView' has a wrong offset!");

// Function Flame.ShelterStash.OpenItemPreviewScreen
// 0x0008 (0x0008 - 0x0000)
struct ShelterStash_OpenItemPreviewScreen final
{
public:
	TSubclassOf<class AItem>                      InItemToPreview;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_OpenItemPreviewScreen) == 0x000008, "Wrong alignment on ShelterStash_OpenItemPreviewScreen");
static_assert(sizeof(ShelterStash_OpenItemPreviewScreen) == 0x000008, "Wrong size on ShelterStash_OpenItemPreviewScreen");
static_assert(offsetof(ShelterStash_OpenItemPreviewScreen, InItemToPreview) == 0x000000, "Member 'ShelterStash_OpenItemPreviewScreen::InItemToPreview' has a wrong offset!");

// Function Flame.ShelterStash.SelectFlameSlot
// 0x0010 (0x0010 - 0x0000)
struct ShelterStash_SelectFlameSlot final
{
public:
	class UFlameSlot*                             InFlameSlot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputIcon                                    InInputAction;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterStash_SelectFlameSlot) == 0x000008, "Wrong alignment on ShelterStash_SelectFlameSlot");
static_assert(sizeof(ShelterStash_SelectFlameSlot) == 0x000010, "Wrong size on ShelterStash_SelectFlameSlot");
static_assert(offsetof(ShelterStash_SelectFlameSlot, InFlameSlot) == 0x000000, "Member 'ShelterStash_SelectFlameSlot::InFlameSlot' has a wrong offset!");
static_assert(offsetof(ShelterStash_SelectFlameSlot, InInputAction) == 0x000008, "Member 'ShelterStash_SelectFlameSlot::InInputAction' has a wrong offset!");

// Function Flame.ShelterStash.SetView
// 0x0001 (0x0001 - 0x0000)
struct ShelterStash_SetView final
{
public:
	EInventoryView                                View;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_SetView) == 0x000001, "Wrong alignment on ShelterStash_SetView");
static_assert(sizeof(ShelterStash_SetView) == 0x000001, "Wrong size on ShelterStash_SetView");
static_assert(offsetof(ShelterStash_SetView, View) == 0x000000, "Member 'ShelterStash_SetView::View' has a wrong offset!");

// Function Flame.ShelterStash.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct ShelterStash_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStash_IsLocked) == 0x000001, "Wrong alignment on ShelterStash_IsLocked");
static_assert(sizeof(ShelterStash_IsLocked) == 0x000001, "Wrong size on ShelterStash_IsLocked");
static_assert(offsetof(ShelterStash_IsLocked, ReturnValue) == 0x000000, "Member 'ShelterStash_IsLocked::ReturnValue' has a wrong offset!");

// Function Flame.ShelterStash.ShouldOpenEquipWeaponModalWidget
// 0x0010 (0x0010 - 0x0000)
struct ShelterStash_ShouldOpenEquipWeaponModalWidget final
{
public:
	class AWeapon*                                InWeaponToEquip;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterStash_ShouldOpenEquipWeaponModalWidget) == 0x000008, "Wrong alignment on ShelterStash_ShouldOpenEquipWeaponModalWidget");
static_assert(sizeof(ShelterStash_ShouldOpenEquipWeaponModalWidget) == 0x000010, "Wrong size on ShelterStash_ShouldOpenEquipWeaponModalWidget");
static_assert(offsetof(ShelterStash_ShouldOpenEquipWeaponModalWidget, InWeaponToEquip) == 0x000000, "Member 'ShelterStash_ShouldOpenEquipWeaponModalWidget::InWeaponToEquip' has a wrong offset!");
static_assert(offsetof(ShelterStash_ShouldOpenEquipWeaponModalWidget, ReturnValue) == 0x000008, "Member 'ShelterStash_ShouldOpenEquipWeaponModalWidget::ReturnValue' has a wrong offset!");

// Function Flame.FriendInfo.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct FriendInfo_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendInfo_GetDisplayName) == 0x000008, "Wrong alignment on FriendInfo_GetDisplayName");
static_assert(sizeof(FriendInfo_GetDisplayName) == 0x000010, "Wrong size on FriendInfo_GetDisplayName");
static_assert(offsetof(FriendInfo_GetDisplayName, ReturnValue) == 0x000000, "Member 'FriendInfo_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Flame.FriendInfo.GetRealName
// 0x0010 (0x0010 - 0x0000)
struct FriendInfo_GetRealName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendInfo_GetRealName) == 0x000008, "Wrong alignment on FriendInfo_GetRealName");
static_assert(sizeof(FriendInfo_GetRealName) == 0x000010, "Wrong size on FriendInfo_GetRealName");
static_assert(offsetof(FriendInfo_GetRealName, ReturnValue) == 0x000000, "Member 'FriendInfo_GetRealName::ReturnValue' has a wrong offset!");

// Function Flame.FriendInfo.GetUserAttribute
// 0x0028 (0x0028 - 0x0000)
struct FriendInfo_GetUserAttribute final
{
public:
	class FString                                 AttrName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutAttrValue;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendInfo_GetUserAttribute) == 0x000008, "Wrong alignment on FriendInfo_GetUserAttribute");
static_assert(sizeof(FriendInfo_GetUserAttribute) == 0x000028, "Wrong size on FriendInfo_GetUserAttribute");
static_assert(offsetof(FriendInfo_GetUserAttribute, AttrName) == 0x000000, "Member 'FriendInfo_GetUserAttribute::AttrName' has a wrong offset!");
static_assert(offsetof(FriendInfo_GetUserAttribute, OutAttrValue) == 0x000010, "Member 'FriendInfo_GetUserAttribute::OutAttrValue' has a wrong offset!");
static_assert(offsetof(FriendInfo_GetUserAttribute, ReturnValue) == 0x000020, "Member 'FriendInfo_GetUserAttribute::ReturnValue' has a wrong offset!");

// Function Flame.FriendInfo.GetUserId
// 0x0028 (0x0028 - 0x0000)
struct FriendInfo_GetUserId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendInfo_GetUserId) == 0x000008, "Wrong alignment on FriendInfo_GetUserId");
static_assert(sizeof(FriendInfo_GetUserId) == 0x000028, "Wrong size on FriendInfo_GetUserId");
static_assert(offsetof(FriendInfo_GetUserId, ReturnValue) == 0x000000, "Member 'FriendInfo_GetUserId::ReturnValue' has a wrong offset!");

// Function Flame.GameControlSpawnComponent.GetSpawnPointLocation
// 0x000C (0x000C - 0x0000)
struct GameControlSpawnComponent_GetSpawnPointLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameControlSpawnComponent_GetSpawnPointLocation) == 0x000004, "Wrong alignment on GameControlSpawnComponent_GetSpawnPointLocation");
static_assert(sizeof(GameControlSpawnComponent_GetSpawnPointLocation) == 0x00000C, "Wrong size on GameControlSpawnComponent_GetSpawnPointLocation");
static_assert(offsetof(GameControlSpawnComponent_GetSpawnPointLocation, ReturnValue) == 0x000000, "Member 'GameControlSpawnComponent_GetSpawnPointLocation::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.CheckEncroachment
// 0x0018 (0x0018 - 0x0000)
struct GameModeFlame_CheckEncroachment final
{
public:
	class AActor*                                 FoundPlayerStart;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeFlame_CheckEncroachment) == 0x000008, "Wrong alignment on GameModeFlame_CheckEncroachment");
static_assert(sizeof(GameModeFlame_CheckEncroachment) == 0x000018, "Wrong size on GameModeFlame_CheckEncroachment");
static_assert(offsetof(GameModeFlame_CheckEncroachment, FoundPlayerStart) == 0x000000, "Member 'GameModeFlame_CheckEncroachment::FoundPlayerStart' has a wrong offset!");
static_assert(offsetof(GameModeFlame_CheckEncroachment, Player) == 0x000008, "Member 'GameModeFlame_CheckEncroachment::Player' has a wrong offset!");
static_assert(offsetof(GameModeFlame_CheckEncroachment, ReturnValue) == 0x000010, "Member 'GameModeFlame_CheckEncroachment::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetMatchStartAfter
// 0x0004 (0x0004 - 0x0000)
struct GameModeFlame_GetMatchStartAfter final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_GetMatchStartAfter) == 0x000004, "Wrong alignment on GameModeFlame_GetMatchStartAfter");
static_assert(sizeof(GameModeFlame_GetMatchStartAfter) == 0x000004, "Wrong size on GameModeFlame_GetMatchStartAfter");
static_assert(offsetof(GameModeFlame_GetMatchStartAfter, ReturnValue) == 0x000000, "Member 'GameModeFlame_GetMatchStartAfter::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetOrCreateSpectatorManager
// 0x0008 (0x0008 - 0x0000)
struct GameModeFlame_GetOrCreateSpectatorManager final
{
public:
	class ASpectatorManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_GetOrCreateSpectatorManager) == 0x000008, "Wrong alignment on GameModeFlame_GetOrCreateSpectatorManager");
static_assert(sizeof(GameModeFlame_GetOrCreateSpectatorManager) == 0x000008, "Wrong size on GameModeFlame_GetOrCreateSpectatorManager");
static_assert(offsetof(GameModeFlame_GetOrCreateSpectatorManager, ReturnValue) == 0x000000, "Member 'GameModeFlame_GetOrCreateSpectatorManager::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetPlayerCanRestart
// 0x0010 (0x0010 - 0x0000)
struct GameModeFlame_GetPlayerCanRestart final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeFlame_GetPlayerCanRestart) == 0x000008, "Wrong alignment on GameModeFlame_GetPlayerCanRestart");
static_assert(sizeof(GameModeFlame_GetPlayerCanRestart) == 0x000010, "Wrong size on GameModeFlame_GetPlayerCanRestart");
static_assert(offsetof(GameModeFlame_GetPlayerCanRestart, PlayerController) == 0x000000, "Member 'GameModeFlame_GetPlayerCanRestart::PlayerController' has a wrong offset!");
static_assert(offsetof(GameModeFlame_GetPlayerCanRestart, ReturnValue) == 0x000008, "Member 'GameModeFlame_GetPlayerCanRestart::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetTeammates
// 0x0018 (0x0018 - 0x0000)
struct GameModeFlame_GetTeammates final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AHumanPlayerController*>         OutControllerList;                                 // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_GetTeammates) == 0x000008, "Wrong alignment on GameModeFlame_GetTeammates");
static_assert(sizeof(GameModeFlame_GetTeammates) == 0x000018, "Wrong size on GameModeFlame_GetTeammates");
static_assert(offsetof(GameModeFlame_GetTeammates, Player) == 0x000000, "Member 'GameModeFlame_GetTeammates::Player' has a wrong offset!");
static_assert(offsetof(GameModeFlame_GetTeammates, OutControllerList) == 0x000008, "Member 'GameModeFlame_GetTeammates::OutControllerList' has a wrong offset!");

// Function Flame.GameModeFlame.OnLeftMatch
// 0x0008 (0x0008 - 0x0000)
struct GameModeFlame_OnLeftMatch final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_OnLeftMatch) == 0x000008, "Wrong alignment on GameModeFlame_OnLeftMatch");
static_assert(sizeof(GameModeFlame_OnLeftMatch) == 0x000008, "Wrong size on GameModeFlame_OnLeftMatch");
static_assert(offsetof(GameModeFlame_OnLeftMatch, Controller) == 0x000000, "Member 'GameModeFlame_OnLeftMatch::Controller' has a wrong offset!");

// Function Flame.GameModeFlame.OnMatchInfoMatchStarted
// 0x0068 (0x0068 - 0x0000)
struct GameModeFlame_OnMatchInfoMatchStarted final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_OnMatchInfoMatchStarted) == 0x000008, "Wrong alignment on GameModeFlame_OnMatchInfoMatchStarted");
static_assert(sizeof(GameModeFlame_OnMatchInfoMatchStarted) == 0x000068, "Wrong size on GameModeFlame_OnMatchInfoMatchStarted");
static_assert(offsetof(GameModeFlame_OnMatchInfoMatchStarted, RequestResult) == 0x000000, "Member 'GameModeFlame_OnMatchInfoMatchStarted::RequestResult' has a wrong offset!");
static_assert(offsetof(GameModeFlame_OnMatchInfoMatchStarted, MatchID) == 0x000058, "Member 'GameModeFlame_OnMatchInfoMatchStarted::MatchID' has a wrong offset!");

// Function Flame.GameModeFlame.OnPlayerDied
// 0x0018 (0x0018 - 0x0000)
struct GameModeFlame_OnPlayerDied final
{
public:
	class AHumanCharacter*                        Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeFlame_OnPlayerDied) == 0x000008, "Wrong alignment on GameModeFlame_OnPlayerDied");
static_assert(sizeof(GameModeFlame_OnPlayerDied) == 0x000018, "Wrong size on GameModeFlame_OnPlayerDied");
static_assert(offsetof(GameModeFlame_OnPlayerDied, Player) == 0x000000, "Member 'GameModeFlame_OnPlayerDied::Player' has a wrong offset!");
static_assert(offsetof(GameModeFlame_OnPlayerDied, Killer) == 0x000008, "Member 'GameModeFlame_OnPlayerDied::Killer' has a wrong offset!");
static_assert(offsetof(GameModeFlame_OnPlayerDied, ReturnValue) == 0x000010, "Member 'GameModeFlame_OnPlayerDied::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.OnPlayerRespawned
// 0x0008 (0x0008 - 0x0000)
struct GameModeFlame_OnPlayerRespawned final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_OnPlayerRespawned) == 0x000008, "Wrong alignment on GameModeFlame_OnPlayerRespawned");
static_assert(sizeof(GameModeFlame_OnPlayerRespawned) == 0x000008, "Wrong size on GameModeFlame_OnPlayerRespawned");
static_assert(offsetof(GameModeFlame_OnPlayerRespawned, Player) == 0x000000, "Member 'GameModeFlame_OnPlayerRespawned::Player' has a wrong offset!");

// Function Flame.GameModeFlame.OnSpectatorHasNobodyToSpectate
// 0x0008 (0x0008 - 0x0000)
struct GameModeFlame_OnSpectatorHasNobodyToSpectate final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_OnSpectatorHasNobodyToSpectate) == 0x000008, "Wrong alignment on GameModeFlame_OnSpectatorHasNobodyToSpectate");
static_assert(sizeof(GameModeFlame_OnSpectatorHasNobodyToSpectate) == 0x000008, "Wrong size on GameModeFlame_OnSpectatorHasNobodyToSpectate");
static_assert(offsetof(GameModeFlame_OnSpectatorHasNobodyToSpectate, Player) == 0x000000, "Member 'GameModeFlame_OnSpectatorHasNobodyToSpectate::Player' has a wrong offset!");

// Function Flame.GameModeFlame.PlayerSendToShelter
// 0x0008 (0x0008 - 0x0000)
struct GameModeFlame_PlayerSendToShelter final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_PlayerSendToShelter) == 0x000008, "Wrong alignment on GameModeFlame_PlayerSendToShelter");
static_assert(sizeof(GameModeFlame_PlayerSendToShelter) == 0x000008, "Wrong size on GameModeFlame_PlayerSendToShelter");
static_assert(offsetof(GameModeFlame_PlayerSendToShelter, Player) == 0x000000, "Member 'GameModeFlame_PlayerSendToShelter::Player' has a wrong offset!");

// Function Flame.GameModeFlame.PlayerSendToShelterWithDelay
// 0x0010 (0x0010 - 0x0000)
struct GameModeFlame_PlayerSendToShelterWithDelay final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameModeFlame_PlayerSendToShelterWithDelay) == 0x000008, "Wrong alignment on GameModeFlame_PlayerSendToShelterWithDelay");
static_assert(sizeof(GameModeFlame_PlayerSendToShelterWithDelay) == 0x000010, "Wrong size on GameModeFlame_PlayerSendToShelterWithDelay");
static_assert(offsetof(GameModeFlame_PlayerSendToShelterWithDelay, Player) == 0x000000, "Member 'GameModeFlame_PlayerSendToShelterWithDelay::Player' has a wrong offset!");
static_assert(offsetof(GameModeFlame_PlayerSendToShelterWithDelay, Delay) == 0x000008, "Member 'GameModeFlame_PlayerSendToShelterWithDelay::Delay' has a wrong offset!");

// Function Flame.GameModeFlame.PreparePrimaryStartsForPlayers
// 0x0004 (0x0004 - 0x0000)
struct GameModeFlame_PreparePrimaryStartsForPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_PreparePrimaryStartsForPlayers) == 0x000004, "Wrong alignment on GameModeFlame_PreparePrimaryStartsForPlayers");
static_assert(sizeof(GameModeFlame_PreparePrimaryStartsForPlayers) == 0x000004, "Wrong size on GameModeFlame_PreparePrimaryStartsForPlayers");
static_assert(offsetof(GameModeFlame_PreparePrimaryStartsForPlayers, ReturnValue) == 0x000000, "Member 'GameModeFlame_PreparePrimaryStartsForPlayers::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.SelectNextPrimaryStartForPlayer
// 0x0010 (0x0010 - 0x0000)
struct GameModeFlame_SelectNextPrimaryStartForPlayer final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStartFlame*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_SelectNextPrimaryStartForPlayer) == 0x000008, "Wrong alignment on GameModeFlame_SelectNextPrimaryStartForPlayer");
static_assert(sizeof(GameModeFlame_SelectNextPrimaryStartForPlayer) == 0x000010, "Wrong size on GameModeFlame_SelectNextPrimaryStartForPlayer");
static_assert(offsetof(GameModeFlame_SelectNextPrimaryStartForPlayer, Player) == 0x000000, "Member 'GameModeFlame_SelectNextPrimaryStartForPlayer::Player' has a wrong offset!");
static_assert(offsetof(GameModeFlame_SelectNextPrimaryStartForPlayer, ReturnValue) == 0x000008, "Member 'GameModeFlame_SelectNextPrimaryStartForPlayer::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.ShouldStartMatchBP
// 0x0001 (0x0001 - 0x0000)
struct GameModeFlame_ShouldStartMatchBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_ShouldStartMatchBP) == 0x000001, "Wrong alignment on GameModeFlame_ShouldStartMatchBP");
static_assert(sizeof(GameModeFlame_ShouldStartMatchBP) == 0x000001, "Wrong size on GameModeFlame_ShouldStartMatchBP");
static_assert(offsetof(GameModeFlame_ShouldStartMatchBP, ReturnValue) == 0x000000, "Member 'GameModeFlame_ShouldStartMatchBP::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetInactivePlayerStates
// 0x0010 (0x0010 - 0x0000)
struct GameModeFlame_GetInactivePlayerStates final
{
public:
	TArray<class APlayerState*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_GetInactivePlayerStates) == 0x000008, "Wrong alignment on GameModeFlame_GetInactivePlayerStates");
static_assert(sizeof(GameModeFlame_GetInactivePlayerStates) == 0x000010, "Wrong size on GameModeFlame_GetInactivePlayerStates");
static_assert(offsetof(GameModeFlame_GetInactivePlayerStates, ReturnValue) == 0x000000, "Member 'GameModeFlame_GetInactivePlayerStates::ReturnValue' has a wrong offset!");

// Function Flame.GameModeFlame.GetMaxPlayers
// 0x0004 (0x0004 - 0x0000)
struct GameModeFlame_GetMaxPlayers final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameModeFlame_GetMaxPlayers) == 0x000004, "Wrong alignment on GameModeFlame_GetMaxPlayers");
static_assert(sizeof(GameModeFlame_GetMaxPlayers) == 0x000004, "Wrong size on GameModeFlame_GetMaxPlayers");
static_assert(offsetof(GameModeFlame_GetMaxPlayers, ReturnValue) == 0x000000, "Member 'GameModeFlame_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Flame.GamepadActionWidget.SetActionName
// 0x0018 (0x0018 - 0x0000)
struct GamepadActionWidget_SetActionName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GamepadActionWidget_SetActionName) == 0x000008, "Wrong alignment on GamepadActionWidget_SetActionName");
static_assert(sizeof(GamepadActionWidget_SetActionName) == 0x000018, "Wrong size on GamepadActionWidget_SetActionName");
static_assert(offsetof(GamepadActionWidget_SetActionName, InText) == 0x000000, "Member 'GamepadActionWidget_SetActionName::InText' has a wrong offset!");

// Function Flame.GameStateFlame.FindInactivePlayerInfo
// 0x0070 (0x0070 - 0x0000)
struct GameStateFlame_FindInactivePlayerInfo final
{
public:
	struct FUniqueNetIdRepl                       InNetId;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInactivePlayerInfo                    ReturnValue;                                       // 0x0028(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateFlame_FindInactivePlayerInfo) == 0x000008, "Wrong alignment on GameStateFlame_FindInactivePlayerInfo");
static_assert(sizeof(GameStateFlame_FindInactivePlayerInfo) == 0x000070, "Wrong size on GameStateFlame_FindInactivePlayerInfo");
static_assert(offsetof(GameStateFlame_FindInactivePlayerInfo, InNetId) == 0x000000, "Member 'GameStateFlame_FindInactivePlayerInfo::InNetId' has a wrong offset!");
static_assert(offsetof(GameStateFlame_FindInactivePlayerInfo, ReturnValue) == 0x000028, "Member 'GameStateFlame_FindInactivePlayerInfo::ReturnValue' has a wrong offset!");

// Function Flame.GameStateFlame.GetCloudMatchSettingsInfo
// 0x0028 (0x0028 - 0x0000)
struct GameStateFlame_GetCloudMatchSettingsInfo final
{
public:
	struct FCloudMatchSettingsInfo                ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateFlame_GetCloudMatchSettingsInfo) == 0x000008, "Wrong alignment on GameStateFlame_GetCloudMatchSettingsInfo");
static_assert(sizeof(GameStateFlame_GetCloudMatchSettingsInfo) == 0x000028, "Wrong size on GameStateFlame_GetCloudMatchSettingsInfo");
static_assert(offsetof(GameStateFlame_GetCloudMatchSettingsInfo, ReturnValue) == 0x000000, "Member 'GameStateFlame_GetCloudMatchSettingsInfo::ReturnValue' has a wrong offset!");

// Function Flame.GameStateFlame.GetPlatformFromPlayerId
// 0x0008 (0x0008 - 0x0000)
struct GameStateFlame_GetPlatformFromPlayerId final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlamePlatform                                ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStateFlame_GetPlatformFromPlayerId) == 0x000004, "Wrong alignment on GameStateFlame_GetPlatformFromPlayerId");
static_assert(sizeof(GameStateFlame_GetPlatformFromPlayerId) == 0x000008, "Wrong size on GameStateFlame_GetPlatformFromPlayerId");
static_assert(offsetof(GameStateFlame_GetPlatformFromPlayerId, PlayerId) == 0x000000, "Member 'GameStateFlame_GetPlatformFromPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(GameStateFlame_GetPlatformFromPlayerId, bIsActive) == 0x000004, "Member 'GameStateFlame_GetPlatformFromPlayerId::bIsActive' has a wrong offset!");
static_assert(offsetof(GameStateFlame_GetPlatformFromPlayerId, ReturnValue) == 0x000005, "Member 'GameStateFlame_GetPlatformFromPlayerId::ReturnValue' has a wrong offset!");

// Function Flame.GameStateFlame.GetRemainingStartAfterSeconds
// 0x0004 (0x0004 - 0x0000)
struct GameStateFlame_GetRemainingStartAfterSeconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateFlame_GetRemainingStartAfterSeconds) == 0x000004, "Wrong alignment on GameStateFlame_GetRemainingStartAfterSeconds");
static_assert(sizeof(GameStateFlame_GetRemainingStartAfterSeconds) == 0x000004, "Wrong size on GameStateFlame_GetRemainingStartAfterSeconds");
static_assert(offsetof(GameStateFlame_GetRemainingStartAfterSeconds, ReturnValue) == 0x000000, "Member 'GameStateFlame_GetRemainingStartAfterSeconds::ReturnValue' has a wrong offset!");

// Function Flame.GameStateFlame.GetUniqueNetIdFromPlayerId
// 0x0030 (0x0030 - 0x0000)
struct GameStateFlame_GetUniqueNetIdFromPlayerId final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStateFlame_GetUniqueNetIdFromPlayerId) == 0x000008, "Wrong alignment on GameStateFlame_GetUniqueNetIdFromPlayerId");
static_assert(sizeof(GameStateFlame_GetUniqueNetIdFromPlayerId) == 0x000030, "Wrong size on GameStateFlame_GetUniqueNetIdFromPlayerId");
static_assert(offsetof(GameStateFlame_GetUniqueNetIdFromPlayerId, PlayerId) == 0x000000, "Member 'GameStateFlame_GetUniqueNetIdFromPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(GameStateFlame_GetUniqueNetIdFromPlayerId, bIsActive) == 0x000004, "Member 'GameStateFlame_GetUniqueNetIdFromPlayerId::bIsActive' has a wrong offset!");
static_assert(offsetof(GameStateFlame_GetUniqueNetIdFromPlayerId, ReturnValue) == 0x000008, "Member 'GameStateFlame_GetUniqueNetIdFromPlayerId::ReturnValue' has a wrong offset!");

// Function Flame.ProfilePictureCache.GetOrQueryProfilePicture
// 0x0030 (0x0030 - 0x0000)
struct ProfilePictureCache_GetOrQueryProfilePicture final
{
public:
	struct FUniqueNetIdRepl                       NetId;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureCache_GetOrQueryProfilePicture) == 0x000008, "Wrong alignment on ProfilePictureCache_GetOrQueryProfilePicture");
static_assert(sizeof(ProfilePictureCache_GetOrQueryProfilePicture) == 0x000030, "Wrong size on ProfilePictureCache_GetOrQueryProfilePicture");
static_assert(offsetof(ProfilePictureCache_GetOrQueryProfilePicture, NetId) == 0x000000, "Member 'ProfilePictureCache_GetOrQueryProfilePicture::NetId' has a wrong offset!");
static_assert(offsetof(ProfilePictureCache_GetOrQueryProfilePicture, ReturnValue) == 0x000028, "Member 'ProfilePictureCache_GetOrQueryProfilePicture::ReturnValue' has a wrong offset!");

// Function Flame.ProfilePictureCache.OnQueryCompleted
// 0x0030 (0x0030 - 0x0000)
struct ProfilePictureCache_OnQueryCompleted final
{
public:
	struct FUniqueNetIdRepl                       PlayerNetId;                                       // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      ProfilePicture;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureCache_OnQueryCompleted) == 0x000008, "Wrong alignment on ProfilePictureCache_OnQueryCompleted");
static_assert(sizeof(ProfilePictureCache_OnQueryCompleted) == 0x000030, "Wrong size on ProfilePictureCache_OnQueryCompleted");
static_assert(offsetof(ProfilePictureCache_OnQueryCompleted, PlayerNetId) == 0x000000, "Member 'ProfilePictureCache_OnQueryCompleted::PlayerNetId' has a wrong offset!");
static_assert(offsetof(ProfilePictureCache_OnQueryCompleted, ProfilePicture) == 0x000028, "Member 'ProfilePictureCache_OnQueryCompleted::ProfilePicture' has a wrong offset!");

// DelegateFunction Flame.GameStoreProducts.GameStoreProductsStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature final
{
public:
	EGameStoreProductsState                       OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStoreProductsState                       NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature");
static_assert(sizeof(GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature");
static_assert(offsetof(GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'GameStoreProducts_GameStoreProductsStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.GameStoreProducts.OnPlatformStoreOffersChanges
// 0x0002 (0x0002 - 0x0000)
struct GameStoreProducts_OnPlatformStoreOffersChanges final
{
public:
	EPlatformStoreOffersState                     OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformStoreOffersState                     NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_OnPlatformStoreOffersChanges) == 0x000001, "Wrong alignment on GameStoreProducts_OnPlatformStoreOffersChanges");
static_assert(sizeof(GameStoreProducts_OnPlatformStoreOffersChanges) == 0x000002, "Wrong size on GameStoreProducts_OnPlatformStoreOffersChanges");
static_assert(offsetof(GameStoreProducts_OnPlatformStoreOffersChanges, OldState) == 0x000000, "Member 'GameStoreProducts_OnPlatformStoreOffersChanges::OldState' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_OnPlatformStoreOffersChanges, NewState) == 0x000001, "Member 'GameStoreProducts_OnPlatformStoreOffersChanges::NewState' has a wrong offset!");

// Function Flame.GameStoreProducts.StartDownloadOfProducts
// 0x0001 (0x0001 - 0x0000)
struct GameStoreProducts_StartDownloadOfProducts final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_StartDownloadOfProducts) == 0x000001, "Wrong alignment on GameStoreProducts_StartDownloadOfProducts");
static_assert(sizeof(GameStoreProducts_StartDownloadOfProducts) == 0x000001, "Wrong size on GameStoreProducts_StartDownloadOfProducts");
static_assert(offsetof(GameStoreProducts_StartDownloadOfProducts, ReturnValue) == 0x000000, "Member 'GameStoreProducts_StartDownloadOfProducts::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreProducts.GetGameStoreProductInfo
// 0x0068 (0x0068 - 0x0000)
struct GameStoreProducts_GetGameStoreProductInfo final
{
public:
	struct FGameStoreProductId                    ProductId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ProductFound;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductInfo                  ReturnValue;                                       // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_GetGameStoreProductInfo) == 0x000008, "Wrong alignment on GameStoreProducts_GetGameStoreProductInfo");
static_assert(sizeof(GameStoreProducts_GetGameStoreProductInfo) == 0x000068, "Wrong size on GameStoreProducts_GetGameStoreProductInfo");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfo, ProductId) == 0x000000, "Member 'GameStoreProducts_GetGameStoreProductInfo::ProductId' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfo, ProductFound) == 0x000010, "Member 'GameStoreProducts_GetGameStoreProductInfo::ProductFound' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfo, ReturnValue) == 0x000018, "Member 'GameStoreProducts_GetGameStoreProductInfo::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreProducts.GetGameStoreProductInfoById
// 0x0068 (0x0068 - 0x0000)
struct GameStoreProducts_GetGameStoreProductInfoById final
{
public:
	class FString                                 ProductId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ProductFound;                                      // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductInfo                  ReturnValue;                                       // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_GetGameStoreProductInfoById) == 0x000008, "Wrong alignment on GameStoreProducts_GetGameStoreProductInfoById");
static_assert(sizeof(GameStoreProducts_GetGameStoreProductInfoById) == 0x000068, "Wrong size on GameStoreProducts_GetGameStoreProductInfoById");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfoById, ProductId) == 0x000000, "Member 'GameStoreProducts_GetGameStoreProductInfoById::ProductId' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfoById, ProductFound) == 0x000010, "Member 'GameStoreProducts_GetGameStoreProductInfoById::ProductFound' has a wrong offset!");
static_assert(offsetof(GameStoreProducts_GetGameStoreProductInfoById, ReturnValue) == 0x000018, "Member 'GameStoreProducts_GetGameStoreProductInfoById::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreProducts.GetProductList
// 0x0010 (0x0010 - 0x0000)
struct GameStoreProducts_GetProductList final
{
public:
	struct FGameStoreProductInfoList              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_GetProductList) == 0x000008, "Wrong alignment on GameStoreProducts_GetProductList");
static_assert(sizeof(GameStoreProducts_GetProductList) == 0x000010, "Wrong size on GameStoreProducts_GetProductList");
static_assert(offsetof(GameStoreProducts_GetProductList, ReturnValue) == 0x000000, "Member 'GameStoreProducts_GetProductList::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreProducts.GetProductsManagerState
// 0x0001 (0x0001 - 0x0000)
struct GameStoreProducts_GetProductsManagerState final
{
public:
	EGameStoreProductsState                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreProducts_GetProductsManagerState) == 0x000001, "Wrong alignment on GameStoreProducts_GetProductsManagerState");
static_assert(sizeof(GameStoreProducts_GetProductsManagerState) == 0x000001, "Wrong size on GameStoreProducts_GetProductsManagerState");
static_assert(offsetof(GameStoreProducts_GetProductsManagerState, ReturnValue) == 0x000000, "Member 'GameStoreProducts_GetProductsManagerState::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GameStorePurchases.GameStorePurchasesStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature final
{
public:
	EGameStorePurchasesState                      OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStorePurchasesState                      NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature");
static_assert(sizeof(GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature) == 0x000002, "Wrong size on GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature");
static_assert(offsetof(GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'GameStorePurchases_GameStorePurchasesStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.GameStorePurchases.StartDownloadOfPurchaseList
// 0x0001 (0x0001 - 0x0000)
struct GameStorePurchases_StartDownloadOfPurchaseList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStorePurchases_StartDownloadOfPurchaseList) == 0x000001, "Wrong alignment on GameStorePurchases_StartDownloadOfPurchaseList");
static_assert(sizeof(GameStorePurchases_StartDownloadOfPurchaseList) == 0x000001, "Wrong size on GameStorePurchases_StartDownloadOfPurchaseList");
static_assert(offsetof(GameStorePurchases_StartDownloadOfPurchaseList, ReturnValue) == 0x000000, "Member 'GameStorePurchases_StartDownloadOfPurchaseList::ReturnValue' has a wrong offset!");

// Function Flame.GameStorePurchases.FindPurchasedItem
// 0x0030 (0x0030 - 0x0000)
struct GameStorePurchases_FindPurchasedItem final
{
public:
	struct FGameStoreProductId                    ProductId;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ItemFound;                                         // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStorePurchaseItemInfo             ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStorePurchases_FindPurchasedItem) == 0x000008, "Wrong alignment on GameStorePurchases_FindPurchasedItem");
static_assert(sizeof(GameStorePurchases_FindPurchasedItem) == 0x000030, "Wrong size on GameStorePurchases_FindPurchasedItem");
static_assert(offsetof(GameStorePurchases_FindPurchasedItem, ProductId) == 0x000000, "Member 'GameStorePurchases_FindPurchasedItem::ProductId' has a wrong offset!");
static_assert(offsetof(GameStorePurchases_FindPurchasedItem, ItemFound) == 0x000010, "Member 'GameStorePurchases_FindPurchasedItem::ItemFound' has a wrong offset!");
static_assert(offsetof(GameStorePurchases_FindPurchasedItem, ReturnValue) == 0x000018, "Member 'GameStorePurchases_FindPurchasedItem::ReturnValue' has a wrong offset!");

// Function Flame.GameStorePurchases.GetGameStoreData
// 0x0010 (0x0010 - 0x0000)
struct GameStorePurchases_GetGameStoreData final
{
public:
	struct FGameStorePurchasesInfo                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStorePurchases_GetGameStoreData) == 0x000008, "Wrong alignment on GameStorePurchases_GetGameStoreData");
static_assert(sizeof(GameStorePurchases_GetGameStoreData) == 0x000010, "Wrong size on GameStorePurchases_GetGameStoreData");
static_assert(offsetof(GameStorePurchases_GetGameStoreData, ReturnValue) == 0x000000, "Member 'GameStorePurchases_GetGameStoreData::ReturnValue' has a wrong offset!");

// Function Flame.GameStorePurchases.GetPurchasesManagerState
// 0x0001 (0x0001 - 0x0000)
struct GameStorePurchases_GetPurchasesManagerState final
{
public:
	EGameStorePurchasesState                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStorePurchases_GetPurchasesManagerState) == 0x000001, "Wrong alignment on GameStorePurchases_GetPurchasesManagerState");
static_assert(sizeof(GameStorePurchases_GetPurchasesManagerState) == 0x000001, "Wrong size on GameStorePurchases_GetPurchasesManagerState");
static_assert(offsetof(GameStorePurchases_GetPurchasesManagerState, ReturnValue) == 0x000000, "Member 'GameStorePurchases_GetPurchasesManagerState::ReturnValue' has a wrong offset!");

// Function Flame.ShelterUIFunctions.IsCraftable
// 0x0018 (0x0018 - 0x0000)
struct ShelterUIFunctions_IsCraftable final
{
public:
	TSubclassOf<class AItem>                      InItemClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class APlayerController*                InPlayerController;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckQueue;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterUIFunctions_IsCraftable) == 0x000008, "Wrong alignment on ShelterUIFunctions_IsCraftable");
static_assert(sizeof(ShelterUIFunctions_IsCraftable) == 0x000018, "Wrong size on ShelterUIFunctions_IsCraftable");
static_assert(offsetof(ShelterUIFunctions_IsCraftable, InItemClass) == 0x000000, "Member 'ShelterUIFunctions_IsCraftable::InItemClass' has a wrong offset!");
static_assert(offsetof(ShelterUIFunctions_IsCraftable, InPlayerController) == 0x000008, "Member 'ShelterUIFunctions_IsCraftable::InPlayerController' has a wrong offset!");
static_assert(offsetof(ShelterUIFunctions_IsCraftable, bCheckQueue) == 0x000010, "Member 'ShelterUIFunctions_IsCraftable::bCheckQueue' has a wrong offset!");
static_assert(offsetof(ShelterUIFunctions_IsCraftable, ReturnValue) == 0x000011, "Member 'ShelterUIFunctions_IsCraftable::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.GetGameStoreInvalidPurchaseRequestId
// 0x0004 (0x0004 - 0x0000)
struct GameStoreSystem_GetGameStoreInvalidPurchaseRequestId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_GetGameStoreInvalidPurchaseRequestId) == 0x000004, "Wrong alignment on GameStoreSystem_GetGameStoreInvalidPurchaseRequestId");
static_assert(sizeof(GameStoreSystem_GetGameStoreInvalidPurchaseRequestId) == 0x000004, "Wrong size on GameStoreSystem_GetGameStoreInvalidPurchaseRequestId");
static_assert(offsetof(GameStoreSystem_GetGameStoreInvalidPurchaseRequestId, ReturnValue) == 0x000000, "Member 'GameStoreSystem_GetGameStoreInvalidPurchaseRequestId::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.GetGameStoreOffersManager
// 0x0010 (0x0010 - 0x0000)
struct GameStoreSystem_GetGameStoreOffersManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStoreOffers*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_GetGameStoreOffersManager) == 0x000008, "Wrong alignment on GameStoreSystem_GetGameStoreOffersManager");
static_assert(sizeof(GameStoreSystem_GetGameStoreOffersManager) == 0x000010, "Wrong size on GameStoreSystem_GetGameStoreOffersManager");
static_assert(offsetof(GameStoreSystem_GetGameStoreOffersManager, WorldContextObject) == 0x000000, "Member 'GameStoreSystem_GetGameStoreOffersManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_GetGameStoreOffersManager, ReturnValue) == 0x000008, "Member 'GameStoreSystem_GetGameStoreOffersManager::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.GetGameStoreProductsManager
// 0x0010 (0x0010 - 0x0000)
struct GameStoreSystem_GetGameStoreProductsManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStoreProducts*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_GetGameStoreProductsManager) == 0x000008, "Wrong alignment on GameStoreSystem_GetGameStoreProductsManager");
static_assert(sizeof(GameStoreSystem_GetGameStoreProductsManager) == 0x000010, "Wrong size on GameStoreSystem_GetGameStoreProductsManager");
static_assert(offsetof(GameStoreSystem_GetGameStoreProductsManager, WorldContextObject) == 0x000000, "Member 'GameStoreSystem_GetGameStoreProductsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_GetGameStoreProductsManager, ReturnValue) == 0x000008, "Member 'GameStoreSystem_GetGameStoreProductsManager::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.GetGameStorePurchasesManager
// 0x0010 (0x0010 - 0x0000)
struct GameStoreSystem_GetGameStorePurchasesManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStorePurchases*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_GetGameStorePurchasesManager) == 0x000008, "Wrong alignment on GameStoreSystem_GetGameStorePurchasesManager");
static_assert(sizeof(GameStoreSystem_GetGameStorePurchasesManager) == 0x000010, "Wrong size on GameStoreSystem_GetGameStorePurchasesManager");
static_assert(offsetof(GameStoreSystem_GetGameStorePurchasesManager, WorldContextObject) == 0x000000, "Member 'GameStoreSystem_GetGameStorePurchasesManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_GetGameStorePurchasesManager, ReturnValue) == 0x000008, "Member 'GameStoreSystem_GetGameStorePurchasesManager::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.GetGameStoreSellingPointsManager
// 0x0010 (0x0010 - 0x0000)
struct GameStoreSystem_GetGameStoreSellingPointsManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameStoreSellingPoints*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_GetGameStoreSellingPointsManager) == 0x000008, "Wrong alignment on GameStoreSystem_GetGameStoreSellingPointsManager");
static_assert(sizeof(GameStoreSystem_GetGameStoreSellingPointsManager) == 0x000010, "Wrong size on GameStoreSystem_GetGameStoreSellingPointsManager");
static_assert(offsetof(GameStoreSystem_GetGameStoreSellingPointsManager, WorldContextObject) == 0x000000, "Member 'GameStoreSystem_GetGameStoreSellingPointsManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_GetGameStoreSellingPointsManager, ReturnValue) == 0x000008, "Member 'GameStoreSystem_GetGameStoreSellingPointsManager::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GameStoreSystem.OnGameStorePurchase__DelegateSignature
// 0x00E0 (0x00E0 - 0x0000)
struct GameStoreSystem_OnGameStorePurchase__DelegateSignature final
{
public:
	EGameStorePurchaseType                        PurchaseType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseRequestId;                                 // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductId                    RequestedProductId;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudRequestResult                    Result;                                            // 0x0048(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameStorePurchaseResult               PurchaseResult;                                    // 0x00A0(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PurchaseListRefreshed;                             // 0x00D8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStoreSystem_OnGameStorePurchase__DelegateSignature) == 0x000008, "Wrong alignment on GameStoreSystem_OnGameStorePurchase__DelegateSignature");
static_assert(sizeof(GameStoreSystem_OnGameStorePurchase__DelegateSignature) == 0x0000E0, "Wrong size on GameStoreSystem_OnGameStorePurchase__DelegateSignature");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, PurchaseType) == 0x000000, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::PurchaseType' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, InUserId) == 0x000008, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::InUserId' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, PurchaseRequestId) == 0x000030, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::PurchaseRequestId' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, RequestedProductId) == 0x000038, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::RequestedProductId' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, Result) == 0x000048, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::Result' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, PurchaseResult) == 0x0000A0, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::PurchaseResult' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnGameStorePurchase__DelegateSignature, PurchaseListRefreshed) == 0x0000D8, "Member 'GameStoreSystem_OnGameStorePurchase__DelegateSignature::PurchaseListRefreshed' has a wrong offset!");

// Function Flame.GameStoreSystem.OnPurchaseSignaledToCloud
// 0x0090 (0x0090 - 0x0000)
struct GameStoreSystem_OnPurchaseSignaledToCloud final
{
public:
	struct FCloudRequestResult                    Result;                                            // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameStorePurchaseResult               PurchaseResult;                                    // 0x0058(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_OnPurchaseSignaledToCloud) == 0x000008, "Wrong alignment on GameStoreSystem_OnPurchaseSignaledToCloud");
static_assert(sizeof(GameStoreSystem_OnPurchaseSignaledToCloud) == 0x000090, "Wrong size on GameStoreSystem_OnPurchaseSignaledToCloud");
static_assert(offsetof(GameStoreSystem_OnPurchaseSignaledToCloud, Result) == 0x000000, "Member 'GameStoreSystem_OnPurchaseSignaledToCloud::Result' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_OnPurchaseSignaledToCloud, PurchaseResult) == 0x000058, "Member 'GameStoreSystem_OnPurchaseSignaledToCloud::PurchaseResult' has a wrong offset!");

// Function Flame.GameStoreSystem.RefreshStoreRequest
// 0x0030 (0x0030 - 0x0000)
struct GameStoreSystem_RefreshStoreRequest final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameStoreTransactionSource                   PurchaseSource;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameStoreSystem_RefreshStoreRequest) == 0x000008, "Wrong alignment on GameStoreSystem_RefreshStoreRequest");
static_assert(sizeof(GameStoreSystem_RefreshStoreRequest) == 0x000030, "Wrong size on GameStoreSystem_RefreshStoreRequest");
static_assert(offsetof(GameStoreSystem_RefreshStoreRequest, InUserId) == 0x000000, "Member 'GameStoreSystem_RefreshStoreRequest::InUserId' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_RefreshStoreRequest, PurchaseSource) == 0x000028, "Member 'GameStoreSystem_RefreshStoreRequest::PurchaseSource' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_RefreshStoreRequest, ReturnValue) == 0x00002C, "Member 'GameStoreSystem_RefreshStoreRequest::ReturnValue' has a wrong offset!");

// Function Flame.GameStoreSystem.StartPurchaseRequest
// 0x0098 (0x0098 - 0x0000)
struct GameStoreSystem_StartPurchaseRequest final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameStoreProductInfo                  Product;                                           // 0x0028(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EGameStoreTransactionSource                   PurchaseSource;                                    // 0x0078(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MicrotransactionDescription;                       // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameStoreSystem_StartPurchaseRequest) == 0x000008, "Wrong alignment on GameStoreSystem_StartPurchaseRequest");
static_assert(sizeof(GameStoreSystem_StartPurchaseRequest) == 0x000098, "Wrong size on GameStoreSystem_StartPurchaseRequest");
static_assert(offsetof(GameStoreSystem_StartPurchaseRequest, InUserId) == 0x000000, "Member 'GameStoreSystem_StartPurchaseRequest::InUserId' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_StartPurchaseRequest, Product) == 0x000028, "Member 'GameStoreSystem_StartPurchaseRequest::Product' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_StartPurchaseRequest, PurchaseSource) == 0x000078, "Member 'GameStoreSystem_StartPurchaseRequest::PurchaseSource' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_StartPurchaseRequest, MicrotransactionDescription) == 0x000080, "Member 'GameStoreSystem_StartPurchaseRequest::MicrotransactionDescription' has a wrong offset!");
static_assert(offsetof(GameStoreSystem_StartPurchaseRequest, ReturnValue) == 0x000090, "Member 'GameStoreSystem_StartPurchaseRequest::ReturnValue' has a wrong offset!");

// Function Flame.TemporaryToolComponent.OnRep_PostChangeTool
// 0x0008 (0x0008 - 0x0000)
struct TemporaryToolComponent_OnRep_PostChangeTool final
{
public:
	class ATool*                                  LastTool;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporaryToolComponent_OnRep_PostChangeTool) == 0x000008, "Wrong alignment on TemporaryToolComponent_OnRep_PostChangeTool");
static_assert(sizeof(TemporaryToolComponent_OnRep_PostChangeTool) == 0x000008, "Wrong size on TemporaryToolComponent_OnRep_PostChangeTool");
static_assert(offsetof(TemporaryToolComponent_OnRep_PostChangeTool, LastTool) == 0x000000, "Member 'TemporaryToolComponent_OnRep_PostChangeTool::LastTool' has a wrong offset!");

// Function Flame.TemporaryToolComponent.RequestToolEquip
// 0x0008 (0x0008 - 0x0000)
struct TemporaryToolComponent_RequestToolEquip final
{
public:
	const class ATool*                            ToolToEquip;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporaryToolComponent_RequestToolEquip) == 0x000008, "Wrong alignment on TemporaryToolComponent_RequestToolEquip");
static_assert(sizeof(TemporaryToolComponent_RequestToolEquip) == 0x000008, "Wrong size on TemporaryToolComponent_RequestToolEquip");
static_assert(offsetof(TemporaryToolComponent_RequestToolEquip, ToolToEquip) == 0x000000, "Member 'TemporaryToolComponent_RequestToolEquip::ToolToEquip' has a wrong offset!");

// Function Flame.TemporaryToolComponent.ServerAskForEquipTool
// 0x0008 (0x0008 - 0x0000)
struct TemporaryToolComponent_ServerAskForEquipTool final
{
public:
	class ATool*                                  ToolToEquip;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporaryToolComponent_ServerAskForEquipTool) == 0x000008, "Wrong alignment on TemporaryToolComponent_ServerAskForEquipTool");
static_assert(sizeof(TemporaryToolComponent_ServerAskForEquipTool) == 0x000008, "Wrong size on TemporaryToolComponent_ServerAskForEquipTool");
static_assert(offsetof(TemporaryToolComponent_ServerAskForEquipTool, ToolToEquip) == 0x000000, "Member 'TemporaryToolComponent_ServerAskForEquipTool::ToolToEquip' has a wrong offset!");

// Function Flame.TemporaryToolComponent.GetCurrentTool
// 0x0008 (0x0008 - 0x0000)
struct TemporaryToolComponent_GetCurrentTool final
{
public:
	class ATool*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemporaryToolComponent_GetCurrentTool) == 0x000008, "Wrong alignment on TemporaryToolComponent_GetCurrentTool");
static_assert(sizeof(TemporaryToolComponent_GetCurrentTool) == 0x000008, "Wrong size on TemporaryToolComponent_GetCurrentTool");
static_assert(offsetof(TemporaryToolComponent_GetCurrentTool, ReturnValue) == 0x000000, "Member 'TemporaryToolComponent_GetCurrentTool::ReturnValue' has a wrong offset!");

// Function Flame.GestureSegment.SetGestureSlotClass
// 0x0008 (0x0008 - 0x0000)
struct GestureSegment_SetGestureSlotClass final
{
public:
	TSubclassOf<class ACustomizationSlotGesture>  InClass;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GestureSegment_SetGestureSlotClass) == 0x000008, "Wrong alignment on GestureSegment_SetGestureSlotClass");
static_assert(sizeof(GestureSegment_SetGestureSlotClass) == 0x000008, "Wrong size on GestureSegment_SetGestureSlotClass");
static_assert(offsetof(GestureSegment_SetGestureSlotClass, InClass) == 0x000000, "Member 'GestureSegment_SetGestureSlotClass::InClass' has a wrong offset!");

// Function Flame.GestureSegment.GetAnimationMontage
// 0x0008 (0x0008 - 0x0000)
struct GestureSegment_GetAnimationMontage final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GestureSegment_GetAnimationMontage) == 0x000008, "Wrong alignment on GestureSegment_GetAnimationMontage");
static_assert(sizeof(GestureSegment_GetAnimationMontage) == 0x000008, "Wrong size on GestureSegment_GetAnimationMontage");
static_assert(offsetof(GestureSegment_GetAnimationMontage, ReturnValue) == 0x000000, "Member 'GestureSegment_GetAnimationMontage::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.NewEvent
// 0x0060 (0x0060 - 0x0000)
struct SpectatorManager_NewEvent final
{
public:
	ESpectateEvent                                Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 SubjectMind;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Parameter;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Fallback;                                          // 0x0020(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0xF];                                       // 0x0051(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatorManager_NewEvent) == 0x000010, "Wrong alignment on SpectatorManager_NewEvent");
static_assert(sizeof(SpectatorManager_NewEvent) == 0x000060, "Wrong size on SpectatorManager_NewEvent");
static_assert(offsetof(SpectatorManager_NewEvent, Event) == 0x000000, "Member 'SpectatorManager_NewEvent::Event' has a wrong offset!");
static_assert(offsetof(SpectatorManager_NewEvent, SubjectMind) == 0x000008, "Member 'SpectatorManager_NewEvent::SubjectMind' has a wrong offset!");
static_assert(offsetof(SpectatorManager_NewEvent, Parameter) == 0x000010, "Member 'SpectatorManager_NewEvent::Parameter' has a wrong offset!");
static_assert(offsetof(SpectatorManager_NewEvent, Fallback) == 0x000020, "Member 'SpectatorManager_NewEvent::Fallback' has a wrong offset!");
static_assert(offsetof(SpectatorManager_NewEvent, ReturnValue) == 0x000050, "Member 'SpectatorManager_NewEvent::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.OnPlayerDied
// 0x0010 (0x0010 - 0x0000)
struct SpectatorManager_OnPlayerDied final
{
public:
	class AHumanCharacter*                        DeceasedBody;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        KillerBody;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_OnPlayerDied) == 0x000008, "Wrong alignment on SpectatorManager_OnPlayerDied");
static_assert(sizeof(SpectatorManager_OnPlayerDied) == 0x000010, "Wrong size on SpectatorManager_OnPlayerDied");
static_assert(offsetof(SpectatorManager_OnPlayerDied, DeceasedBody) == 0x000000, "Member 'SpectatorManager_OnPlayerDied::DeceasedBody' has a wrong offset!");
static_assert(offsetof(SpectatorManager_OnPlayerDied, KillerBody) == 0x000008, "Member 'SpectatorManager_OnPlayerDied::KillerBody' has a wrong offset!");

// Function Flame.SpectatorManager.OnPlayerLeft
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_OnPlayerLeft final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_OnPlayerLeft) == 0x000008, "Wrong alignment on SpectatorManager_OnPlayerLeft");
static_assert(sizeof(SpectatorManager_OnPlayerLeft) == 0x000008, "Wrong size on SpectatorManager_OnPlayerLeft");
static_assert(offsetof(SpectatorManager_OnPlayerLeft, Controller) == 0x000000, "Member 'SpectatorManager_OnPlayerLeft::Controller' has a wrong offset!");

// Function Flame.SpectatorManager.OnPlayerRespawned
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_OnPlayerRespawned final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_OnPlayerRespawned) == 0x000008, "Wrong alignment on SpectatorManager_OnPlayerRespawned");
static_assert(sizeof(SpectatorManager_OnPlayerRespawned) == 0x000008, "Wrong size on SpectatorManager_OnPlayerRespawned");
static_assert(offsetof(SpectatorManager_OnPlayerRespawned, Controller) == 0x000000, "Member 'SpectatorManager_OnPlayerRespawned::Controller' has a wrong offset!");

// Function Flame.SpectatorManager.OnUnableToSpectate
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_OnUnableToSpectate final
{
public:
	class AHumanPlayerController*                 SubjectMind;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_OnUnableToSpectate) == 0x000008, "Wrong alignment on SpectatorManager_OnUnableToSpectate");
static_assert(sizeof(SpectatorManager_OnUnableToSpectate) == 0x000008, "Wrong size on SpectatorManager_OnUnableToSpectate");
static_assert(offsetof(SpectatorManager_OnUnableToSpectate, SubjectMind) == 0x000000, "Member 'SpectatorManager_OnUnableToSpectate::SubjectMind' has a wrong offset!");

// Function Flame.SpectatorManager.ProcessSpectatorEvent
// 0x0040 (0x0040 - 0x0000)
struct SpectatorManager_ProcessSpectatorEvent final
{
public:
	ESpectateEvent                                Event;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Parameter;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Fallback;                                          // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_ProcessSpectatorEvent) == 0x000010, "Wrong alignment on SpectatorManager_ProcessSpectatorEvent");
static_assert(sizeof(SpectatorManager_ProcessSpectatorEvent) == 0x000040, "Wrong size on SpectatorManager_ProcessSpectatorEvent");
static_assert(offsetof(SpectatorManager_ProcessSpectatorEvent, Event) == 0x000000, "Member 'SpectatorManager_ProcessSpectatorEvent::Event' has a wrong offset!");
static_assert(offsetof(SpectatorManager_ProcessSpectatorEvent, Parameter) == 0x000008, "Member 'SpectatorManager_ProcessSpectatorEvent::Parameter' has a wrong offset!");
static_assert(offsetof(SpectatorManager_ProcessSpectatorEvent, Fallback) == 0x000010, "Member 'SpectatorManager_ProcessSpectatorEvent::Fallback' has a wrong offset!");

// Function Flame.SpectatorManager.RegisterPlayer
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_RegisterPlayer final
{
public:
	class AHumanCharacter*                        PlayerMind;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_RegisterPlayer) == 0x000008, "Wrong alignment on SpectatorManager_RegisterPlayer");
static_assert(sizeof(SpectatorManager_RegisterPlayer) == 0x000008, "Wrong size on SpectatorManager_RegisterPlayer");
static_assert(offsetof(SpectatorManager_RegisterPlayer, PlayerMind) == 0x000000, "Member 'SpectatorManager_RegisterPlayer::PlayerMind' has a wrong offset!");

// Function Flame.SpectatorManager.RegisterPlayerController
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_RegisterPlayerController final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_RegisterPlayerController) == 0x000008, "Wrong alignment on SpectatorManager_RegisterPlayerController");
static_assert(sizeof(SpectatorManager_RegisterPlayerController) == 0x000008, "Wrong size on SpectatorManager_RegisterPlayerController");
static_assert(offsetof(SpectatorManager_RegisterPlayerController, Controller) == 0x000000, "Member 'SpectatorManager_RegisterPlayerController::Controller' has a wrong offset!");

// Function Flame.SpectatorManager.ReplaceTargets
// 0x00D0 (0x00D0 - 0x0000)
struct SpectatorManager_ReplaceTargets final
{
public:
	class AHumanCharacter*                        OldHumanCharacter;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OldActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OldTransform;                                      // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSpectatorState                        NewTarget;                                         // 0x0040(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_ReplaceTargets) == 0x000010, "Wrong alignment on SpectatorManager_ReplaceTargets");
static_assert(sizeof(SpectatorManager_ReplaceTargets) == 0x0000D0, "Wrong size on SpectatorManager_ReplaceTargets");
static_assert(offsetof(SpectatorManager_ReplaceTargets, OldHumanCharacter) == 0x000000, "Member 'SpectatorManager_ReplaceTargets::OldHumanCharacter' has a wrong offset!");
static_assert(offsetof(SpectatorManager_ReplaceTargets, OldActor) == 0x000008, "Member 'SpectatorManager_ReplaceTargets::OldActor' has a wrong offset!");
static_assert(offsetof(SpectatorManager_ReplaceTargets, OldTransform) == 0x000010, "Member 'SpectatorManager_ReplaceTargets::OldTransform' has a wrong offset!");
static_assert(offsetof(SpectatorManager_ReplaceTargets, NewTarget) == 0x000040, "Member 'SpectatorManager_ReplaceTargets::NewTarget' has a wrong offset!");

// Function Flame.SpectatorManager.ReplaceTargetsWithRecommendation
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_ReplaceTargetsWithRecommendation final
{
public:
	class AActor*                                 Param;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_ReplaceTargetsWithRecommendation) == 0x000008, "Wrong alignment on SpectatorManager_ReplaceTargetsWithRecommendation");
static_assert(sizeof(SpectatorManager_ReplaceTargetsWithRecommendation) == 0x000008, "Wrong size on SpectatorManager_ReplaceTargetsWithRecommendation");
static_assert(offsetof(SpectatorManager_ReplaceTargetsWithRecommendation, Param) == 0x000000, "Member 'SpectatorManager_ReplaceTargetsWithRecommendation::Param' has a wrong offset!");

// Function Flame.SpectatorManager.StopSpectating
// 0x0001 (0x0001 - 0x0000)
struct SpectatorManager_StopSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_StopSpectating) == 0x000001, "Wrong alignment on SpectatorManager_StopSpectating");
static_assert(sizeof(SpectatorManager_StopSpectating) == 0x000001, "Wrong size on SpectatorManager_StopSpectating");
static_assert(offsetof(SpectatorManager_StopSpectating, ReturnValue) == 0x000000, "Member 'SpectatorManager_StopSpectating::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.SuggestSpectatorTarget
// 0x0050 (0x0050 - 0x0000)
struct SpectatorManager_SuggestSpectatorTarget final
{
public:
	class AHumanCharacter*                        Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatorManager_SuggestSpectatorTarget) == 0x000010, "Wrong alignment on SpectatorManager_SuggestSpectatorTarget");
static_assert(sizeof(SpectatorManager_SuggestSpectatorTarget) == 0x000050, "Wrong size on SpectatorManager_SuggestSpectatorTarget");
static_assert(offsetof(SpectatorManager_SuggestSpectatorTarget, Character) == 0x000000, "Member 'SpectatorManager_SuggestSpectatorTarget::Character' has a wrong offset!");
static_assert(offsetof(SpectatorManager_SuggestSpectatorTarget, Actor) == 0x000008, "Member 'SpectatorManager_SuggestSpectatorTarget::Actor' has a wrong offset!");
static_assert(offsetof(SpectatorManager_SuggestSpectatorTarget, Transform) == 0x000010, "Member 'SpectatorManager_SuggestSpectatorTarget::Transform' has a wrong offset!");
static_assert(offsetof(SpectatorManager_SuggestSpectatorTarget, ReturnValue) == 0x000040, "Member 'SpectatorManager_SuggestSpectatorTarget::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.UnregisterPlayerController
// 0x0008 (0x0008 - 0x0000)
struct SpectatorManager_UnregisterPlayerController final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_UnregisterPlayerController) == 0x000008, "Wrong alignment on SpectatorManager_UnregisterPlayerController");
static_assert(sizeof(SpectatorManager_UnregisterPlayerController) == 0x000008, "Wrong size on SpectatorManager_UnregisterPlayerController");
static_assert(offsetof(SpectatorManager_UnregisterPlayerController, Controller) == 0x000000, "Member 'SpectatorManager_UnregisterPlayerController::Controller' has a wrong offset!");

// Function Flame.SpectatorManager.CanBodySpectateTarget
// 0x0018 (0x0018 - 0x0000)
struct SpectatorManager_CanBodySpectateTarget final
{
public:
	class AFlameSpectatorPawn*                    SelfBody;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatorManager_CanBodySpectateTarget) == 0x000008, "Wrong alignment on SpectatorManager_CanBodySpectateTarget");
static_assert(sizeof(SpectatorManager_CanBodySpectateTarget) == 0x000018, "Wrong size on SpectatorManager_CanBodySpectateTarget");
static_assert(offsetof(SpectatorManager_CanBodySpectateTarget, SelfBody) == 0x000000, "Member 'SpectatorManager_CanBodySpectateTarget::SelfBody' has a wrong offset!");
static_assert(offsetof(SpectatorManager_CanBodySpectateTarget, Target) == 0x000008, "Member 'SpectatorManager_CanBodySpectateTarget::Target' has a wrong offset!");
static_assert(offsetof(SpectatorManager_CanBodySpectateTarget, ReturnValue) == 0x000010, "Member 'SpectatorManager_CanBodySpectateTarget::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.CanMindSpectateTarget
// 0x0018 (0x0018 - 0x0000)
struct SpectatorManager_CanMindSpectateTarget final
{
public:
	const class AHumanPlayerController*           SelfMind;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpectatorManager_CanMindSpectateTarget) == 0x000008, "Wrong alignment on SpectatorManager_CanMindSpectateTarget");
static_assert(sizeof(SpectatorManager_CanMindSpectateTarget) == 0x000018, "Wrong size on SpectatorManager_CanMindSpectateTarget");
static_assert(offsetof(SpectatorManager_CanMindSpectateTarget, SelfMind) == 0x000000, "Member 'SpectatorManager_CanMindSpectateTarget::SelfMind' has a wrong offset!");
static_assert(offsetof(SpectatorManager_CanMindSpectateTarget, Target) == 0x000008, "Member 'SpectatorManager_CanMindSpectateTarget::Target' has a wrong offset!");
static_assert(offsetof(SpectatorManager_CanMindSpectateTarget, ReturnValue) == 0x000010, "Member 'SpectatorManager_CanMindSpectateTarget::ReturnValue' has a wrong offset!");

// Function Flame.SpectatorManager.GetSpectatorCandidatesFromRules
// 0x0030 (0x0030 - 0x0000)
struct SpectatorManager_GetSpectatorCandidatesFromRules final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpectatorRules                        Rules;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 Param;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorManager_GetSpectatorCandidatesFromRules) == 0x000008, "Wrong alignment on SpectatorManager_GetSpectatorCandidatesFromRules");
static_assert(sizeof(SpectatorManager_GetSpectatorCandidatesFromRules) == 0x000030, "Wrong size on SpectatorManager_GetSpectatorCandidatesFromRules");
static_assert(offsetof(SpectatorManager_GetSpectatorCandidatesFromRules, Controller) == 0x000000, "Member 'SpectatorManager_GetSpectatorCandidatesFromRules::Controller' has a wrong offset!");
static_assert(offsetof(SpectatorManager_GetSpectatorCandidatesFromRules, Rules) == 0x000008, "Member 'SpectatorManager_GetSpectatorCandidatesFromRules::Rules' has a wrong offset!");
static_assert(offsetof(SpectatorManager_GetSpectatorCandidatesFromRules, OutActors) == 0x000018, "Member 'SpectatorManager_GetSpectatorCandidatesFromRules::OutActors' has a wrong offset!");
static_assert(offsetof(SpectatorManager_GetSpectatorCandidatesFromRules, Param) == 0x000028, "Member 'SpectatorManager_GetSpectatorCandidatesFromRules::Param' has a wrong offset!");

// Function Flame.TutorialAIManager.InitializeAIOnBP
// 0x0038 (0x0038 - 0x0000)
struct TutorialAIManager_InitializeAIOnBP final
{
public:
	class AHumanAICharacter*                      AI;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTutorialAIInitializationData          InitializationDataForBP;                           // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialAIManager_InitializeAIOnBP) == 0x000008, "Wrong alignment on TutorialAIManager_InitializeAIOnBP");
static_assert(sizeof(TutorialAIManager_InitializeAIOnBP) == 0x000038, "Wrong size on TutorialAIManager_InitializeAIOnBP");
static_assert(offsetof(TutorialAIManager_InitializeAIOnBP, AI) == 0x000000, "Member 'TutorialAIManager_InitializeAIOnBP::AI' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_InitializeAIOnBP, InitializationDataForBP) == 0x000008, "Member 'TutorialAIManager_InitializeAIOnBP::InitializationDataForBP' has a wrong offset!");

// Function Flame.TutorialAIManager.OnActionSequenceOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct TutorialAIManager_OnActionSequenceOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialAIManager_OnActionSequenceOverlapped) == 0x000008, "Wrong alignment on TutorialAIManager_OnActionSequenceOverlapped");
static_assert(sizeof(TutorialAIManager_OnActionSequenceOverlapped) == 0x0000B0, "Wrong size on TutorialAIManager_OnActionSequenceOverlapped");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, OverlappedComponent) == 0x000000, "Member 'TutorialAIManager_OnActionSequenceOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, OtherActor) == 0x000008, "Member 'TutorialAIManager_OnActionSequenceOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, OtherComp) == 0x000010, "Member 'TutorialAIManager_OnActionSequenceOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, OtherBodyIndex) == 0x000018, "Member 'TutorialAIManager_OnActionSequenceOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, bFromSweep) == 0x00001C, "Member 'TutorialAIManager_OnActionSequenceOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnActionSequenceOverlapped, SweepResult) == 0x000020, "Member 'TutorialAIManager_OnActionSequenceOverlapped::SweepResult' has a wrong offset!");

// Function Flame.TutorialAIManager.OnAIDied
// 0x0010 (0x0010 - 0x0000)
struct TutorialAIManager_OnAIDied final
{
public:
	class AHumanCharacter*                        DiedCharacter;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        KillerCharacter;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialAIManager_OnAIDied) == 0x000008, "Wrong alignment on TutorialAIManager_OnAIDied");
static_assert(sizeof(TutorialAIManager_OnAIDied) == 0x000010, "Wrong size on TutorialAIManager_OnAIDied");
static_assert(offsetof(TutorialAIManager_OnAIDied, DiedCharacter) == 0x000000, "Member 'TutorialAIManager_OnAIDied::DiedCharacter' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnAIDied, KillerCharacter) == 0x000008, "Member 'TutorialAIManager_OnAIDied::KillerCharacter' has a wrong offset!");

// Function Flame.TutorialAIManager.OnIdleShootingOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct TutorialAIManager_OnIdleShootingOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialAIManager_OnIdleShootingOverlapped) == 0x000008, "Wrong alignment on TutorialAIManager_OnIdleShootingOverlapped");
static_assert(sizeof(TutorialAIManager_OnIdleShootingOverlapped) == 0x0000B0, "Wrong size on TutorialAIManager_OnIdleShootingOverlapped");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, OverlappedComponent) == 0x000000, "Member 'TutorialAIManager_OnIdleShootingOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, OtherActor) == 0x000008, "Member 'TutorialAIManager_OnIdleShootingOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, OtherComp) == 0x000010, "Member 'TutorialAIManager_OnIdleShootingOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, OtherBodyIndex) == 0x000018, "Member 'TutorialAIManager_OnIdleShootingOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, bFromSweep) == 0x00001C, "Member 'TutorialAIManager_OnIdleShootingOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnIdleShootingOverlapped, SweepResult) == 0x000020, "Member 'TutorialAIManager_OnIdleShootingOverlapped::SweepResult' has a wrong offset!");

// Function Flame.TutorialAIManager.OnPursuitSceneFinishOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct TutorialAIManager_OnPursuitSceneFinishOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialAIManager_OnPursuitSceneFinishOverlapped) == 0x000008, "Wrong alignment on TutorialAIManager_OnPursuitSceneFinishOverlapped");
static_assert(sizeof(TutorialAIManager_OnPursuitSceneFinishOverlapped) == 0x0000B0, "Wrong size on TutorialAIManager_OnPursuitSceneFinishOverlapped");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, OverlappedComponent) == 0x000000, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, OtherActor) == 0x000008, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, OtherComp) == 0x000010, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, OtherBodyIndex) == 0x000018, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, bFromSweep) == 0x00001C, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneFinishOverlapped, SweepResult) == 0x000020, "Member 'TutorialAIManager_OnPursuitSceneFinishOverlapped::SweepResult' has a wrong offset!");

// Function Flame.TutorialAIManager.OnPursuitSceneOverlapped
// 0x00B0 (0x00B0 - 0x0000)
struct TutorialAIManager_OnPursuitSceneOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialAIManager_OnPursuitSceneOverlapped) == 0x000008, "Wrong alignment on TutorialAIManager_OnPursuitSceneOverlapped");
static_assert(sizeof(TutorialAIManager_OnPursuitSceneOverlapped) == 0x0000B0, "Wrong size on TutorialAIManager_OnPursuitSceneOverlapped");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, OverlappedComponent) == 0x000000, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, OtherActor) == 0x000008, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, OtherComp) == 0x000010, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, OtherBodyIndex) == 0x000018, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, bFromSweep) == 0x00001C, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(TutorialAIManager_OnPursuitSceneOverlapped, SweepResult) == 0x000020, "Member 'TutorialAIManager_OnPursuitSceneOverlapped::SweepResult' has a wrong offset!");

// Function Flame.TutorialAIManager.GetCurrentTutorialAIManagerState
// 0x0001 (0x0001 - 0x0000)
struct TutorialAIManager_GetCurrentTutorialAIManagerState final
{
public:
	ETutorialAIState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialAIManager_GetCurrentTutorialAIManagerState) == 0x000001, "Wrong alignment on TutorialAIManager_GetCurrentTutorialAIManagerState");
static_assert(sizeof(TutorialAIManager_GetCurrentTutorialAIManagerState) == 0x000001, "Wrong size on TutorialAIManager_GetCurrentTutorialAIManagerState");
static_assert(offsetof(TutorialAIManager_GetCurrentTutorialAIManagerState, ReturnValue) == 0x000000, "Member 'TutorialAIManager_GetCurrentTutorialAIManagerState::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.CreateSession
// 0x0010 (0x0010 - 0x0000)
struct GroupSystem_CreateSession final
{
public:
	class FString                                 SessionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_CreateSession) == 0x000008, "Wrong alignment on GroupSystem_CreateSession");
static_assert(sizeof(GroupSystem_CreateSession) == 0x000010, "Wrong size on GroupSystem_CreateSession");
static_assert(offsetof(GroupSystem_CreateSession, SessionName) == 0x000000, "Member 'GroupSystem_CreateSession::SessionName' has a wrong offset!");

// Function Flame.GroupSystem.GetMemberList
// 0x0058 (0x0058 - 0x0000)
struct GroupSystem_GetMemberList final
{
public:
	TMap<struct FUniqueNetIdRepl, struct FClientStateSync> Members;                                           // 0x0000(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GroupSystem_GetMemberList) == 0x000008, "Wrong alignment on GroupSystem_GetMemberList");
static_assert(sizeof(GroupSystem_GetMemberList) == 0x000058, "Wrong size on GroupSystem_GetMemberList");
static_assert(offsetof(GroupSystem_GetMemberList, Members) == 0x000000, "Member 'GroupSystem_GetMemberList::Members' has a wrong offset!");
static_assert(offsetof(GroupSystem_GetMemberList, ReturnValue) == 0x000050, "Member 'GroupSystem_GetMemberList::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.OnPlayerFailedJoinGroup
// 0x0028 (0x0028 - 0x0000)
struct GroupSystem_OnPlayerFailedJoinGroup final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_OnPlayerFailedJoinGroup) == 0x000008, "Wrong alignment on GroupSystem_OnPlayerFailedJoinGroup");
static_assert(sizeof(GroupSystem_OnPlayerFailedJoinGroup) == 0x000028, "Wrong size on GroupSystem_OnPlayerFailedJoinGroup");
static_assert(offsetof(GroupSystem_OnPlayerFailedJoinGroup, Userid) == 0x000000, "Member 'GroupSystem_OnPlayerFailedJoinGroup::Userid' has a wrong offset!");

// Function Flame.GroupSystem.OnPlayerJoinedGroup
// 0x0038 (0x0038 - 0x0000)
struct GroupSystem_OnPlayerJoinedGroup final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_OnPlayerJoinedGroup) == 0x000008, "Wrong alignment on GroupSystem_OnPlayerJoinedGroup");
static_assert(sizeof(GroupSystem_OnPlayerJoinedGroup) == 0x000038, "Wrong size on GroupSystem_OnPlayerJoinedGroup");
static_assert(offsetof(GroupSystem_OnPlayerJoinedGroup, Userid) == 0x000000, "Member 'GroupSystem_OnPlayerJoinedGroup::Userid' has a wrong offset!");
static_assert(offsetof(GroupSystem_OnPlayerJoinedGroup, GroupId) == 0x000028, "Member 'GroupSystem_OnPlayerJoinedGroup::GroupId' has a wrong offset!");

// Function Flame.GroupSystem.OnPlayerLeftGroup
// 0x0038 (0x0038 - 0x0000)
struct GroupSystem_OnPlayerLeftGroup final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_OnPlayerLeftGroup) == 0x000008, "Wrong alignment on GroupSystem_OnPlayerLeftGroup");
static_assert(sizeof(GroupSystem_OnPlayerLeftGroup) == 0x000038, "Wrong size on GroupSystem_OnPlayerLeftGroup");
static_assert(offsetof(GroupSystem_OnPlayerLeftGroup, Userid) == 0x000000, "Member 'GroupSystem_OnPlayerLeftGroup::Userid' has a wrong offset!");
static_assert(offsetof(GroupSystem_OnPlayerLeftGroup, GroupId) == 0x000028, "Member 'GroupSystem_OnPlayerLeftGroup::GroupId' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerCancelMatchmakingDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature) == 0x000028, "Wrong size on GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerCancelMatchmakingDelegate__DelegateSignature::Userid' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerFailedJoinGroupDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature) == 0x000028, "Wrong size on GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerFailedJoinGroupDelegate__DelegateSignature::Userid' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerJoinedGroupDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature) == 0x000038, "Wrong size on GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature, GroupId) == 0x000028, "Member 'GroupSystem_PlayerJoinedGroupDelegate__DelegateSignature::GroupId' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerLeavedGroupDelegate__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature) == 0x000038, "Wrong size on GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature, GroupId) == 0x000028, "Member 'GroupSystem_PlayerLeavedGroupDelegate__DelegateSignature::GroupId' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerStartMatchmakingDelegate__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature) == 0x000028, "Wrong size on GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerStartMatchmakingDelegate__DelegateSignature::Userid' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.PlayerStateChangedDelegate__DelegateSignature
// 0x0030 (0x0030 - 0x0000)
struct GroupSystem_PlayerStateChangedDelegate__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGroupState                             OldState;                                          // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGroupState                             NewState;                                          // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GroupSystem_PlayerStateChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_PlayerStateChangedDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_PlayerStateChangedDelegate__DelegateSignature) == 0x000030, "Wrong size on GroupSystem_PlayerStateChangedDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_PlayerStateChangedDelegate__DelegateSignature, Userid) == 0x000000, "Member 'GroupSystem_PlayerStateChangedDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(GroupSystem_PlayerStateChangedDelegate__DelegateSignature, OldState) == 0x000028, "Member 'GroupSystem_PlayerStateChangedDelegate__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(GroupSystem_PlayerStateChangedDelegate__DelegateSignature, NewState) == 0x000029, "Member 'GroupSystem_PlayerStateChangedDelegate__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.GroupSystem.QueryBlockedPlayers
// 0x0001 (0x0001 - 0x0000)
struct GroupSystem_QueryBlockedPlayers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_QueryBlockedPlayers) == 0x000001, "Wrong alignment on GroupSystem_QueryBlockedPlayers");
static_assert(sizeof(GroupSystem_QueryBlockedPlayers) == 0x000001, "Wrong size on GroupSystem_QueryBlockedPlayers");
static_assert(offsetof(GroupSystem_QueryBlockedPlayers, ReturnValue) == 0x000000, "Member 'GroupSystem_QueryBlockedPlayers::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.QueryBlockedPlayersDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature final
{
public:
	struct FUpdateFriendsListResult               Result;                                            // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature) == 0x000058, "Wrong size on GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature, Result) == 0x000000, "Member 'GroupSystem_QueryBlockedPlayersDelegate__DelegateSignature::Result' has a wrong offset!");

// Function Flame.GroupSystem.UpdateFriendsList
// 0x0001 (0x0001 - 0x0000)
struct GroupSystem_UpdateFriendsList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_UpdateFriendsList) == 0x000001, "Wrong alignment on GroupSystem_UpdateFriendsList");
static_assert(sizeof(GroupSystem_UpdateFriendsList) == 0x000001, "Wrong size on GroupSystem_UpdateFriendsList");
static_assert(offsetof(GroupSystem_UpdateFriendsList, ReturnValue) == 0x000000, "Member 'GroupSystem_UpdateFriendsList::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.GroupSystem.UpdateFriendsListDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct GroupSystem_UpdateFriendsListDelegate__DelegateSignature final
{
public:
	struct FUpdateFriendsListResult               Result;                                            // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_UpdateFriendsListDelegate__DelegateSignature) == 0x000008, "Wrong alignment on GroupSystem_UpdateFriendsListDelegate__DelegateSignature");
static_assert(sizeof(GroupSystem_UpdateFriendsListDelegate__DelegateSignature) == 0x000058, "Wrong size on GroupSystem_UpdateFriendsListDelegate__DelegateSignature");
static_assert(offsetof(GroupSystem_UpdateFriendsListDelegate__DelegateSignature, Result) == 0x000000, "Member 'GroupSystem_UpdateFriendsListDelegate__DelegateSignature::Result' has a wrong offset!");

// Function Flame.GroupSystem.GetBlockedPlayers
// 0x0050 (0x0050 - 0x0000)
struct GroupSystem_GetBlockedPlayers final
{
public:
	TMap<struct FUniqueNetIdRepl, class UFriendInfo*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_GetBlockedPlayers) == 0x000008, "Wrong alignment on GroupSystem_GetBlockedPlayers");
static_assert(sizeof(GroupSystem_GetBlockedPlayers) == 0x000050, "Wrong size on GroupSystem_GetBlockedPlayers");
static_assert(offsetof(GroupSystem_GetBlockedPlayers, ReturnValue) == 0x000000, "Member 'GroupSystem_GetBlockedPlayers::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.GetFriendsList
// 0x0050 (0x0050 - 0x0000)
struct GroupSystem_GetFriendsList final
{
public:
	TMap<struct FUniqueNetIdRepl, class UFriendInfo*> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_GetFriendsList) == 0x000008, "Wrong alignment on GroupSystem_GetFriendsList");
static_assert(sizeof(GroupSystem_GetFriendsList) == 0x000050, "Wrong size on GroupSystem_GetFriendsList");
static_assert(offsetof(GroupSystem_GetFriendsList, ReturnValue) == 0x000000, "Member 'GroupSystem_GetFriendsList::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.GetGroupSize
// 0x0004 (0x0004 - 0x0000)
struct GroupSystem_GetGroupSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_GetGroupSize) == 0x000004, "Wrong alignment on GroupSystem_GetGroupSize");
static_assert(sizeof(GroupSystem_GetGroupSize) == 0x000004, "Wrong size on GroupSystem_GetGroupSize");
static_assert(offsetof(GroupSystem_GetGroupSize, ReturnValue) == 0x000000, "Member 'GroupSystem_GetGroupSize::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.GetGroupUniqueId
// 0x0010 (0x0010 - 0x0000)
struct GroupSystem_GetGroupUniqueId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_GetGroupUniqueId) == 0x000008, "Wrong alignment on GroupSystem_GetGroupUniqueId");
static_assert(sizeof(GroupSystem_GetGroupUniqueId) == 0x000010, "Wrong size on GroupSystem_GetGroupUniqueId");
static_assert(offsetof(GroupSystem_GetGroupUniqueId, ReturnValue) == 0x000000, "Member 'GroupSystem_GetGroupUniqueId::ReturnValue' has a wrong offset!");

// Function Flame.GroupSystem.GetLocalUserUniqueId
// 0x0028 (0x0028 - 0x0000)
struct GroupSystem_GetLocalUserUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GroupSystem_GetLocalUserUniqueId) == 0x000008, "Wrong alignment on GroupSystem_GetLocalUserUniqueId");
static_assert(sizeof(GroupSystem_GetLocalUserUniqueId) == 0x000028, "Wrong size on GroupSystem_GetLocalUserUniqueId");
static_assert(offsetof(GroupSystem_GetLocalUserUniqueId, ReturnValue) == 0x000000, "Member 'GroupSystem_GetLocalUserUniqueId::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetBaseAmount
// 0x0004 (0x0004 - 0x0000)
struct PlatformStoreOfferInfo_GetBaseAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetBaseAmount) == 0x000004, "Wrong alignment on PlatformStoreOfferInfo_GetBaseAmount");
static_assert(sizeof(PlatformStoreOfferInfo_GetBaseAmount) == 0x000004, "Wrong size on PlatformStoreOfferInfo_GetBaseAmount");
static_assert(offsetof(PlatformStoreOfferInfo_GetBaseAmount, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetBaseAmount::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetBonusAmount
// 0x0004 (0x0004 - 0x0000)
struct PlatformStoreOfferInfo_GetBonusAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetBonusAmount) == 0x000004, "Wrong alignment on PlatformStoreOfferInfo_GetBonusAmount");
static_assert(sizeof(PlatformStoreOfferInfo_GetBonusAmount) == 0x000004, "Wrong size on PlatformStoreOfferInfo_GetBonusAmount");
static_assert(offsetof(PlatformStoreOfferInfo_GetBonusAmount, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetBonusAmount::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetCurrencyCode
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreOfferInfo_GetCurrencyCode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetCurrencyCode) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetCurrencyCode");
static_assert(sizeof(PlatformStoreOfferInfo_GetCurrencyCode) == 0x000010, "Wrong size on PlatformStoreOfferInfo_GetCurrencyCode");
static_assert(offsetof(PlatformStoreOfferInfo_GetCurrencyCode, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetCurrencyCode::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetDescription
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetDescription) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetDescription");
static_assert(sizeof(PlatformStoreOfferInfo_GetDescription) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetDescription");
static_assert(offsetof(PlatformStoreOfferInfo_GetDescription, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetDescription::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetDisplayPrice
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetDisplayPrice final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetDisplayPrice) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetDisplayPrice");
static_assert(sizeof(PlatformStoreOfferInfo_GetDisplayPrice) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetDisplayPrice");
static_assert(offsetof(PlatformStoreOfferInfo_GetDisplayPrice, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetDisplayPrice::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetGameStoreProductId
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreOfferInfo_GetGameStoreProductId final
{
public:
	struct FGameStoreProductId                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetGameStoreProductId) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetGameStoreProductId");
static_assert(sizeof(PlatformStoreOfferInfo_GetGameStoreProductId) == 0x000010, "Wrong size on PlatformStoreOfferInfo_GetGameStoreProductId");
static_assert(offsetof(PlatformStoreOfferInfo_GetGameStoreProductId, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetGameStoreProductId::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetLongDescription
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetLongDescription final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetLongDescription) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetLongDescription");
static_assert(sizeof(PlatformStoreOfferInfo_GetLongDescription) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetLongDescription");
static_assert(offsetof(PlatformStoreOfferInfo_GetLongDescription, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetLongDescription::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetNumericPrice
// 0x0004 (0x0004 - 0x0000)
struct PlatformStoreOfferInfo_GetNumericPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetNumericPrice) == 0x000004, "Wrong alignment on PlatformStoreOfferInfo_GetNumericPrice");
static_assert(sizeof(PlatformStoreOfferInfo_GetNumericPrice) == 0x000004, "Wrong size on PlatformStoreOfferInfo_GetNumericPrice");
static_assert(offsetof(PlatformStoreOfferInfo_GetNumericPrice, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetNumericPrice::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetPriceText
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetPriceText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetPriceText) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetPriceText");
static_assert(sizeof(PlatformStoreOfferInfo_GetPriceText) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetPriceText");
static_assert(offsetof(PlatformStoreOfferInfo_GetPriceText, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetPriceText::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetProductId
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreOfferInfo_GetProductId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetProductId) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetProductId");
static_assert(sizeof(PlatformStoreOfferInfo_GetProductId) == 0x000010, "Wrong size on PlatformStoreOfferInfo_GetProductId");
static_assert(offsetof(PlatformStoreOfferInfo_GetProductId, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetProductId::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetRegularPrice
// 0x0004 (0x0004 - 0x0000)
struct PlatformStoreOfferInfo_GetRegularPrice final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetRegularPrice) == 0x000004, "Wrong alignment on PlatformStoreOfferInfo_GetRegularPrice");
static_assert(sizeof(PlatformStoreOfferInfo_GetRegularPrice) == 0x000004, "Wrong size on PlatformStoreOfferInfo_GetRegularPrice");
static_assert(offsetof(PlatformStoreOfferInfo_GetRegularPrice, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetRegularPrice::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetRegularPriceText
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetRegularPriceText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetRegularPriceText) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetRegularPriceText");
static_assert(sizeof(PlatformStoreOfferInfo_GetRegularPriceText) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetRegularPriceText");
static_assert(offsetof(PlatformStoreOfferInfo_GetRegularPriceText, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetRegularPriceText::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetTags
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreOfferInfo_GetTags final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetTags) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetTags");
static_assert(sizeof(PlatformStoreOfferInfo_GetTags) == 0x000010, "Wrong size on PlatformStoreOfferInfo_GetTags");
static_assert(offsetof(PlatformStoreOfferInfo_GetTags, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetTags::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetTaxMessage
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetTaxMessage final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetTaxMessage) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetTaxMessage");
static_assert(sizeof(PlatformStoreOfferInfo_GetTaxMessage) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetTaxMessage");
static_assert(offsetof(PlatformStoreOfferInfo_GetTaxMessage, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetTaxMessage::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.GetTitle
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOfferInfo_GetTitle final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_GetTitle) == 0x000008, "Wrong alignment on PlatformStoreOfferInfo_GetTitle");
static_assert(sizeof(PlatformStoreOfferInfo_GetTitle) == 0x000018, "Wrong size on PlatformStoreOfferInfo_GetTitle");
static_assert(offsetof(PlatformStoreOfferInfo_GetTitle, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_GetTitle::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOfferInfo.IsPurchaseable
// 0x0001 (0x0001 - 0x0000)
struct PlatformStoreOfferInfo_IsPurchaseable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOfferInfo_IsPurchaseable) == 0x000001, "Wrong alignment on PlatformStoreOfferInfo_IsPurchaseable");
static_assert(sizeof(PlatformStoreOfferInfo_IsPurchaseable) == 0x000001, "Wrong size on PlatformStoreOfferInfo_IsPurchaseable");
static_assert(offsetof(PlatformStoreOfferInfo_IsPurchaseable, ReturnValue) == 0x000000, "Member 'PlatformStoreOfferInfo_IsPurchaseable::ReturnValue' has a wrong offset!");

// Function Flame.AnimationMirrorData.SetHumanMappedMirrorBones
// 0x0018 (0x0018 - 0x0000)
struct AnimationMirrorData_SetHumanMappedMirrorBones final
{
public:
	TArray<struct FHumanMirrorMap>                MirrorData;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class USkeleton*                        Skeleton;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_SetHumanMappedMirrorBones) == 0x000008, "Wrong alignment on AnimationMirrorData_SetHumanMappedMirrorBones");
static_assert(sizeof(AnimationMirrorData_SetHumanMappedMirrorBones) == 0x000018, "Wrong size on AnimationMirrorData_SetHumanMappedMirrorBones");
static_assert(offsetof(AnimationMirrorData_SetHumanMappedMirrorBones, MirrorData) == 0x000000, "Member 'AnimationMirrorData_SetHumanMappedMirrorBones::MirrorData' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetHumanMappedMirrorBones, Skeleton) == 0x000010, "Member 'AnimationMirrorData_SetHumanMappedMirrorBones::Skeleton' has a wrong offset!");

// Function Flame.AnimationMirrorData.SetMirrorMappedBone
// 0x0014 (0x0014 - 0x0000)
struct AnimationMirrorData_SetMirrorMappedBone final
{
public:
	class FName                                   bone_name;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Mirror_bone_name;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMirrorDir                                    Mirror_axis;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMirrorDir                                    Right_axis;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationMirrorData_SetMirrorMappedBone) == 0x000004, "Wrong alignment on AnimationMirrorData_SetMirrorMappedBone");
static_assert(sizeof(AnimationMirrorData_SetMirrorMappedBone) == 0x000014, "Wrong size on AnimationMirrorData_SetMirrorMappedBone");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedBone, bone_name) == 0x000000, "Member 'AnimationMirrorData_SetMirrorMappedBone::bone_name' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedBone, Mirror_bone_name) == 0x000008, "Member 'AnimationMirrorData_SetMirrorMappedBone::Mirror_bone_name' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedBone, Mirror_axis) == 0x000010, "Member 'AnimationMirrorData_SetMirrorMappedBone::Mirror_axis' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedBone, Right_axis) == 0x000011, "Member 'AnimationMirrorData_SetMirrorMappedBone::Right_axis' has a wrong offset!");

// Function Flame.AnimationMirrorData.SetMirrorMappedData
// 0x0030 (0x0030 - 0x0000)
struct AnimationMirrorData_SetMirrorMappedData final
{
public:
	TArray<class FName>                           PMirrorData;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMirrorDir>                            PMirrorAxisData;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EMirrorDir>                            PRightAxisData;                                    // 0x0020(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_SetMirrorMappedData) == 0x000008, "Wrong alignment on AnimationMirrorData_SetMirrorMappedData");
static_assert(sizeof(AnimationMirrorData_SetMirrorMappedData) == 0x000030, "Wrong size on AnimationMirrorData_SetMirrorMappedData");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedData, PMirrorData) == 0x000000, "Member 'AnimationMirrorData_SetMirrorMappedData::PMirrorData' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedData, PMirrorAxisData) == 0x000010, "Member 'AnimationMirrorData_SetMirrorMappedData::PMirrorAxisData' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_SetMirrorMappedData, PRightAxisData) == 0x000020, "Member 'AnimationMirrorData_SetMirrorMappedData::PRightAxisData' has a wrong offset!");

// Function Flame.AnimationMirrorData.SetPelvisBoneName
// 0x0008 (0x0008 - 0x0000)
struct AnimationMirrorData_SetPelvisBoneName final
{
public:
	class FName                                   bone_name;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_SetPelvisBoneName) == 0x000004, "Wrong alignment on AnimationMirrorData_SetPelvisBoneName");
static_assert(sizeof(AnimationMirrorData_SetPelvisBoneName) == 0x000008, "Wrong size on AnimationMirrorData_SetPelvisBoneName");
static_assert(offsetof(AnimationMirrorData_SetPelvisBoneName, bone_name) == 0x000000, "Member 'AnimationMirrorData_SetPelvisBoneName::bone_name' has a wrong offset!");

// Function Flame.AnimationMirrorData.GetBoneMirrorAxisDataStructure
// 0x0010 (0x0010 - 0x0000)
struct AnimationMirrorData_GetBoneMirrorAxisDataStructure final
{
public:
	TArray<EMirrorDir>                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_GetBoneMirrorAxisDataStructure) == 0x000008, "Wrong alignment on AnimationMirrorData_GetBoneMirrorAxisDataStructure");
static_assert(sizeof(AnimationMirrorData_GetBoneMirrorAxisDataStructure) == 0x000010, "Wrong size on AnimationMirrorData_GetBoneMirrorAxisDataStructure");
static_assert(offsetof(AnimationMirrorData_GetBoneMirrorAxisDataStructure, ReturnValue) == 0x000000, "Member 'AnimationMirrorData_GetBoneMirrorAxisDataStructure::ReturnValue' has a wrong offset!");

// Function Flame.AnimationMirrorData.GetBoneMirrorDataStructure
// 0x0010 (0x0010 - 0x0000)
struct AnimationMirrorData_GetBoneMirrorDataStructure final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_GetBoneMirrorDataStructure) == 0x000008, "Wrong alignment on AnimationMirrorData_GetBoneMirrorDataStructure");
static_assert(sizeof(AnimationMirrorData_GetBoneMirrorDataStructure) == 0x000010, "Wrong size on AnimationMirrorData_GetBoneMirrorDataStructure");
static_assert(offsetof(AnimationMirrorData_GetBoneMirrorDataStructure, ReturnValue) == 0x000000, "Member 'AnimationMirrorData_GetBoneMirrorDataStructure::ReturnValue' has a wrong offset!");

// Function Flame.AnimationMirrorData.GetBoneRightAxisDataStructure
// 0x0010 (0x0010 - 0x0000)
struct AnimationMirrorData_GetBoneRightAxisDataStructure final
{
public:
	TArray<EMirrorDir>                            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_GetBoneRightAxisDataStructure) == 0x000008, "Wrong alignment on AnimationMirrorData_GetBoneRightAxisDataStructure");
static_assert(sizeof(AnimationMirrorData_GetBoneRightAxisDataStructure) == 0x000010, "Wrong size on AnimationMirrorData_GetBoneRightAxisDataStructure");
static_assert(offsetof(AnimationMirrorData_GetBoneRightAxisDataStructure, ReturnValue) == 0x000000, "Member 'AnimationMirrorData_GetBoneRightAxisDataStructure::ReturnValue' has a wrong offset!");

// Function Flame.AnimationMirrorData.GetMirrorMappedBone
// 0x0010 (0x0010 - 0x0000)
struct AnimationMirrorData_GetMirrorMappedBone final
{
public:
	class FName                                   bone_name;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_GetMirrorMappedBone) == 0x000004, "Wrong alignment on AnimationMirrorData_GetMirrorMappedBone");
static_assert(sizeof(AnimationMirrorData_GetMirrorMappedBone) == 0x000010, "Wrong size on AnimationMirrorData_GetMirrorMappedBone");
static_assert(offsetof(AnimationMirrorData_GetMirrorMappedBone, bone_name) == 0x000000, "Member 'AnimationMirrorData_GetMirrorMappedBone::bone_name' has a wrong offset!");
static_assert(offsetof(AnimationMirrorData_GetMirrorMappedBone, ReturnValue) == 0x000008, "Member 'AnimationMirrorData_GetMirrorMappedBone::ReturnValue' has a wrong offset!");

// Function Flame.AnimationMirrorData.GetPelvisBoneName
// 0x0008 (0x0008 - 0x0000)
struct AnimationMirrorData_GetPelvisBoneName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMirrorData_GetPelvisBoneName) == 0x000004, "Wrong alignment on AnimationMirrorData_GetPelvisBoneName");
static_assert(sizeof(AnimationMirrorData_GetPelvisBoneName) == 0x000008, "Wrong size on AnimationMirrorData_GetPelvisBoneName");
static_assert(offsetof(AnimationMirrorData_GetPelvisBoneName, ReturnValue) == 0x000000, "Member 'AnimationMirrorData_GetPelvisBoneName::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.InheritDefaults
// 0x0008 (0x0008 - 0x0000)
struct InventoryCustomizationComponent_InheritDefaults final
{
public:
	const class UInventoryCustomizationComponent* Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_InheritDefaults) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_InheritDefaults");
static_assert(sizeof(InventoryCustomizationComponent_InheritDefaults) == 0x000008, "Wrong size on InventoryCustomizationComponent_InheritDefaults");
static_assert(offsetof(InventoryCustomizationComponent_InheritDefaults, Source) == 0x000000, "Member 'InventoryCustomizationComponent_InheritDefaults::Source' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.InheritSlots
// 0x0008 (0x0008 - 0x0000)
struct InventoryCustomizationComponent_InheritSlots final
{
public:
	const class UInventoryCustomizationComponent* Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_InheritSlots) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_InheritSlots");
static_assert(sizeof(InventoryCustomizationComponent_InheritSlots) == 0x000008, "Wrong size on InventoryCustomizationComponent_InheritSlots");
static_assert(offsetof(InventoryCustomizationComponent_InheritSlots, Source) == 0x000000, "Member 'InventoryCustomizationComponent_InheritSlots::Source' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.OnRep_PostChange
// 0x0010 (0x0010 - 0x0000)
struct InventoryCustomizationComponent_OnRep_PostChange final
{
public:
	TArray<struct FCustomizationPairWithSlot>     OldCustomizations;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_OnRep_PostChange) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_OnRep_PostChange");
static_assert(sizeof(InventoryCustomizationComponent_OnRep_PostChange) == 0x000010, "Wrong size on InventoryCustomizationComponent_OnRep_PostChange");
static_assert(offsetof(InventoryCustomizationComponent_OnRep_PostChange, OldCustomizations) == 0x000000, "Member 'InventoryCustomizationComponent_OnRep_PostChange::OldCustomizations' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.SetVoiceModifierOverride
// 0x0001 (0x0001 - 0x0000)
struct InventoryCustomizationComponent_SetVoiceModifierOverride final
{
public:
	EVoiceModifierType                            VoiceMod;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_SetVoiceModifierOverride) == 0x000001, "Wrong alignment on InventoryCustomizationComponent_SetVoiceModifierOverride");
static_assert(sizeof(InventoryCustomizationComponent_SetVoiceModifierOverride) == 0x000001, "Wrong size on InventoryCustomizationComponent_SetVoiceModifierOverride");
static_assert(offsetof(InventoryCustomizationComponent_SetVoiceModifierOverride, VoiceMod) == 0x000000, "Member 'InventoryCustomizationComponent_SetVoiceModifierOverride::VoiceMod' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetArchetype
// 0x0008 (0x0008 - 0x0000)
struct InventoryCustomizationComponent_GetArchetype final
{
public:
	TSubclassOf<class ACustomizationArchetype>    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetArchetype) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_GetArchetype");
static_assert(sizeof(InventoryCustomizationComponent_GetArchetype) == 0x000008, "Wrong size on InventoryCustomizationComponent_GetArchetype");
static_assert(offsetof(InventoryCustomizationComponent_GetArchetype, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetArchetype::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetArchetypeVariant
// 0x0008 (0x0008 - 0x0000)
struct InventoryCustomizationComponent_GetArchetypeVariant final
{
public:
	TSubclassOf<class ACustomizationVariant>      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetArchetypeVariant) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_GetArchetypeVariant");
static_assert(sizeof(InventoryCustomizationComponent_GetArchetypeVariant) == 0x000008, "Wrong size on InventoryCustomizationComponent_GetArchetypeVariant");
static_assert(offsetof(InventoryCustomizationComponent_GetArchetypeVariant, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetArchetypeVariant::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetBagSoundTexture
// 0x0001 (0x0001 - 0x0000)
struct InventoryCustomizationComponent_GetBagSoundTexture final
{
public:
	ESoundTextureType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetBagSoundTexture) == 0x000001, "Wrong alignment on InventoryCustomizationComponent_GetBagSoundTexture");
static_assert(sizeof(InventoryCustomizationComponent_GetBagSoundTexture) == 0x000001, "Wrong size on InventoryCustomizationComponent_GetBagSoundTexture");
static_assert(offsetof(InventoryCustomizationComponent_GetBagSoundTexture, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetBagSoundTexture::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetCustomizationInSlot
// 0x0018 (0x0018 - 0x0000)
struct InventoryCustomizationComponent_GetCustomizationInSlot final
{
public:
	TSubclassOf<class ACustomizationSlot>         Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationPair                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetCustomizationInSlot) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_GetCustomizationInSlot");
static_assert(sizeof(InventoryCustomizationComponent_GetCustomizationInSlot) == 0x000018, "Wrong size on InventoryCustomizationComponent_GetCustomizationInSlot");
static_assert(offsetof(InventoryCustomizationComponent_GetCustomizationInSlot, Slot) == 0x000000, "Member 'InventoryCustomizationComponent_GetCustomizationInSlot::Slot' has a wrong offset!");
static_assert(offsetof(InventoryCustomizationComponent_GetCustomizationInSlot, ReturnValue) == 0x000008, "Member 'InventoryCustomizationComponent_GetCustomizationInSlot::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetGender
// 0x0008 (0x0008 - 0x0000)
struct InventoryCustomizationComponent_GetGender final
{
public:
	TSubclassOf<class AGender>                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetGender) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_GetGender");
static_assert(sizeof(InventoryCustomizationComponent_GetGender) == 0x000008, "Wrong size on InventoryCustomizationComponent_GetGender");
static_assert(offsetof(InventoryCustomizationComponent_GetGender, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetGender::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetMajorSlotForCustomization
// 0x0010 (0x0010 - 0x0000)
struct InventoryCustomizationComponent_GetMajorSlotForCustomization final
{
public:
	TSubclassOf<class ACustomization>             OneCustomization;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACustomizationSlot>         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetMajorSlotForCustomization) == 0x000008, "Wrong alignment on InventoryCustomizationComponent_GetMajorSlotForCustomization");
static_assert(sizeof(InventoryCustomizationComponent_GetMajorSlotForCustomization) == 0x000010, "Wrong size on InventoryCustomizationComponent_GetMajorSlotForCustomization");
static_assert(offsetof(InventoryCustomizationComponent_GetMajorSlotForCustomization, OneCustomization) == 0x000000, "Member 'InventoryCustomizationComponent_GetMajorSlotForCustomization::OneCustomization' has a wrong offset!");
static_assert(offsetof(InventoryCustomizationComponent_GetMajorSlotForCustomization, ReturnValue) == 0x000008, "Member 'InventoryCustomizationComponent_GetMajorSlotForCustomization::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetUniformSoundTexture
// 0x0001 (0x0001 - 0x0000)
struct InventoryCustomizationComponent_GetUniformSoundTexture final
{
public:
	ESoundTextureType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetUniformSoundTexture) == 0x000001, "Wrong alignment on InventoryCustomizationComponent_GetUniformSoundTexture");
static_assert(sizeof(InventoryCustomizationComponent_GetUniformSoundTexture) == 0x000001, "Wrong size on InventoryCustomizationComponent_GetUniformSoundTexture");
static_assert(offsetof(InventoryCustomizationComponent_GetUniformSoundTexture, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetUniformSoundTexture::ReturnValue' has a wrong offset!");

// Function Flame.InventoryCustomizationComponent.GetVoiceModifier
// 0x0001 (0x0001 - 0x0000)
struct InventoryCustomizationComponent_GetVoiceModifier final
{
public:
	EVoiceModifierType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryCustomizationComponent_GetVoiceModifier) == 0x000001, "Wrong alignment on InventoryCustomizationComponent_GetVoiceModifier");
static_assert(sizeof(InventoryCustomizationComponent_GetVoiceModifier) == 0x000001, "Wrong size on InventoryCustomizationComponent_GetVoiceModifier");
static_assert(offsetof(InventoryCustomizationComponent_GetVoiceModifier, ReturnValue) == 0x000000, "Member 'InventoryCustomizationComponent_GetVoiceModifier::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.AddTempHealth
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_AddTempHealth final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_AddTempHealth) == 0x000004, "Wrong alignment on HealthComponent_AddTempHealth");
static_assert(sizeof(HealthComponent_AddTempHealth) == 0x000008, "Wrong size on HealthComponent_AddTempHealth");
static_assert(offsetof(HealthComponent_AddTempHealth, Amount) == 0x000000, "Member 'HealthComponent_AddTempHealth::Amount' has a wrong offset!");
static_assert(offsetof(HealthComponent_AddTempHealth, ReturnValue) == 0x000004, "Member 'HealthComponent_AddTempHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.AddTrueHealth
// 0x0008 (0x0008 - 0x0000)
struct HealthComponent_AddTrueHealth final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_AddTrueHealth) == 0x000004, "Wrong alignment on HealthComponent_AddTrueHealth");
static_assert(sizeof(HealthComponent_AddTrueHealth) == 0x000008, "Wrong size on HealthComponent_AddTrueHealth");
static_assert(offsetof(HealthComponent_AddTrueHealth, Amount) == 0x000000, "Member 'HealthComponent_AddTrueHealth::Amount' has a wrong offset!");
static_assert(offsetof(HealthComponent_AddTrueHealth, ReturnValue) == 0x000004, "Member 'HealthComponent_AddTrueHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.ApplyDamage
// 0x0038 (0x0038 - 0x0000)
struct HealthComponent_ApplyDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class AActor*                           DamageCauser;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_ApplyDamage) == 0x000008, "Wrong alignment on HealthComponent_ApplyDamage");
static_assert(sizeof(HealthComponent_ApplyDamage) == 0x000038, "Wrong size on HealthComponent_ApplyDamage");
static_assert(offsetof(HealthComponent_ApplyDamage, DamageAmount) == 0x000000, "Member 'HealthComponent_ApplyDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, DamageEvent) == 0x000008, "Member 'HealthComponent_ApplyDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, DamageCauser) == 0x000018, "Member 'HealthComponent_ApplyDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, InstigatingCharacter) == 0x000020, "Member 'HealthComponent_ApplyDamage::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, ItemClass) == 0x000028, "Member 'HealthComponent_ApplyDamage::ItemClass' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, DamageType) == 0x000030, "Member 'HealthComponent_ApplyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyDamage, ReturnValue) == 0x000034, "Member 'HealthComponent_ApplyDamage::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.ApplyHeal
// 0x000C (0x000C - 0x0000)
struct HealthComponent_ApplyHeal final
{
public:
	float                                         HealAmount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthType                                   HealingType;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_ApplyHeal) == 0x000004, "Wrong alignment on HealthComponent_ApplyHeal");
static_assert(sizeof(HealthComponent_ApplyHeal) == 0x00000C, "Wrong size on HealthComponent_ApplyHeal");
static_assert(offsetof(HealthComponent_ApplyHeal, HealAmount) == 0x000000, "Member 'HealthComponent_ApplyHeal::HealAmount' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyHeal, HealingType) == 0x000004, "Member 'HealthComponent_ApplyHeal::HealingType' has a wrong offset!");
static_assert(offsetof(HealthComponent_ApplyHeal, ReturnValue) == 0x000008, "Member 'HealthComponent_ApplyHeal::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.KillPlayer
// 0x0018 (0x0018 - 0x0000)
struct HealthComponent_KillPlayer final
{
public:
	EDamageType                                   DamageType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      InstigatingItem;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_KillPlayer) == 0x000008, "Wrong alignment on HealthComponent_KillPlayer");
static_assert(sizeof(HealthComponent_KillPlayer) == 0x000018, "Wrong size on HealthComponent_KillPlayer");
static_assert(offsetof(HealthComponent_KillPlayer, DamageType) == 0x000000, "Member 'HealthComponent_KillPlayer::DamageType' has a wrong offset!");
static_assert(offsetof(HealthComponent_KillPlayer, InstigatingCharacter) == 0x000008, "Member 'HealthComponent_KillPlayer::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HealthComponent_KillPlayer, InstigatingItem) == 0x000010, "Member 'HealthComponent_KillPlayer::InstigatingItem' has a wrong offset!");

// Function Flame.HealthComponent.ResetComponent
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_ResetComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_ResetComponent) == 0x000001, "Wrong alignment on HealthComponent_ResetComponent");
static_assert(sizeof(HealthComponent_ResetComponent) == 0x000001, "Wrong size on HealthComponent_ResetComponent");
static_assert(offsetof(HealthComponent_ResetComponent, ReturnValue) == 0x000000, "Member 'HealthComponent_ResetComponent::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.SetDeathThreshold
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetDeathThreshold final
{
public:
	float                                         NewMaxDamage;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetDeathThreshold) == 0x000004, "Wrong alignment on HealthComponent_SetDeathThreshold");
static_assert(sizeof(HealthComponent_SetDeathThreshold) == 0x000004, "Wrong size on HealthComponent_SetDeathThreshold");
static_assert(offsetof(HealthComponent_SetDeathThreshold, NewMaxDamage) == 0x000000, "Member 'HealthComponent_SetDeathThreshold::NewMaxDamage' has a wrong offset!");

// Function Flame.HealthComponent.SetInvincibility
// 0x0002 (0x0002 - 0x0000)
struct HealthComponent_SetInvincibility final
{
public:
	bool                                          NewInvincibility;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetInvincibility) == 0x000001, "Wrong alignment on HealthComponent_SetInvincibility");
static_assert(sizeof(HealthComponent_SetInvincibility) == 0x000002, "Wrong size on HealthComponent_SetInvincibility");
static_assert(offsetof(HealthComponent_SetInvincibility, NewInvincibility) == 0x000000, "Member 'HealthComponent_SetInvincibility::NewInvincibility' has a wrong offset!");
static_assert(offsetof(HealthComponent_SetInvincibility, ReturnValue) == 0x000001, "Member 'HealthComponent_SetInvincibility::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.SetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetMaxHealth final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetMaxHealth) == 0x000004, "Wrong alignment on HealthComponent_SetMaxHealth");
static_assert(sizeof(HealthComponent_SetMaxHealth) == 0x000004, "Wrong size on HealthComponent_SetMaxHealth");
static_assert(offsetof(HealthComponent_SetMaxHealth, NewMaxHealth) == 0x000000, "Member 'HealthComponent_SetMaxHealth::NewMaxHealth' has a wrong offset!");

// Function Flame.HealthComponent.SetTempHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetTempHealth final
{
public:
	float                                         NewTempHealth;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetTempHealth) == 0x000004, "Wrong alignment on HealthComponent_SetTempHealth");
static_assert(sizeof(HealthComponent_SetTempHealth) == 0x000004, "Wrong size on HealthComponent_SetTempHealth");
static_assert(offsetof(HealthComponent_SetTempHealth, NewTempHealth) == 0x000000, "Member 'HealthComponent_SetTempHealth::NewTempHealth' has a wrong offset!");

// Function Flame.HealthComponent.SetTemporaryInvincibility
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetTemporaryInvincibility final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetTemporaryInvincibility) == 0x000004, "Wrong alignment on HealthComponent_SetTemporaryInvincibility");
static_assert(sizeof(HealthComponent_SetTemporaryInvincibility) == 0x000004, "Wrong size on HealthComponent_SetTemporaryInvincibility");
static_assert(offsetof(HealthComponent_SetTemporaryInvincibility, Duration) == 0x000000, "Member 'HealthComponent_SetTemporaryInvincibility::Duration' has a wrong offset!");

// Function Flame.HealthComponent.SetTrueHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_SetTrueHealth final
{
public:
	float                                         NewTrueHealth;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_SetTrueHealth) == 0x000004, "Wrong alignment on HealthComponent_SetTrueHealth");
static_assert(sizeof(HealthComponent_SetTrueHealth) == 0x000004, "Wrong size on HealthComponent_SetTrueHealth");
static_assert(offsetof(HealthComponent_SetTrueHealth, NewTrueHealth) == 0x000000, "Member 'HealthComponent_SetTrueHealth::NewTrueHealth' has a wrong offset!");

// Function Flame.HealthComponent.GetDeathThreshold
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetDeathThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetDeathThreshold) == 0x000004, "Wrong alignment on HealthComponent_GetDeathThreshold");
static_assert(sizeof(HealthComponent_GetDeathThreshold) == 0x000004, "Wrong size on HealthComponent_GetDeathThreshold");
static_assert(offsetof(HealthComponent_GetDeathThreshold, ReturnValue) == 0x000000, "Member 'HealthComponent_GetDeathThreshold::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetDownedHealthFraction
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetDownedHealthFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetDownedHealthFraction) == 0x000004, "Wrong alignment on HealthComponent_GetDownedHealthFraction");
static_assert(sizeof(HealthComponent_GetDownedHealthFraction) == 0x000004, "Wrong size on HealthComponent_GetDownedHealthFraction");
static_assert(offsetof(HealthComponent_GetDownedHealthFraction, ReturnValue) == 0x000000, "Member 'HealthComponent_GetDownedHealthFraction::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetDownedHealthFractionInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetDownedHealthFractionInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetDownedHealthFractionInitial) == 0x000004, "Wrong alignment on HealthComponent_GetDownedHealthFractionInitial");
static_assert(sizeof(HealthComponent_GetDownedHealthFractionInitial) == 0x000004, "Wrong size on HealthComponent_GetDownedHealthFractionInitial");
static_assert(offsetof(HealthComponent_GetDownedHealthFractionInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetDownedHealthFractionInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetDownedHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetDownedHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetDownedHealthPercentage) == 0x000004, "Wrong alignment on HealthComponent_GetDownedHealthPercentage");
static_assert(sizeof(HealthComponent_GetDownedHealthPercentage) == 0x000004, "Wrong size on HealthComponent_GetDownedHealthPercentage");
static_assert(offsetof(HealthComponent_GetDownedHealthPercentage, ReturnValue) == 0x000000, "Member 'HealthComponent_GetDownedHealthPercentage::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetDownedHealthPercentageInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetDownedHealthPercentageInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetDownedHealthPercentageInitial) == 0x000004, "Wrong alignment on HealthComponent_GetDownedHealthPercentageInitial");
static_assert(sizeof(HealthComponent_GetDownedHealthPercentageInitial) == 0x000004, "Wrong size on HealthComponent_GetDownedHealthPercentageInitial");
static_assert(offsetof(HealthComponent_GetDownedHealthPercentageInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetDownedHealthPercentageInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealth) == 0x000004, "Wrong alignment on HealthComponent_GetHealth");
static_assert(sizeof(HealthComponent_GetHealth) == 0x000004, "Wrong size on HealthComponent_GetHealth");
static_assert(offsetof(HealthComponent_GetHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealthFraction
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealthFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealthFraction) == 0x000004, "Wrong alignment on HealthComponent_GetHealthFraction");
static_assert(sizeof(HealthComponent_GetHealthFraction) == 0x000004, "Wrong size on HealthComponent_GetHealthFraction");
static_assert(offsetof(HealthComponent_GetHealthFraction, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealthFraction::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealthFractionInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealthFractionInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealthFractionInitial) == 0x000004, "Wrong alignment on HealthComponent_GetHealthFractionInitial");
static_assert(sizeof(HealthComponent_GetHealthFractionInitial) == 0x000004, "Wrong size on HealthComponent_GetHealthFractionInitial");
static_assert(offsetof(HealthComponent_GetHealthFractionInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealthFractionInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealthPercentage) == 0x000004, "Wrong alignment on HealthComponent_GetHealthPercentage");
static_assert(sizeof(HealthComponent_GetHealthPercentage) == 0x000004, "Wrong size on HealthComponent_GetHealthPercentage");
static_assert(offsetof(HealthComponent_GetHealthPercentage, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealthPercentage::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealthPercentageInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHealthPercentageInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealthPercentageInitial) == 0x000004, "Wrong alignment on HealthComponent_GetHealthPercentageInitial");
static_assert(sizeof(HealthComponent_GetHealthPercentageInitial) == 0x000004, "Wrong size on HealthComponent_GetHealthPercentageInitial");
static_assert(offsetof(HealthComponent_GetHealthPercentageInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHealthPercentageInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHealthStatus
// 0x0002 (0x0002 - 0x0000)
struct HealthComponent_GetHealthStatus final
{
public:
	bool                                          IncludeSpecialStates;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthStatus                                 ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHealthStatus) == 0x000001, "Wrong alignment on HealthComponent_GetHealthStatus");
static_assert(sizeof(HealthComponent_GetHealthStatus) == 0x000002, "Wrong size on HealthComponent_GetHealthStatus");
static_assert(offsetof(HealthComponent_GetHealthStatus, IncludeSpecialStates) == 0x000000, "Member 'HealthComponent_GetHealthStatus::IncludeSpecialStates' has a wrong offset!");
static_assert(offsetof(HealthComponent_GetHealthStatus, ReturnValue) == 0x000001, "Member 'HealthComponent_GetHealthStatus::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetHeavilyWoundedThreshold
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetHeavilyWoundedThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetHeavilyWoundedThreshold) == 0x000004, "Wrong alignment on HealthComponent_GetHeavilyWoundedThreshold");
static_assert(sizeof(HealthComponent_GetHeavilyWoundedThreshold) == 0x000004, "Wrong size on HealthComponent_GetHeavilyWoundedThreshold");
static_assert(offsetof(HealthComponent_GetHeavilyWoundedThreshold, ReturnValue) == 0x000000, "Member 'HealthComponent_GetHeavilyWoundedThreshold::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetInitialDeathThreshold
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetInitialDeathThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetInitialDeathThreshold) == 0x000004, "Wrong alignment on HealthComponent_GetInitialDeathThreshold");
static_assert(sizeof(HealthComponent_GetInitialDeathThreshold) == 0x000004, "Wrong size on HealthComponent_GetInitialDeathThreshold");
static_assert(offsetof(HealthComponent_GetInitialDeathThreshold, ReturnValue) == 0x000000, "Member 'HealthComponent_GetInitialDeathThreshold::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetInitialMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetInitialMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetInitialMaxHealth) == 0x000004, "Wrong alignment on HealthComponent_GetInitialMaxHealth");
static_assert(sizeof(HealthComponent_GetInitialMaxHealth) == 0x000004, "Wrong size on HealthComponent_GetInitialMaxHealth");
static_assert(offsetof(HealthComponent_GetInitialMaxHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetInitialMaxHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetInvincibility
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetInvincibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetInvincibility) == 0x000001, "Wrong alignment on HealthComponent_GetInvincibility");
static_assert(sizeof(HealthComponent_GetInvincibility) == 0x000001, "Wrong size on HealthComponent_GetInvincibility");
static_assert(offsetof(HealthComponent_GetInvincibility, ReturnValue) == 0x000000, "Member 'HealthComponent_GetInvincibility::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetIsDead) == 0x000001, "Wrong alignment on HealthComponent_GetIsDead");
static_assert(sizeof(HealthComponent_GetIsDead) == 0x000001, "Wrong size on HealthComponent_GetIsDead");
static_assert(offsetof(HealthComponent_GetIsDead, ReturnValue) == 0x000000, "Member 'HealthComponent_GetIsDead::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetIsDown
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetIsDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetIsDown) == 0x000001, "Wrong alignment on HealthComponent_GetIsDown");
static_assert(sizeof(HealthComponent_GetIsDown) == 0x000001, "Wrong size on HealthComponent_GetIsDown");
static_assert(offsetof(HealthComponent_GetIsDown, ReturnValue) == 0x000000, "Member 'HealthComponent_GetIsDown::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetIsIncapacitated
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetIsIncapacitated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetIsIncapacitated) == 0x000001, "Wrong alignment on HealthComponent_GetIsIncapacitated");
static_assert(sizeof(HealthComponent_GetIsIncapacitated) == 0x000001, "Wrong size on HealthComponent_GetIsIncapacitated");
static_assert(offsetof(HealthComponent_GetIsIncapacitated, ReturnValue) == 0x000000, "Member 'HealthComponent_GetIsIncapacitated::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetIsStunned
// 0x0001 (0x0001 - 0x0000)
struct HealthComponent_GetIsStunned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetIsStunned) == 0x000001, "Wrong alignment on HealthComponent_GetIsStunned");
static_assert(sizeof(HealthComponent_GetIsStunned) == 0x000001, "Wrong size on HealthComponent_GetIsStunned");
static_assert(offsetof(HealthComponent_GetIsStunned, ReturnValue) == 0x000000, "Member 'HealthComponent_GetIsStunned::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetMaxHealth) == 0x000004, "Wrong alignment on HealthComponent_GetMaxHealth");
static_assert(sizeof(HealthComponent_GetMaxHealth) == 0x000004, "Wrong size on HealthComponent_GetMaxHealth");
static_assert(offsetof(HealthComponent_GetMaxHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetTempHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetTempHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetTempHealth) == 0x000004, "Wrong alignment on HealthComponent_GetTempHealth");
static_assert(sizeof(HealthComponent_GetTempHealth) == 0x000004, "Wrong size on HealthComponent_GetTempHealth");
static_assert(offsetof(HealthComponent_GetTempHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetTempHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetTempHealthFractionInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetTempHealthFractionInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetTempHealthFractionInitial) == 0x000004, "Wrong alignment on HealthComponent_GetTempHealthFractionInitial");
static_assert(sizeof(HealthComponent_GetTempHealthFractionInitial) == 0x000004, "Wrong size on HealthComponent_GetTempHealthFractionInitial");
static_assert(offsetof(HealthComponent_GetTempHealthFractionInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetTempHealthFractionInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetTrueHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetTrueHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetTrueHealth) == 0x000004, "Wrong alignment on HealthComponent_GetTrueHealth");
static_assert(sizeof(HealthComponent_GetTrueHealth) == 0x000004, "Wrong size on HealthComponent_GetTrueHealth");
static_assert(offsetof(HealthComponent_GetTrueHealth, ReturnValue) == 0x000000, "Member 'HealthComponent_GetTrueHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponent.GetTrueHealthFractionInitial
// 0x0004 (0x0004 - 0x0000)
struct HealthComponent_GetTrueHealthFractionInitial final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponent_GetTrueHealthFractionInitial) == 0x000004, "Wrong alignment on HealthComponent_GetTrueHealthFractionInitial");
static_assert(sizeof(HealthComponent_GetTrueHealthFractionInitial) == 0x000004, "Wrong size on HealthComponent_GetTrueHealthFractionInitial");
static_assert(offsetof(HealthComponent_GetTrueHealthFractionInitial, ReturnValue) == 0x000000, "Member 'HealthComponent_GetTrueHealthFractionInitial::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponentSimple.ApplyDamage
// 0x0030 (0x0030 - 0x0000)
struct HealthComponentSimple_ApplyDamage final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HealthComponentSimple_ApplyDamage) == 0x000008, "Wrong alignment on HealthComponentSimple_ApplyDamage");
static_assert(sizeof(HealthComponentSimple_ApplyDamage) == 0x000030, "Wrong size on HealthComponentSimple_ApplyDamage");
static_assert(offsetof(HealthComponentSimple_ApplyDamage, DamageAmount) == 0x000000, "Member 'HealthComponentSimple_ApplyDamage::DamageAmount' has a wrong offset!");
static_assert(offsetof(HealthComponentSimple_ApplyDamage, DamageEvent) == 0x000008, "Member 'HealthComponentSimple_ApplyDamage::DamageEvent' has a wrong offset!");
static_assert(offsetof(HealthComponentSimple_ApplyDamage, InstigatingCharacter) == 0x000018, "Member 'HealthComponentSimple_ApplyDamage::InstigatingCharacter' has a wrong offset!");
static_assert(offsetof(HealthComponentSimple_ApplyDamage, DamageCauser) == 0x000020, "Member 'HealthComponentSimple_ApplyDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(HealthComponentSimple_ApplyDamage, ReturnValue) == 0x000028, "Member 'HealthComponentSimple_ApplyDamage::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponentSimple.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponentSimple_SetHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_SetHealth) == 0x000004, "Wrong alignment on HealthComponentSimple_SetHealth");
static_assert(sizeof(HealthComponentSimple_SetHealth) == 0x000004, "Wrong size on HealthComponentSimple_SetHealth");
static_assert(offsetof(HealthComponentSimple_SetHealth, NewHealth) == 0x000000, "Member 'HealthComponentSimple_SetHealth::NewHealth' has a wrong offset!");

// Function Flame.HealthComponentSimple.SetIsDead
// 0x0001 (0x0001 - 0x0000)
struct HealthComponentSimple_SetIsDead final
{
public:
	bool                                          NewIsDead;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_SetIsDead) == 0x000001, "Wrong alignment on HealthComponentSimple_SetIsDead");
static_assert(sizeof(HealthComponentSimple_SetIsDead) == 0x000001, "Wrong size on HealthComponentSimple_SetIsDead");
static_assert(offsetof(HealthComponentSimple_SetIsDead, NewIsDead) == 0x000000, "Member 'HealthComponentSimple_SetIsDead::NewIsDead' has a wrong offset!");

// Function Flame.HealthComponentSimple.SetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponentSimple_SetMaxHealth final
{
public:
	float                                         NewMaxHealth;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_SetMaxHealth) == 0x000004, "Wrong alignment on HealthComponentSimple_SetMaxHealth");
static_assert(sizeof(HealthComponentSimple_SetMaxHealth) == 0x000004, "Wrong size on HealthComponentSimple_SetMaxHealth");
static_assert(offsetof(HealthComponentSimple_SetMaxHealth, NewMaxHealth) == 0x000000, "Member 'HealthComponentSimple_SetMaxHealth::NewMaxHealth' has a wrong offset!");

// Function Flame.HealthComponentSimple.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponentSimple_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_GetHealth) == 0x000004, "Wrong alignment on HealthComponentSimple_GetHealth");
static_assert(sizeof(HealthComponentSimple_GetHealth) == 0x000004, "Wrong size on HealthComponentSimple_GetHealth");
static_assert(offsetof(HealthComponentSimple_GetHealth, ReturnValue) == 0x000000, "Member 'HealthComponentSimple_GetHealth::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponentSimple.GetIsDead
// 0x0001 (0x0001 - 0x0000)
struct HealthComponentSimple_GetIsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_GetIsDead) == 0x000001, "Wrong alignment on HealthComponentSimple_GetIsDead");
static_assert(sizeof(HealthComponentSimple_GetIsDead) == 0x000001, "Wrong size on HealthComponentSimple_GetIsDead");
static_assert(offsetof(HealthComponentSimple_GetIsDead, ReturnValue) == 0x000000, "Member 'HealthComponentSimple_GetIsDead::ReturnValue' has a wrong offset!");

// Function Flame.HealthComponentSimple.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct HealthComponentSimple_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HealthComponentSimple_GetMaxHealth) == 0x000004, "Wrong alignment on HealthComponentSimple_GetMaxHealth");
static_assert(sizeof(HealthComponentSimple_GetMaxHealth) == 0x000004, "Wrong size on HealthComponentSimple_GetMaxHealth");
static_assert(offsetof(HealthComponentSimple_GetMaxHealth, ReturnValue) == 0x000000, "Member 'HealthComponentSimple_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function Flame.LinkedWeapons.AddWeapon
// 0x0010 (0x0010 - 0x0000)
struct LinkedWeapons_AddWeapon final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventHandlerMode                             Mode;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LinkedWeapons_AddWeapon) == 0x000008, "Wrong alignment on LinkedWeapons_AddWeapon");
static_assert(sizeof(LinkedWeapons_AddWeapon) == 0x000010, "Wrong size on LinkedWeapons_AddWeapon");
static_assert(offsetof(LinkedWeapons_AddWeapon, Weapon) == 0x000000, "Member 'LinkedWeapons_AddWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(LinkedWeapons_AddWeapon, Mode) == 0x000008, "Member 'LinkedWeapons_AddWeapon::Mode' has a wrong offset!");
static_assert(offsetof(LinkedWeapons_AddWeapon, ReturnValue) == 0x000009, "Member 'LinkedWeapons_AddWeapon::ReturnValue' has a wrong offset!");

// Function Flame.LinkedWeapons.FindWeapon
// 0x0010 (0x0010 - 0x0000)
struct LinkedWeapons_FindWeapon final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlotType                               ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LinkedWeapons_FindWeapon) == 0x000008, "Wrong alignment on LinkedWeapons_FindWeapon");
static_assert(sizeof(LinkedWeapons_FindWeapon) == 0x000010, "Wrong size on LinkedWeapons_FindWeapon");
static_assert(offsetof(LinkedWeapons_FindWeapon, Weapon) == 0x000000, "Member 'LinkedWeapons_FindWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(LinkedWeapons_FindWeapon, ReturnValue) == 0x000008, "Member 'LinkedWeapons_FindWeapon::ReturnValue' has a wrong offset!");

// Function Flame.LinkedWeapons.GetWeapon
// 0x0010 (0x0010 - 0x0000)
struct LinkedWeapons_GetWeapon final
{
public:
	EWeaponSlotType                               SlotType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedWeapons_GetWeapon) == 0x000008, "Wrong alignment on LinkedWeapons_GetWeapon");
static_assert(sizeof(LinkedWeapons_GetWeapon) == 0x000010, "Wrong size on LinkedWeapons_GetWeapon");
static_assert(offsetof(LinkedWeapons_GetWeapon, SlotType) == 0x000000, "Member 'LinkedWeapons_GetWeapon::SlotType' has a wrong offset!");
static_assert(offsetof(LinkedWeapons_GetWeapon, ReturnValue) == 0x000008, "Member 'LinkedWeapons_GetWeapon::ReturnValue' has a wrong offset!");

// Function Flame.HintWidget.SetHintText
// 0x0018 (0x0018 - 0x0000)
struct HintWidget_SetHintText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintWidget_SetHintText) == 0x000008, "Wrong alignment on HintWidget_SetHintText");
static_assert(sizeof(HintWidget_SetHintText) == 0x000018, "Wrong size on HintWidget_SetHintText");
static_assert(offsetof(HintWidget_SetHintText, InText) == 0x000000, "Member 'HintWidget_SetHintText::InText' has a wrong offset!");

// Function Flame.HintWidget.SetHintTexts
// 0x0050 (0x0050 - 0x0000)
struct HintWidget_SetHintTexts final
{
public:
	TMap<EFlamePlatform, class FText>             InTexts;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HintWidget_SetHintTexts) == 0x000008, "Wrong alignment on HintWidget_SetHintTexts");
static_assert(sizeof(HintWidget_SetHintTexts) == 0x000050, "Wrong size on HintWidget_SetHintTexts");
static_assert(offsetof(HintWidget_SetHintTexts, InTexts) == 0x000000, "Member 'HintWidget_SetHintTexts::InTexts' has a wrong offset!");

// Function Flame.HUDWidget.Show
// 0x0001 (0x0001 - 0x0000)
struct HUDWidget_Show final
{
public:
	bool                                          bShowHUD;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HUDWidget_Show) == 0x000001, "Wrong alignment on HUDWidget_Show");
static_assert(sizeof(HUDWidget_Show) == 0x000001, "Wrong size on HUDWidget_Show");
static_assert(offsetof(HUDWidget_Show, bShowHUD) == 0x000000, "Member 'HUDWidget_Show::bShowHUD' has a wrong offset!");

// Function Flame.HumanAICharacter.IsCharacterInSight
// 0x0018 (0x0018 - 0x0000)
struct HumanAICharacter_IsCharacterInSight final
{
public:
	class AHumanCharacter*                        EnemyCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CheckShootable;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutInSight;                                        // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutShootable;                                      // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutShootableLocation;                              // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAICharacter_IsCharacterInSight) == 0x000008, "Wrong alignment on HumanAICharacter_IsCharacterInSight");
static_assert(sizeof(HumanAICharacter_IsCharacterInSight) == 0x000018, "Wrong size on HumanAICharacter_IsCharacterInSight");
static_assert(offsetof(HumanAICharacter_IsCharacterInSight, EnemyCharacter) == 0x000000, "Member 'HumanAICharacter_IsCharacterInSight::EnemyCharacter' has a wrong offset!");
static_assert(offsetof(HumanAICharacter_IsCharacterInSight, CheckShootable) == 0x000008, "Member 'HumanAICharacter_IsCharacterInSight::CheckShootable' has a wrong offset!");
static_assert(offsetof(HumanAICharacter_IsCharacterInSight, OutInSight) == 0x000009, "Member 'HumanAICharacter_IsCharacterInSight::OutInSight' has a wrong offset!");
static_assert(offsetof(HumanAICharacter_IsCharacterInSight, OutShootable) == 0x00000A, "Member 'HumanAICharacter_IsCharacterInSight::OutShootable' has a wrong offset!");
static_assert(offsetof(HumanAICharacter_IsCharacterInSight, OutShootableLocation) == 0x00000C, "Member 'HumanAICharacter_IsCharacterInSight::OutShootableLocation' has a wrong offset!");

// Function Flame.AimingMetaData.SetHandLocation
// 0x000C (0x000C - 0x0000)
struct AimingMetaData_SetHandLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimingMetaData_SetHandLocation) == 0x000004, "Wrong alignment on AimingMetaData_SetHandLocation");
static_assert(sizeof(AimingMetaData_SetHandLocation) == 0x00000C, "Wrong size on AimingMetaData_SetHandLocation");
static_assert(offsetof(AimingMetaData_SetHandLocation, Location) == 0x000000, "Member 'AimingMetaData_SetHandLocation::Location' has a wrong offset!");

// Function Flame.AimingMetaData.SetSpineLocation
// 0x000C (0x000C - 0x0000)
struct AimingMetaData_SetSpineLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimingMetaData_SetSpineLocation) == 0x000004, "Wrong alignment on AimingMetaData_SetSpineLocation");
static_assert(sizeof(AimingMetaData_SetSpineLocation) == 0x00000C, "Wrong size on AimingMetaData_SetSpineLocation");
static_assert(offsetof(AimingMetaData_SetSpineLocation, Location) == 0x000000, "Member 'AimingMetaData_SetSpineLocation::Location' has a wrong offset!");

// Function Flame.PersistentItemArmor.GetDurabilityRatio
// 0x0004 (0x0004 - 0x0000)
struct PersistentItemArmor_GetDurabilityRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersistentItemArmor_GetDurabilityRatio) == 0x000004, "Wrong alignment on PersistentItemArmor_GetDurabilityRatio");
static_assert(sizeof(PersistentItemArmor_GetDurabilityRatio) == 0x000004, "Wrong size on PersistentItemArmor_GetDurabilityRatio");
static_assert(offsetof(PersistentItemArmor_GetDurabilityRatio, ReturnValue) == 0x000000, "Member 'PersistentItemArmor_GetDurabilityRatio::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.CanUseLeftHandIK
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_CanUseLeftHandIK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_CanUseLeftHandIK) == 0x000001, "Wrong alignment on HumanAnimInstace_CanUseLeftHandIK");
static_assert(sizeof(HumanAnimInstace_CanUseLeftHandIK) == 0x000001, "Wrong size on HumanAnimInstace_CanUseLeftHandIK");
static_assert(offsetof(HumanAnimInstace_CanUseLeftHandIK, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_CanUseLeftHandIK::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.CanUseLeftHandIK_BP
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_CanUseLeftHandIK_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_CanUseLeftHandIK_BP) == 0x000001, "Wrong alignment on HumanAnimInstace_CanUseLeftHandIK_BP");
static_assert(sizeof(HumanAnimInstace_CanUseLeftHandIK_BP) == 0x000001, "Wrong size on HumanAnimInstace_CanUseLeftHandIK_BP");
static_assert(offsetof(HumanAnimInstace_CanUseLeftHandIK_BP, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_CanUseLeftHandIK_BP::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.ChangeEquipSection
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_ChangeEquipSection final
{
public:
	int32                                         NextSectionID;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_ChangeEquipSection) == 0x000004, "Wrong alignment on HumanAnimInstace_ChangeEquipSection");
static_assert(sizeof(HumanAnimInstace_ChangeEquipSection) == 0x000004, "Wrong size on HumanAnimInstace_ChangeEquipSection");
static_assert(offsetof(HumanAnimInstace_ChangeEquipSection, NextSectionID) == 0x000000, "Member 'HumanAnimInstace_ChangeEquipSection::NextSectionID' has a wrong offset!");

// Function Flame.HumanAnimInstace.ChangeGender
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_ChangeGender final
{
public:
	bool                                          bIsaMale;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_ChangeGender) == 0x000001, "Wrong alignment on HumanAnimInstace_ChangeGender");
static_assert(sizeof(HumanAnimInstace_ChangeGender) == 0x000001, "Wrong size on HumanAnimInstace_ChangeGender");
static_assert(offsetof(HumanAnimInstace_ChangeGender, bIsaMale) == 0x000000, "Member 'HumanAnimInstace_ChangeGender::bIsaMale' has a wrong offset!");

// Function Flame.HumanAnimInstace.ChangePlayRateOnSectionChange
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_ChangePlayRateOnSectionChange final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_ChangePlayRateOnSectionChange) == 0x000004, "Wrong alignment on HumanAnimInstace_ChangePlayRateOnSectionChange");
static_assert(sizeof(HumanAnimInstace_ChangePlayRateOnSectionChange) == 0x000004, "Wrong size on HumanAnimInstace_ChangePlayRateOnSectionChange");
static_assert(offsetof(HumanAnimInstace_ChangePlayRateOnSectionChange, PlayRate) == 0x000000, "Member 'HumanAnimInstace_ChangePlayRateOnSectionChange::PlayRate' has a wrong offset!");

// Function Flame.HumanAnimInstace.EnableRegularFullBody
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_EnableRegularFullBody final
{
public:
	bool                                          bEnableIK;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_EnableRegularFullBody) == 0x000001, "Wrong alignment on HumanAnimInstace_EnableRegularFullBody");
static_assert(sizeof(HumanAnimInstace_EnableRegularFullBody) == 0x000001, "Wrong size on HumanAnimInstace_EnableRegularFullBody");
static_assert(offsetof(HumanAnimInstace_EnableRegularFullBody, bEnableIK) == 0x000000, "Member 'HumanAnimInstace_EnableRegularFullBody::bEnableIK' has a wrong offset!");

// Function Flame.HumanAnimInstace.EndWeaponAction
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_EndWeaponAction final
{
public:
	bool                                          bEnableIK;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_EndWeaponAction) == 0x000001, "Wrong alignment on HumanAnimInstace_EndWeaponAction");
static_assert(sizeof(HumanAnimInstace_EndWeaponAction) == 0x000001, "Wrong size on HumanAnimInstace_EndWeaponAction");
static_assert(offsetof(HumanAnimInstace_EndWeaponAction, bEnableIK) == 0x000000, "Member 'HumanAnimInstace_EndWeaponAction::bEnableIK' has a wrong offset!");

// Function Flame.HumanAnimInstace.ForceOrientToYaw
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_ForceOrientToYaw final
{
public:
	float                                         OrientationYaw;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_ForceOrientToYaw) == 0x000004, "Wrong alignment on HumanAnimInstace_ForceOrientToYaw");
static_assert(sizeof(HumanAnimInstace_ForceOrientToYaw) == 0x000004, "Wrong size on HumanAnimInstace_ForceOrientToYaw");
static_assert(offsetof(HumanAnimInstace_ForceOrientToYaw, OrientationYaw) == 0x000000, "Member 'HumanAnimInstace_ForceOrientToYaw::OrientationYaw' has a wrong offset!");

// Function Flame.HumanAnimInstace.IsaToolConsumable
// 0x0010 (0x0010 - 0x0000)
struct HumanAnimInstace_IsaToolConsumable final
{
public:
	class AItem*                                  ItemInHands;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_IsaToolConsumable) == 0x000008, "Wrong alignment on HumanAnimInstace_IsaToolConsumable");
static_assert(sizeof(HumanAnimInstace_IsaToolConsumable) == 0x000010, "Wrong size on HumanAnimInstace_IsaToolConsumable");
static_assert(offsetof(HumanAnimInstace_IsaToolConsumable, ItemInHands) == 0x000000, "Member 'HumanAnimInstace_IsaToolConsumable::ItemInHands' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_IsaToolConsumable, ReturnValue) == 0x000008, "Member 'HumanAnimInstace_IsaToolConsumable::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.ItemChange
// 0x0018 (0x0018 - 0x0000)
struct HumanAnimInstace_ItemChange final
{
public:
	class UGameplayActionsComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  OldItem;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  NewItem;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_ItemChange) == 0x000008, "Wrong alignment on HumanAnimInstace_ItemChange");
static_assert(sizeof(HumanAnimInstace_ItemChange) == 0x000018, "Wrong size on HumanAnimInstace_ItemChange");
static_assert(offsetof(HumanAnimInstace_ItemChange, Sender) == 0x000000, "Member 'HumanAnimInstace_ItemChange::Sender' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_ItemChange, OldItem) == 0x000008, "Member 'HumanAnimInstace_ItemChange::OldItem' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_ItemChange, NewItem) == 0x000010, "Member 'HumanAnimInstace_ItemChange::NewItem' has a wrong offset!");

// Function Flame.HumanAnimInstace.OrientToYaw
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_OrientToYaw final
{
public:
	float                                         OrientationYaw;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_OrientToYaw) == 0x000004, "Wrong alignment on HumanAnimInstace_OrientToYaw");
static_assert(sizeof(HumanAnimInstace_OrientToYaw) == 0x000004, "Wrong size on HumanAnimInstace_OrientToYaw");
static_assert(offsetof(HumanAnimInstace_OrientToYaw, OrientationYaw) == 0x000000, "Member 'HumanAnimInstace_OrientToYaw::OrientationYaw' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetAimingDisabled
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_SetAimingDisabled final
{
public:
	bool                                          Disabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetAimingDisabled) == 0x000001, "Wrong alignment on HumanAnimInstace_SetAimingDisabled");
static_assert(sizeof(HumanAnimInstace_SetAimingDisabled) == 0x000001, "Wrong size on HumanAnimInstace_SetAimingDisabled");
static_assert(offsetof(HumanAnimInstace_SetAimingDisabled, Disabled) == 0x000000, "Member 'HumanAnimInstace_SetAimingDisabled::Disabled' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetAnimCollection
// 0x0008 (0x0008 - 0x0000)
struct HumanAnimInstace_SetAnimCollection final
{
public:
	const class UHumanAnimCollection*             AnimColleciton;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetAnimCollection) == 0x000008, "Wrong alignment on HumanAnimInstace_SetAnimCollection");
static_assert(sizeof(HumanAnimInstace_SetAnimCollection) == 0x000008, "Wrong size on HumanAnimInstace_SetAnimCollection");
static_assert(offsetof(HumanAnimInstace_SetAnimCollection, AnimColleciton) == 0x000000, "Member 'HumanAnimInstace_SetAnimCollection::AnimColleciton' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetDoAdditive
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_SetDoAdditive final
{
public:
	bool                                          bAdditive;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetDoAdditive) == 0x000001, "Wrong alignment on HumanAnimInstace_SetDoAdditive");
static_assert(sizeof(HumanAnimInstace_SetDoAdditive) == 0x000001, "Wrong size on HumanAnimInstace_SetDoAdditive");
static_assert(offsetof(HumanAnimInstace_SetDoAdditive, bAdditive) == 0x000000, "Member 'HumanAnimInstace_SetDoAdditive::bAdditive' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetHandEffector
// 0x0040 (0x0040 - 0x0000)
struct HumanAnimInstace_SetHandEffector final
{
public:
	struct FTransform                             Effector;                                          // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasEffector;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateNeeded;                                      // 0x0039(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_SetHandEffector) == 0x000010, "Wrong alignment on HumanAnimInstace_SetHandEffector");
static_assert(sizeof(HumanAnimInstace_SetHandEffector) == 0x000040, "Wrong size on HumanAnimInstace_SetHandEffector");
static_assert(offsetof(HumanAnimInstace_SetHandEffector, Effector) == 0x000000, "Member 'HumanAnimInstace_SetHandEffector::Effector' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_SetHandEffector, SocketName) == 0x000030, "Member 'HumanAnimInstace_SetHandEffector::SocketName' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_SetHandEffector, HasEffector) == 0x000038, "Member 'HumanAnimInstace_SetHandEffector::HasEffector' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_SetHandEffector, UpdateNeeded) == 0x000039, "Member 'HumanAnimInstace_SetHandEffector::UpdateNeeded' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetLeftHandIK
// 0x0002 (0x0002 - 0x0000)
struct HumanAnimInstace_SetLeftHandIK final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationNotifyIKViewType                    AnimationNotifyIKViewType;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetLeftHandIK) == 0x000001, "Wrong alignment on HumanAnimInstace_SetLeftHandIK");
static_assert(sizeof(HumanAnimInstace_SetLeftHandIK) == 0x000002, "Wrong size on HumanAnimInstace_SetLeftHandIK");
static_assert(offsetof(HumanAnimInstace_SetLeftHandIK, bIsOn) == 0x000000, "Member 'HumanAnimInstace_SetLeftHandIK::bIsOn' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_SetLeftHandIK, AnimationNotifyIKViewType) == 0x000001, "Member 'HumanAnimInstace_SetLeftHandIK::AnimationNotifyIKViewType' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetRightHandIK
// 0x0002 (0x0002 - 0x0000)
struct HumanAnimInstace_SetRightHandIK final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationNotifyIKViewType                    AnimationNotifyIKViewType;                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetRightHandIK) == 0x000001, "Wrong alignment on HumanAnimInstace_SetRightHandIK");
static_assert(sizeof(HumanAnimInstace_SetRightHandIK) == 0x000002, "Wrong size on HumanAnimInstace_SetRightHandIK");
static_assert(offsetof(HumanAnimInstace_SetRightHandIK, bIsOn) == 0x000000, "Member 'HumanAnimInstace_SetRightHandIK::bIsOn' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_SetRightHandIK, AnimationNotifyIKViewType) == 0x000001, "Member 'HumanAnimInstace_SetRightHandIK::AnimationNotifyIKViewType' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetStaminaAdditive
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_SetStaminaAdditive final
{
public:
	bool                                          bStaminaAdd;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetStaminaAdditive) == 0x000001, "Wrong alignment on HumanAnimInstace_SetStaminaAdditive");
static_assert(sizeof(HumanAnimInstace_SetStaminaAdditive) == 0x000001, "Wrong size on HumanAnimInstace_SetStaminaAdditive");
static_assert(offsetof(HumanAnimInstace_SetStaminaAdditive, bStaminaAdd) == 0x000000, "Member 'HumanAnimInstace_SetStaminaAdditive::bStaminaAdd' has a wrong offset!");

// Function Flame.HumanAnimInstace.SetWeaponSK
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_SetWeaponSK final
{
public:
	bool                                          bIsOn;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_SetWeaponSK) == 0x000001, "Wrong alignment on HumanAnimInstace_SetWeaponSK");
static_assert(sizeof(HumanAnimInstace_SetWeaponSK) == 0x000001, "Wrong size on HumanAnimInstace_SetWeaponSK");
static_assert(offsetof(HumanAnimInstace_SetWeaponSK, bIsOn) == 0x000000, "Member 'HumanAnimInstace_SetWeaponSK::bIsOn' has a wrong offset!");

// Function Flame.HumanAnimInstace.StartLinkedInteraction
// 0x0030 (0x0030 - 0x0000)
struct HumanAnimInstace_StartLinkedInteraction final
{
public:
	struct FCompoundActionCollection              InteractionCollection;                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          DisableWeapon;                                     // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StopInteractionAlways;                             // 0x0029(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_StartLinkedInteraction) == 0x000008, "Wrong alignment on HumanAnimInstace_StartLinkedInteraction");
static_assert(sizeof(HumanAnimInstace_StartLinkedInteraction) == 0x000030, "Wrong size on HumanAnimInstace_StartLinkedInteraction");
static_assert(offsetof(HumanAnimInstace_StartLinkedInteraction, InteractionCollection) == 0x000000, "Member 'HumanAnimInstace_StartLinkedInteraction::InteractionCollection' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StartLinkedInteraction, DisableWeapon) == 0x000028, "Member 'HumanAnimInstace_StartLinkedInteraction::DisableWeapon' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StartLinkedInteraction, StopInteractionAlways) == 0x000029, "Member 'HumanAnimInstace_StartLinkedInteraction::StopInteractionAlways' has a wrong offset!");

// Function Flame.HumanAnimInstace.StartOneShotInteraction
// 0x0008 (0x0008 - 0x0000)
struct HumanAnimInstace_StartOneShotInteraction final
{
public:
	class UAnimMontage*                           InteractionMontage;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_StartOneShotInteraction) == 0x000008, "Wrong alignment on HumanAnimInstace_StartOneShotInteraction");
static_assert(sizeof(HumanAnimInstace_StartOneShotInteraction) == 0x000008, "Wrong size on HumanAnimInstace_StartOneShotInteraction");
static_assert(offsetof(HumanAnimInstace_StartOneShotInteraction, InteractionMontage) == 0x000000, "Member 'HumanAnimInstace_StartOneShotInteraction::InteractionMontage' has a wrong offset!");

// Function Flame.HumanAnimInstace.StartWeaponAction_BP
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_StartWeaponAction_BP final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_StartWeaponAction_BP) == 0x000004, "Wrong alignment on HumanAnimInstace_StartWeaponAction_BP");
static_assert(sizeof(HumanAnimInstace_StartWeaponAction_BP) == 0x000004, "Wrong size on HumanAnimInstace_StartWeaponAction_BP");
static_assert(offsetof(HumanAnimInstace_StartWeaponAction_BP, Time) == 0x000000, "Member 'HumanAnimInstace_StartWeaponAction_BP::Time' has a wrong offset!");

// Function Flame.HumanAnimInstace.StopGesture
// 0x0010 (0x0010 - 0x0000)
struct HumanAnimInstace_StopGesture final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_StopGesture) == 0x000008, "Wrong alignment on HumanAnimInstace_StopGesture");
static_assert(sizeof(HumanAnimInstace_StopGesture) == 0x000010, "Wrong size on HumanAnimInstace_StopGesture");
static_assert(offsetof(HumanAnimInstace_StopGesture, Montage) == 0x000000, "Member 'HumanAnimInstace_StopGesture::Montage' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StopGesture, bInterrupted) == 0x000008, "Member 'HumanAnimInstace_StopGesture::bInterrupted' has a wrong offset!");

// Function Flame.HumanAnimInstace.StopGestureHead
// 0x0010 (0x0010 - 0x0000)
struct HumanAnimInstace_StopGestureHead final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_StopGestureHead) == 0x000008, "Wrong alignment on HumanAnimInstace_StopGestureHead");
static_assert(sizeof(HumanAnimInstace_StopGestureHead) == 0x000010, "Wrong size on HumanAnimInstace_StopGestureHead");
static_assert(offsetof(HumanAnimInstace_StopGestureHead, Montage) == 0x000000, "Member 'HumanAnimInstace_StopGestureHead::Montage' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StopGestureHead, bInterrupted) == 0x000008, "Member 'HumanAnimInstace_StopGestureHead::bInterrupted' has a wrong offset!");

// Function Flame.HumanAnimInstace.StopTransition
// 0x0010 (0x0010 - 0x0000)
struct HumanAnimInstace_StopTransition final
{
public:
	class UAnimMontage*                           CurrentTransitionMontage;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_StopTransition) == 0x000008, "Wrong alignment on HumanAnimInstace_StopTransition");
static_assert(sizeof(HumanAnimInstace_StopTransition) == 0x000010, "Wrong size on HumanAnimInstace_StopTransition");
static_assert(offsetof(HumanAnimInstace_StopTransition, CurrentTransitionMontage) == 0x000000, "Member 'HumanAnimInstace_StopTransition::CurrentTransitionMontage' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StopTransition, bInterrupted) == 0x000008, "Member 'HumanAnimInstace_StopTransition::bInterrupted' has a wrong offset!");

// Function Flame.HumanAnimInstace.StopUsingItem
// 0x0018 (0x0018 - 0x0000)
struct HumanAnimInstace_StopUsingItem final
{
public:
	class AHumanCharacter*                        SenderCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  OneConsumable;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemActionFinishedState                      Status;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_StopUsingItem) == 0x000008, "Wrong alignment on HumanAnimInstace_StopUsingItem");
static_assert(sizeof(HumanAnimInstace_StopUsingItem) == 0x000018, "Wrong size on HumanAnimInstace_StopUsingItem");
static_assert(offsetof(HumanAnimInstace_StopUsingItem, SenderCharacter) == 0x000000, "Member 'HumanAnimInstace_StopUsingItem::SenderCharacter' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StopUsingItem, OneConsumable) == 0x000008, "Member 'HumanAnimInstace_StopUsingItem::OneConsumable' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_StopUsingItem, Status) == 0x000010, "Member 'HumanAnimInstace_StopUsingItem::Status' has a wrong offset!");

// Function Flame.HumanAnimInstace.UsingItem
// 0x0018 (0x0018 - 0x0000)
struct HumanAnimInstace_UsingItem final
{
public:
	class AHumanCharacter*                        SenderCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  UsingItem_0;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NeededTimeForInteraction;                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanAnimInstace_UsingItem) == 0x000008, "Wrong alignment on HumanAnimInstace_UsingItem");
static_assert(sizeof(HumanAnimInstace_UsingItem) == 0x000018, "Wrong size on HumanAnimInstace_UsingItem");
static_assert(offsetof(HumanAnimInstace_UsingItem, SenderCharacter) == 0x000000, "Member 'HumanAnimInstace_UsingItem::SenderCharacter' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_UsingItem, UsingItem_0) == 0x000008, "Member 'HumanAnimInstace_UsingItem::UsingItem_0' has a wrong offset!");
static_assert(offsetof(HumanAnimInstace_UsingItem, NeededTimeForInteraction) == 0x000010, "Member 'HumanAnimInstace_UsingItem::NeededTimeForInteraction' has a wrong offset!");

// Function Flame.HumanAnimInstace.GetRootForwardVector
// 0x000C (0x000C - 0x0000)
struct HumanAnimInstace_GetRootForwardVector final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_GetRootForwardVector) == 0x000004, "Wrong alignment on HumanAnimInstace_GetRootForwardVector");
static_assert(sizeof(HumanAnimInstace_GetRootForwardVector) == 0x00000C, "Wrong size on HumanAnimInstace_GetRootForwardVector");
static_assert(offsetof(HumanAnimInstace_GetRootForwardVector, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_GetRootForwardVector::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.LocomotionIdle
// 0x0001 (0x0001 - 0x0000)
struct HumanAnimInstace_LocomotionIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_LocomotionIdle) == 0x000001, "Wrong alignment on HumanAnimInstace_LocomotionIdle");
static_assert(sizeof(HumanAnimInstace_LocomotionIdle) == 0x000001, "Wrong size on HumanAnimInstace_LocomotionIdle");
static_assert(offsetof(HumanAnimInstace_LocomotionIdle, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_LocomotionIdle::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.MapPullOutLength
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_MapPullOutLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_MapPullOutLength) == 0x000004, "Wrong alignment on HumanAnimInstace_MapPullOutLength");
static_assert(sizeof(HumanAnimInstace_MapPullOutLength) == 0x000004, "Wrong size on HumanAnimInstace_MapPullOutLength");
static_assert(offsetof(HumanAnimInstace_MapPullOutLength, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_MapPullOutLength::ReturnValue' has a wrong offset!");

// Function Flame.HumanAnimInstace.MapPutAwayLength
// 0x0004 (0x0004 - 0x0000)
struct HumanAnimInstace_MapPutAwayLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanAnimInstace_MapPutAwayLength) == 0x000004, "Wrong alignment on HumanAnimInstace_MapPutAwayLength");
static_assert(sizeof(HumanAnimInstace_MapPutAwayLength) == 0x000004, "Wrong size on HumanAnimInstace_MapPutAwayLength");
static_assert(offsetof(HumanAnimInstace_MapPutAwayLength, ReturnValue) == 0x000000, "Member 'HumanAnimInstace_MapPutAwayLength::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.ApplyCharacterDescriptor
// 0x0038 (0x0038 - 0x0000)
struct HumanCharacterFunctions_ApplyCharacterDescriptor final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHumanCharacterInfo                    SourceDescriptor;                                  // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_ApplyCharacterDescriptor) == 0x000008, "Wrong alignment on HumanCharacterFunctions_ApplyCharacterDescriptor");
static_assert(sizeof(HumanCharacterFunctions_ApplyCharacterDescriptor) == 0x000038, "Wrong size on HumanCharacterFunctions_ApplyCharacterDescriptor");
static_assert(offsetof(HumanCharacterFunctions_ApplyCharacterDescriptor, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_ApplyCharacterDescriptor::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ApplyCharacterDescriptor, SourceDescriptor) == 0x000008, "Member 'HumanCharacterFunctions_ApplyCharacterDescriptor::SourceDescriptor' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ApplyCharacterDescriptor, ReturnValue) == 0x000030, "Member 'HumanCharacterFunctions_ApplyCharacterDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.ApplyLoadoutInfo
// 0x0038 (0x0038 - 0x0000)
struct HumanCharacterFunctions_ApplyLoadoutInfo final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           SourceDescriptor;                                  // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_ApplyLoadoutInfo) == 0x000008, "Wrong alignment on HumanCharacterFunctions_ApplyLoadoutInfo");
static_assert(sizeof(HumanCharacterFunctions_ApplyLoadoutInfo) == 0x000038, "Wrong size on HumanCharacterFunctions_ApplyLoadoutInfo");
static_assert(offsetof(HumanCharacterFunctions_ApplyLoadoutInfo, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_ApplyLoadoutInfo::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ApplyLoadoutInfo, SourceDescriptor) == 0x000008, "Member 'HumanCharacterFunctions_ApplyLoadoutInfo::SourceDescriptor' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ApplyLoadoutInfo, ReturnValue) == 0x000030, "Member 'HumanCharacterFunctions_ApplyLoadoutInfo::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.ComputeLoadoutsDiff
// 0x00F0 (0x00F0 - 0x0000)
struct HumanCharacterFunctions_ComputeLoadoutsDiff final
{
public:
	struct FLoadoutInfo                           ReceivedLoadout;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           CurrentLoadout;                                    // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLoadoutDiff                           ReturnValue;                                       // 0x0050(0x00A0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacterFunctions_ComputeLoadoutsDiff) == 0x000008, "Wrong alignment on HumanCharacterFunctions_ComputeLoadoutsDiff");
static_assert(sizeof(HumanCharacterFunctions_ComputeLoadoutsDiff) == 0x0000F0, "Wrong size on HumanCharacterFunctions_ComputeLoadoutsDiff");
static_assert(offsetof(HumanCharacterFunctions_ComputeLoadoutsDiff, ReceivedLoadout) == 0x000000, "Member 'HumanCharacterFunctions_ComputeLoadoutsDiff::ReceivedLoadout' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ComputeLoadoutsDiff, CurrentLoadout) == 0x000028, "Member 'HumanCharacterFunctions_ComputeLoadoutsDiff::CurrentLoadout' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_ComputeLoadoutsDiff, ReturnValue) == 0x000050, "Member 'HumanCharacterFunctions_ComputeLoadoutsDiff::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.CreateCharacterDescriptor
// 0x0038 (0x0038 - 0x0000)
struct HumanCharacterFunctions_CreateCharacterDescriptor final
{
public:
	const class AHumanCharacter*                  FromCharacter;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHumanCharacterInfo                    TargetDescriptor;                                  // 0x0008(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_CreateCharacterDescriptor) == 0x000008, "Wrong alignment on HumanCharacterFunctions_CreateCharacterDescriptor");
static_assert(sizeof(HumanCharacterFunctions_CreateCharacterDescriptor) == 0x000038, "Wrong size on HumanCharacterFunctions_CreateCharacterDescriptor");
static_assert(offsetof(HumanCharacterFunctions_CreateCharacterDescriptor, FromCharacter) == 0x000000, "Member 'HumanCharacterFunctions_CreateCharacterDescriptor::FromCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_CreateCharacterDescriptor, TargetDescriptor) == 0x000008, "Member 'HumanCharacterFunctions_CreateCharacterDescriptor::TargetDescriptor' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_CreateCharacterDescriptor, ReturnValue) == 0x000030, "Member 'HumanCharacterFunctions_CreateCharacterDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.GetCurrentWeaponStatus
// 0x0018 (0x0018 - 0x0000)
struct HumanCharacterFunctions_GetCurrentWeaponStatus final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacterFunctions_GetCurrentWeaponStatus) == 0x000008, "Wrong alignment on HumanCharacterFunctions_GetCurrentWeaponStatus");
static_assert(sizeof(HumanCharacterFunctions_GetCurrentWeaponStatus) == 0x000018, "Wrong size on HumanCharacterFunctions_GetCurrentWeaponStatus");
static_assert(offsetof(HumanCharacterFunctions_GetCurrentWeaponStatus, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_GetCurrentWeaponStatus::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_GetCurrentWeaponStatus, ReturnValue) == 0x000008, "Member 'HumanCharacterFunctions_GetCurrentWeaponStatus::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.GetMachineStatusForUpperBody
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacterFunctions_GetMachineStatusForUpperBody final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMachineStatus                                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_GetMachineStatusForUpperBody) == 0x000008, "Wrong alignment on HumanCharacterFunctions_GetMachineStatusForUpperBody");
static_assert(sizeof(HumanCharacterFunctions_GetMachineStatusForUpperBody) == 0x000010, "Wrong size on HumanCharacterFunctions_GetMachineStatusForUpperBody");
static_assert(offsetof(HumanCharacterFunctions_GetMachineStatusForUpperBody, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_GetMachineStatusForUpperBody::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_GetMachineStatusForUpperBody, ReturnValue) == 0x000008, "Member 'HumanCharacterFunctions_GetMachineStatusForUpperBody::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.LoadAllWeaponsFromBag
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacterFunctions_LoadAllWeaponsFromBag final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_LoadAllWeaponsFromBag) == 0x000008, "Wrong alignment on HumanCharacterFunctions_LoadAllWeaponsFromBag");
static_assert(sizeof(HumanCharacterFunctions_LoadAllWeaponsFromBag) == 0x000010, "Wrong size on HumanCharacterFunctions_LoadAllWeaponsFromBag");
static_assert(offsetof(HumanCharacterFunctions_LoadAllWeaponsFromBag, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_LoadAllWeaponsFromBag::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_LoadAllWeaponsFromBag, ReturnValue) == 0x000008, "Member 'HumanCharacterFunctions_LoadAllWeaponsFromBag::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.RemoveMagazinesFromAllWeapons
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacterFunctions_RemoveMagazinesFromAllWeapons final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_RemoveMagazinesFromAllWeapons) == 0x000008, "Wrong alignment on HumanCharacterFunctions_RemoveMagazinesFromAllWeapons");
static_assert(sizeof(HumanCharacterFunctions_RemoveMagazinesFromAllWeapons) == 0x000010, "Wrong size on HumanCharacterFunctions_RemoveMagazinesFromAllWeapons");
static_assert(offsetof(HumanCharacterFunctions_RemoveMagazinesFromAllWeapons, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_RemoveMagazinesFromAllWeapons::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_RemoveMagazinesFromAllWeapons, ReturnValue) == 0x000008, "Member 'HumanCharacterFunctions_RemoveMagazinesFromAllWeapons::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.UnloadAllWeaponsToBag
// 0x0010 (0x0010 - 0x0000)
struct HumanCharacterFunctions_UnloadAllWeaponsToBag final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanCharacterFunctions_UnloadAllWeaponsToBag) == 0x000008, "Wrong alignment on HumanCharacterFunctions_UnloadAllWeaponsToBag");
static_assert(sizeof(HumanCharacterFunctions_UnloadAllWeaponsToBag) == 0x000010, "Wrong size on HumanCharacterFunctions_UnloadAllWeaponsToBag");
static_assert(offsetof(HumanCharacterFunctions_UnloadAllWeaponsToBag, TargetCharacter) == 0x000000, "Member 'HumanCharacterFunctions_UnloadAllWeaponsToBag::TargetCharacter' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_UnloadAllWeaponsToBag, ReturnValue) == 0x000008, "Member 'HumanCharacterFunctions_UnloadAllWeaponsToBag::ReturnValue' has a wrong offset!");

// Function Flame.HumanCharacterFunctions.WhatIsMissingInLoadout
// 0x0078 (0x0078 - 0x0000)
struct HumanCharacterFunctions_WhatIsMissingInLoadout final
{
public:
	struct FLoadoutInfo                           RequestedLoadout;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           CurrentLoadout;                                    // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLoadoutInfo                           ReturnValue;                                       // 0x0050(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanCharacterFunctions_WhatIsMissingInLoadout) == 0x000008, "Wrong alignment on HumanCharacterFunctions_WhatIsMissingInLoadout");
static_assert(sizeof(HumanCharacterFunctions_WhatIsMissingInLoadout) == 0x000078, "Wrong size on HumanCharacterFunctions_WhatIsMissingInLoadout");
static_assert(offsetof(HumanCharacterFunctions_WhatIsMissingInLoadout, RequestedLoadout) == 0x000000, "Member 'HumanCharacterFunctions_WhatIsMissingInLoadout::RequestedLoadout' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_WhatIsMissingInLoadout, CurrentLoadout) == 0x000028, "Member 'HumanCharacterFunctions_WhatIsMissingInLoadout::CurrentLoadout' has a wrong offset!");
static_assert(offsetof(HumanCharacterFunctions_WhatIsMissingInLoadout, ReturnValue) == 0x000050, "Member 'HumanCharacterFunctions_WhatIsMissingInLoadout::ReturnValue' has a wrong offset!");

// Function Flame.NotificationSystem.AddNotification
// 0x0008 (0x0008 - 0x0000)
struct NotificationSystem_AddNotification final
{
public:
	class UNotificationBase*                      InNotification;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationSystem_AddNotification) == 0x000008, "Wrong alignment on NotificationSystem_AddNotification");
static_assert(sizeof(NotificationSystem_AddNotification) == 0x000008, "Wrong size on NotificationSystem_AddNotification");
static_assert(offsetof(NotificationSystem_AddNotification, InNotification) == 0x000000, "Member 'NotificationSystem_AddNotification::InNotification' has a wrong offset!");

// Function Flame.NotificationSystem.OnPreLoadMap
// 0x0010 (0x0010 - 0x0000)
struct NotificationSystem_OnPreLoadMap final
{
public:
	class FString                                 InMapName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationSystem_OnPreLoadMap) == 0x000008, "Wrong alignment on NotificationSystem_OnPreLoadMap");
static_assert(sizeof(NotificationSystem_OnPreLoadMap) == 0x000010, "Wrong size on NotificationSystem_OnPreLoadMap");
static_assert(offsetof(NotificationSystem_OnPreLoadMap, InMapName) == 0x000000, "Member 'NotificationSystem_OnPreLoadMap::InMapName' has a wrong offset!");

// Function Flame.HumanMovementComponent.ClientSetIsStaggered
// 0x0001 (0x0001 - 0x0000)
struct HumanMovementComponent_ClientSetIsStaggered final
{
public:
	bool                                          Staggered;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_ClientSetIsStaggered) == 0x000001, "Wrong alignment on HumanMovementComponent_ClientSetIsStaggered");
static_assert(sizeof(HumanMovementComponent_ClientSetIsStaggered) == 0x000001, "Wrong size on HumanMovementComponent_ClientSetIsStaggered");
static_assert(offsetof(HumanMovementComponent_ClientSetIsStaggered, Staggered) == 0x000000, "Member 'HumanMovementComponent_ClientSetIsStaggered::Staggered' has a wrong offset!");

// Function Flame.HumanMovementComponent.DoCurveDisplacement
// 0x0010 (0x0010 - 0x0000)
struct HumanMovementComponent_DoCurveDisplacement final
{
public:
	const class UAnimSequence*                    Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldYaw;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanMovementComponent_DoCurveDisplacement) == 0x000008, "Wrong alignment on HumanMovementComponent_DoCurveDisplacement");
static_assert(sizeof(HumanMovementComponent_DoCurveDisplacement) == 0x000010, "Wrong size on HumanMovementComponent_DoCurveDisplacement");
static_assert(offsetof(HumanMovementComponent_DoCurveDisplacement, Sequence) == 0x000000, "Member 'HumanMovementComponent_DoCurveDisplacement::Sequence' has a wrong offset!");
static_assert(offsetof(HumanMovementComponent_DoCurveDisplacement, WorldYaw) == 0x000008, "Member 'HumanMovementComponent_DoCurveDisplacement::WorldYaw' has a wrong offset!");

// Function Flame.HumanMovementComponent.DoStagger
// 0x000C (0x000C - 0x0000)
struct HumanMovementComponent_DoStagger final
{
public:
	int32                                         StaggerSeverity;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldYaw;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanMovementComponent_DoStagger) == 0x000004, "Wrong alignment on HumanMovementComponent_DoStagger");
static_assert(sizeof(HumanMovementComponent_DoStagger) == 0x00000C, "Wrong size on HumanMovementComponent_DoStagger");
static_assert(offsetof(HumanMovementComponent_DoStagger, StaggerSeverity) == 0x000000, "Member 'HumanMovementComponent_DoStagger::StaggerSeverity' has a wrong offset!");
static_assert(offsetof(HumanMovementComponent_DoStagger, WorldYaw) == 0x000004, "Member 'HumanMovementComponent_DoStagger::WorldYaw' has a wrong offset!");
static_assert(offsetof(HumanMovementComponent_DoStagger, ReturnValue) == 0x000008, "Member 'HumanMovementComponent_DoStagger::ReturnValue' has a wrong offset!");

// Function Flame.HumanMovementComponent.LagSwitch_RevertToServerLocation
// 0x0018 (0x0018 - 0x0000)
struct HumanMovementComponent_LagSwitch_RevertToServerLocation final
{
public:
	struct FVector                                ServerLocation;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ServerRotation;                                    // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_LagSwitch_RevertToServerLocation) == 0x000004, "Wrong alignment on HumanMovementComponent_LagSwitch_RevertToServerLocation");
static_assert(sizeof(HumanMovementComponent_LagSwitch_RevertToServerLocation) == 0x000018, "Wrong size on HumanMovementComponent_LagSwitch_RevertToServerLocation");
static_assert(offsetof(HumanMovementComponent_LagSwitch_RevertToServerLocation, ServerLocation) == 0x000000, "Member 'HumanMovementComponent_LagSwitch_RevertToServerLocation::ServerLocation' has a wrong offset!");
static_assert(offsetof(HumanMovementComponent_LagSwitch_RevertToServerLocation, ServerRotation) == 0x00000C, "Member 'HumanMovementComponent_LagSwitch_RevertToServerLocation::ServerRotation' has a wrong offset!");

// Function Flame.HumanMovementComponent.MulticastStartClimbOrVault
// 0x0018 (0x0018 - 0x0000)
struct HumanMovementComponent_MulticastStartClimbOrVault final
{
public:
	struct FVector                                PreppedLoc;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PreppedVel;                                        // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_MulticastStartClimbOrVault) == 0x000004, "Wrong alignment on HumanMovementComponent_MulticastStartClimbOrVault");
static_assert(sizeof(HumanMovementComponent_MulticastStartClimbOrVault) == 0x000018, "Wrong size on HumanMovementComponent_MulticastStartClimbOrVault");
static_assert(offsetof(HumanMovementComponent_MulticastStartClimbOrVault, PreppedLoc) == 0x000000, "Member 'HumanMovementComponent_MulticastStartClimbOrVault::PreppedLoc' has a wrong offset!");
static_assert(offsetof(HumanMovementComponent_MulticastStartClimbOrVault, PreppedVel) == 0x00000C, "Member 'HumanMovementComponent_MulticastStartClimbOrVault::PreppedVel' has a wrong offset!");

// Function Flame.HumanMovementComponent.RequestStanceChange
// 0x0001 (0x0001 - 0x0000)
struct HumanMovementComponent_RequestStanceChange final
{
public:
	EStance                                       NewStance;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_RequestStanceChange) == 0x000001, "Wrong alignment on HumanMovementComponent_RequestStanceChange");
static_assert(sizeof(HumanMovementComponent_RequestStanceChange) == 0x000001, "Wrong size on HumanMovementComponent_RequestStanceChange");
static_assert(offsetof(HumanMovementComponent_RequestStanceChange, NewStance) == 0x000000, "Member 'HumanMovementComponent_RequestStanceChange::NewStance' has a wrong offset!");

// Function Flame.HumanMovementComponent.GetStance
// 0x0001 (0x0001 - 0x0000)
struct HumanMovementComponent_GetStance final
{
public:
	EStance                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_GetStance) == 0x000001, "Wrong alignment on HumanMovementComponent_GetStance");
static_assert(sizeof(HumanMovementComponent_GetStance) == 0x000001, "Wrong size on HumanMovementComponent_GetStance");
static_assert(offsetof(HumanMovementComponent_GetStance, ReturnValue) == 0x000000, "Member 'HumanMovementComponent_GetStance::ReturnValue' has a wrong offset!");

// Function Flame.HumanMovementComponent.IsStaggered
// 0x0001 (0x0001 - 0x0000)
struct HumanMovementComponent_IsStaggered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanMovementComponent_IsStaggered) == 0x000001, "Wrong alignment on HumanMovementComponent_IsStaggered");
static_assert(sizeof(HumanMovementComponent_IsStaggered) == 0x000001, "Wrong size on HumanMovementComponent_IsStaggered");
static_assert(offsetof(HumanMovementComponent_IsStaggered, ReturnValue) == 0x000000, "Member 'HumanMovementComponent_IsStaggered::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.ChangeWeaponSkin
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ChangeWeaponSkin final
{
public:
	class AWeapon*                                TargetWeapon;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemSkin>                  NewSkin;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ChangeWeaponSkin) == 0x000008, "Wrong alignment on HumanPlayerController_ChangeWeaponSkin");
static_assert(sizeof(HumanPlayerController_ChangeWeaponSkin) == 0x000010, "Wrong size on HumanPlayerController_ChangeWeaponSkin");
static_assert(offsetof(HumanPlayerController_ChangeWeaponSkin, TargetWeapon) == 0x000000, "Member 'HumanPlayerController_ChangeWeaponSkin::TargetWeapon' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ChangeWeaponSkin, NewSkin) == 0x000008, "Member 'HumanPlayerController_ChangeWeaponSkin::NewSkin' has a wrong offset!");

// Function Flame.HumanPlayerController.CheatAddConsumable
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_CheatAddConsumable final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CheatAddConsumable) == 0x000008, "Wrong alignment on HumanPlayerController_CheatAddConsumable");
static_assert(sizeof(HumanPlayerController_CheatAddConsumable) == 0x000008, "Wrong size on HumanPlayerController_CheatAddConsumable");
static_assert(offsetof(HumanPlayerController_CheatAddConsumable, ConsumableClass) == 0x000000, "Member 'HumanPlayerController_CheatAddConsumable::ConsumableClass' has a wrong offset!");

// Function Flame.HumanPlayerController.CheatAddWeapon
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_CheatAddWeapon final
{
public:
	TSubclassOf<class AWeapon>                    OneWeaponClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CheatAddWeapon) == 0x000008, "Wrong alignment on HumanPlayerController_CheatAddWeapon");
static_assert(sizeof(HumanPlayerController_CheatAddWeapon) == 0x000008, "Wrong size on HumanPlayerController_CheatAddWeapon");
static_assert(offsetof(HumanPlayerController_CheatAddWeapon, OneWeaponClass) == 0x000000, "Member 'HumanPlayerController_CheatAddWeapon::OneWeaponClass' has a wrong offset!");

// Function Flame.HumanPlayerController.CheatServer
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_CheatServer final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CheatServer) == 0x000008, "Wrong alignment on HumanPlayerController_CheatServer");
static_assert(sizeof(HumanPlayerController_CheatServer) == 0x000010, "Wrong size on HumanPlayerController_CheatServer");
static_assert(offsetof(HumanPlayerController_CheatServer, Command) == 0x000000, "Member 'HumanPlayerController_CheatServer::Command' has a wrong offset!");

// Function Flame.HumanPlayerController.CheatServerRunCommand
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_CheatServerRunCommand final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CheatServerRunCommand) == 0x000008, "Wrong alignment on HumanPlayerController_CheatServerRunCommand");
static_assert(sizeof(HumanPlayerController_CheatServerRunCommand) == 0x000010, "Wrong size on HumanPlayerController_CheatServerRunCommand");
static_assert(offsetof(HumanPlayerController_CheatServerRunCommand, Command) == 0x000000, "Member 'HumanPlayerController_CheatServerRunCommand::Command' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientCreateSessionForRandom
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ClientCreateSessionForRandom final
{
public:
	class FString                                 GroupId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientCreateSessionForRandom) == 0x000008, "Wrong alignment on HumanPlayerController_ClientCreateSessionForRandom");
static_assert(sizeof(HumanPlayerController_ClientCreateSessionForRandom) == 0x000010, "Wrong size on HumanPlayerController_ClientCreateSessionForRandom");
static_assert(offsetof(HumanPlayerController_ClientCreateSessionForRandom, GroupId) == 0x000000, "Member 'HumanPlayerController_ClientCreateSessionForRandom::GroupId' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientJoinSessionForRandom
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ClientJoinSessionForRandom final
{
public:
	class FString                                 GroupSessionId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientJoinSessionForRandom) == 0x000008, "Wrong alignment on HumanPlayerController_ClientJoinSessionForRandom");
static_assert(sizeof(HumanPlayerController_ClientJoinSessionForRandom) == 0x000010, "Wrong size on HumanPlayerController_ClientJoinSessionForRandom");
static_assert(offsetof(HumanPlayerController_ClientJoinSessionForRandom, GroupSessionId) == 0x000000, "Member 'HumanPlayerController_ClientJoinSessionForRandom::GroupSessionId' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientSetSpawnRotation
// 0x000C (0x000C - 0x0000)
struct HumanPlayerController_ClientSetSpawnRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientSetSpawnRotation) == 0x000004, "Wrong alignment on HumanPlayerController_ClientSetSpawnRotation");
static_assert(sizeof(HumanPlayerController_ClientSetSpawnRotation) == 0x00000C, "Wrong size on HumanPlayerController_ClientSetSpawnRotation");
static_assert(offsetof(HumanPlayerController_ClientSetSpawnRotation, Rotation) == 0x000000, "Member 'HumanPlayerController_ClientSetSpawnRotation::Rotation' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on HumanPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(HumanPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on HumanPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(HumanPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'HumanPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'HumanPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientSetUserIdToken
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ClientSetUserIdToken final
{
public:
	class FString                                 IdToken;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientSetUserIdToken) == 0x000008, "Wrong alignment on HumanPlayerController_ClientSetUserIdToken");
static_assert(sizeof(HumanPlayerController_ClientSetUserIdToken) == 0x000010, "Wrong size on HumanPlayerController_ClientSetUserIdToken");
static_assert(offsetof(HumanPlayerController_ClientSetUserIdToken, IdToken) == 0x000000, "Member 'HumanPlayerController_ClientSetUserIdToken::IdToken' has a wrong offset!");

// Function Flame.HumanPlayerController.ClientUpdateWorldTime
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_ClientUpdateWorldTime final
{
public:
	float                                         ClientTimestamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTimestamp;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ClientUpdateWorldTime) == 0x000004, "Wrong alignment on HumanPlayerController_ClientUpdateWorldTime");
static_assert(sizeof(HumanPlayerController_ClientUpdateWorldTime) == 0x000008, "Wrong size on HumanPlayerController_ClientUpdateWorldTime");
static_assert(offsetof(HumanPlayerController_ClientUpdateWorldTime, ClientTimestamp) == 0x000000, "Member 'HumanPlayerController_ClientUpdateWorldTime::ClientTimestamp' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ClientUpdateWorldTime, ServerTimestamp) == 0x000004, "Member 'HumanPlayerController_ClientUpdateWorldTime::ServerTimestamp' has a wrong offset!");

// DelegateFunction Flame.HumanPlayerController.CloudUserIdSetDelegate__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature) == 0x000008, "Wrong alignment on HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature");
static_assert(sizeof(HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature) == 0x000010, "Wrong size on HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature");
static_assert(offsetof(HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature, Userid) == 0x000000, "Member 'HumanPlayerController_CloudUserIdSetDelegate__DelegateSignature::Userid' has a wrong offset!");

// Function Flame.HumanPlayerController.CollectCraftedItems
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_CollectCraftedItems final
{
public:
	int32                                         QueueId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_CollectCraftedItems) == 0x000004, "Wrong alignment on HumanPlayerController_CollectCraftedItems");
static_assert(sizeof(HumanPlayerController_CollectCraftedItems) == 0x000008, "Wrong size on HumanPlayerController_CollectCraftedItems");
static_assert(offsetof(HumanPlayerController_CollectCraftedItems, QueueId) == 0x000000, "Member 'HumanPlayerController_CollectCraftedItems::QueueId' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_CollectCraftedItems, ReturnValue) == 0x000004, "Member 'HumanPlayerController_CollectCraftedItems::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.CreateGlint
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_CreateGlint final
{
public:
	class USceneComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_CreateGlint) == 0x000008, "Wrong alignment on HumanPlayerController_CreateGlint");
static_assert(sizeof(HumanPlayerController_CreateGlint) == 0x000010, "Wrong size on HumanPlayerController_CreateGlint");
static_assert(offsetof(HumanPlayerController_CreateGlint, AttachComponent) == 0x000000, "Member 'HumanPlayerController_CreateGlint::AttachComponent' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_CreateGlint, Size) == 0x000008, "Member 'HumanPlayerController_CreateGlint::Size' has a wrong offset!");

// Function Flame.HumanPlayerController.DebugTestShelterFunc
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_DebugTestShelterFunc final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_DebugTestShelterFunc) == 0x000008, "Wrong alignment on HumanPlayerController_DebugTestShelterFunc");
static_assert(sizeof(HumanPlayerController_DebugTestShelterFunc) == 0x000008, "Wrong size on HumanPlayerController_DebugTestShelterFunc");
static_assert(offsetof(HumanPlayerController_DebugTestShelterFunc, Slot) == 0x000000, "Member 'HumanPlayerController_DebugTestShelterFunc::Slot' has a wrong offset!");

// Function Flame.HumanPlayerController.GetAssignedSkinsFromCloud
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_GetAssignedSkinsFromCloud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetAssignedSkinsFromCloud) == 0x000001, "Wrong alignment on HumanPlayerController_GetAssignedSkinsFromCloud");
static_assert(sizeof(HumanPlayerController_GetAssignedSkinsFromCloud) == 0x000001, "Wrong size on HumanPlayerController_GetAssignedSkinsFromCloud");
static_assert(offsetof(HumanPlayerController_GetAssignedSkinsFromCloud, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetAssignedSkinsFromCloud::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCurrentLoadout
// 0x0030 (0x0030 - 0x0000)
struct HumanPlayerController_GetCurrentLoadout final
{
public:
	struct FLoadoutInfo                           OutLoadout;                                        // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_GetCurrentLoadout) == 0x000008, "Wrong alignment on HumanPlayerController_GetCurrentLoadout");
static_assert(sizeof(HumanPlayerController_GetCurrentLoadout) == 0x000030, "Wrong size on HumanPlayerController_GetCurrentLoadout");
static_assert(offsetof(HumanPlayerController_GetCurrentLoadout, OutLoadout) == 0x000000, "Member 'HumanPlayerController_GetCurrentLoadout::OutLoadout' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_GetCurrentLoadout, ReturnValue) == 0x000028, "Member 'HumanPlayerController_GetCurrentLoadout::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetLastLoadout
// 0x0030 (0x0030 - 0x0000)
struct HumanPlayerController_GetLastLoadout final
{
public:
	struct FLoadoutInfo                           OutLoadout;                                        // 0x0000(0x0028)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_GetLastLoadout) == 0x000008, "Wrong alignment on HumanPlayerController_GetLastLoadout");
static_assert(sizeof(HumanPlayerController_GetLastLoadout) == 0x000030, "Wrong size on HumanPlayerController_GetLastLoadout");
static_assert(offsetof(HumanPlayerController_GetLastLoadout, OutLoadout) == 0x000000, "Member 'HumanPlayerController_GetLastLoadout::OutLoadout' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_GetLastLoadout, ReturnValue) == 0x000028, "Member 'HumanPlayerController_GetLastLoadout::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetPlayerGroup
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetPlayerGroup final
{
public:
	class UPlayerGroupInfo*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetPlayerGroup) == 0x000008, "Wrong alignment on HumanPlayerController_GetPlayerGroup");
static_assert(sizeof(HumanPlayerController_GetPlayerGroup) == 0x000008, "Wrong size on HumanPlayerController_GetPlayerGroup");
static_assert(offsetof(HumanPlayerController_GetPlayerGroup, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetPlayerGroup::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.OnEnterBuildingVolume
// 0x00B0 (0x00B0 - 0x0000)
struct HumanPlayerController_OnEnterBuildingVolume final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_OnEnterBuildingVolume) == 0x000008, "Wrong alignment on HumanPlayerController_OnEnterBuildingVolume");
static_assert(sizeof(HumanPlayerController_OnEnterBuildingVolume) == 0x0000B0, "Wrong size on HumanPlayerController_OnEnterBuildingVolume");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, OverlappedComponent) == 0x000000, "Member 'HumanPlayerController_OnEnterBuildingVolume::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, OtherActor) == 0x000008, "Member 'HumanPlayerController_OnEnterBuildingVolume::OtherActor' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, OtherComp) == 0x000010, "Member 'HumanPlayerController_OnEnterBuildingVolume::OtherComp' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, OtherBodyIndex) == 0x000018, "Member 'HumanPlayerController_OnEnterBuildingVolume::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, bFromSweep) == 0x00001C, "Member 'HumanPlayerController_OnEnterBuildingVolume::bFromSweep' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolume, SweepResult) == 0x000020, "Member 'HumanPlayerController_OnEnterBuildingVolume::SweepResult' has a wrong offset!");

// Function Flame.HumanPlayerController.OnEnterBuildingVolumeByActor
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_OnEnterBuildingVolumeByActor final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnEnterBuildingVolumeByActor) == 0x000008, "Wrong alignment on HumanPlayerController_OnEnterBuildingVolumeByActor");
static_assert(sizeof(HumanPlayerController_OnEnterBuildingVolumeByActor) == 0x000010, "Wrong size on HumanPlayerController_OnEnterBuildingVolumeByActor");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolumeByActor, OverlappedActor) == 0x000000, "Member 'HumanPlayerController_OnEnterBuildingVolumeByActor::OverlappedActor' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnEnterBuildingVolumeByActor, OtherActor) == 0x000008, "Member 'HumanPlayerController_OnEnterBuildingVolumeByActor::OtherActor' has a wrong offset!");

// Function Flame.HumanPlayerController.OnGameStorePurchaseCompleted
// 0x00E0 (0x00E0 - 0x0000)
struct HumanPlayerController_OnGameStorePurchaseCompleted final
{
public:
	EGameStorePurchaseType                        PurchaseType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PurchaseRequestId;                                 // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameStoreProductId                    RequestedProductId;                                // 0x0038(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudRequestResult                    Result;                                            // 0x0048(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameStorePurchaseResult               PurchaseResult;                                    // 0x00A0(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PurchaseListRefreshed;                             // 0x00D8(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_OnGameStorePurchaseCompleted) == 0x000008, "Wrong alignment on HumanPlayerController_OnGameStorePurchaseCompleted");
static_assert(sizeof(HumanPlayerController_OnGameStorePurchaseCompleted) == 0x0000E0, "Wrong size on HumanPlayerController_OnGameStorePurchaseCompleted");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, PurchaseType) == 0x000000, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::PurchaseType' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, Userid) == 0x000008, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::Userid' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, PurchaseRequestId) == 0x000030, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::PurchaseRequestId' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, RequestedProductId) == 0x000038, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::RequestedProductId' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, Result) == 0x000048, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::Result' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, PurchaseResult) == 0x0000A0, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::PurchaseResult' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnGameStorePurchaseCompleted, PurchaseListRefreshed) == 0x0000D8, "Member 'HumanPlayerController_OnGameStorePurchaseCompleted::PurchaseListRefreshed' has a wrong offset!");

// Function Flame.HumanPlayerController.OnInputActionProcessed
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_OnInputActionProcessed final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnInputActionProcessed) == 0x000008, "Wrong alignment on HumanPlayerController_OnInputActionProcessed");
static_assert(sizeof(HumanPlayerController_OnInputActionProcessed) == 0x000010, "Wrong size on HumanPlayerController_OnInputActionProcessed");
static_assert(offsetof(HumanPlayerController_OnInputActionProcessed, ActionName) == 0x000000, "Member 'HumanPlayerController_OnInputActionProcessed::ActionName' has a wrong offset!");

// Function Flame.HumanPlayerController.OnLeaveBuildingVolume
// 0x0020 (0x0020 - 0x0000)
struct HumanPlayerController_OnLeaveBuildingVolume final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_OnLeaveBuildingVolume) == 0x000008, "Wrong alignment on HumanPlayerController_OnLeaveBuildingVolume");
static_assert(sizeof(HumanPlayerController_OnLeaveBuildingVolume) == 0x000020, "Wrong size on HumanPlayerController_OnLeaveBuildingVolume");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolume, OverlappedComponent) == 0x000000, "Member 'HumanPlayerController_OnLeaveBuildingVolume::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolume, OtherActor) == 0x000008, "Member 'HumanPlayerController_OnLeaveBuildingVolume::OtherActor' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolume, OtherComp) == 0x000010, "Member 'HumanPlayerController_OnLeaveBuildingVolume::OtherComp' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolume, OtherBodyIndex) == 0x000018, "Member 'HumanPlayerController_OnLeaveBuildingVolume::OtherBodyIndex' has a wrong offset!");

// Function Flame.HumanPlayerController.OnLeaveBuildingVolumeByActor
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_OnLeaveBuildingVolumeByActor final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnLeaveBuildingVolumeByActor) == 0x000008, "Wrong alignment on HumanPlayerController_OnLeaveBuildingVolumeByActor");
static_assert(sizeof(HumanPlayerController_OnLeaveBuildingVolumeByActor) == 0x000010, "Wrong size on HumanPlayerController_OnLeaveBuildingVolumeByActor");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolumeByActor, OverlappedActor) == 0x000000, "Member 'HumanPlayerController_OnLeaveBuildingVolumeByActor::OverlappedActor' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnLeaveBuildingVolumeByActor, OtherActor) == 0x000008, "Member 'HumanPlayerController_OnLeaveBuildingVolumeByActor::OtherActor' has a wrong offset!");

// DelegateFunction Flame.HumanPlayerController.OnPlayerStateFirstSync__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature final
{
public:
	class AHumanPlayerController*                 HumanController;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanPlayerState*                      HumanPlayerState;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature) == 0x000008, "Wrong alignment on HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature");
static_assert(sizeof(HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature) == 0x000010, "Wrong size on HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature");
static_assert(offsetof(HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature, HumanController) == 0x000000, "Member 'HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature::HumanController' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature, HumanPlayerState) == 0x000008, "Member 'HumanPlayerController_OnPlayerStateFirstSync__DelegateSignature::HumanPlayerState' has a wrong offset!");

// Function Flame.HumanPlayerController.OnRep_ClothesLoaded
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_OnRep_ClothesLoaded final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnRep_ClothesLoaded) == 0x000001, "Wrong alignment on HumanPlayerController_OnRep_ClothesLoaded");
static_assert(sizeof(HumanPlayerController_OnRep_ClothesLoaded) == 0x000001, "Wrong size on HumanPlayerController_OnRep_ClothesLoaded");
static_assert(offsetof(HumanPlayerController_OnRep_ClothesLoaded, OldValue) == 0x000000, "Member 'HumanPlayerController_OnRep_ClothesLoaded::OldValue' has a wrong offset!");

// Function Flame.HumanPlayerController.OnRep_InventoryLoaded
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_OnRep_InventoryLoaded final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnRep_InventoryLoaded) == 0x000001, "Wrong alignment on HumanPlayerController_OnRep_InventoryLoaded");
static_assert(sizeof(HumanPlayerController_OnRep_InventoryLoaded) == 0x000001, "Wrong size on HumanPlayerController_OnRep_InventoryLoaded");
static_assert(offsetof(HumanPlayerController_OnRep_InventoryLoaded, OldValue) == 0x000000, "Member 'HumanPlayerController_OnRep_InventoryLoaded::OldValue' has a wrong offset!");

// Function Flame.HumanPlayerController.OnSpawnBPActorFromConsole
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerController_OnSpawnBPActorFromConsole final
{
public:
	class FString                                 ObjectName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UClass*                           ObjectClass;                                       // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnSpawnBPActorFromConsole) == 0x000008, "Wrong alignment on HumanPlayerController_OnSpawnBPActorFromConsole");
static_assert(sizeof(HumanPlayerController_OnSpawnBPActorFromConsole) == 0x000018, "Wrong size on HumanPlayerController_OnSpawnBPActorFromConsole");
static_assert(offsetof(HumanPlayerController_OnSpawnBPActorFromConsole, ObjectName) == 0x000000, "Member 'HumanPlayerController_OnSpawnBPActorFromConsole::ObjectName' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnSpawnBPActorFromConsole, ObjectClass) == 0x000010, "Member 'HumanPlayerController_OnSpawnBPActorFromConsole::ObjectClass' has a wrong offset!");

// Function Flame.HumanPlayerController.OnSpawnSMActorFromConsole
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerController_OnSpawnSMActorFromConsole final
{
public:
	class FString                                 ObjectName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UStaticMesh*                      StaticMeshObject;                                  // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_OnSpawnSMActorFromConsole) == 0x000008, "Wrong alignment on HumanPlayerController_OnSpawnSMActorFromConsole");
static_assert(sizeof(HumanPlayerController_OnSpawnSMActorFromConsole) == 0x000018, "Wrong size on HumanPlayerController_OnSpawnSMActorFromConsole");
static_assert(offsetof(HumanPlayerController_OnSpawnSMActorFromConsole, ObjectName) == 0x000000, "Member 'HumanPlayerController_OnSpawnSMActorFromConsole::ObjectName' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_OnSpawnSMActorFromConsole, StaticMeshObject) == 0x000010, "Member 'HumanPlayerController_OnSpawnSMActorFromConsole::StaticMeshObject' has a wrong offset!");

// Function Flame.HumanPlayerController.PhysxShowCollisions
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_PhysxShowCollisions final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_PhysxShowCollisions) == 0x000004, "Wrong alignment on HumanPlayerController_PhysxShowCollisions");
static_assert(sizeof(HumanPlayerController_PhysxShowCollisions) == 0x000004, "Wrong size on HumanPlayerController_PhysxShowCollisions");
static_assert(offsetof(HumanPlayerController_PhysxShowCollisions, Range) == 0x000000, "Member 'HumanPlayerController_PhysxShowCollisions::Range' has a wrong offset!");

// Function Flame.HumanPlayerController.ProcessInputAction
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerController_ProcessInputAction final
{
public:
	class FString                                 InputActionName;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  Parameter;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ProcessInputAction) == 0x000008, "Wrong alignment on HumanPlayerController_ProcessInputAction");
static_assert(sizeof(HumanPlayerController_ProcessInputAction) == 0x000018, "Wrong size on HumanPlayerController_ProcessInputAction");
static_assert(offsetof(HumanPlayerController_ProcessInputAction, InputActionName) == 0x000000, "Member 'HumanPlayerController_ProcessInputAction::InputActionName' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ProcessInputAction, Parameter) == 0x000010, "Member 'HumanPlayerController_ProcessInputAction::Parameter' has a wrong offset!");

// Function Flame.HumanPlayerController.PushActionToStack
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_PushActionToStack final
{
public:
	class FString                                 ActionName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_PushActionToStack) == 0x000008, "Wrong alignment on HumanPlayerController_PushActionToStack");
static_assert(sizeof(HumanPlayerController_PushActionToStack) == 0x000010, "Wrong size on HumanPlayerController_PushActionToStack");
static_assert(offsetof(HumanPlayerController_PushActionToStack, ActionName) == 0x000000, "Member 'HumanPlayerController_PushActionToStack::ActionName' has a wrong offset!");

// DelegateFunction Flame.HumanPlayerController.ReceivedShelterCloudEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature final
{
public:
	struct FCloudShelterEventList                 Events;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature) == 0x000008, "Wrong alignment on HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature");
static_assert(sizeof(HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature) == 0x000010, "Wrong size on HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature");
static_assert(offsetof(HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature, Events) == 0x000000, "Member 'HumanPlayerController_ReceivedShelterCloudEvent__DelegateSignature::Events' has a wrong offset!");

// Function Flame.HumanPlayerController.RemoveActionFromStack
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_RemoveActionFromStack final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_RemoveActionFromStack) == 0x000008, "Wrong alignment on HumanPlayerController_RemoveActionFromStack");
static_assert(sizeof(HumanPlayerController_RemoveActionFromStack) == 0x000010, "Wrong size on HumanPlayerController_RemoveActionFromStack");
static_assert(offsetof(HumanPlayerController_RemoveActionFromStack, ReturnValue) == 0x000000, "Member 'HumanPlayerController_RemoveActionFromStack::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.ReportPlayer
// 0x0028 (0x0028 - 0x0000)
struct HumanPlayerController_ReportPlayer final
{
public:
	class FString                                 ReportedUserId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_ReportPlayer) == 0x000008, "Wrong alignment on HumanPlayerController_ReportPlayer");
static_assert(sizeof(HumanPlayerController_ReportPlayer) == 0x000028, "Wrong size on HumanPlayerController_ReportPlayer");
static_assert(offsetof(HumanPlayerController_ReportPlayer, ReportedUserId) == 0x000000, "Member 'HumanPlayerController_ReportPlayer::ReportedUserId' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ReportPlayer, Reason) == 0x000010, "Member 'HumanPlayerController_ReportPlayer::Reason' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ReportPlayer, ReturnValue) == 0x000020, "Member 'HumanPlayerController_ReportPlayer::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.HumanPlayerController.ReportPlayerDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct HumanPlayerController_ReportPlayerDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ReportPlayerDelegate__DelegateSignature) == 0x000008, "Wrong alignment on HumanPlayerController_ReportPlayerDelegate__DelegateSignature");
static_assert(sizeof(HumanPlayerController_ReportPlayerDelegate__DelegateSignature) == 0x000058, "Wrong size on HumanPlayerController_ReportPlayerDelegate__DelegateSignature");
static_assert(offsetof(HumanPlayerController_ReportPlayerDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'HumanPlayerController_ReportPlayerDelegate__DelegateSignature::RequestResult' has a wrong offset!");

// DelegateFunction Flame.HumanPlayerController.ResponseFromCloud__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct HumanPlayerController_ResponseFromCloud__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ResponseFromCloud__DelegateSignature) == 0x000008, "Wrong alignment on HumanPlayerController_ResponseFromCloud__DelegateSignature");
static_assert(sizeof(HumanPlayerController_ResponseFromCloud__DelegateSignature) == 0x000058, "Wrong size on HumanPlayerController_ResponseFromCloud__DelegateSignature");
static_assert(offsetof(HumanPlayerController_ResponseFromCloud__DelegateSignature, RequestResult) == 0x000000, "Member 'HumanPlayerController_ResponseFromCloud__DelegateSignature::RequestResult' has a wrong offset!");

// Function Flame.HumanPlayerController.SelectConsumableClass
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_SelectConsumableClass final
{
public:
	TSubclassOf<class AConsumableItem>            StoredConsumable;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SelectConsumableClass) == 0x000008, "Wrong alignment on HumanPlayerController_SelectConsumableClass");
static_assert(sizeof(HumanPlayerController_SelectConsumableClass) == 0x000008, "Wrong size on HumanPlayerController_SelectConsumableClass");
static_assert(offsetof(HumanPlayerController_SelectConsumableClass, StoredConsumable) == 0x000000, "Member 'HumanPlayerController_SelectConsumableClass::StoredConsumable' has a wrong offset!");

// Function Flame.HumanPlayerController.SelectValidWeapon
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SelectValidWeapon final
{
public:
	EWeaponSlotType                               Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SelectValidWeapon) == 0x000001, "Wrong alignment on HumanPlayerController_SelectValidWeapon");
static_assert(sizeof(HumanPlayerController_SelectValidWeapon) == 0x000001, "Wrong size on HumanPlayerController_SelectValidWeapon");
static_assert(offsetof(HumanPlayerController_SelectValidWeapon, Slot) == 0x000000, "Member 'HumanPlayerController_SelectValidWeapon::Slot' has a wrong offset!");

// Function Flame.HumanPlayerController.SelectWeapon
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SelectWeapon final
{
public:
	EWeaponSlotType                               Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SelectWeapon) == 0x000001, "Wrong alignment on HumanPlayerController_SelectWeapon");
static_assert(sizeof(HumanPlayerController_SelectWeapon) == 0x000001, "Wrong size on HumanPlayerController_SelectWeapon");
static_assert(offsetof(HumanPlayerController_SelectWeapon, Slot) == 0x000000, "Member 'HumanPlayerController_SelectWeapon::Slot' has a wrong offset!");

// Function Flame.HumanPlayerController.SendToServerCollectedHeartbeatData
// 0x0020 (0x0020 - 0x0000)
struct HumanPlayerController_SendToServerCollectedHeartbeatData final
{
public:
	struct FClientHeartBeatInfo                   Data;                                              // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SendToServerCollectedHeartbeatData) == 0x000008, "Wrong alignment on HumanPlayerController_SendToServerCollectedHeartbeatData");
static_assert(sizeof(HumanPlayerController_SendToServerCollectedHeartbeatData) == 0x000020, "Wrong size on HumanPlayerController_SendToServerCollectedHeartbeatData");
static_assert(offsetof(HumanPlayerController_SendToServerCollectedHeartbeatData, Data) == 0x000000, "Member 'HumanPlayerController_SendToServerCollectedHeartbeatData::Data' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerChangeWeaponSkin
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ServerChangeWeaponSkin final
{
public:
	class AWeapon*                                TargetWeapon;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemSkin>                  NewSkin;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerChangeWeaponSkin) == 0x000008, "Wrong alignment on HumanPlayerController_ServerChangeWeaponSkin");
static_assert(sizeof(HumanPlayerController_ServerChangeWeaponSkin) == 0x000010, "Wrong size on HumanPlayerController_ServerChangeWeaponSkin");
static_assert(offsetof(HumanPlayerController_ServerChangeWeaponSkin, TargetWeapon) == 0x000000, "Member 'HumanPlayerController_ServerChangeWeaponSkin::TargetWeapon' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ServerChangeWeaponSkin, NewSkin) == 0x000008, "Member 'HumanPlayerController_ServerChangeWeaponSkin::NewSkin' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerCheatAddConsumable
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_ServerCheatAddConsumable final
{
public:
	TSubclassOf<class AConsumableItem>            ConsumableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerCheatAddConsumable) == 0x000008, "Wrong alignment on HumanPlayerController_ServerCheatAddConsumable");
static_assert(sizeof(HumanPlayerController_ServerCheatAddConsumable) == 0x000008, "Wrong size on HumanPlayerController_ServerCheatAddConsumable");
static_assert(offsetof(HumanPlayerController_ServerCheatAddConsumable, ConsumableClass) == 0x000000, "Member 'HumanPlayerController_ServerCheatAddConsumable::ConsumableClass' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerCheatAddWeapon
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_ServerCheatAddWeapon final
{
public:
	TSubclassOf<class AWeapon>                    OneWeaponClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerCheatAddWeapon) == 0x000008, "Wrong alignment on HumanPlayerController_ServerCheatAddWeapon");
static_assert(sizeof(HumanPlayerController_ServerCheatAddWeapon) == 0x000008, "Wrong size on HumanPlayerController_ServerCheatAddWeapon");
static_assert(offsetof(HumanPlayerController_ServerCheatAddWeapon, OneWeaponClass) == 0x000000, "Member 'HumanPlayerController_ServerCheatAddWeapon::OneWeaponClass' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerMoveCharacterToCurrentPosition
// 0x000C (0x000C - 0x0000)
struct HumanPlayerController_ServerMoveCharacterToCurrentPosition final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerMoveCharacterToCurrentPosition) == 0x000004, "Wrong alignment on HumanPlayerController_ServerMoveCharacterToCurrentPosition");
static_assert(sizeof(HumanPlayerController_ServerMoveCharacterToCurrentPosition) == 0x00000C, "Wrong size on HumanPlayerController_ServerMoveCharacterToCurrentPosition");
static_assert(offsetof(HumanPlayerController_ServerMoveCharacterToCurrentPosition, Location) == 0x000000, "Member 'HumanPlayerController_ServerMoveCharacterToCurrentPosition::Location' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerRequestWorldTime
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_ServerRequestWorldTime final
{
public:
	float                                         ClientTimestamp;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerRequestWorldTime) == 0x000004, "Wrong alignment on HumanPlayerController_ServerRequestWorldTime");
static_assert(sizeof(HumanPlayerController_ServerRequestWorldTime) == 0x000004, "Wrong size on HumanPlayerController_ServerRequestWorldTime");
static_assert(offsetof(HumanPlayerController_ServerRequestWorldTime, ClientTimestamp) == 0x000000, "Member 'HumanPlayerController_ServerRequestWorldTime::ClientTimestamp' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerReturnSessionForRandom
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ServerReturnSessionForRandom final
{
public:
	class FString                                 GroupSessionId;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerReturnSessionForRandom) == 0x000008, "Wrong alignment on HumanPlayerController_ServerReturnSessionForRandom");
static_assert(sizeof(HumanPlayerController_ServerReturnSessionForRandom) == 0x000010, "Wrong size on HumanPlayerController_ServerReturnSessionForRandom");
static_assert(offsetof(HumanPlayerController_ServerReturnSessionForRandom, GroupSessionId) == 0x000000, "Member 'HumanPlayerController_ServerReturnSessionForRandom::GroupSessionId' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerSetAimAssistSettings
// 0x000C (0x000C - 0x0000)
struct HumanPlayerController_ServerSetAimAssistSettings final
{
public:
	struct FAimAssistSettings                     Settings;                                          // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerSetAimAssistSettings) == 0x000004, "Wrong alignment on HumanPlayerController_ServerSetAimAssistSettings");
static_assert(sizeof(HumanPlayerController_ServerSetAimAssistSettings) == 0x00000C, "Wrong size on HumanPlayerController_ServerSetAimAssistSettings");
static_assert(offsetof(HumanPlayerController_ServerSetAimAssistSettings, Settings) == 0x000000, "Member 'HumanPlayerController_ServerSetAimAssistSettings::Settings' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerSetMachineMode
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_ServerSetMachineMode final
{
public:
	EMachineMode                                  NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerSetMachineMode) == 0x000001, "Wrong alignment on HumanPlayerController_ServerSetMachineMode");
static_assert(sizeof(HumanPlayerController_ServerSetMachineMode) == 0x000001, "Wrong size on HumanPlayerController_ServerSetMachineMode");
static_assert(offsetof(HumanPlayerController_ServerSetMachineMode, NewMode) == 0x000000, "Member 'HumanPlayerController_ServerSetMachineMode::NewMode' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerSetMiscInputSettings
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ServerSetMiscInputSettings final
{
public:
	struct FMiscInputSettings                     Settings;                                          // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerSetMiscInputSettings) == 0x000004, "Wrong alignment on HumanPlayerController_ServerSetMiscInputSettings");
static_assert(sizeof(HumanPlayerController_ServerSetMiscInputSettings) == 0x000010, "Wrong size on HumanPlayerController_ServerSetMiscInputSettings");
static_assert(offsetof(HumanPlayerController_ServerSetMiscInputSettings, Settings) == 0x000000, "Member 'HumanPlayerController_ServerSetMiscInputSettings::Settings' has a wrong offset!");

// Function Flame.HumanPlayerController.ServerSetTriggerDown
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_ServerSetTriggerDown final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_ServerSetTriggerDown) == 0x000001, "Wrong alignment on HumanPlayerController_ServerSetTriggerDown");
static_assert(sizeof(HumanPlayerController_ServerSetTriggerDown) == 0x000001, "Wrong size on HumanPlayerController_ServerSetTriggerDown");
static_assert(offsetof(HumanPlayerController_ServerSetTriggerDown, bValue) == 0x000000, "Member 'HumanPlayerController_ServerSetTriggerDown::bValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SetAimingDebug
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SetAimingDebug final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetAimingDebug) == 0x000001, "Wrong alignment on HumanPlayerController_SetAimingDebug");
static_assert(sizeof(HumanPlayerController_SetAimingDebug) == 0x000001, "Wrong size on HumanPlayerController_SetAimingDebug");
static_assert(offsetof(HumanPlayerController_SetAimingDebug, bEnable) == 0x000000, "Member 'HumanPlayerController_SetAimingDebug::bEnable' has a wrong offset!");

// Function Flame.HumanPlayerController.SetControlSettingsFromSaveGame
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_SetControlSettingsFromSaveGame final
{
public:
	const class UOptionsSaveGame*                 OptionsSaveGame;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetControlSettingsFromSaveGame) == 0x000008, "Wrong alignment on HumanPlayerController_SetControlSettingsFromSaveGame");
static_assert(sizeof(HumanPlayerController_SetControlSettingsFromSaveGame) == 0x000008, "Wrong size on HumanPlayerController_SetControlSettingsFromSaveGame");
static_assert(offsetof(HumanPlayerController_SetControlSettingsFromSaveGame, OptionsSaveGame) == 0x000000, "Member 'HumanPlayerController_SetControlSettingsFromSaveGame::OptionsSaveGame' has a wrong offset!");

// Function Flame.HumanPlayerController.SetCurrentViewForControlRotation
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SetCurrentViewForControlRotation final
{
public:
	bool                                          CurrentViewForControlRotation;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetCurrentViewForControlRotation) == 0x000001, "Wrong alignment on HumanPlayerController_SetCurrentViewForControlRotation");
static_assert(sizeof(HumanPlayerController_SetCurrentViewForControlRotation) == 0x000001, "Wrong size on HumanPlayerController_SetCurrentViewForControlRotation");
static_assert(offsetof(HumanPlayerController_SetCurrentViewForControlRotation, CurrentViewForControlRotation) == 0x000000, "Member 'HumanPlayerController_SetCurrentViewForControlRotation::CurrentViewForControlRotation' has a wrong offset!");

// Function Flame.HumanPlayerController.SetLoadoutPresetToCloud
// 0x0030 (0x0030 - 0x0000)
struct HumanPlayerController_SetLoadoutPresetToCloud final
{
public:
	struct FLoadoutInfo                           Loadout;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_SetLoadoutPresetToCloud) == 0x000008, "Wrong alignment on HumanPlayerController_SetLoadoutPresetToCloud");
static_assert(sizeof(HumanPlayerController_SetLoadoutPresetToCloud) == 0x000030, "Wrong size on HumanPlayerController_SetLoadoutPresetToCloud");
static_assert(offsetof(HumanPlayerController_SetLoadoutPresetToCloud, Loadout) == 0x000000, "Member 'HumanPlayerController_SetLoadoutPresetToCloud::Loadout' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_SetLoadoutPresetToCloud, ReturnValue) == 0x000028, "Member 'HumanPlayerController_SetLoadoutPresetToCloud::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SetSkinsForSever
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_SetSkinsForSever final
{
public:
	struct FCloudUserWeaponSkinsInfo              Skins;                                             // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetSkinsForSever) == 0x000008, "Wrong alignment on HumanPlayerController_SetSkinsForSever");
static_assert(sizeof(HumanPlayerController_SetSkinsForSever) == 0x000010, "Wrong size on HumanPlayerController_SetSkinsForSever");
static_assert(offsetof(HumanPlayerController_SetSkinsForSever, Skins) == 0x000000, "Member 'HumanPlayerController_SetSkinsForSever::Skins' has a wrong offset!");

// Function Flame.HumanPlayerController.SetSpawnRotation
// 0x000C (0x000C - 0x0000)
struct HumanPlayerController_SetSpawnRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetSpawnRotation) == 0x000004, "Wrong alignment on HumanPlayerController_SetSpawnRotation");
static_assert(sizeof(HumanPlayerController_SetSpawnRotation) == 0x00000C, "Wrong size on HumanPlayerController_SetSpawnRotation");
static_assert(offsetof(HumanPlayerController_SetSpawnRotation, Rotation) == 0x000000, "Member 'HumanPlayerController_SetSpawnRotation::Rotation' has a wrong offset!");

// Function Flame.HumanPlayerController.SetUSeSameCloudData
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SetUSeSameCloudData final
{
public:
	bool                                          UseSame;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetUSeSameCloudData) == 0x000001, "Wrong alignment on HumanPlayerController_SetUSeSameCloudData");
static_assert(sizeof(HumanPlayerController_SetUSeSameCloudData) == 0x000001, "Wrong size on HumanPlayerController_SetUSeSameCloudData");
static_assert(offsetof(HumanPlayerController_SetUSeSameCloudData, UseSame) == 0x000000, "Member 'HumanPlayerController_SetUSeSameCloudData::UseSame' has a wrong offset!");

// Function Flame.HumanPlayerController.ShowGlint
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_ShowGlint final
{
public:
	class UGlintComponent*                        AttachComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Intensity;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_ShowGlint) == 0x000008, "Wrong alignment on HumanPlayerController_ShowGlint");
static_assert(sizeof(HumanPlayerController_ShowGlint) == 0x000010, "Wrong size on HumanPlayerController_ShowGlint");
static_assert(offsetof(HumanPlayerController_ShowGlint, AttachComponent) == 0x000000, "Member 'HumanPlayerController_ShowGlint::AttachComponent' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ShowGlint, Intensity) == 0x000008, "Member 'HumanPlayerController_ShowGlint::Intensity' has a wrong offset!");

// Function Flame.HumanPlayerController.SpawnBPActorFromConsole
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_SpawnBPActorFromConsole final
{
public:
	class FString                                 ObjectName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpawnBPActorFromConsole) == 0x000008, "Wrong alignment on HumanPlayerController_SpawnBPActorFromConsole");
static_assert(sizeof(HumanPlayerController_SpawnBPActorFromConsole) == 0x000010, "Wrong size on HumanPlayerController_SpawnBPActorFromConsole");
static_assert(offsetof(HumanPlayerController_SpawnBPActorFromConsole, ObjectName) == 0x000000, "Member 'HumanPlayerController_SpawnBPActorFromConsole::ObjectName' has a wrong offset!");

// Function Flame.HumanPlayerController.SpawnSMActorFromConsole
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_SpawnSMActorFromConsole final
{
public:
	class FString                                 ObjectName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpawnSMActorFromConsole) == 0x000008, "Wrong alignment on HumanPlayerController_SpawnSMActorFromConsole");
static_assert(sizeof(HumanPlayerController_SpawnSMActorFromConsole) == 0x000010, "Wrong size on HumanPlayerController_SpawnSMActorFromConsole");
static_assert(offsetof(HumanPlayerController_SpawnSMActorFromConsole, ObjectName) == 0x000000, "Member 'HumanPlayerController_SpawnSMActorFromConsole::ObjectName' has a wrong offset!");

// Function Flame.HumanPlayerController.SpectateNextPlayerAction
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SpectateNextPlayerAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpectateNextPlayerAction) == 0x000001, "Wrong alignment on HumanPlayerController_SpectateNextPlayerAction");
static_assert(sizeof(HumanPlayerController_SpectateNextPlayerAction) == 0x000001, "Wrong size on HumanPlayerController_SpectateNextPlayerAction");
static_assert(offsetof(HumanPlayerController_SpectateNextPlayerAction, ReturnValue) == 0x000000, "Member 'HumanPlayerController_SpectateNextPlayerAction::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SpectateStartMovingUpAction
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SpectateStartMovingUpAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpectateStartMovingUpAction) == 0x000001, "Wrong alignment on HumanPlayerController_SpectateStartMovingUpAction");
static_assert(sizeof(HumanPlayerController_SpectateStartMovingUpAction) == 0x000001, "Wrong size on HumanPlayerController_SpectateStartMovingUpAction");
static_assert(offsetof(HumanPlayerController_SpectateStartMovingUpAction, ReturnValue) == 0x000000, "Member 'HumanPlayerController_SpectateStartMovingUpAction::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SpectateStopMovingUpAction
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SpectateStopMovingUpAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpectateStopMovingUpAction) == 0x000001, "Wrong alignment on HumanPlayerController_SpectateStopMovingUpAction");
static_assert(sizeof(HumanPlayerController_SpectateStopMovingUpAction) == 0x000001, "Wrong size on HumanPlayerController_SpectateStopMovingUpAction");
static_assert(offsetof(HumanPlayerController_SpectateStopMovingUpAction, ReturnValue) == 0x000000, "Member 'HumanPlayerController_SpectateStopMovingUpAction::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SpectateToggleAfterBurnerAction
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SpectateToggleAfterBurnerAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpectateToggleAfterBurnerAction) == 0x000001, "Wrong alignment on HumanPlayerController_SpectateToggleAfterBurnerAction");
static_assert(sizeof(HumanPlayerController_SpectateToggleAfterBurnerAction) == 0x000001, "Wrong size on HumanPlayerController_SpectateToggleAfterBurnerAction");
static_assert(offsetof(HumanPlayerController_SpectateToggleAfterBurnerAction, ReturnValue) == 0x000000, "Member 'HumanPlayerController_SpectateToggleAfterBurnerAction::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SpectatorMoveUp
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_SpectatorMoveUp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SpectatorMoveUp) == 0x000004, "Wrong alignment on HumanPlayerController_SpectatorMoveUp");
static_assert(sizeof(HumanPlayerController_SpectatorMoveUp) == 0x000004, "Wrong size on HumanPlayerController_SpectatorMoveUp");
static_assert(offsetof(HumanPlayerController_SpectatorMoveUp, Value) == 0x000000, "Member 'HumanPlayerController_SpectatorMoveUp::Value' has a wrong offset!");

// Function Flame.HumanPlayerController.Switch
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_Switch final
{
public:
	class AItem*                                  StoredItem;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_Switch) == 0x000008, "Wrong alignment on HumanPlayerController_Switch");
static_assert(sizeof(HumanPlayerController_Switch) == 0x000008, "Wrong size on HumanPlayerController_Switch");
static_assert(offsetof(HumanPlayerController_Switch, StoredItem) == 0x000000, "Member 'HumanPlayerController_Switch::StoredItem' has a wrong offset!");

// Function Flame.HumanPlayerController.CanAcceptOperations
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_CanAcceptOperations final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CanAcceptOperations) == 0x000001, "Wrong alignment on HumanPlayerController_CanAcceptOperations");
static_assert(sizeof(HumanPlayerController_CanAcceptOperations) == 0x000001, "Wrong size on HumanPlayerController_CanAcceptOperations");
static_assert(offsetof(HumanPlayerController_CanAcceptOperations, ReturnValue) == 0x000000, "Member 'HumanPlayerController_CanAcceptOperations::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.CanBoostShelterImprovemement
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_CanBoostShelterImprovemement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_CanBoostShelterImprovemement) == 0x000001, "Wrong alignment on HumanPlayerController_CanBoostShelterImprovemement");
static_assert(sizeof(HumanPlayerController_CanBoostShelterImprovemement) == 0x000001, "Wrong size on HumanPlayerController_CanBoostShelterImprovemement");
static_assert(offsetof(HumanPlayerController_CanBoostShelterImprovemement, ReturnValue) == 0x000000, "Member 'HumanPlayerController_CanBoostShelterImprovemement::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetAllOpenedWidgets
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerController_GetAllOpenedWidgets final
{
public:
	TSubclassOf<class UFlameWidget>               InWidgetClass;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFlameWidget*>                   ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetAllOpenedWidgets) == 0x000008, "Wrong alignment on HumanPlayerController_GetAllOpenedWidgets");
static_assert(sizeof(HumanPlayerController_GetAllOpenedWidgets) == 0x000018, "Wrong size on HumanPlayerController_GetAllOpenedWidgets");
static_assert(offsetof(HumanPlayerController_GetAllOpenedWidgets, InWidgetClass) == 0x000000, "Member 'HumanPlayerController_GetAllOpenedWidgets::InWidgetClass' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_GetAllOpenedWidgets, ReturnValue) == 0x000008, "Member 'HumanPlayerController_GetAllOpenedWidgets::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetAnalyticsUserId
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_GetAnalyticsUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetAnalyticsUserId) == 0x000008, "Wrong alignment on HumanPlayerController_GetAnalyticsUserId");
static_assert(sizeof(HumanPlayerController_GetAnalyticsUserId) == 0x000010, "Wrong size on HumanPlayerController_GetAnalyticsUserId");
static_assert(offsetof(HumanPlayerController_GetAnalyticsUserId, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetAnalyticsUserId::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCachedAimInput
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetCachedAimInput final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCachedAimInput) == 0x000004, "Wrong alignment on HumanPlayerController_GetCachedAimInput");
static_assert(sizeof(HumanPlayerController_GetCachedAimInput) == 0x000008, "Wrong size on HumanPlayerController_GetCachedAimInput");
static_assert(offsetof(HumanPlayerController_GetCachedAimInput, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCachedAimInput::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCachedAimInputMultiplier
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetCachedAimInputMultiplier final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCachedAimInputMultiplier) == 0x000004, "Wrong alignment on HumanPlayerController_GetCachedAimInputMultiplier");
static_assert(sizeof(HumanPlayerController_GetCachedAimInputMultiplier) == 0x000008, "Wrong size on HumanPlayerController_GetCachedAimInputMultiplier");
static_assert(offsetof(HumanPlayerController_GetCachedAimInputMultiplier, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCachedAimInputMultiplier::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCachedMovementInput
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetCachedMovementInput final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCachedMovementInput) == 0x000004, "Wrong alignment on HumanPlayerController_GetCachedMovementInput");
static_assert(sizeof(HumanPlayerController_GetCachedMovementInput) == 0x000008, "Wrong size on HumanPlayerController_GetCachedMovementInput");
static_assert(offsetof(HumanPlayerController_GetCachedMovementInput, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCachedMovementInput::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCloudUserId
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_GetCloudUserId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCloudUserId) == 0x000008, "Wrong alignment on HumanPlayerController_GetCloudUserId");
static_assert(sizeof(HumanPlayerController_GetCloudUserId) == 0x000010, "Wrong size on HumanPlayerController_GetCloudUserId");
static_assert(offsetof(HumanPlayerController_GetCloudUserId, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCloudUserId::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCraftingTimerManager
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetCraftingTimerManager final
{
public:
	class ACraftingTimerManager*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCraftingTimerManager) == 0x000008, "Wrong alignment on HumanPlayerController_GetCraftingTimerManager");
static_assert(sizeof(HumanPlayerController_GetCraftingTimerManager) == 0x000008, "Wrong size on HumanPlayerController_GetCraftingTimerManager");
static_assert(offsetof(HumanPlayerController_GetCraftingTimerManager, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCraftingTimerManager::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCurrentLookUpInputValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetCurrentLookUpInputValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCurrentLookUpInputValue) == 0x000004, "Wrong alignment on HumanPlayerController_GetCurrentLookUpInputValue");
static_assert(sizeof(HumanPlayerController_GetCurrentLookUpInputValue) == 0x000004, "Wrong size on HumanPlayerController_GetCurrentLookUpInputValue");
static_assert(offsetof(HumanPlayerController_GetCurrentLookUpInputValue, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCurrentLookUpInputValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCurrentMoveForwardInputValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetCurrentMoveForwardInputValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCurrentMoveForwardInputValue) == 0x000004, "Wrong alignment on HumanPlayerController_GetCurrentMoveForwardInputValue");
static_assert(sizeof(HumanPlayerController_GetCurrentMoveForwardInputValue) == 0x000004, "Wrong size on HumanPlayerController_GetCurrentMoveForwardInputValue");
static_assert(offsetof(HumanPlayerController_GetCurrentMoveForwardInputValue, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCurrentMoveForwardInputValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCurrentMoveRightInputValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetCurrentMoveRightInputValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCurrentMoveRightInputValue) == 0x000004, "Wrong alignment on HumanPlayerController_GetCurrentMoveRightInputValue");
static_assert(sizeof(HumanPlayerController_GetCurrentMoveRightInputValue) == 0x000004, "Wrong size on HumanPlayerController_GetCurrentMoveRightInputValue");
static_assert(offsetof(HumanPlayerController_GetCurrentMoveRightInputValue, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCurrentMoveRightInputValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetCurrentTurnInputValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetCurrentTurnInputValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetCurrentTurnInputValue) == 0x000004, "Wrong alignment on HumanPlayerController_GetCurrentTurnInputValue");
static_assert(sizeof(HumanPlayerController_GetCurrentTurnInputValue) == 0x000004, "Wrong size on HumanPlayerController_GetCurrentTurnInputValue");
static_assert(offsetof(HumanPlayerController_GetCurrentTurnInputValue, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetCurrentTurnInputValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetGameScenario
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_GetGameScenario final
{
public:
	EGameScenario                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetGameScenario) == 0x000001, "Wrong alignment on HumanPlayerController_GetGameScenario");
static_assert(sizeof(HumanPlayerController_GetGameScenario) == 0x000001, "Wrong size on HumanPlayerController_GetGameScenario");
static_assert(offsetof(HumanPlayerController_GetGameScenario, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetGameScenario::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetHubGateState
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_GetHubGateState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetHubGateState) == 0x000001, "Wrong alignment on HumanPlayerController_GetHubGateState");
static_assert(sizeof(HumanPlayerController_GetHubGateState) == 0x000001, "Wrong size on HumanPlayerController_GetHubGateState");
static_assert(offsetof(HumanPlayerController_GetHubGateState, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetHubGateState::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetHumanCharacter
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetHumanCharacter final
{
public:
	class AHumanPlayerCharacter*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetHumanCharacter) == 0x000008, "Wrong alignment on HumanPlayerController_GetHumanCharacter");
static_assert(sizeof(HumanPlayerController_GetHumanCharacter) == 0x000008, "Wrong size on HumanPlayerController_GetHumanCharacter");
static_assert(offsetof(HumanPlayerController_GetHumanCharacter, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetHumanCharacter::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetMiscInputSettings
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_GetMiscInputSettings final
{
public:
	struct FMiscInputSettings                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetMiscInputSettings) == 0x000004, "Wrong alignment on HumanPlayerController_GetMiscInputSettings");
static_assert(sizeof(HumanPlayerController_GetMiscInputSettings) == 0x000010, "Wrong size on HumanPlayerController_GetMiscInputSettings");
static_assert(offsetof(HumanPlayerController_GetMiscInputSettings, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetMiscInputSettings::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetNetworkLastReceive
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetNetworkLastReceive final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetNetworkLastReceive) == 0x000004, "Wrong alignment on HumanPlayerController_GetNetworkLastReceive");
static_assert(sizeof(HumanPlayerController_GetNetworkLastReceive) == 0x000004, "Wrong size on HumanPlayerController_GetNetworkLastReceive");
static_assert(offsetof(HumanPlayerController_GetNetworkLastReceive, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetNetworkLastReceive::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetServerWorldTime
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetServerWorldTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetServerWorldTime) == 0x000004, "Wrong alignment on HumanPlayerController_GetServerWorldTime");
static_assert(sizeof(HumanPlayerController_GetServerWorldTime) == 0x000004, "Wrong size on HumanPlayerController_GetServerWorldTime");
static_assert(offsetof(HumanPlayerController_GetServerWorldTime, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetServerWorldTime::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetServerWorldTimeDelta
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerController_GetServerWorldTimeDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetServerWorldTimeDelta) == 0x000004, "Wrong alignment on HumanPlayerController_GetServerWorldTimeDelta");
static_assert(sizeof(HumanPlayerController_GetServerWorldTimeDelta) == 0x000004, "Wrong size on HumanPlayerController_GetServerWorldTimeDelta");
static_assert(offsetof(HumanPlayerController_GetServerWorldTimeDelta, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetServerWorldTimeDelta::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetShelterBuilder
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetShelterBuilder final
{
public:
	class UShelterCraftingList*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetShelterBuilder) == 0x000008, "Wrong alignment on HumanPlayerController_GetShelterBuilder");
static_assert(sizeof(HumanPlayerController_GetShelterBuilder) == 0x000008, "Wrong size on HumanPlayerController_GetShelterBuilder");
static_assert(offsetof(HumanPlayerController_GetShelterBuilder, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetShelterBuilder::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetShelterTimerManager
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetShelterTimerManager final
{
public:
	class AShelterTimerManager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetShelterTimerManager) == 0x000008, "Wrong alignment on HumanPlayerController_GetShelterTimerManager");
static_assert(sizeof(HumanPlayerController_GetShelterTimerManager) == 0x000008, "Wrong size on HumanPlayerController_GetShelterTimerManager");
static_assert(offsetof(HumanPlayerController_GetShelterTimerManager, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetShelterTimerManager::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetStash
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetStash final
{
public:
	class AStash*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetStash) == 0x000008, "Wrong alignment on HumanPlayerController_GetStash");
static_assert(sizeof(HumanPlayerController_GetStash) == 0x000008, "Wrong size on HumanPlayerController_GetStash");
static_assert(offsetof(HumanPlayerController_GetStash, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetStash::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetTokenString
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerController_GetTokenString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetTokenString) == 0x000008, "Wrong alignment on HumanPlayerController_GetTokenString");
static_assert(sizeof(HumanPlayerController_GetTokenString) == 0x000010, "Wrong size on HumanPlayerController_GetTokenString");
static_assert(offsetof(HumanPlayerController_GetTokenString, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetTokenString::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.GetWidgetUnderMouse
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerController_GetWidgetUnderMouse final
{
public:
	class UWidget*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_GetWidgetUnderMouse) == 0x000008, "Wrong alignment on HumanPlayerController_GetWidgetUnderMouse");
static_assert(sizeof(HumanPlayerController_GetWidgetUnderMouse) == 0x000008, "Wrong size on HumanPlayerController_GetWidgetUnderMouse");
static_assert(offsetof(HumanPlayerController_GetWidgetUnderMouse, ReturnValue) == 0x000000, "Member 'HumanPlayerController_GetWidgetUnderMouse::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsAnyMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsAnyMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsAnyMenuOpen) == 0x000001, "Wrong alignment on HumanPlayerController_IsAnyMenuOpen");
static_assert(sizeof(HumanPlayerController_IsAnyMenuOpen) == 0x000001, "Wrong size on HumanPlayerController_IsAnyMenuOpen");
static_assert(offsetof(HumanPlayerController_IsAnyMenuOpen, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsAnyMenuOpen::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsCloudInventoryAndStuffInitialized
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsCloudInventoryAndStuffInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsCloudInventoryAndStuffInitialized) == 0x000001, "Wrong alignment on HumanPlayerController_IsCloudInventoryAndStuffInitialized");
static_assert(sizeof(HumanPlayerController_IsCloudInventoryAndStuffInitialized) == 0x000001, "Wrong size on HumanPlayerController_IsCloudInventoryAndStuffInitialized");
static_assert(offsetof(HumanPlayerController_IsCloudInventoryAndStuffInitialized, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsCloudInventoryAndStuffInitialized::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsCloudUserIdSet
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsCloudUserIdSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsCloudUserIdSet) == 0x000001, "Wrong alignment on HumanPlayerController_IsCloudUserIdSet");
static_assert(sizeof(HumanPlayerController_IsCloudUserIdSet) == 0x000001, "Wrong size on HumanPlayerController_IsCloudUserIdSet");
static_assert(offsetof(HumanPlayerController_IsCloudUserIdSet, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsCloudUserIdSet::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsInsideBuilding
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsInsideBuilding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsInsideBuilding) == 0x000001, "Wrong alignment on HumanPlayerController_IsInsideBuilding");
static_assert(sizeof(HumanPlayerController_IsInsideBuilding) == 0x000001, "Wrong size on HumanPlayerController_IsInsideBuilding");
static_assert(offsetof(HumanPlayerController_IsInsideBuilding, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsInsideBuilding::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsInteractInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsInteractInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsInteractInProgress) == 0x000001, "Wrong alignment on HumanPlayerController_IsInteractInProgress");
static_assert(sizeof(HumanPlayerController_IsInteractInProgress) == 0x000001, "Wrong size on HumanPlayerController_IsInteractInProgress");
static_assert(offsetof(HumanPlayerController_IsInteractInProgress, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsInteractInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsMenuInProgress
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsMenuInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsMenuInProgress) == 0x000001, "Wrong alignment on HumanPlayerController_IsMenuInProgress");
static_assert(sizeof(HumanPlayerController_IsMenuInProgress) == 0x000001, "Wrong size on HumanPlayerController_IsMenuInProgress");
static_assert(offsetof(HumanPlayerController_IsMenuInProgress, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsMenuInProgress::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.IsUserCloudInfoUpToDate
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_IsUserCloudInfoUpToDate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_IsUserCloudInfoUpToDate) == 0x000001, "Wrong alignment on HumanPlayerController_IsUserCloudInfoUpToDate");
static_assert(sizeof(HumanPlayerController_IsUserCloudInfoUpToDate) == 0x000001, "Wrong size on HumanPlayerController_IsUserCloudInfoUpToDate");
static_assert(offsetof(HumanPlayerController_IsUserCloudInfoUpToDate, ReturnValue) == 0x000000, "Member 'HumanPlayerController_IsUserCloudInfoUpToDate::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerController.SetHubGateState
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerController_SetHubGateState final
{
public:
	bool                                          GateState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerController_SetHubGateState) == 0x000001, "Wrong alignment on HumanPlayerController_SetHubGateState");
static_assert(sizeof(HumanPlayerController_SetHubGateState) == 0x000001, "Wrong size on HumanPlayerController_SetHubGateState");
static_assert(offsetof(HumanPlayerController_SetHubGateState, GateState) == 0x000000, "Member 'HumanPlayerController_SetHubGateState::GateState' has a wrong offset!");

// Function Flame.HumanPlayerController.ShouldIgnoreInputAxis
// 0x000C (0x000C - 0x0000)
struct HumanPlayerController_ShouldIgnoreInputAxis final
{
public:
	class FName                                   InAxisName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerController_ShouldIgnoreInputAxis) == 0x000004, "Wrong alignment on HumanPlayerController_ShouldIgnoreInputAxis");
static_assert(sizeof(HumanPlayerController_ShouldIgnoreInputAxis) == 0x00000C, "Wrong size on HumanPlayerController_ShouldIgnoreInputAxis");
static_assert(offsetof(HumanPlayerController_ShouldIgnoreInputAxis, InAxisName) == 0x000000, "Member 'HumanPlayerController_ShouldIgnoreInputAxis::InAxisName' has a wrong offset!");
static_assert(offsetof(HumanPlayerController_ShouldIgnoreInputAxis, ReturnValue) == 0x000008, "Member 'HumanPlayerController_ShouldIgnoreInputAxis::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerControllerFunctionsFunctions.CanProcessInputAction
// 0x0018 (0x0018 - 0x0000)
struct HumanPlayerControllerFunctionsFunctions_CanProcessInputAction final
{
public:
	const class AHumanPlayerController*           OneController;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HumanPlayerControllerFunctionsFunctions_CanProcessInputAction) == 0x000008, "Wrong alignment on HumanPlayerControllerFunctionsFunctions_CanProcessInputAction");
static_assert(sizeof(HumanPlayerControllerFunctionsFunctions_CanProcessInputAction) == 0x000018, "Wrong size on HumanPlayerControllerFunctionsFunctions_CanProcessInputAction");
static_assert(offsetof(HumanPlayerControllerFunctionsFunctions_CanProcessInputAction, OneController) == 0x000000, "Member 'HumanPlayerControllerFunctionsFunctions_CanProcessInputAction::OneController' has a wrong offset!");
static_assert(offsetof(HumanPlayerControllerFunctionsFunctions_CanProcessInputAction, ActionName) == 0x000008, "Member 'HumanPlayerControllerFunctionsFunctions_CanProcessInputAction::ActionName' has a wrong offset!");
static_assert(offsetof(HumanPlayerControllerFunctionsFunctions_CanProcessInputAction, ReturnValue) == 0x000010, "Member 'HumanPlayerControllerFunctionsFunctions_CanProcessInputAction::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.ClearPostProcessingEffect
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_ClearPostProcessingEffect final
{
public:
	class UMaterialInterface*                     PostProcessMaterial;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_ClearPostProcessingEffect) == 0x000008, "Wrong alignment on HumanPlayerCharacter_ClearPostProcessingEffect");
static_assert(sizeof(HumanPlayerCharacter_ClearPostProcessingEffect) == 0x000008, "Wrong size on HumanPlayerCharacter_ClearPostProcessingEffect");
static_assert(offsetof(HumanPlayerCharacter_ClearPostProcessingEffect, PostProcessMaterial) == 0x000000, "Member 'HumanPlayerCharacter_ClearPostProcessingEffect::PostProcessMaterial' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.CreateOrGetPostProcessingEffect
// 0x0010 (0x0010 - 0x0000)
struct HumanPlayerCharacter_CreateOrGetPostProcessingEffect final
{
public:
	class UMaterialInterface*                     PostProcessMaterial;                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_CreateOrGetPostProcessingEffect) == 0x000008, "Wrong alignment on HumanPlayerCharacter_CreateOrGetPostProcessingEffect");
static_assert(sizeof(HumanPlayerCharacter_CreateOrGetPostProcessingEffect) == 0x000010, "Wrong size on HumanPlayerCharacter_CreateOrGetPostProcessingEffect");
static_assert(offsetof(HumanPlayerCharacter_CreateOrGetPostProcessingEffect, PostProcessMaterial) == 0x000000, "Member 'HumanPlayerCharacter_CreateOrGetPostProcessingEffect::PostProcessMaterial' has a wrong offset!");
static_assert(offsetof(HumanPlayerCharacter_CreateOrGetPostProcessingEffect, ReturnValue) == 0x000008, "Member 'HumanPlayerCharacter_CreateOrGetPostProcessingEffect::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.InitiateTinnitusEffect
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_InitiateTinnitusEffect final
{
public:
	float                                         EffectStrength;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_InitiateTinnitusEffect) == 0x000004, "Wrong alignment on HumanPlayerCharacter_InitiateTinnitusEffect");
static_assert(sizeof(HumanPlayerCharacter_InitiateTinnitusEffect) == 0x000004, "Wrong size on HumanPlayerCharacter_InitiateTinnitusEffect");
static_assert(offsetof(HumanPlayerCharacter_InitiateTinnitusEffect, EffectStrength) == 0x000000, "Member 'HumanPlayerCharacter_InitiateTinnitusEffect::EffectStrength' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.MoveForward
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_MoveForward final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_MoveForward) == 0x000004, "Wrong alignment on HumanPlayerCharacter_MoveForward");
static_assert(sizeof(HumanPlayerCharacter_MoveForward) == 0x000004, "Wrong size on HumanPlayerCharacter_MoveForward");
static_assert(offsetof(HumanPlayerCharacter_MoveForward, Value) == 0x000000, "Member 'HumanPlayerCharacter_MoveForward::Value' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.MoveRight
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_MoveRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_MoveRight) == 0x000004, "Wrong alignment on HumanPlayerCharacter_MoveRight");
static_assert(sizeof(HumanPlayerCharacter_MoveRight) == 0x000004, "Wrong size on HumanPlayerCharacter_MoveRight");
static_assert(offsetof(HumanPlayerCharacter_MoveRight, Value) == 0x000000, "Member 'HumanPlayerCharacter_MoveRight::Value' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.OpenSelectionWheel
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerCharacter_OpenSelectionWheel final
{
public:
	ESelectionWheelType                           WheelType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_OpenSelectionWheel) == 0x000001, "Wrong alignment on HumanPlayerCharacter_OpenSelectionWheel");
static_assert(sizeof(HumanPlayerCharacter_OpenSelectionWheel) == 0x000001, "Wrong size on HumanPlayerCharacter_OpenSelectionWheel");
static_assert(offsetof(HumanPlayerCharacter_OpenSelectionWheel, WheelType) == 0x000000, "Member 'HumanPlayerCharacter_OpenSelectionWheel::WheelType' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.SelectLastWheelItem
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerCharacter_SelectLastWheelItem final
{
public:
	ESelectionWheelType                           WheelType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_SelectLastWheelItem) == 0x000001, "Wrong alignment on HumanPlayerCharacter_SelectLastWheelItem");
static_assert(sizeof(HumanPlayerCharacter_SelectLastWheelItem) == 0x000001, "Wrong size on HumanPlayerCharacter_SelectLastWheelItem");
static_assert(offsetof(HumanPlayerCharacter_SelectLastWheelItem, WheelType) == 0x000000, "Member 'HumanPlayerCharacter_SelectLastWheelItem::WheelType' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.ShowGrenadeIndicator
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_ShowGrenadeIndicator final
{
public:
	class AGrenade*                               Grenade;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_ShowGrenadeIndicator) == 0x000008, "Wrong alignment on HumanPlayerCharacter_ShowGrenadeIndicator");
static_assert(sizeof(HumanPlayerCharacter_ShowGrenadeIndicator) == 0x000008, "Wrong size on HumanPlayerCharacter_ShowGrenadeIndicator");
static_assert(offsetof(HumanPlayerCharacter_ShowGrenadeIndicator, Grenade) == 0x000000, "Member 'HumanPlayerCharacter_ShowGrenadeIndicator::Grenade' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.UpdateConcussionEffect
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_UpdateConcussionEffect final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_UpdateConcussionEffect) == 0x000004, "Wrong alignment on HumanPlayerCharacter_UpdateConcussionEffect");
static_assert(sizeof(HumanPlayerCharacter_UpdateConcussionEffect) == 0x000008, "Wrong size on HumanPlayerCharacter_UpdateConcussionEffect");
static_assert(offsetof(HumanPlayerCharacter_UpdateConcussionEffect, Strength) == 0x000000, "Member 'HumanPlayerCharacter_UpdateConcussionEffect::Strength' has a wrong offset!");
static_assert(offsetof(HumanPlayerCharacter_UpdateConcussionEffect, Time) == 0x000004, "Member 'HumanPlayerCharacter_UpdateConcussionEffect::Time' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.UpdateFlashbangEffect
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_UpdateFlashbangEffect final
{
public:
	float                                         Strength;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_UpdateFlashbangEffect) == 0x000004, "Wrong alignment on HumanPlayerCharacter_UpdateFlashbangEffect");
static_assert(sizeof(HumanPlayerCharacter_UpdateFlashbangEffect) == 0x000008, "Wrong size on HumanPlayerCharacter_UpdateFlashbangEffect");
static_assert(offsetof(HumanPlayerCharacter_UpdateFlashbangEffect, Strength) == 0x000000, "Member 'HumanPlayerCharacter_UpdateFlashbangEffect::Strength' has a wrong offset!");
static_assert(offsetof(HumanPlayerCharacter_UpdateFlashbangEffect, Time) == 0x000004, "Member 'HumanPlayerCharacter_UpdateFlashbangEffect::Time' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetLookUpValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_GetLookUpValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetLookUpValue) == 0x000004, "Wrong alignment on HumanPlayerCharacter_GetLookUpValue");
static_assert(sizeof(HumanPlayerCharacter_GetLookUpValue) == 0x000004, "Wrong size on HumanPlayerCharacter_GetLookUpValue");
static_assert(offsetof(HumanPlayerCharacter_GetLookUpValue, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetLookUpValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetMapTool
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_GetMapTool final
{
public:
	class AMapTool*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetMapTool) == 0x000008, "Wrong alignment on HumanPlayerCharacter_GetMapTool");
static_assert(sizeof(HumanPlayerCharacter_GetMapTool) == 0x000008, "Wrong size on HumanPlayerCharacter_GetMapTool");
static_assert(offsetof(HumanPlayerCharacter_GetMapTool, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetMapTool::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetMapToolClass
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_GetMapToolClass final
{
public:
	TSubclassOf<class AMapTool>                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetMapToolClass) == 0x000008, "Wrong alignment on HumanPlayerCharacter_GetMapToolClass");
static_assert(sizeof(HumanPlayerCharacter_GetMapToolClass) == 0x000008, "Wrong size on HumanPlayerCharacter_GetMapToolClass");
static_assert(offsetof(HumanPlayerCharacter_GetMapToolClass, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetMapToolClass::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetMoveForwardValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_GetMoveForwardValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetMoveForwardValue) == 0x000004, "Wrong alignment on HumanPlayerCharacter_GetMoveForwardValue");
static_assert(sizeof(HumanPlayerCharacter_GetMoveForwardValue) == 0x000004, "Wrong size on HumanPlayerCharacter_GetMoveForwardValue");
static_assert(offsetof(HumanPlayerCharacter_GetMoveForwardValue, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetMoveForwardValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetMoveRightValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_GetMoveRightValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetMoveRightValue) == 0x000004, "Wrong alignment on HumanPlayerCharacter_GetMoveRightValue");
static_assert(sizeof(HumanPlayerCharacter_GetMoveRightValue) == 0x000004, "Wrong size on HumanPlayerCharacter_GetMoveRightValue");
static_assert(offsetof(HumanPlayerCharacter_GetMoveRightValue, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetMoveRightValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetSelectionWheelComponent
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerCharacter_GetSelectionWheelComponent final
{
public:
	class USelectionWheelComponent*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetSelectionWheelComponent) == 0x000008, "Wrong alignment on HumanPlayerCharacter_GetSelectionWheelComponent");
static_assert(sizeof(HumanPlayerCharacter_GetSelectionWheelComponent) == 0x000008, "Wrong size on HumanPlayerCharacter_GetSelectionWheelComponent");
static_assert(offsetof(HumanPlayerCharacter_GetSelectionWheelComponent, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetSelectionWheelComponent::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerCharacter.GetTurnValue
// 0x0004 (0x0004 - 0x0000)
struct HumanPlayerCharacter_GetTurnValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerCharacter_GetTurnValue) == 0x000004, "Wrong alignment on HumanPlayerCharacter_GetTurnValue");
static_assert(sizeof(HumanPlayerCharacter_GetTurnValue) == 0x000004, "Wrong size on HumanPlayerCharacter_GetTurnValue");
static_assert(offsetof(HumanPlayerCharacter_GetTurnValue, ReturnValue) == 0x000000, "Member 'HumanPlayerCharacter_GetTurnValue::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.MulticastReceivedActionsOnClients
// 0x0058 (0x0058 - 0x0000)
struct HumanPlayerState_MulticastReceivedActionsOnClients final
{
public:
	struct FInputActionMachineState               Desc;                                              // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_MulticastReceivedActionsOnClients) == 0x000008, "Wrong alignment on HumanPlayerState_MulticastReceivedActionsOnClients");
static_assert(sizeof(HumanPlayerState_MulticastReceivedActionsOnClients) == 0x000058, "Wrong size on HumanPlayerState_MulticastReceivedActionsOnClients");
static_assert(offsetof(HumanPlayerState_MulticastReceivedActionsOnClients, Desc) == 0x000000, "Member 'HumanPlayerState_MulticastReceivedActionsOnClients::Desc' has a wrong offset!");

// Function Flame.HumanPlayerState.OnRep_PostChangeStash
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerState_OnRep_PostChangeStash final
{
public:
	class AStash*                                 OldStash;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_OnRep_PostChangeStash) == 0x000008, "Wrong alignment on HumanPlayerState_OnRep_PostChangeStash");
static_assert(sizeof(HumanPlayerState_OnRep_PostChangeStash) == 0x000008, "Wrong size on HumanPlayerState_OnRep_PostChangeStash");
static_assert(offsetof(HumanPlayerState_OnRep_PostChangeStash, OldStash) == 0x000000, "Member 'HumanPlayerState_OnRep_PostChangeStash::OldStash' has a wrong offset!");

// Function Flame.HumanPlayerState.ServerProcessAction
// 0x0058 (0x0058 - 0x0000)
struct HumanPlayerState_ServerProcessAction final
{
public:
	struct FInputActionMachineState               Desc;                                              // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_ServerProcessAction) == 0x000008, "Wrong alignment on HumanPlayerState_ServerProcessAction");
static_assert(sizeof(HumanPlayerState_ServerProcessAction) == 0x000058, "Wrong size on HumanPlayerState_ServerProcessAction");
static_assert(offsetof(HumanPlayerState_ServerProcessAction, Desc) == 0x000000, "Member 'HumanPlayerState_ServerProcessAction::Desc' has a wrong offset!");

// Function Flame.HumanPlayerState.GetPlayerPlatform
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerState_GetPlayerPlatform final
{
public:
	EFlamePlatform                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_GetPlayerPlatform) == 0x000001, "Wrong alignment on HumanPlayerState_GetPlayerPlatform");
static_assert(sizeof(HumanPlayerState_GetPlayerPlatform) == 0x000001, "Wrong size on HumanPlayerState_GetPlayerPlatform");
static_assert(offsetof(HumanPlayerState_GetPlayerPlatform, ReturnValue) == 0x000000, "Member 'HumanPlayerState_GetPlayerPlatform::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.GetPlayerUniqueId
// 0x0028 (0x0028 - 0x0000)
struct HumanPlayerState_GetPlayerUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_GetPlayerUniqueId) == 0x000008, "Wrong alignment on HumanPlayerState_GetPlayerUniqueId");
static_assert(sizeof(HumanPlayerState_GetPlayerUniqueId) == 0x000028, "Wrong size on HumanPlayerState_GetPlayerUniqueId");
static_assert(offsetof(HumanPlayerState_GetPlayerUniqueId, ReturnValue) == 0x000000, "Member 'HumanPlayerState_GetPlayerUniqueId::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.GetStash
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerState_GetStash final
{
public:
	class AStash*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_GetStash) == 0x000008, "Wrong alignment on HumanPlayerState_GetStash");
static_assert(sizeof(HumanPlayerState_GetStash) == 0x000008, "Wrong size on HumanPlayerState_GetStash");
static_assert(offsetof(HumanPlayerState_GetStash, ReturnValue) == 0x000000, "Member 'HumanPlayerState_GetStash::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.GetWardrobe
// 0x0008 (0x0008 - 0x0000)
struct HumanPlayerState_GetWardrobe final
{
public:
	class UShelterCustomizationComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_GetWardrobe) == 0x000008, "Wrong alignment on HumanPlayerState_GetWardrobe");
static_assert(sizeof(HumanPlayerState_GetWardrobe) == 0x000008, "Wrong size on HumanPlayerState_GetWardrobe");
static_assert(offsetof(HumanPlayerState_GetWardrobe, ReturnValue) == 0x000000, "Member 'HumanPlayerState_GetWardrobe::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.HasBoosterCrate
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerState_HasBoosterCrate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_HasBoosterCrate) == 0x000001, "Wrong alignment on HumanPlayerState_HasBoosterCrate");
static_assert(sizeof(HumanPlayerState_HasBoosterCrate) == 0x000001, "Wrong size on HumanPlayerState_HasBoosterCrate");
static_assert(offsetof(HumanPlayerState_HasBoosterCrate, ReturnValue) == 0x000000, "Member 'HumanPlayerState_HasBoosterCrate::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.HasBoosterInsurance
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerState_HasBoosterInsurance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_HasBoosterInsurance) == 0x000001, "Wrong alignment on HumanPlayerState_HasBoosterInsurance");
static_assert(sizeof(HumanPlayerState_HasBoosterInsurance) == 0x000001, "Wrong size on HumanPlayerState_HasBoosterInsurance");
static_assert(offsetof(HumanPlayerState_HasBoosterInsurance, ReturnValue) == 0x000000, "Member 'HumanPlayerState_HasBoosterInsurance::ReturnValue' has a wrong offset!");

// Function Flame.HumanPlayerState.HasBoosterLoot
// 0x0001 (0x0001 - 0x0000)
struct HumanPlayerState_HasBoosterLoot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HumanPlayerState_HasBoosterLoot) == 0x000001, "Wrong alignment on HumanPlayerState_HasBoosterLoot");
static_assert(sizeof(HumanPlayerState_HasBoosterLoot) == 0x000001, "Wrong size on HumanPlayerState_HasBoosterLoot");
static_assert(offsetof(HumanPlayerState_HasBoosterLoot, ReturnValue) == 0x000000, "Member 'HumanPlayerState_HasBoosterLoot::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.AddConsumptionForCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_AddConsumptionForCurrentItem final
{
public:
	EConsumptionSource                            Source;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Consumption;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_AddConsumptionForCurrentItem) == 0x000004, "Wrong alignment on StaminaComponent_AddConsumptionForCurrentItem");
static_assert(sizeof(StaminaComponent_AddConsumptionForCurrentItem) == 0x000008, "Wrong size on StaminaComponent_AddConsumptionForCurrentItem");
static_assert(offsetof(StaminaComponent_AddConsumptionForCurrentItem, Source) == 0x000000, "Member 'StaminaComponent_AddConsumptionForCurrentItem::Source' has a wrong offset!");
static_assert(offsetof(StaminaComponent_AddConsumptionForCurrentItem, Consumption) == 0x000004, "Member 'StaminaComponent_AddConsumptionForCurrentItem::Consumption' has a wrong offset!");

// Function Flame.StaminaComponent.AddPermanentDamageToStamina
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_AddPermanentDamageToStamina final
{
public:
	float                                         PercentageOfMaxStaminaToRemove;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_AddPermanentDamageToStamina) == 0x000004, "Wrong alignment on StaminaComponent_AddPermanentDamageToStamina");
static_assert(sizeof(StaminaComponent_AddPermanentDamageToStamina) == 0x000004, "Wrong size on StaminaComponent_AddPermanentDamageToStamina");
static_assert(offsetof(StaminaComponent_AddPermanentDamageToStamina, PercentageOfMaxStaminaToRemove) == 0x000000, "Member 'StaminaComponent_AddPermanentDamageToStamina::PercentageOfMaxStaminaToRemove' has a wrong offset!");

// Function Flame.StaminaComponent.AddToConsumptionSources
// 0x0020 (0x0020 - 0x0000)
struct StaminaComponent_AddToConsumptionSources final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumptionSource                            Source;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Consumption;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_AddToConsumptionSources) == 0x000008, "Wrong alignment on StaminaComponent_AddToConsumptionSources");
static_assert(sizeof(StaminaComponent_AddToConsumptionSources) == 0x000020, "Wrong size on StaminaComponent_AddToConsumptionSources");
static_assert(offsetof(StaminaComponent_AddToConsumptionSources, Item) == 0x000000, "Member 'StaminaComponent_AddToConsumptionSources::Item' has a wrong offset!");
static_assert(offsetof(StaminaComponent_AddToConsumptionSources, Source) == 0x000010, "Member 'StaminaComponent_AddToConsumptionSources::Source' has a wrong offset!");
static_assert(offsetof(StaminaComponent_AddToConsumptionSources, Consumption) == 0x000014, "Member 'StaminaComponent_AddToConsumptionSources::Consumption' has a wrong offset!");
static_assert(offsetof(StaminaComponent_AddToConsumptionSources, ReturnValue) == 0x000018, "Member 'StaminaComponent_AddToConsumptionSources::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.AdrenalineBoostActive
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_AdrenalineBoostActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_AdrenalineBoostActive) == 0x000001, "Wrong alignment on StaminaComponent_AdrenalineBoostActive");
static_assert(sizeof(StaminaComponent_AdrenalineBoostActive) == 0x000001, "Wrong size on StaminaComponent_AdrenalineBoostActive");
static_assert(offsetof(StaminaComponent_AdrenalineBoostActive, ReturnValue) == 0x000000, "Member 'StaminaComponent_AdrenalineBoostActive::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.AdrenalineDeprivationActive
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_AdrenalineDeprivationActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_AdrenalineDeprivationActive) == 0x000001, "Wrong alignment on StaminaComponent_AdrenalineDeprivationActive");
static_assert(sizeof(StaminaComponent_AdrenalineDeprivationActive) == 0x000001, "Wrong size on StaminaComponent_AdrenalineDeprivationActive");
static_assert(offsetof(StaminaComponent_AdrenalineDeprivationActive, ReturnValue) == 0x000000, "Member 'StaminaComponent_AdrenalineDeprivationActive::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.ClientAddStaminaEffect
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_ClientAddStaminaEffect final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_ClientAddStaminaEffect) == 0x000004, "Wrong alignment on StaminaComponent_ClientAddStaminaEffect");
static_assert(sizeof(StaminaComponent_ClientAddStaminaEffect) == 0x000004, "Wrong size on StaminaComponent_ClientAddStaminaEffect");
static_assert(offsetof(StaminaComponent_ClientAddStaminaEffect, Idx) == 0x000000, "Member 'StaminaComponent_ClientAddStaminaEffect::Idx' has a wrong offset!");

// Function Flame.StaminaComponent.ClientRemoveStaminaEffectsOfIndex
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_ClientRemoveStaminaEffectsOfIndex final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_ClientRemoveStaminaEffectsOfIndex) == 0x000004, "Wrong alignment on StaminaComponent_ClientRemoveStaminaEffectsOfIndex");
static_assert(sizeof(StaminaComponent_ClientRemoveStaminaEffectsOfIndex) == 0x000004, "Wrong size on StaminaComponent_ClientRemoveStaminaEffectsOfIndex");
static_assert(offsetof(StaminaComponent_ClientRemoveStaminaEffectsOfIndex, Idx) == 0x000000, "Member 'StaminaComponent_ClientRemoveStaminaEffectsOfIndex::Idx' has a wrong offset!");

// Function Flame.StaminaComponent.ConsumePercentageOfStamina
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_ConsumePercentageOfStamina final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumptionSource                            Source;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_ConsumePercentageOfStamina) == 0x000004, "Wrong alignment on StaminaComponent_ConsumePercentageOfStamina");
static_assert(sizeof(StaminaComponent_ConsumePercentageOfStamina) == 0x000008, "Wrong size on StaminaComponent_ConsumePercentageOfStamina");
static_assert(offsetof(StaminaComponent_ConsumePercentageOfStamina, Percentage) == 0x000000, "Member 'StaminaComponent_ConsumePercentageOfStamina::Percentage' has a wrong offset!");
static_assert(offsetof(StaminaComponent_ConsumePercentageOfStamina, Source) == 0x000004, "Member 'StaminaComponent_ConsumePercentageOfStamina::Source' has a wrong offset!");

// Function Flame.StaminaComponent.ConsumeStamina
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_ConsumeStamina final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumptionSource                            Source;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_ConsumeStamina) == 0x000004, "Wrong alignment on StaminaComponent_ConsumeStamina");
static_assert(sizeof(StaminaComponent_ConsumeStamina) == 0x000008, "Wrong size on StaminaComponent_ConsumeStamina");
static_assert(offsetof(StaminaComponent_ConsumeStamina, Amount) == 0x000000, "Member 'StaminaComponent_ConsumeStamina::Amount' has a wrong offset!");
static_assert(offsetof(StaminaComponent_ConsumeStamina, Source) == 0x000004, "Member 'StaminaComponent_ConsumeStamina::Source' has a wrong offset!");

// Function Flame.StaminaComponent.GetConsumptionByItemAndSource
// 0x0020 (0x0020 - 0x0000)
struct StaminaComponent_GetConsumptionByItemAndSource final
{
public:
	class FString                                 Item;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConsumptionSource                            Source;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutConsumption;                                    // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_GetConsumptionByItemAndSource) == 0x000008, "Wrong alignment on StaminaComponent_GetConsumptionByItemAndSource");
static_assert(sizeof(StaminaComponent_GetConsumptionByItemAndSource) == 0x000020, "Wrong size on StaminaComponent_GetConsumptionByItemAndSource");
static_assert(offsetof(StaminaComponent_GetConsumptionByItemAndSource, Item) == 0x000000, "Member 'StaminaComponent_GetConsumptionByItemAndSource::Item' has a wrong offset!");
static_assert(offsetof(StaminaComponent_GetConsumptionByItemAndSource, Source) == 0x000010, "Member 'StaminaComponent_GetConsumptionByItemAndSource::Source' has a wrong offset!");
static_assert(offsetof(StaminaComponent_GetConsumptionByItemAndSource, OutConsumption) == 0x000014, "Member 'StaminaComponent_GetConsumptionByItemAndSource::OutConsumption' has a wrong offset!");
static_assert(offsetof(StaminaComponent_GetConsumptionByItemAndSource, ReturnValue) == 0x000018, "Member 'StaminaComponent_GetConsumptionByItemAndSource::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.OnDamageByBearTrap
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_OnDamageByBearTrap final
{
public:
	float                                         PercentageOfMaxStaminaToRemove;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_OnDamageByBearTrap) == 0x000004, "Wrong alignment on StaminaComponent_OnDamageByBearTrap");
static_assert(sizeof(StaminaComponent_OnDamageByBearTrap) == 0x000004, "Wrong size on StaminaComponent_OnDamageByBearTrap");
static_assert(offsetof(StaminaComponent_OnDamageByBearTrap, PercentageOfMaxStaminaToRemove) == 0x000000, "Member 'StaminaComponent_OnDamageByBearTrap::PercentageOfMaxStaminaToRemove' has a wrong offset!");

// Function Flame.StaminaComponent.OnEffectRemoved
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_OnEffectRemoved final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_OnEffectRemoved) == 0x000004, "Wrong alignment on StaminaComponent_OnEffectRemoved");
static_assert(sizeof(StaminaComponent_OnEffectRemoved) == 0x000008, "Wrong size on StaminaComponent_OnEffectRemoved");
static_assert(offsetof(StaminaComponent_OnEffectRemoved, EffectName) == 0x000000, "Member 'StaminaComponent_OnEffectRemoved::EffectName' has a wrong offset!");

// Function Flame.StaminaComponent.PlayStaminaEffect
// 0x000C (0x000C - 0x0000)
struct StaminaComponent_PlayStaminaEffect final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_PlayStaminaEffect) == 0x000004, "Wrong alignment on StaminaComponent_PlayStaminaEffect");
static_assert(sizeof(StaminaComponent_PlayStaminaEffect) == 0x00000C, "Wrong size on StaminaComponent_PlayStaminaEffect");
static_assert(offsetof(StaminaComponent_PlayStaminaEffect, Name_0) == 0x000000, "Member 'StaminaComponent_PlayStaminaEffect::Name_0' has a wrong offset!");
static_assert(offsetof(StaminaComponent_PlayStaminaEffect, ReturnValue) == 0x000008, "Member 'StaminaComponent_PlayStaminaEffect::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.RemoveAllEfectsOfName
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_RemoveAllEfectsOfName final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_RemoveAllEfectsOfName) == 0x000004, "Wrong alignment on StaminaComponent_RemoveAllEfectsOfName");
static_assert(sizeof(StaminaComponent_RemoveAllEfectsOfName) == 0x000008, "Wrong size on StaminaComponent_RemoveAllEfectsOfName");
static_assert(offsetof(StaminaComponent_RemoveAllEfectsOfName, Name_0) == 0x000000, "Member 'StaminaComponent_RemoveAllEfectsOfName::Name_0' has a wrong offset!");

// Function Flame.StaminaComponent.SetCheatInfiniteSprint
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_SetCheatInfiniteSprint final
{
public:
	bool                                          bInfinite;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_SetCheatInfiniteSprint) == 0x000001, "Wrong alignment on StaminaComponent_SetCheatInfiniteSprint");
static_assert(sizeof(StaminaComponent_SetCheatInfiniteSprint) == 0x000001, "Wrong size on StaminaComponent_SetCheatInfiniteSprint");
static_assert(offsetof(StaminaComponent_SetCheatInfiniteSprint, bInfinite) == 0x000000, "Member 'StaminaComponent_SetCheatInfiniteSprint::bInfinite' has a wrong offset!");

// Function Flame.StaminaComponent.StopHoldBreathForced
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_StopHoldBreathForced final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_StopHoldBreathForced) == 0x000004, "Wrong alignment on StaminaComponent_StopHoldBreathForced");
static_assert(sizeof(StaminaComponent_StopHoldBreathForced) == 0x000004, "Wrong size on StaminaComponent_StopHoldBreathForced");
static_assert(offsetof(StaminaComponent_StopHoldBreathForced, Duration) == 0x000000, "Member 'StaminaComponent_StopHoldBreathForced::Duration' has a wrong offset!");

// Function Flame.StaminaComponent.CanStartHoldBreath
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_CanStartHoldBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_CanStartHoldBreath) == 0x000001, "Wrong alignment on StaminaComponent_CanStartHoldBreath");
static_assert(sizeof(StaminaComponent_CanStartHoldBreath) == 0x000001, "Wrong size on StaminaComponent_CanStartHoldBreath");
static_assert(offsetof(StaminaComponent_CanStartHoldBreath, ReturnValue) == 0x000000, "Member 'StaminaComponent_CanStartHoldBreath::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.CanStartSprinting
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_CanStartSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_CanStartSprinting) == 0x000001, "Wrong alignment on StaminaComponent_CanStartSprinting");
static_assert(sizeof(StaminaComponent_CanStartSprinting) == 0x000001, "Wrong size on StaminaComponent_CanStartSprinting");
static_assert(offsetof(StaminaComponent_CanStartSprinting, ReturnValue) == 0x000000, "Member 'StaminaComponent_CanStartSprinting::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.GetMaximumStaminaValue
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetMaximumStaminaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetMaximumStaminaValue) == 0x000004, "Wrong alignment on StaminaComponent_GetMaximumStaminaValue");
static_assert(sizeof(StaminaComponent_GetMaximumStaminaValue) == 0x000004, "Wrong size on StaminaComponent_GetMaximumStaminaValue");
static_assert(offsetof(StaminaComponent_GetMaximumStaminaValue, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetMaximumStaminaValue::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.GetSprintingThreshold
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetSprintingThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetSprintingThreshold) == 0x000004, "Wrong alignment on StaminaComponent_GetSprintingThreshold");
static_assert(sizeof(StaminaComponent_GetSprintingThreshold) == 0x000004, "Wrong size on StaminaComponent_GetSprintingThreshold");
static_assert(offsetof(StaminaComponent_GetSprintingThreshold, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetSprintingThreshold::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.GetStaminaValue
// 0x0004 (0x0004 - 0x0000)
struct StaminaComponent_GetStaminaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_GetStaminaValue) == 0x000004, "Wrong alignment on StaminaComponent_GetStaminaValue");
static_assert(sizeof(StaminaComponent_GetStaminaValue) == 0x000004, "Wrong size on StaminaComponent_GetStaminaValue");
static_assert(offsetof(StaminaComponent_GetStaminaValue, ReturnValue) == 0x000000, "Member 'StaminaComponent_GetStaminaValue::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.IsExhausted
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_IsExhausted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_IsExhausted) == 0x000001, "Wrong alignment on StaminaComponent_IsExhausted");
static_assert(sizeof(StaminaComponent_IsExhausted) == 0x000001, "Wrong size on StaminaComponent_IsExhausted");
static_assert(offsetof(StaminaComponent_IsExhausted, ReturnValue) == 0x000000, "Member 'StaminaComponent_IsExhausted::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.IsHoldBreathOverriden
// 0x0008 (0x0008 - 0x0000)
struct StaminaComponent_IsHoldBreathOverriden final
{
public:
	int32                                         OutBreathLevel;                                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_IsHoldBreathOverriden) == 0x000004, "Wrong alignment on StaminaComponent_IsHoldBreathOverriden");
static_assert(sizeof(StaminaComponent_IsHoldBreathOverriden) == 0x000008, "Wrong size on StaminaComponent_IsHoldBreathOverriden");
static_assert(offsetof(StaminaComponent_IsHoldBreathOverriden, OutBreathLevel) == 0x000000, "Member 'StaminaComponent_IsHoldBreathOverriden::OutBreathLevel' has a wrong offset!");
static_assert(offsetof(StaminaComponent_IsHoldBreathOverriden, ReturnValue) == 0x000004, "Member 'StaminaComponent_IsHoldBreathOverriden::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.IsHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct StaminaComponent_IsHoldingBreath final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaComponent_IsHoldingBreath) == 0x000001, "Wrong alignment on StaminaComponent_IsHoldingBreath");
static_assert(sizeof(StaminaComponent_IsHoldingBreath) == 0x000001, "Wrong size on StaminaComponent_IsHoldingBreath");
static_assert(offsetof(StaminaComponent_IsHoldingBreath, ReturnValue) == 0x000000, "Member 'StaminaComponent_IsHoldingBreath::ReturnValue' has a wrong offset!");

// Function Flame.StaminaComponent.IsStaminaEffectPlaying
// 0x000C (0x000C - 0x0000)
struct StaminaComponent_IsStaminaEffectPlaying final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaComponent_IsStaminaEffectPlaying) == 0x000004, "Wrong alignment on StaminaComponent_IsStaminaEffectPlaying");
static_assert(sizeof(StaminaComponent_IsStaminaEffectPlaying) == 0x00000C, "Wrong size on StaminaComponent_IsStaminaEffectPlaying");
static_assert(offsetof(StaminaComponent_IsStaminaEffectPlaying, Name_0) == 0x000000, "Member 'StaminaComponent_IsStaminaEffectPlaying::Name_0' has a wrong offset!");
static_assert(offsetof(StaminaComponent_IsStaminaEffectPlaying, ReturnValue) == 0x000008, "Member 'StaminaComponent_IsStaminaEffectPlaying::ReturnValue' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.DoCoughBreath
// 0x0004 (0x0004 - 0x0000)
struct StaminaBreathingComponent_DoCoughBreath final
{
public:
	float                                         CoughingTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_DoCoughBreath) == 0x000004, "Wrong alignment on StaminaBreathingComponent_DoCoughBreath");
static_assert(sizeof(StaminaBreathingComponent_DoCoughBreath) == 0x000004, "Wrong size on StaminaBreathingComponent_DoCoughBreath");
static_assert(offsetof(StaminaBreathingComponent_DoCoughBreath, CoughingTime) == 0x000000, "Member 'StaminaBreathingComponent_DoCoughBreath::CoughingTime' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.OnBreatheCough
// 0x000C (0x000C - 0x0000)
struct StaminaBreathingComponent_OnBreatheCough final
{
public:
	struct FBreathProperties                      BreathProperties;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_OnBreatheCough) == 0x000004, "Wrong alignment on StaminaBreathingComponent_OnBreatheCough");
static_assert(sizeof(StaminaBreathingComponent_OnBreatheCough) == 0x00000C, "Wrong size on StaminaBreathingComponent_OnBreatheCough");
static_assert(offsetof(StaminaBreathingComponent_OnBreatheCough, BreathProperties) == 0x000000, "Member 'StaminaBreathingComponent_OnBreatheCough::BreathProperties' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.OnBreatheIn
// 0x000C (0x000C - 0x0000)
struct StaminaBreathingComponent_OnBreatheIn final
{
public:
	struct FBreathProperties                      BreathProperties;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_OnBreatheIn) == 0x000004, "Wrong alignment on StaminaBreathingComponent_OnBreatheIn");
static_assert(sizeof(StaminaBreathingComponent_OnBreatheIn) == 0x00000C, "Wrong size on StaminaBreathingComponent_OnBreatheIn");
static_assert(offsetof(StaminaBreathingComponent_OnBreatheIn, BreathProperties) == 0x000000, "Member 'StaminaBreathingComponent_OnBreatheIn::BreathProperties' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.OnBreatheOut
// 0x000C (0x000C - 0x0000)
struct StaminaBreathingComponent_OnBreatheOut final
{
public:
	struct FBreathProperties                      BreathProperties;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_OnBreatheOut) == 0x000004, "Wrong alignment on StaminaBreathingComponent_OnBreatheOut");
static_assert(sizeof(StaminaBreathingComponent_OnBreatheOut) == 0x00000C, "Wrong size on StaminaBreathingComponent_OnBreatheOut");
static_assert(offsetof(StaminaBreathingComponent_OnBreatheOut, BreathProperties) == 0x000000, "Member 'StaminaBreathingComponent_OnBreatheOut::BreathProperties' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.OnHoldBreathEnd
// 0x0010 (0x0010 - 0x0000)
struct StaminaBreathingComponent_OnHoldBreathEnd final
{
public:
	struct FBreathProperties                      BreathProperties;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bForced;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaBreathingComponent_OnHoldBreathEnd) == 0x000004, "Wrong alignment on StaminaBreathingComponent_OnHoldBreathEnd");
static_assert(sizeof(StaminaBreathingComponent_OnHoldBreathEnd) == 0x000010, "Wrong size on StaminaBreathingComponent_OnHoldBreathEnd");
static_assert(offsetof(StaminaBreathingComponent_OnHoldBreathEnd, BreathProperties) == 0x000000, "Member 'StaminaBreathingComponent_OnHoldBreathEnd::BreathProperties' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_OnHoldBreathEnd, bForced) == 0x00000C, "Member 'StaminaBreathingComponent_OnHoldBreathEnd::bForced' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.OnHoldBreathStart
// 0x000C (0x000C - 0x0000)
struct StaminaBreathingComponent_OnHoldBreathStart final
{
public:
	struct FBreathProperties                      BreathProperties;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_OnHoldBreathStart) == 0x000004, "Wrong alignment on StaminaBreathingComponent_OnHoldBreathStart");
static_assert(sizeof(StaminaBreathingComponent_OnHoldBreathStart) == 0x00000C, "Wrong size on StaminaBreathingComponent_OnHoldBreathStart");
static_assert(offsetof(StaminaBreathingComponent_OnHoldBreathStart, BreathProperties) == 0x000000, "Member 'StaminaBreathingComponent_OnHoldBreathStart::BreathProperties' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.PlayBreathSound
// 0x0008 (0x0008 - 0x0000)
struct StaminaBreathingComponent_PlayBreathSound final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_PlayBreathSound) == 0x000008, "Wrong alignment on StaminaBreathingComponent_PlayBreathSound");
static_assert(sizeof(StaminaBreathingComponent_PlayBreathSound) == 0x000008, "Wrong size on StaminaBreathingComponent_PlayBreathSound");
static_assert(offsetof(StaminaBreathingComponent_PlayBreathSound, Sound) == 0x000000, "Member 'StaminaBreathingComponent_PlayBreathSound::Sound' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.GetBreathProperties
// 0x0020 (0x0020 - 0x0000)
struct StaminaBreathingComponent_GetBreathProperties final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBreathType                                   NewBreathType;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBreathType                                   PreviousBreathType;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBreathProperties                      PreviousBreathProperties;                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBreathProperties                      ReturnValue;                                       // 0x0014(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_GetBreathProperties) == 0x000004, "Wrong alignment on StaminaBreathingComponent_GetBreathProperties");
static_assert(sizeof(StaminaBreathingComponent_GetBreathProperties) == 0x000020, "Wrong size on StaminaBreathingComponent_GetBreathProperties");
static_assert(offsetof(StaminaBreathingComponent_GetBreathProperties, DeltaTime) == 0x000000, "Member 'StaminaBreathingComponent_GetBreathProperties::DeltaTime' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathProperties, NewBreathType) == 0x000004, "Member 'StaminaBreathingComponent_GetBreathProperties::NewBreathType' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathProperties, PreviousBreathType) == 0x000005, "Member 'StaminaBreathingComponent_GetBreathProperties::PreviousBreathType' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathProperties, PreviousBreathProperties) == 0x000008, "Member 'StaminaBreathingComponent_GetBreathProperties::PreviousBreathProperties' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathProperties, ReturnValue) == 0x000014, "Member 'StaminaBreathingComponent_GetBreathProperties::ReturnValue' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.GetBreathSoundVolume
// 0x0018 (0x0018 - 0x0000)
struct StaminaBreathingComponent_GetBreathSoundVolume final
{
public:
	EBreathType                                   BreathType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBreathProperties                      BreathProperties;                                  // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Is1PersonView;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaminaBreathingComponent_GetBreathSoundVolume) == 0x000004, "Wrong alignment on StaminaBreathingComponent_GetBreathSoundVolume");
static_assert(sizeof(StaminaBreathingComponent_GetBreathSoundVolume) == 0x000018, "Wrong size on StaminaBreathingComponent_GetBreathSoundVolume");
static_assert(offsetof(StaminaBreathingComponent_GetBreathSoundVolume, BreathType) == 0x000000, "Member 'StaminaBreathingComponent_GetBreathSoundVolume::BreathType' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathSoundVolume, BreathProperties) == 0x000004, "Member 'StaminaBreathingComponent_GetBreathSoundVolume::BreathProperties' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathSoundVolume, Is1PersonView) == 0x000010, "Member 'StaminaBreathingComponent_GetBreathSoundVolume::Is1PersonView' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathSoundVolume, ReturnValue) == 0x000014, "Member 'StaminaBreathingComponent_GetBreathSoundVolume::ReturnValue' has a wrong offset!");

// Function Flame.StaminaBreathingComponent.GetBreathType
// 0x0014 (0x0014 - 0x0000)
struct StaminaBreathingComponent_GetBreathType final
{
public:
	EBreathType                                   PreviousBreathType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBreathProperties                      PreviousBreathProperties;                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EBreathType                                   ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StaminaBreathingComponent_GetBreathType) == 0x000004, "Wrong alignment on StaminaBreathingComponent_GetBreathType");
static_assert(sizeof(StaminaBreathingComponent_GetBreathType) == 0x000014, "Wrong size on StaminaBreathingComponent_GetBreathType");
static_assert(offsetof(StaminaBreathingComponent_GetBreathType, PreviousBreathType) == 0x000000, "Member 'StaminaBreathingComponent_GetBreathType::PreviousBreathType' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathType, PreviousBreathProperties) == 0x000004, "Member 'StaminaBreathingComponent_GetBreathType::PreviousBreathProperties' has a wrong offset!");
static_assert(offsetof(StaminaBreathingComponent_GetBreathType, ReturnValue) == 0x000010, "Member 'StaminaBreathingComponent_GetBreathType::ReturnValue' has a wrong offset!");

// Function Flame.ChallengePrerequisite.IsPrerequisiteMet
// 0x0020 (0x0020 - 0x0000)
struct ChallengePrerequisite_IsPrerequisiteMet final
{
public:
	TSubclassOf<class AItem>                      ItemType;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemCategory                                 ItemCategory;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChallengeName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengePrerequisite_IsPrerequisiteMet) == 0x000008, "Wrong alignment on ChallengePrerequisite_IsPrerequisiteMet");
static_assert(sizeof(ChallengePrerequisite_IsPrerequisiteMet) == 0x000020, "Wrong size on ChallengePrerequisite_IsPrerequisiteMet");
static_assert(offsetof(ChallengePrerequisite_IsPrerequisiteMet, ItemType) == 0x000000, "Member 'ChallengePrerequisite_IsPrerequisiteMet::ItemType' has a wrong offset!");
static_assert(offsetof(ChallengePrerequisite_IsPrerequisiteMet, Number) == 0x000008, "Member 'ChallengePrerequisite_IsPrerequisiteMet::Number' has a wrong offset!");
static_assert(offsetof(ChallengePrerequisite_IsPrerequisiteMet, ItemCategory) == 0x00000C, "Member 'ChallengePrerequisite_IsPrerequisiteMet::ItemCategory' has a wrong offset!");
static_assert(offsetof(ChallengePrerequisite_IsPrerequisiteMet, ChallengeName) == 0x000010, "Member 'ChallengePrerequisite_IsPrerequisiteMet::ChallengeName' has a wrong offset!");
static_assert(offsetof(ChallengePrerequisite_IsPrerequisiteMet, ReturnValue) == 0x000018, "Member 'ChallengePrerequisite_IsPrerequisiteMet::ReturnValue' has a wrong offset!");

// Function Flame.CharacterHitZoneComponent.AddHitZoneComponent
// 0x000C (0x000C - 0x0000)
struct CharacterHitZoneComponent_AddHitZoneComponent final
{
public:
	ECharacterHitZone                             Zone;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHitZoneComponent_AddHitZoneComponent) == 0x000004, "Wrong alignment on CharacterHitZoneComponent_AddHitZoneComponent");
static_assert(sizeof(CharacterHitZoneComponent_AddHitZoneComponent) == 0x00000C, "Wrong size on CharacterHitZoneComponent_AddHitZoneComponent");
static_assert(offsetof(CharacterHitZoneComponent_AddHitZoneComponent, Zone) == 0x000000, "Member 'CharacterHitZoneComponent_AddHitZoneComponent::Zone' has a wrong offset!");
static_assert(offsetof(CharacterHitZoneComponent_AddHitZoneComponent, BoneName) == 0x000004, "Member 'CharacterHitZoneComponent_AddHitZoneComponent::BoneName' has a wrong offset!");

// Function Flame.CharacterHitZoneComponent.GetComponentZone
// 0x000C (0x000C - 0x0000)
struct CharacterHitZoneComponent_GetComponentZone final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterHitZone                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterHitZoneComponent_GetComponentZone) == 0x000004, "Wrong alignment on CharacterHitZoneComponent_GetComponentZone");
static_assert(sizeof(CharacterHitZoneComponent_GetComponentZone) == 0x00000C, "Wrong size on CharacterHitZoneComponent_GetComponentZone");
static_assert(offsetof(CharacterHitZoneComponent_GetComponentZone, BoneName) == 0x000000, "Member 'CharacterHitZoneComponent_GetComponentZone::BoneName' has a wrong offset!");
static_assert(offsetof(CharacterHitZoneComponent_GetComponentZone, ReturnValue) == 0x000008, "Member 'CharacterHitZoneComponent_GetComponentZone::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineDebugComponent.GetCurrentItemStateInfo
// 0x0010 (0x0010 - 0x0000)
struct StateMachineDebugComponent_GetCurrentItemStateInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineDebugComponent_GetCurrentItemStateInfo) == 0x000008, "Wrong alignment on StateMachineDebugComponent_GetCurrentItemStateInfo");
static_assert(sizeof(StateMachineDebugComponent_GetCurrentItemStateInfo) == 0x000010, "Wrong size on StateMachineDebugComponent_GetCurrentItemStateInfo");
static_assert(offsetof(StateMachineDebugComponent_GetCurrentItemStateInfo, ReturnValue) == 0x000000, "Member 'StateMachineDebugComponent_GetCurrentItemStateInfo::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineDebugComponent.GetCurrentStateOnServerInfo
// 0x0010 (0x0010 - 0x0000)
struct StateMachineDebugComponent_GetCurrentStateOnServerInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineDebugComponent_GetCurrentStateOnServerInfo) == 0x000008, "Wrong alignment on StateMachineDebugComponent_GetCurrentStateOnServerInfo");
static_assert(sizeof(StateMachineDebugComponent_GetCurrentStateOnServerInfo) == 0x000010, "Wrong size on StateMachineDebugComponent_GetCurrentStateOnServerInfo");
static_assert(offsetof(StateMachineDebugComponent_GetCurrentStateOnServerInfo, ReturnValue) == 0x000000, "Member 'StateMachineDebugComponent_GetCurrentStateOnServerInfo::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineDebugComponent.GetStatesHistoryLocal
// 0x0010 (0x0010 - 0x0000)
struct StateMachineDebugComponent_GetStatesHistoryLocal final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineDebugComponent_GetStatesHistoryLocal) == 0x000008, "Wrong alignment on StateMachineDebugComponent_GetStatesHistoryLocal");
static_assert(sizeof(StateMachineDebugComponent_GetStatesHistoryLocal) == 0x000010, "Wrong size on StateMachineDebugComponent_GetStatesHistoryLocal");
static_assert(offsetof(StateMachineDebugComponent_GetStatesHistoryLocal, ReturnValue) == 0x000000, "Member 'StateMachineDebugComponent_GetStatesHistoryLocal::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineDebugComponent.GetStatesHistoryOnServer
// 0x0010 (0x0010 - 0x0000)
struct StateMachineDebugComponent_GetStatesHistoryOnServer final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineDebugComponent_GetStatesHistoryOnServer) == 0x000008, "Wrong alignment on StateMachineDebugComponent_GetStatesHistoryOnServer");
static_assert(sizeof(StateMachineDebugComponent_GetStatesHistoryOnServer) == 0x000010, "Wrong size on StateMachineDebugComponent_GetStatesHistoryOnServer");
static_assert(offsetof(StateMachineDebugComponent_GetStatesHistoryOnServer, ReturnValue) == 0x000000, "Member 'StateMachineDebugComponent_GetStatesHistoryOnServer::ReturnValue' has a wrong offset!");

// Function Flame.LobbyBaseMenuWidget.GetActivatedAmountCPP
// 0x0008 (0x0008 - 0x0000)
struct LobbyBaseMenuWidget_GetActivatedAmountCPP final
{
public:
	EBoosterTypes                                 Booster;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyBaseMenuWidget_GetActivatedAmountCPP) == 0x000004, "Wrong alignment on LobbyBaseMenuWidget_GetActivatedAmountCPP");
static_assert(sizeof(LobbyBaseMenuWidget_GetActivatedAmountCPP) == 0x000008, "Wrong size on LobbyBaseMenuWidget_GetActivatedAmountCPP");
static_assert(offsetof(LobbyBaseMenuWidget_GetActivatedAmountCPP, Booster) == 0x000000, "Member 'LobbyBaseMenuWidget_GetActivatedAmountCPP::Booster' has a wrong offset!");
static_assert(offsetof(LobbyBaseMenuWidget_GetActivatedAmountCPP, ReturnValue) == 0x000004, "Member 'LobbyBaseMenuWidget_GetActivatedAmountCPP::ReturnValue' has a wrong offset!");

// Function Flame.LobbyBaseMenuWidget.RefreshReadyUI
// 0x0010 (0x0010 - 0x0000)
struct LobbyBaseMenuWidget_RefreshReadyUI final
{
public:
	TArray<int32>                                 ReadyIDs;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyBaseMenuWidget_RefreshReadyUI) == 0x000008, "Wrong alignment on LobbyBaseMenuWidget_RefreshReadyUI");
static_assert(sizeof(LobbyBaseMenuWidget_RefreshReadyUI) == 0x000010, "Wrong size on LobbyBaseMenuWidget_RefreshReadyUI");
static_assert(offsetof(LobbyBaseMenuWidget_RefreshReadyUI, ReadyIDs) == 0x000000, "Member 'LobbyBaseMenuWidget_RefreshReadyUI::ReadyIDs' has a wrong offset!");

// Function Flame.LobbyBaseMenuWidget.SetBoosterState
// 0x0014 (0x0014 - 0x0000)
struct LobbyBaseMenuWidget_SetBoosterState final
{
public:
	EBoosterTypes                                 Booster;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OrderedCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalActiveCount;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsUsed;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyBaseMenuWidget_SetBoosterState) == 0x000004, "Wrong alignment on LobbyBaseMenuWidget_SetBoosterState");
static_assert(sizeof(LobbyBaseMenuWidget_SetBoosterState) == 0x000014, "Wrong size on LobbyBaseMenuWidget_SetBoosterState");
static_assert(offsetof(LobbyBaseMenuWidget_SetBoosterState, Booster) == 0x000000, "Member 'LobbyBaseMenuWidget_SetBoosterState::Booster' has a wrong offset!");
static_assert(offsetof(LobbyBaseMenuWidget_SetBoosterState, OrderedCount) == 0x000004, "Member 'LobbyBaseMenuWidget_SetBoosterState::OrderedCount' has a wrong offset!");
static_assert(offsetof(LobbyBaseMenuWidget_SetBoosterState, TotalActiveCount) == 0x000008, "Member 'LobbyBaseMenuWidget_SetBoosterState::TotalActiveCount' has a wrong offset!");
static_assert(offsetof(LobbyBaseMenuWidget_SetBoosterState, MaxCount) == 0x00000C, "Member 'LobbyBaseMenuWidget_SetBoosterState::MaxCount' has a wrong offset!");
static_assert(offsetof(LobbyBaseMenuWidget_SetBoosterState, TicketsUsed) == 0x000010, "Member 'LobbyBaseMenuWidget_SetBoosterState::TicketsUsed' has a wrong offset!");

// Function Flame.LobbyBaseMenuWidget.SetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct LobbyBaseMenuWidget_SetRemainingTime final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyBaseMenuWidget_SetRemainingTime) == 0x000004, "Wrong alignment on LobbyBaseMenuWidget_SetRemainingTime");
static_assert(sizeof(LobbyBaseMenuWidget_SetRemainingTime) == 0x000004, "Wrong size on LobbyBaseMenuWidget_SetRemainingTime");
static_assert(offsetof(LobbyBaseMenuWidget_SetRemainingTime, Seconds) == 0x000000, "Member 'LobbyBaseMenuWidget_SetRemainingTime::Seconds' has a wrong offset!");

// Function Flame.LobbyBaseMenuWidget.SetRemainingTimeEncounter
// 0x0004 (0x0004 - 0x0000)
struct LobbyBaseMenuWidget_SetRemainingTimeEncounter final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyBaseMenuWidget_SetRemainingTimeEncounter) == 0x000004, "Wrong alignment on LobbyBaseMenuWidget_SetRemainingTimeEncounter");
static_assert(sizeof(LobbyBaseMenuWidget_SetRemainingTimeEncounter) == 0x000004, "Wrong size on LobbyBaseMenuWidget_SetRemainingTimeEncounter");
static_assert(offsetof(LobbyBaseMenuWidget_SetRemainingTimeEncounter, Seconds) == 0x000000, "Member 'LobbyBaseMenuWidget_SetRemainingTimeEncounter::Seconds' has a wrong offset!");

// Function Flame.CheatFunctions.CollectActionsInProgress
// 0x0018 (0x0018 - 0x0000)
struct CheatFunctions_CollectActionsInProgress final
{
public:
	const class AHumanCharacter*                  Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_CollectActionsInProgress) == 0x000008, "Wrong alignment on CheatFunctions_CollectActionsInProgress");
static_assert(sizeof(CheatFunctions_CollectActionsInProgress) == 0x000018, "Wrong size on CheatFunctions_CollectActionsInProgress");
static_assert(offsetof(CheatFunctions_CollectActionsInProgress, Character) == 0x000000, "Member 'CheatFunctions_CollectActionsInProgress::Character' has a wrong offset!");
static_assert(offsetof(CheatFunctions_CollectActionsInProgress, ReturnValue) == 0x000008, "Member 'CheatFunctions_CollectActionsInProgress::ReturnValue' has a wrong offset!");

// Function Flame.CheatFunctions.GetStateMachine
// 0x0010 (0x0010 - 0x0000)
struct CheatFunctions_GetStateMachine final
{
public:
	const class AHumanCharacter*                  Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStateMachineComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_GetStateMachine) == 0x000008, "Wrong alignment on CheatFunctions_GetStateMachine");
static_assert(sizeof(CheatFunctions_GetStateMachine) == 0x000010, "Wrong size on CheatFunctions_GetStateMachine");
static_assert(offsetof(CheatFunctions_GetStateMachine, Character) == 0x000000, "Member 'CheatFunctions_GetStateMachine::Character' has a wrong offset!");
static_assert(offsetof(CheatFunctions_GetStateMachine, ReturnValue) == 0x000008, "Member 'CheatFunctions_GetStateMachine::ReturnValue' has a wrong offset!");

// Function Flame.CheatFunctions.GetTransformFromClipboard
// 0x0040 (0x0040 - 0x0000)
struct CheatFunctions_GetTransformFromClipboard final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CheatFunctions_GetTransformFromClipboard) == 0x000010, "Wrong alignment on CheatFunctions_GetTransformFromClipboard");
static_assert(sizeof(CheatFunctions_GetTransformFromClipboard) == 0x000040, "Wrong size on CheatFunctions_GetTransformFromClipboard");
static_assert(offsetof(CheatFunctions_GetTransformFromClipboard, Transform) == 0x000000, "Member 'CheatFunctions_GetTransformFromClipboard::Transform' has a wrong offset!");
static_assert(offsetof(CheatFunctions_GetTransformFromClipboard, ReturnValue) == 0x000030, "Member 'CheatFunctions_GetTransformFromClipboard::ReturnValue' has a wrong offset!");

// Function Flame.CheatFunctions.InterruptAllStates
// 0x0008 (0x0008 - 0x0000)
struct CheatFunctions_InterruptAllStates final
{
public:
	const class AHumanCharacter*                  Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_InterruptAllStates) == 0x000008, "Wrong alignment on CheatFunctions_InterruptAllStates");
static_assert(sizeof(CheatFunctions_InterruptAllStates) == 0x000008, "Wrong size on CheatFunctions_InterruptAllStates");
static_assert(offsetof(CheatFunctions_InterruptAllStates, Character) == 0x000000, "Member 'CheatFunctions_InterruptAllStates::Character' has a wrong offset!");

// Function Flame.CheatFunctions.PlayerTransformToClipboard
// 0x0008 (0x0008 - 0x0000)
struct CheatFunctions_PlayerTransformToClipboard final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_PlayerTransformToClipboard) == 0x000008, "Wrong alignment on CheatFunctions_PlayerTransformToClipboard");
static_assert(sizeof(CheatFunctions_PlayerTransformToClipboard) == 0x000008, "Wrong size on CheatFunctions_PlayerTransformToClipboard");
static_assert(offsetof(CheatFunctions_PlayerTransformToClipboard, WorldContextObject) == 0x000000, "Member 'CheatFunctions_PlayerTransformToClipboard::WorldContextObject' has a wrong offset!");

// Function Flame.CheatFunctions.SetPlayerTransformFromClipboard
// 0x0008 (0x0008 - 0x0000)
struct CheatFunctions_SetPlayerTransformFromClipboard final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_SetPlayerTransformFromClipboard) == 0x000008, "Wrong alignment on CheatFunctions_SetPlayerTransformFromClipboard");
static_assert(sizeof(CheatFunctions_SetPlayerTransformFromClipboard) == 0x000008, "Wrong size on CheatFunctions_SetPlayerTransformFromClipboard");
static_assert(offsetof(CheatFunctions_SetPlayerTransformFromClipboard, WorldContextObject) == 0x000000, "Member 'CheatFunctions_SetPlayerTransformFromClipboard::WorldContextObject' has a wrong offset!");

// Function Flame.CheatFunctions.SetTransformToClipboard
// 0x0030 (0x0030 - 0x0000)
struct CheatFunctions_SetTransformToClipboard final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CheatFunctions_SetTransformToClipboard) == 0x000010, "Wrong alignment on CheatFunctions_SetTransformToClipboard");
static_assert(sizeof(CheatFunctions_SetTransformToClipboard) == 0x000030, "Wrong size on CheatFunctions_SetTransformToClipboard");
static_assert(offsetof(CheatFunctions_SetTransformToClipboard, Transform) == 0x000000, "Member 'CheatFunctions_SetTransformToClipboard::Transform' has a wrong offset!");

// Function Flame.ListButtonWidget.OnButtonClicked
// 0x0008 (0x0008 - 0x0000)
struct ListButtonWidget_OnButtonClicked final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListButtonWidget_OnButtonClicked) == 0x000008, "Wrong alignment on ListButtonWidget_OnButtonClicked");
static_assert(sizeof(ListButtonWidget_OnButtonClicked) == 0x000008, "Wrong size on ListButtonWidget_OnButtonClicked");
static_assert(offsetof(ListButtonWidget_OnButtonClicked, Sender) == 0x000000, "Member 'ListButtonWidget_OnButtonClicked::Sender' has a wrong offset!");

// Function Flame.ListButtonWidget.OnButtonFocused
// 0x0008 (0x0008 - 0x0000)
struct ListButtonWidget_OnButtonFocused final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListButtonWidget_OnButtonFocused) == 0x000008, "Wrong alignment on ListButtonWidget_OnButtonFocused");
static_assert(sizeof(ListButtonWidget_OnButtonFocused) == 0x000008, "Wrong size on ListButtonWidget_OnButtonFocused");
static_assert(offsetof(ListButtonWidget_OnButtonFocused, Sender) == 0x000000, "Member 'ListButtonWidget_OnButtonFocused::Sender' has a wrong offset!");

// Function Flame.ListButtonWidget.OnButtonPressed
// 0x0008 (0x0008 - 0x0000)
struct ListButtonWidget_OnButtonPressed final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListButtonWidget_OnButtonPressed) == 0x000008, "Wrong alignment on ListButtonWidget_OnButtonPressed");
static_assert(sizeof(ListButtonWidget_OnButtonPressed) == 0x000008, "Wrong size on ListButtonWidget_OnButtonPressed");
static_assert(offsetof(ListButtonWidget_OnButtonPressed, Sender) == 0x000000, "Member 'ListButtonWidget_OnButtonPressed::Sender' has a wrong offset!");

// Function Flame.ListButtonWidget.OnButtonReleased
// 0x0008 (0x0008 - 0x0000)
struct ListButtonWidget_OnButtonReleased final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListButtonWidget_OnButtonReleased) == 0x000008, "Wrong alignment on ListButtonWidget_OnButtonReleased");
static_assert(sizeof(ListButtonWidget_OnButtonReleased) == 0x000008, "Wrong size on ListButtonWidget_OnButtonReleased");
static_assert(offsetof(ListButtonWidget_OnButtonReleased, Sender) == 0x000000, "Member 'ListButtonWidget_OnButtonReleased::Sender' has a wrong offset!");

// Function Flame.ListButtonWidget.OnButtonUnfocused
// 0x0008 (0x0008 - 0x0000)
struct ListButtonWidget_OnButtonUnfocused final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ListButtonWidget_OnButtonUnfocused) == 0x000008, "Wrong alignment on ListButtonWidget_OnButtonUnfocused");
static_assert(sizeof(ListButtonWidget_OnButtonUnfocused) == 0x000008, "Wrong size on ListButtonWidget_OnButtonUnfocused");
static_assert(offsetof(ListButtonWidget_OnButtonUnfocused, Sender) == 0x000000, "Member 'ListButtonWidget_OnButtonUnfocused::Sender' has a wrong offset!");

// Function Flame.InGameNewsSystem.GetNews
// 0x0010 (0x0010 - 0x0000)
struct InGameNewsSystem_GetNews final
{
public:
	TArray<struct FNewsUIData>                    OutNews;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameNewsSystem_GetNews) == 0x000008, "Wrong alignment on InGameNewsSystem_GetNews");
static_assert(sizeof(InGameNewsSystem_GetNews) == 0x000010, "Wrong size on InGameNewsSystem_GetNews");
static_assert(offsetof(InGameNewsSystem_GetNews, OutNews) == 0x000000, "Member 'InGameNewsSystem_GetNews::OutNews' has a wrong offset!");

// Function Flame.InGameNewsSystem.NeedsToBeDisplayed
// 0x00A0 (0x00A0 - 0x0000)
struct InGameNewsSystem_NeedsToBeDisplayed final
{
public:
	struct FNewsDto                               News;                                              // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InGameNewsSystem_NeedsToBeDisplayed) == 0x000008, "Wrong alignment on InGameNewsSystem_NeedsToBeDisplayed");
static_assert(sizeof(InGameNewsSystem_NeedsToBeDisplayed) == 0x0000A0, "Wrong size on InGameNewsSystem_NeedsToBeDisplayed");
static_assert(offsetof(InGameNewsSystem_NeedsToBeDisplayed, News) == 0x000000, "Member 'InGameNewsSystem_NeedsToBeDisplayed::News' has a wrong offset!");
static_assert(offsetof(InGameNewsSystem_NeedsToBeDisplayed, ReturnValue) == 0x000098, "Member 'InGameNewsSystem_NeedsToBeDisplayed::ReturnValue' has a wrong offset!");

// Function Flame.InGameNewsSystem.RemoveNotFoundNewsFromSaveFile
// 0x0010 (0x0010 - 0x0000)
struct InGameNewsSystem_RemoveNotFoundNewsFromSaveFile final
{
public:
	TArray<struct FNewsDto>                       News;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameNewsSystem_RemoveNotFoundNewsFromSaveFile) == 0x000008, "Wrong alignment on InGameNewsSystem_RemoveNotFoundNewsFromSaveFile");
static_assert(sizeof(InGameNewsSystem_RemoveNotFoundNewsFromSaveFile) == 0x000010, "Wrong size on InGameNewsSystem_RemoveNotFoundNewsFromSaveFile");
static_assert(offsetof(InGameNewsSystem_RemoveNotFoundNewsFromSaveFile, News) == 0x000000, "Member 'InGameNewsSystem_RemoveNotFoundNewsFromSaveFile::News' has a wrong offset!");

// Function Flame.InGameNewsSystem.IsInGameNewsSystemReady
// 0x0001 (0x0001 - 0x0000)
struct InGameNewsSystem_IsInGameNewsSystemReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InGameNewsSystem_IsInGameNewsSystemReady) == 0x000001, "Wrong alignment on InGameNewsSystem_IsInGameNewsSystemReady");
static_assert(sizeof(InGameNewsSystem_IsInGameNewsSystemReady) == 0x000001, "Wrong size on InGameNewsSystem_IsInGameNewsSystemReady");
static_assert(offsetof(InGameNewsSystem_IsInGameNewsSystemReady, ReturnValue) == 0x000000, "Member 'InGameNewsSystem_IsInGameNewsSystemReady::ReturnValue' has a wrong offset!");

// Function Flame.InputActionHintWidget.SetContent
// 0x0028 (0x0028 - 0x0000)
struct InputActionHintWidget_SetContent final
{
public:
	class FText                                   InMessage;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EInputIcon>                            InIcons;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionHintWidget_SetContent) == 0x000008, "Wrong alignment on InputActionHintWidget_SetContent");
static_assert(sizeof(InputActionHintWidget_SetContent) == 0x000028, "Wrong size on InputActionHintWidget_SetContent");
static_assert(offsetof(InputActionHintWidget_SetContent, InMessage) == 0x000000, "Member 'InputActionHintWidget_SetContent::InMessage' has a wrong offset!");
static_assert(offsetof(InputActionHintWidget_SetContent, InIcons) == 0x000018, "Member 'InputActionHintWidget_SetContent::InIcons' has a wrong offset!");

// Function Flame.InputActionWidget.HasActionName
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidget_HasActionName final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_HasActionName) == 0x000001, "Wrong alignment on InputActionWidget_HasActionName");
static_assert(sizeof(InputActionWidget_HasActionName) == 0x000001, "Wrong size on InputActionWidget_HasActionName");
static_assert(offsetof(InputActionWidget_HasActionName, ReturnValue) == 0x000000, "Member 'InputActionWidget_HasActionName::ReturnValue' has a wrong offset!");

// Function Flame.InputActionWidget.SetActionName
// 0x0018 (0x0018 - 0x0000)
struct InputActionWidget_SetActionName final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetActionName) == 0x000008, "Wrong alignment on InputActionWidget_SetActionName");
static_assert(sizeof(InputActionWidget_SetActionName) == 0x000018, "Wrong size on InputActionWidget_SetActionName");
static_assert(offsetof(InputActionWidget_SetActionName, InText) == 0x000000, "Member 'InputActionWidget_SetActionName::InText' has a wrong offset!");

// Function Flame.InputActionWidget.SetConsumeActions
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidget_SetConsumeActions final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetConsumeActions) == 0x000001, "Wrong alignment on InputActionWidget_SetConsumeActions");
static_assert(sizeof(InputActionWidget_SetConsumeActions) == 0x000001, "Wrong size on InputActionWidget_SetConsumeActions");
static_assert(offsetof(InputActionWidget_SetConsumeActions, InValue) == 0x000000, "Member 'InputActionWidget_SetConsumeActions::InValue' has a wrong offset!");

// Function Flame.InputActionWidget.SetHoldTime
// 0x0004 (0x0004 - 0x0000)
struct InputActionWidget_SetHoldTime final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetHoldTime) == 0x000004, "Wrong alignment on InputActionWidget_SetHoldTime");
static_assert(sizeof(InputActionWidget_SetHoldTime) == 0x000004, "Wrong size on InputActionWidget_SetHoldTime");
static_assert(offsetof(InputActionWidget_SetHoldTime, TimeInSeconds) == 0x000000, "Member 'InputActionWidget_SetHoldTime::TimeInSeconds' has a wrong offset!");

// Function Flame.InputActionWidget.SetInputIcon
// 0x0002 (0x0002 - 0x0000)
struct InputActionWidget_SetInputIcon final
{
public:
	EInputIcon                                    InIcon;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsHoldable;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetInputIcon) == 0x000001, "Wrong alignment on InputActionWidget_SetInputIcon");
static_assert(sizeof(InputActionWidget_SetInputIcon) == 0x000002, "Wrong size on InputActionWidget_SetInputIcon");
static_assert(offsetof(InputActionWidget_SetInputIcon, InIcon) == 0x000000, "Member 'InputActionWidget_SetInputIcon::InIcon' has a wrong offset!");
static_assert(offsetof(InputActionWidget_SetInputIcon, bInIsHoldable) == 0x000001, "Member 'InputActionWidget_SetInputIcon::bInIsHoldable' has a wrong offset!");

// Function Flame.InputActionWidget.SetSoundOnHold
// 0x0008 (0x0008 - 0x0000)
struct InputActionWidget_SetSoundOnHold final
{
public:
	class USoundBase*                             InSoundOnHold;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetSoundOnHold) == 0x000008, "Wrong alignment on InputActionWidget_SetSoundOnHold");
static_assert(sizeof(InputActionWidget_SetSoundOnHold) == 0x000008, "Wrong size on InputActionWidget_SetSoundOnHold");
static_assert(offsetof(InputActionWidget_SetSoundOnHold, InSoundOnHold) == 0x000000, "Member 'InputActionWidget_SetSoundOnHold::InSoundOnHold' has a wrong offset!");

// Function Flame.InputActionWidget.SetSoundOnPress
// 0x0008 (0x0008 - 0x0000)
struct InputActionWidget_SetSoundOnPress final
{
public:
	class USoundBase*                             InSoundOnPress;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetSoundOnPress) == 0x000008, "Wrong alignment on InputActionWidget_SetSoundOnPress");
static_assert(sizeof(InputActionWidget_SetSoundOnPress) == 0x000008, "Wrong size on InputActionWidget_SetSoundOnPress");
static_assert(offsetof(InputActionWidget_SetSoundOnPress, InSoundOnPress) == 0x000000, "Member 'InputActionWidget_SetSoundOnPress::InSoundOnPress' has a wrong offset!");

// Function Flame.InputActionWidget.SetSoundOnRelease
// 0x0008 (0x0008 - 0x0000)
struct InputActionWidget_SetSoundOnRelease final
{
public:
	class USoundBase*                             InSoundOnRelease;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetSoundOnRelease) == 0x000008, "Wrong alignment on InputActionWidget_SetSoundOnRelease");
static_assert(sizeof(InputActionWidget_SetSoundOnRelease) == 0x000008, "Wrong size on InputActionWidget_SetSoundOnRelease");
static_assert(offsetof(InputActionWidget_SetSoundOnRelease, InSoundOnRelease) == 0x000000, "Member 'InputActionWidget_SetSoundOnRelease::InSoundOnRelease' has a wrong offset!");

// Function Flame.InputActionWidget.SetWindowsInputIcon
// 0x0002 (0x0002 - 0x0000)
struct InputActionWidget_SetWindowsInputIcon final
{
public:
	EInputIcon                                    InIcon;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIsWideImage;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidget_SetWindowsInputIcon) == 0x000001, "Wrong alignment on InputActionWidget_SetWindowsInputIcon");
static_assert(sizeof(InputActionWidget_SetWindowsInputIcon) == 0x000002, "Wrong size on InputActionWidget_SetWindowsInputIcon");
static_assert(offsetof(InputActionWidget_SetWindowsInputIcon, InIcon) == 0x000000, "Member 'InputActionWidget_SetWindowsInputIcon::InIcon' has a wrong offset!");
static_assert(offsetof(InputActionWidget_SetWindowsInputIcon, bInIsWideImage) == 0x000001, "Member 'InputActionWidget_SetWindowsInputIcon::bInIsWideImage' has a wrong offset!");

// Function Flame.PingManager.GetPingManager
// 0x0010 (0x0010 - 0x0000)
struct PingManager_GetPingManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPingManager*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingManager_GetPingManager) == 0x000008, "Wrong alignment on PingManager_GetPingManager");
static_assert(sizeof(PingManager_GetPingManager) == 0x000010, "Wrong size on PingManager_GetPingManager");
static_assert(offsetof(PingManager_GetPingManager, WorldContextObject) == 0x000000, "Member 'PingManager_GetPingManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PingManager_GetPingManager, ReturnValue) == 0x000008, "Member 'PingManager_GetPingManager::ReturnValue' has a wrong offset!");

// Function Flame.PingManager.IsPingOfServersComputed
// 0x0001 (0x0001 - 0x0000)
struct PingManager_IsPingOfServersComputed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingManager_IsPingOfServersComputed) == 0x000001, "Wrong alignment on PingManager_IsPingOfServersComputed");
static_assert(sizeof(PingManager_IsPingOfServersComputed) == 0x000001, "Wrong size on PingManager_IsPingOfServersComputed");
static_assert(offsetof(PingManager_IsPingOfServersComputed, ReturnValue) == 0x000000, "Member 'PingManager_IsPingOfServersComputed::ReturnValue' has a wrong offset!");

// Function Flame.InputActionWidgetExtended.HasActionInfo
// 0x0001 (0x0001 - 0x0000)
struct InputActionWidgetExtended_HasActionInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidgetExtended_HasActionInfo) == 0x000001, "Wrong alignment on InputActionWidgetExtended_HasActionInfo");
static_assert(sizeof(InputActionWidgetExtended_HasActionInfo) == 0x000001, "Wrong size on InputActionWidgetExtended_HasActionInfo");
static_assert(offsetof(InputActionWidgetExtended_HasActionInfo, ReturnValue) == 0x000000, "Member 'InputActionWidgetExtended_HasActionInfo::ReturnValue' has a wrong offset!");

// Function Flame.InputActionWidgetExtended.SetActionInfo
// 0x0018 (0x0018 - 0x0000)
struct InputActionWidgetExtended_SetActionInfo final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionWidgetExtended_SetActionInfo) == 0x000008, "Wrong alignment on InputActionWidgetExtended_SetActionInfo");
static_assert(sizeof(InputActionWidgetExtended_SetActionInfo) == 0x000018, "Wrong size on InputActionWidgetExtended_SetActionInfo");
static_assert(offsetof(InputActionWidgetExtended_SetActionInfo, InText) == 0x000000, "Member 'InputActionWidgetExtended_SetActionInfo::InText' has a wrong offset!");

// Function Flame.InputChoiceWidget.GetSelectedIndex
// 0x0004 (0x0004 - 0x0000)
struct InputChoiceWidget_GetSelectedIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputChoiceWidget_GetSelectedIndex) == 0x000004, "Wrong alignment on InputChoiceWidget_GetSelectedIndex");
static_assert(sizeof(InputChoiceWidget_GetSelectedIndex) == 0x000004, "Wrong size on InputChoiceWidget_GetSelectedIndex");
static_assert(offsetof(InputChoiceWidget_GetSelectedIndex, ReturnValue) == 0x000000, "Member 'InputChoiceWidget_GetSelectedIndex::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.ClientNotifyInteractionEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_ClientNotifyInteractionEnd final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_ClientNotifyInteractionEnd) == 0x000008, "Wrong alignment on InteractionActorComponent_ClientNotifyInteractionEnd");
static_assert(sizeof(InteractionActorComponent_ClientNotifyInteractionEnd) == 0x000008, "Wrong size on InteractionActorComponent_ClientNotifyInteractionEnd");
static_assert(offsetof(InteractionActorComponent_ClientNotifyInteractionEnd, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_ClientNotifyInteractionEnd::InteractingItem' has a wrong offset!");

// Function Flame.InteractionActorComponent.ClientNotifyInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_ClientNotifyInteractionStart final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_ClientNotifyInteractionStart) == 0x000008, "Wrong alignment on InteractionActorComponent_ClientNotifyInteractionStart");
static_assert(sizeof(InteractionActorComponent_ClientNotifyInteractionStart) == 0x000008, "Wrong size on InteractionActorComponent_ClientNotifyInteractionStart");
static_assert(offsetof(InteractionActorComponent_ClientNotifyInteractionStart, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_ClientNotifyInteractionStart::InteractingItem' has a wrong offset!");

// Function Flame.InteractionActorComponent.ClientNotifyPreInteractionEnd
// 0x0010 (0x0010 - 0x0000)
struct InteractionActorComponent_ClientNotifyPreInteractionEnd final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreInteracitonCanceled;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_ClientNotifyPreInteractionEnd) == 0x000008, "Wrong alignment on InteractionActorComponent_ClientNotifyPreInteractionEnd");
static_assert(sizeof(InteractionActorComponent_ClientNotifyPreInteractionEnd) == 0x000010, "Wrong size on InteractionActorComponent_ClientNotifyPreInteractionEnd");
static_assert(offsetof(InteractionActorComponent_ClientNotifyPreInteractionEnd, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_ClientNotifyPreInteractionEnd::InteractingItem' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_ClientNotifyPreInteractionEnd, bPreInteracitonCanceled) == 0x000008, "Member 'InteractionActorComponent_ClientNotifyPreInteractionEnd::bPreInteracitonCanceled' has a wrong offset!");

// Function Flame.InteractionActorComponent.ClientNotifyPreInteractionStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionActorComponent_ClientNotifyPreInteractionStart final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreInteractionPhaseLen;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_ClientNotifyPreInteractionStart) == 0x000008, "Wrong alignment on InteractionActorComponent_ClientNotifyPreInteractionStart");
static_assert(sizeof(InteractionActorComponent_ClientNotifyPreInteractionStart) == 0x000010, "Wrong size on InteractionActorComponent_ClientNotifyPreInteractionStart");
static_assert(offsetof(InteractionActorComponent_ClientNotifyPreInteractionStart, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_ClientNotifyPreInteractionStart::InteractingItem' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_ClientNotifyPreInteractionStart, PreInteractionPhaseLen) == 0x000008, "Member 'InteractionActorComponent_ClientNotifyPreInteractionStart::PreInteractionPhaseLen' has a wrong offset!");

// Function Flame.InteractionActorComponent.MulticastNotifyInteractionEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_MulticastNotifyInteractionEnd final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_MulticastNotifyInteractionEnd) == 0x000008, "Wrong alignment on InteractionActorComponent_MulticastNotifyInteractionEnd");
static_assert(sizeof(InteractionActorComponent_MulticastNotifyInteractionEnd) == 0x000008, "Wrong size on InteractionActorComponent_MulticastNotifyInteractionEnd");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyInteractionEnd, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_MulticastNotifyInteractionEnd::InteractingItem' has a wrong offset!");

// Function Flame.InteractionActorComponent.MulticastNotifyInteractionStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_MulticastNotifyInteractionStart final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_MulticastNotifyInteractionStart) == 0x000008, "Wrong alignment on InteractionActorComponent_MulticastNotifyInteractionStart");
static_assert(sizeof(InteractionActorComponent_MulticastNotifyInteractionStart) == 0x000008, "Wrong size on InteractionActorComponent_MulticastNotifyInteractionStart");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyInteractionStart, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_MulticastNotifyInteractionStart::InteractingItem' has a wrong offset!");

// Function Flame.InteractionActorComponent.MulticastNotifyPreInteractionEnd
// 0x0010 (0x0010 - 0x0000)
struct InteractionActorComponent_MulticastNotifyPreInteractionEnd final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreInteracitonCanceled;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_MulticastNotifyPreInteractionEnd) == 0x000008, "Wrong alignment on InteractionActorComponent_MulticastNotifyPreInteractionEnd");
static_assert(sizeof(InteractionActorComponent_MulticastNotifyPreInteractionEnd) == 0x000010, "Wrong size on InteractionActorComponent_MulticastNotifyPreInteractionEnd");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyPreInteractionEnd, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_MulticastNotifyPreInteractionEnd::InteractingItem' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyPreInteractionEnd, bPreInteracitonCanceled) == 0x000008, "Member 'InteractionActorComponent_MulticastNotifyPreInteractionEnd::bPreInteracitonCanceled' has a wrong offset!");

// Function Flame.InteractionActorComponent.MulticastNotifyPreInteractionStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionActorComponent_MulticastNotifyPreInteractionStart final
{
public:
	class UInteractionItemComponent*              InteractingItem;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreInteractionPhaseLen;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_MulticastNotifyPreInteractionStart) == 0x000008, "Wrong alignment on InteractionActorComponent_MulticastNotifyPreInteractionStart");
static_assert(sizeof(InteractionActorComponent_MulticastNotifyPreInteractionStart) == 0x000010, "Wrong size on InteractionActorComponent_MulticastNotifyPreInteractionStart");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyPreInteractionStart, InteractingItem) == 0x000000, "Member 'InteractionActorComponent_MulticastNotifyPreInteractionStart::InteractingItem' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_MulticastNotifyPreInteractionStart, PreInteractionPhaseLen) == 0x000008, "Member 'InteractionActorComponent_MulticastNotifyPreInteractionStart::PreInteractionPhaseLen' has a wrong offset!");

// Function Flame.InteractionActorComponent.OnHideMarker
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_OnHideMarker final
{
public:
	class UInteractionActorComponent*             Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_OnHideMarker) == 0x000008, "Wrong alignment on InteractionActorComponent_OnHideMarker");
static_assert(sizeof(InteractionActorComponent_OnHideMarker) == 0x000008, "Wrong size on InteractionActorComponent_OnHideMarker");
static_assert(offsetof(InteractionActorComponent_OnHideMarker, Sender) == 0x000000, "Member 'InteractionActorComponent_OnHideMarker::Sender' has a wrong offset!");

// Function Flame.InteractionActorComponent.OnShowMarker
// 0x0020 (0x0020 - 0x0000)
struct InteractionActorComponent_OnShowMarker final
{
public:
	class UInteractionActorComponent*             Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionItemComponent*              InteractionItem;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPosition;                                    // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InteractionAllowed;                                // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_OnShowMarker) == 0x000008, "Wrong alignment on InteractionActorComponent_OnShowMarker");
static_assert(sizeof(InteractionActorComponent_OnShowMarker) == 0x000020, "Wrong size on InteractionActorComponent_OnShowMarker");
static_assert(offsetof(InteractionActorComponent_OnShowMarker, Sender) == 0x000000, "Member 'InteractionActorComponent_OnShowMarker::Sender' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_OnShowMarker, InteractionItem) == 0x000008, "Member 'InteractionActorComponent_OnShowMarker::InteractionItem' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_OnShowMarker, MarkerPosition) == 0x000010, "Member 'InteractionActorComponent_OnShowMarker::MarkerPosition' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_OnShowMarker, InteractionAllowed) == 0x00001C, "Member 'InteractionActorComponent_OnShowMarker::InteractionAllowed' has a wrong offset!");

// Function Flame.InteractionActorComponent.OnUpdateMarker
// 0x0018 (0x0018 - 0x0000)
struct InteractionActorComponent_OnUpdateMarker final
{
public:
	class UInteractionActorComponent*             Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MarkerPosition;                                    // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionActorComponent_OnUpdateMarker) == 0x000008, "Wrong alignment on InteractionActorComponent_OnUpdateMarker");
static_assert(sizeof(InteractionActorComponent_OnUpdateMarker) == 0x000018, "Wrong size on InteractionActorComponent_OnUpdateMarker");
static_assert(offsetof(InteractionActorComponent_OnUpdateMarker, Sender) == 0x000000, "Member 'InteractionActorComponent_OnUpdateMarker::Sender' has a wrong offset!");
static_assert(offsetof(InteractionActorComponent_OnUpdateMarker, MarkerPosition) == 0x000008, "Member 'InteractionActorComponent_OnUpdateMarker::MarkerPosition' has a wrong offset!");

// Function Flame.InteractionActorComponent.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_SetEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_SetEnabled) == 0x000001, "Wrong alignment on InteractionActorComponent_SetEnabled");
static_assert(sizeof(InteractionActorComponent_SetEnabled) == 0x000001, "Wrong size on InteractionActorComponent_SetEnabled");
static_assert(offsetof(InteractionActorComponent_SetEnabled, Enabled) == 0x000000, "Member 'InteractionActorComponent_SetEnabled::Enabled' has a wrong offset!");

// Function Flame.InteractionActorComponent.SetMarkersVisibility
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_SetMarkersVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_SetMarkersVisibility) == 0x000001, "Wrong alignment on InteractionActorComponent_SetMarkersVisibility");
static_assert(sizeof(InteractionActorComponent_SetMarkersVisibility) == 0x000001, "Wrong size on InteractionActorComponent_SetMarkersVisibility");
static_assert(offsetof(InteractionActorComponent_SetMarkersVisibility, Visibility) == 0x000000, "Member 'InteractionActorComponent_SetMarkersVisibility::Visibility' has a wrong offset!");

// Function Flame.InteractionActorComponent.SetMarkersVisibilityByOptions
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_SetMarkersVisibilityByOptions final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_SetMarkersVisibilityByOptions) == 0x000001, "Wrong alignment on InteractionActorComponent_SetMarkersVisibilityByOptions");
static_assert(sizeof(InteractionActorComponent_SetMarkersVisibilityByOptions) == 0x000001, "Wrong size on InteractionActorComponent_SetMarkersVisibilityByOptions");
static_assert(offsetof(InteractionActorComponent_SetMarkersVisibilityByOptions, Visibility) == 0x000000, "Member 'InteractionActorComponent_SetMarkersVisibilityByOptions::Visibility' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetInteractingItemComponent
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_GetInteractingItemComponent final
{
public:
	class UInteractionItemComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetInteractingItemComponent) == 0x000008, "Wrong alignment on InteractionActorComponent_GetInteractingItemComponent");
static_assert(sizeof(InteractionActorComponent_GetInteractingItemComponent) == 0x000008, "Wrong size on InteractionActorComponent_GetInteractingItemComponent");
static_assert(offsetof(InteractionActorComponent_GetInteractingItemComponent, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetInteractingItemComponent::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetLastInteractingItemComponent
// 0x0008 (0x0008 - 0x0000)
struct InteractionActorComponent_GetLastInteractingItemComponent final
{
public:
	class UInteractionItemComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetLastInteractingItemComponent) == 0x000008, "Wrong alignment on InteractionActorComponent_GetLastInteractingItemComponent");
static_assert(sizeof(InteractionActorComponent_GetLastInteractingItemComponent) == 0x000008, "Wrong size on InteractionActorComponent_GetLastInteractingItemComponent");
static_assert(offsetof(InteractionActorComponent_GetLastInteractingItemComponent, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetLastInteractingItemComponent::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetMarkersRadius
// 0x0004 (0x0004 - 0x0000)
struct InteractionActorComponent_GetMarkersRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetMarkersRadius) == 0x000004, "Wrong alignment on InteractionActorComponent_GetMarkersRadius");
static_assert(sizeof(InteractionActorComponent_GetMarkersRadius) == 0x000004, "Wrong size on InteractionActorComponent_GetMarkersRadius");
static_assert(offsetof(InteractionActorComponent_GetMarkersRadius, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetMarkersRadius::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetMarkersVisibility
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_GetMarkersVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetMarkersVisibility) == 0x000001, "Wrong alignment on InteractionActorComponent_GetMarkersVisibility");
static_assert(sizeof(InteractionActorComponent_GetMarkersVisibility) == 0x000001, "Wrong size on InteractionActorComponent_GetMarkersVisibility");
static_assert(offsetof(InteractionActorComponent_GetMarkersVisibility, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetMarkersVisibility::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetMarkersVisibilityByOptions
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_GetMarkersVisibilityByOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetMarkersVisibilityByOptions) == 0x000001, "Wrong alignment on InteractionActorComponent_GetMarkersVisibilityByOptions");
static_assert(sizeof(InteractionActorComponent_GetMarkersVisibilityByOptions) == 0x000001, "Wrong size on InteractionActorComponent_GetMarkersVisibilityByOptions");
static_assert(offsetof(InteractionActorComponent_GetMarkersVisibilityByOptions, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetMarkersVisibilityByOptions::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.GetPreInteractiveTimerProgress
// 0x0004 (0x0004 - 0x0000)
struct InteractionActorComponent_GetPreInteractiveTimerProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_GetPreInteractiveTimerProgress) == 0x000004, "Wrong alignment on InteractionActorComponent_GetPreInteractiveTimerProgress");
static_assert(sizeof(InteractionActorComponent_GetPreInteractiveTimerProgress) == 0x000004, "Wrong size on InteractionActorComponent_GetPreInteractiveTimerProgress");
static_assert(offsetof(InteractionActorComponent_GetPreInteractiveTimerProgress, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_GetPreInteractiveTimerProgress::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_IsEnabled) == 0x000001, "Wrong alignment on InteractionActorComponent_IsEnabled");
static_assert(sizeof(InteractionActorComponent_IsEnabled) == 0x000001, "Wrong size on InteractionActorComponent_IsEnabled");
static_assert(offsetof(InteractionActorComponent_IsEnabled, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_IsEnabled::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.IsPlayerInteracting
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_IsPlayerInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_IsPlayerInteracting) == 0x000001, "Wrong alignment on InteractionActorComponent_IsPlayerInteracting");
static_assert(sizeof(InteractionActorComponent_IsPlayerInteracting) == 0x000001, "Wrong size on InteractionActorComponent_IsPlayerInteracting");
static_assert(offsetof(InteractionActorComponent_IsPlayerInteracting, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_IsPlayerInteracting::ReturnValue' has a wrong offset!");

// Function Flame.InteractionActorComponent.IsPreInteractiveTimerActive
// 0x0001 (0x0001 - 0x0000)
struct InteractionActorComponent_IsPreInteractiveTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionActorComponent_IsPreInteractiveTimerActive) == 0x000001, "Wrong alignment on InteractionActorComponent_IsPreInteractiveTimerActive");
static_assert(sizeof(InteractionActorComponent_IsPreInteractiveTimerActive) == 0x000001, "Wrong size on InteractionActorComponent_IsPreInteractiveTimerActive");
static_assert(offsetof(InteractionActorComponent_IsPreInteractiveTimerActive, ReturnValue) == 0x000000, "Member 'InteractionActorComponent_IsPreInteractiveTimerActive::ReturnValue' has a wrong offset!");

// Function Flame.Tool.HandleInput
// 0x0020 (0x0020 - 0x0000)
struct Tool_HandleInput final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   Event;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Force;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_HandleInput) == 0x000008, "Wrong alignment on Tool_HandleInput");
static_assert(sizeof(Tool_HandleInput) == 0x000020, "Wrong size on Tool_HandleInput");
static_assert(offsetof(Tool_HandleInput, Key) == 0x000000, "Member 'Tool_HandleInput::Key' has a wrong offset!");
static_assert(offsetof(Tool_HandleInput, Event) == 0x000018, "Member 'Tool_HandleInput::Event' has a wrong offset!");
static_assert(offsetof(Tool_HandleInput, Force) == 0x00001C, "Member 'Tool_HandleInput::Force' has a wrong offset!");

// Function Flame.Tool.HandleInputInternal
// 0x0020 (0x0020 - 0x0000)
struct Tool_HandleInputInternal final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   Event;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Force;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_HandleInputInternal) == 0x000008, "Wrong alignment on Tool_HandleInputInternal");
static_assert(sizeof(Tool_HandleInputInternal) == 0x000020, "Wrong size on Tool_HandleInputInternal");
static_assert(offsetof(Tool_HandleInputInternal, Key) == 0x000000, "Member 'Tool_HandleInputInternal::Key' has a wrong offset!");
static_assert(offsetof(Tool_HandleInputInternal, Event) == 0x000018, "Member 'Tool_HandleInputInternal::Event' has a wrong offset!");
static_assert(offsetof(Tool_HandleInputInternal, Force) == 0x00001C, "Member 'Tool_HandleInputInternal::Force' has a wrong offset!");

// Function Flame.Tool.RemoveFromHands
// 0x0001 (0x0001 - 0x0000)
struct Tool_RemoveFromHands final
{
public:
	ENetRole                                      NetRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_RemoveFromHands) == 0x000001, "Wrong alignment on Tool_RemoveFromHands");
static_assert(sizeof(Tool_RemoveFromHands) == 0x000001, "Wrong size on Tool_RemoveFromHands");
static_assert(offsetof(Tool_RemoveFromHands, NetRole) == 0x000000, "Member 'Tool_RemoveFromHands::NetRole' has a wrong offset!");

// Function Flame.Tool.RemoveFromHandsInternal
// 0x0001 (0x0001 - 0x0000)
struct Tool_RemoveFromHandsInternal final
{
public:
	uint8                                         NetRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_RemoveFromHandsInternal) == 0x000001, "Wrong alignment on Tool_RemoveFromHandsInternal");
static_assert(sizeof(Tool_RemoveFromHandsInternal) == 0x000001, "Wrong size on Tool_RemoveFromHandsInternal");
static_assert(offsetof(Tool_RemoveFromHandsInternal, NetRole) == 0x000000, "Member 'Tool_RemoveFromHandsInternal::NetRole' has a wrong offset!");

// Function Flame.Tool.SetHumanOwner
// 0x0008 (0x0008 - 0x0000)
struct Tool_SetHumanOwner final
{
public:
	const class AHumanCharacter*                  NewOwner;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_SetHumanOwner) == 0x000008, "Wrong alignment on Tool_SetHumanOwner");
static_assert(sizeof(Tool_SetHumanOwner) == 0x000008, "Wrong size on Tool_SetHumanOwner");
static_assert(offsetof(Tool_SetHumanOwner, NewOwner) == 0x000000, "Member 'Tool_SetHumanOwner::NewOwner' has a wrong offset!");

// Function Flame.Tool.TakeIntoHands
// 0x0001 (0x0001 - 0x0000)
struct Tool_TakeIntoHands final
{
public:
	ENetRole                                      NetRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_TakeIntoHands) == 0x000001, "Wrong alignment on Tool_TakeIntoHands");
static_assert(sizeof(Tool_TakeIntoHands) == 0x000001, "Wrong size on Tool_TakeIntoHands");
static_assert(offsetof(Tool_TakeIntoHands, NetRole) == 0x000000, "Member 'Tool_TakeIntoHands::NetRole' has a wrong offset!");

// Function Flame.Tool.TakeIntoHandsInternal
// 0x0001 (0x0001 - 0x0000)
struct Tool_TakeIntoHandsInternal final
{
public:
	uint8                                         NetRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tool_TakeIntoHandsInternal) == 0x000001, "Wrong alignment on Tool_TakeIntoHandsInternal");
static_assert(sizeof(Tool_TakeIntoHandsInternal) == 0x000001, "Wrong size on Tool_TakeIntoHandsInternal");
static_assert(offsetof(Tool_TakeIntoHandsInternal, NetRole) == 0x000000, "Member 'Tool_TakeIntoHandsInternal::NetRole' has a wrong offset!");

// Function Flame.InventoryComponent.ClientSetCurrentWeaponDirectly
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_ClientSetCurrentWeaponDirectly final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ClientSetCurrentWeaponDirectly) == 0x000008, "Wrong alignment on InventoryComponent_ClientSetCurrentWeaponDirectly");
static_assert(sizeof(InventoryComponent_ClientSetCurrentWeaponDirectly) == 0x000008, "Wrong size on InventoryComponent_ClientSetCurrentWeaponDirectly");
static_assert(offsetof(InventoryComponent_ClientSetCurrentWeaponDirectly, Item) == 0x000000, "Member 'InventoryComponent_ClientSetCurrentWeaponDirectly::Item' has a wrong offset!");

// Function Flame.InventoryComponent.ServerUseItem
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_ServerUseItem final
{
public:
	class AItem*                                  OneConsumable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_ServerUseItem) == 0x000008, "Wrong alignment on InventoryComponent_ServerUseItem");
static_assert(sizeof(InventoryComponent_ServerUseItem) == 0x000010, "Wrong size on InventoryComponent_ServerUseItem");
static_assert(offsetof(InventoryComponent_ServerUseItem, OneConsumable) == 0x000000, "Member 'InventoryComponent_ServerUseItem::OneConsumable' has a wrong offset!");
static_assert(offsetof(InventoryComponent_ServerUseItem, Target) == 0x000008, "Member 'InventoryComponent_ServerUseItem::Target' has a wrong offset!");

// Function Flame.InventoryComponent.SetLastKnownItemPtr
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_SetLastKnownItemPtr final
{
public:
	class AItem*                                  Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SetLastKnownItemPtr) == 0x000008, "Wrong alignment on InventoryComponent_SetLastKnownItemPtr");
static_assert(sizeof(InventoryComponent_SetLastKnownItemPtr) == 0x000008, "Wrong size on InventoryComponent_SetLastKnownItemPtr");
static_assert(offsetof(InventoryComponent_SetLastKnownItemPtr, Item) == 0x000000, "Member 'InventoryComponent_SetLastKnownItemPtr::Item' has a wrong offset!");

// Function Flame.InventoryComponent.SetWeightModifier
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_SetWeightModifier final
{
public:
	float                                         NewWeightModifier;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SetWeightModifier) == 0x000004, "Wrong alignment on InventoryComponent_SetWeightModifier");
static_assert(sizeof(InventoryComponent_SetWeightModifier) == 0x000004, "Wrong size on InventoryComponent_SetWeightModifier");
static_assert(offsetof(InventoryComponent_SetWeightModifier, NewWeightModifier) == 0x000000, "Member 'InventoryComponent_SetWeightModifier::NewWeightModifier' has a wrong offset!");

// Function Flame.InventoryComponent.SpawnAndAttachPersistent
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_SpawnAndAttachPersistent final
{
public:
	TSubclassOf<class APersistentItem>            PersistentClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APersistentItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_SpawnAndAttachPersistent) == 0x000008, "Wrong alignment on InventoryComponent_SpawnAndAttachPersistent");
static_assert(sizeof(InventoryComponent_SpawnAndAttachPersistent) == 0x000010, "Wrong size on InventoryComponent_SpawnAndAttachPersistent");
static_assert(offsetof(InventoryComponent_SpawnAndAttachPersistent, PersistentClass) == 0x000000, "Member 'InventoryComponent_SpawnAndAttachPersistent::PersistentClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_SpawnAndAttachPersistent, ReturnValue) == 0x000008, "Member 'InventoryComponent_SpawnAndAttachPersistent::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.DoesSomethingModifyDamage
// 0x0058 (0x0058 - 0x0000)
struct InventoryComponent_DoesSomethingModifyDamage final
{
public:
	struct FHitResultSimplified                   HitOptimised;                                      // 0x0000(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              ItemsWhichAffectedDamage;                          // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_DoesSomethingModifyDamage) == 0x000008, "Wrong alignment on InventoryComponent_DoesSomethingModifyDamage");
static_assert(sizeof(InventoryComponent_DoesSomethingModifyDamage) == 0x000058, "Wrong size on InventoryComponent_DoesSomethingModifyDamage");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamage, HitOptimised) == 0x000000, "Member 'InventoryComponent_DoesSomethingModifyDamage::HitOptimised' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamage, DamageType) == 0x00003C, "Member 'InventoryComponent_DoesSomethingModifyDamage::DamageType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamage, ItemsWhichAffectedDamage) == 0x000040, "Member 'InventoryComponent_DoesSomethingModifyDamage::ItemsWhichAffectedDamage' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamage, ReturnValue) == 0x000050, "Member 'InventoryComponent_DoesSomethingModifyDamage::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.DoesSomethingModifyDamageBone
// 0x0028 (0x0028 - 0x0000)
struct InventoryComponent_DoesSomethingModifyDamageBone final
{
public:
	class FName                                   Bone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AItem>>              ItemsWhichAffectedDamage;                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_DoesSomethingModifyDamageBone) == 0x000008, "Wrong alignment on InventoryComponent_DoesSomethingModifyDamageBone");
static_assert(sizeof(InventoryComponent_DoesSomethingModifyDamageBone) == 0x000028, "Wrong size on InventoryComponent_DoesSomethingModifyDamageBone");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamageBone, Bone) == 0x000000, "Member 'InventoryComponent_DoesSomethingModifyDamageBone::Bone' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamageBone, DamageType) == 0x000008, "Member 'InventoryComponent_DoesSomethingModifyDamageBone::DamageType' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamageBone, ItemsWhichAffectedDamage) == 0x000010, "Member 'InventoryComponent_DoesSomethingModifyDamageBone::ItemsWhichAffectedDamage' has a wrong offset!");
static_assert(offsetof(InventoryComponent_DoesSomethingModifyDamageBone, ReturnValue) == 0x000020, "Member 'InventoryComponent_DoesSomethingModifyDamageBone::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.FindFirstPersistentByClass
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_FindFirstPersistentByClass final
{
public:
	TSubclassOf<class APersistentItem>            PersistentClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APersistentItem*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_FindFirstPersistentByClass) == 0x000008, "Wrong alignment on InventoryComponent_FindFirstPersistentByClass");
static_assert(sizeof(InventoryComponent_FindFirstPersistentByClass) == 0x000010, "Wrong size on InventoryComponent_FindFirstPersistentByClass");
static_assert(offsetof(InventoryComponent_FindFirstPersistentByClass, PersistentClass) == 0x000000, "Member 'InventoryComponent_FindFirstPersistentByClass::PersistentClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_FindFirstPersistentByClass, ReturnValue) == 0x000008, "Member 'InventoryComponent_FindFirstPersistentByClass::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetAmmoCountForWeapon
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_GetAmmoCountForWeapon final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_GetAmmoCountForWeapon) == 0x000008, "Wrong alignment on InventoryComponent_GetAmmoCountForWeapon");
static_assert(sizeof(InventoryComponent_GetAmmoCountForWeapon) == 0x000010, "Wrong size on InventoryComponent_GetAmmoCountForWeapon");
static_assert(offsetof(InventoryComponent_GetAmmoCountForWeapon, Weapon) == 0x000000, "Member 'InventoryComponent_GetAmmoCountForWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(InventoryComponent_GetAmmoCountForWeapon, ReturnValue) == 0x000008, "Member 'InventoryComponent_GetAmmoCountForWeapon::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetBackpack
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetBackpack final
{
public:
	class UItemsGrid*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetBackpack) == 0x000008, "Wrong alignment on InventoryComponent_GetBackpack");
static_assert(sizeof(InventoryComponent_GetBackpack) == 0x000008, "Wrong size on InventoryComponent_GetBackpack");
static_assert(offsetof(InventoryComponent_GetBackpack, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetBackpack::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetBackpackColsCount
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetBackpackColsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetBackpackColsCount) == 0x000004, "Wrong alignment on InventoryComponent_GetBackpackColsCount");
static_assert(sizeof(InventoryComponent_GetBackpackColsCount) == 0x000004, "Wrong size on InventoryComponent_GetBackpackColsCount");
static_assert(offsetof(InventoryComponent_GetBackpackColsCount, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetBackpackColsCount::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetBackpackDescriptor
// 0x0018 (0x0018 - 0x0000)
struct InventoryComponent_GetBackpackDescriptor final
{
public:
	struct FResourceGrid                          ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetBackpackDescriptor) == 0x000008, "Wrong alignment on InventoryComponent_GetBackpackDescriptor");
static_assert(sizeof(InventoryComponent_GetBackpackDescriptor) == 0x000018, "Wrong size on InventoryComponent_GetBackpackDescriptor");
static_assert(offsetof(InventoryComponent_GetBackpackDescriptor, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetBackpackDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetBackpackRowsCount
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetBackpackRowsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetBackpackRowsCount) == 0x000004, "Wrong alignment on InventoryComponent_GetBackpackRowsCount");
static_assert(sizeof(InventoryComponent_GetBackpackRowsCount) == 0x000004, "Wrong size on InventoryComponent_GetBackpackRowsCount");
static_assert(offsetof(InventoryComponent_GetBackpackRowsCount, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetBackpackRowsCount::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetCurrentItem
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetCurrentItem final
{
public:
	class AItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetCurrentItem) == 0x000008, "Wrong alignment on InventoryComponent_GetCurrentItem");
static_assert(sizeof(InventoryComponent_GetCurrentItem) == 0x000008, "Wrong size on InventoryComponent_GetCurrentItem");
static_assert(offsetof(InventoryComponent_GetCurrentItem, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetCurrentItem::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetInventoryWeight
// 0x0004 (0x0004 - 0x0000)
struct InventoryComponent_GetInventoryWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetInventoryWeight) == 0x000004, "Wrong alignment on InventoryComponent_GetInventoryWeight");
static_assert(sizeof(InventoryComponent_GetInventoryWeight) == 0x000004, "Wrong size on InventoryComponent_GetInventoryWeight");
static_assert(offsetof(InventoryComponent_GetInventoryWeight, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetInventoryWeight::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetLastKnownItemFromServer
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetLastKnownItemFromServer final
{
public:
	class AItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetLastKnownItemFromServer) == 0x000008, "Wrong alignment on InventoryComponent_GetLastKnownItemFromServer");
static_assert(sizeof(InventoryComponent_GetLastKnownItemFromServer) == 0x000008, "Wrong size on InventoryComponent_GetLastKnownItemFromServer");
static_assert(offsetof(InventoryComponent_GetLastKnownItemFromServer, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetLastKnownItemFromServer::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.GetWeapons
// 0x0008 (0x0008 - 0x0000)
struct InventoryComponent_GetWeapons final
{
public:
	class ULinkedWeapons*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryComponent_GetWeapons) == 0x000008, "Wrong alignment on InventoryComponent_GetWeapons");
static_assert(sizeof(InventoryComponent_GetWeapons) == 0x000008, "Wrong size on InventoryComponent_GetWeapons");
static_assert(offsetof(InventoryComponent_GetWeapons, ReturnValue) == 0x000000, "Member 'InventoryComponent_GetWeapons::ReturnValue' has a wrong offset!");

// Function Flame.InventoryComponent.IsPersistentPresent
// 0x0010 (0x0010 - 0x0000)
struct InventoryComponent_IsPersistentPresent final
{
public:
	TSubclassOf<class APersistentItem>            PersistentClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryComponent_IsPersistentPresent) == 0x000008, "Wrong alignment on InventoryComponent_IsPersistentPresent");
static_assert(sizeof(InventoryComponent_IsPersistentPresent) == 0x000010, "Wrong size on InventoryComponent_IsPersistentPresent");
static_assert(offsetof(InventoryComponent_IsPersistentPresent, PersistentClass) == 0x000000, "Member 'InventoryComponent_IsPersistentPresent::PersistentClass' has a wrong offset!");
static_assert(offsetof(InventoryComponent_IsPersistentPresent, ReturnValue) == 0x000008, "Member 'InventoryComponent_IsPersistentPresent::ReturnValue' has a wrong offset!");

// Function Flame.LootableCorpse.GetDeadPlayerName
// 0x0010 (0x0010 - 0x0000)
struct LootableCorpse_GetDeadPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootableCorpse_GetDeadPlayerName) == 0x000008, "Wrong alignment on LootableCorpse_GetDeadPlayerName");
static_assert(sizeof(LootableCorpse_GetDeadPlayerName) == 0x000010, "Wrong size on LootableCorpse_GetDeadPlayerName");
static_assert(offsetof(LootableCorpse_GetDeadPlayerName, ReturnValue) == 0x000000, "Member 'LootableCorpse_GetDeadPlayerName::ReturnValue' has a wrong offset!");

// Function Flame.LootableCorpse.GetDeadPlayerPlatform
// 0x0001 (0x0001 - 0x0000)
struct LootableCorpse_GetDeadPlayerPlatform final
{
public:
	EFlamePlatform                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootableCorpse_GetDeadPlayerPlatform) == 0x000001, "Wrong alignment on LootableCorpse_GetDeadPlayerPlatform");
static_assert(sizeof(LootableCorpse_GetDeadPlayerPlatform) == 0x000001, "Wrong size on LootableCorpse_GetDeadPlayerPlatform");
static_assert(offsetof(LootableCorpse_GetDeadPlayerPlatform, ReturnValue) == 0x000000, "Member 'LootableCorpse_GetDeadPlayerPlatform::ReturnValue' has a wrong offset!");

// Function Flame.LootableCorpse.GetDeadPlayerUniqueId
// 0x0028 (0x0028 - 0x0000)
struct LootableCorpse_GetDeadPlayerUniqueId final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootableCorpse_GetDeadPlayerUniqueId) == 0x000008, "Wrong alignment on LootableCorpse_GetDeadPlayerUniqueId");
static_assert(sizeof(LootableCorpse_GetDeadPlayerUniqueId) == 0x000028, "Wrong size on LootableCorpse_GetDeadPlayerUniqueId");
static_assert(offsetof(LootableCorpse_GetDeadPlayerUniqueId, ReturnValue) == 0x000000, "Member 'LootableCorpse_GetDeadPlayerUniqueId::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.AddItemsFromInventoryToUI
// 0x0010 (0x0010 - 0x0000)
struct InventoryFunctions_AddItemsFromInventoryToUI final
{
public:
	const class UInventoryComponent*              Inventory;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDynamicContainerWidget*                UIContainer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_AddItemsFromInventoryToUI) == 0x000008, "Wrong alignment on InventoryFunctions_AddItemsFromInventoryToUI");
static_assert(sizeof(InventoryFunctions_AddItemsFromInventoryToUI) == 0x000010, "Wrong size on InventoryFunctions_AddItemsFromInventoryToUI");
static_assert(offsetof(InventoryFunctions_AddItemsFromInventoryToUI, Inventory) == 0x000000, "Member 'InventoryFunctions_AddItemsFromInventoryToUI::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_AddItemsFromInventoryToUI, UIContainer) == 0x000008, "Member 'InventoryFunctions_AddItemsFromInventoryToUI::UIContainer' has a wrong offset!");

// Function Flame.InventoryFunctions.CanStoreToInventory
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_CanStoreToInventory final
{
public:
	const class UInventoryComponent*              Inventory;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCanStoreResult                        ReturnValue;                                       // 0x0010(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_CanStoreToInventory) == 0x000008, "Wrong alignment on InventoryFunctions_CanStoreToInventory");
static_assert(sizeof(InventoryFunctions_CanStoreToInventory) == 0x000018, "Wrong size on InventoryFunctions_CanStoreToInventory");
static_assert(offsetof(InventoryFunctions_CanStoreToInventory, Inventory) == 0x000000, "Member 'InventoryFunctions_CanStoreToInventory::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CanStoreToInventory, Resource) == 0x000008, "Member 'InventoryFunctions_CanStoreToInventory::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CanStoreToInventory, ReturnValue) == 0x000010, "Member 'InventoryFunctions_CanStoreToInventory::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.ClearGrid
// 0x0008 (0x0008 - 0x0000)
struct InventoryFunctions_ClearGrid final
{
public:
	class UItemsList*                             TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_ClearGrid) == 0x000008, "Wrong alignment on InventoryFunctions_ClearGrid");
static_assert(sizeof(InventoryFunctions_ClearGrid) == 0x000008, "Wrong size on InventoryFunctions_ClearGrid");
static_assert(offsetof(InventoryFunctions_ClearGrid, TargetGrid) == 0x000000, "Member 'InventoryFunctions_ClearGrid::TargetGrid' has a wrong offset!");

// Function Flame.InventoryFunctions.ConsumeResource
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_ConsumeResource final
{
public:
	class UItemsList*                             TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_ConsumeResource) == 0x000008, "Wrong alignment on InventoryFunctions_ConsumeResource");
static_assert(sizeof(InventoryFunctions_ConsumeResource) == 0x000018, "Wrong size on InventoryFunctions_ConsumeResource");
static_assert(offsetof(InventoryFunctions_ConsumeResource, TargetGrid) == 0x000000, "Member 'InventoryFunctions_ConsumeResource::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_ConsumeResource, Resource) == 0x000008, "Member 'InventoryFunctions_ConsumeResource::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_ConsumeResource, Count) == 0x000010, "Member 'InventoryFunctions_ConsumeResource::Count' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_ConsumeResource, ReturnValue) == 0x000014, "Member 'InventoryFunctions_ConsumeResource::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.CountOfCurrency
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_CountOfCurrency final
{
public:
	const class UStashComponent*                  TargetStash;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACurrency>                  CurrencyClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_CountOfCurrency) == 0x000008, "Wrong alignment on InventoryFunctions_CountOfCurrency");
static_assert(sizeof(InventoryFunctions_CountOfCurrency) == 0x000018, "Wrong size on InventoryFunctions_CountOfCurrency");
static_assert(offsetof(InventoryFunctions_CountOfCurrency, TargetStash) == 0x000000, "Member 'InventoryFunctions_CountOfCurrency::TargetStash' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfCurrency, CurrencyClass) == 0x000008, "Member 'InventoryFunctions_CountOfCurrency::CurrencyClass' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfCurrency, ReturnValue) == 0x000010, "Member 'InventoryFunctions_CountOfCurrency::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.CountOfResource
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_CountOfResource final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_CountOfResource) == 0x000008, "Wrong alignment on InventoryFunctions_CountOfResource");
static_assert(sizeof(InventoryFunctions_CountOfResource) == 0x000018, "Wrong size on InventoryFunctions_CountOfResource");
static_assert(offsetof(InventoryFunctions_CountOfResource, TargetGrid) == 0x000000, "Member 'InventoryFunctions_CountOfResource::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfResource, Resource) == 0x000008, "Member 'InventoryFunctions_CountOfResource::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfResource, ReturnValue) == 0x000010, "Member 'InventoryFunctions_CountOfResource::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.CountOfWeapons
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_CountOfWeapons final
{
public:
	const class UWeaponsStorage*                  WeaponsList;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_CountOfWeapons) == 0x000008, "Wrong alignment on InventoryFunctions_CountOfWeapons");
static_assert(sizeof(InventoryFunctions_CountOfWeapons) == 0x000018, "Wrong size on InventoryFunctions_CountOfWeapons");
static_assert(offsetof(InventoryFunctions_CountOfWeapons, WeaponsList) == 0x000000, "Member 'InventoryFunctions_CountOfWeapons::WeaponsList' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfWeapons, WeaponClass) == 0x000008, "Member 'InventoryFunctions_CountOfWeapons::WeaponClass' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountOfWeapons, ReturnValue) == 0x000010, "Member 'InventoryFunctions_CountOfWeapons::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.CountToFullStack
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_CountToFullStack final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_CountToFullStack) == 0x000008, "Wrong alignment on InventoryFunctions_CountToFullStack");
static_assert(sizeof(InventoryFunctions_CountToFullStack) == 0x000018, "Wrong size on InventoryFunctions_CountToFullStack");
static_assert(offsetof(InventoryFunctions_CountToFullStack, TargetGrid) == 0x000000, "Member 'InventoryFunctions_CountToFullStack::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountToFullStack, Resource) == 0x000008, "Member 'InventoryFunctions_CountToFullStack::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CountToFullStack, ReturnValue) == 0x000010, "Member 'InventoryFunctions_CountToFullStack::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.CreateOperationsForItemDistributionFromToBag
// 0x0028 (0x0028 - 0x0000)
struct InventoryFunctions_CreateOperationsForItemDistributionFromToBag final
{
public:
	const class UInventoryComponent*              TargetInventory;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEquipItemsInfo>                ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag) == 0x000008, "Wrong alignment on InventoryFunctions_CreateOperationsForItemDistributionFromToBag");
static_assert(sizeof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag) == 0x000028, "Wrong size on InventoryFunctions_CreateOperationsForItemDistributionFromToBag");
static_assert(offsetof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag, TargetInventory) == 0x000000, "Member 'InventoryFunctions_CreateOperationsForItemDistributionFromToBag::TargetInventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag, Resource) == 0x000008, "Member 'InventoryFunctions_CreateOperationsForItemDistributionFromToBag::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag, Count) == 0x000010, "Member 'InventoryFunctions_CreateOperationsForItemDistributionFromToBag::Count' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_CreateOperationsForItemDistributionFromToBag, ReturnValue) == 0x000018, "Member 'InventoryFunctions_CreateOperationsForItemDistributionFromToBag::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.FindFirstEmptySlotIndex
// 0x0010 (0x0010 - 0x0000)
struct InventoryFunctions_FindFirstEmptySlotIndex final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_FindFirstEmptySlotIndex) == 0x000008, "Wrong alignment on InventoryFunctions_FindFirstEmptySlotIndex");
static_assert(sizeof(InventoryFunctions_FindFirstEmptySlotIndex) == 0x000010, "Wrong size on InventoryFunctions_FindFirstEmptySlotIndex");
static_assert(offsetof(InventoryFunctions_FindFirstEmptySlotIndex, TargetGrid) == 0x000000, "Member 'InventoryFunctions_FindFirstEmptySlotIndex::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_FindFirstEmptySlotIndex, ReturnValue) == 0x000008, "Member 'InventoryFunctions_FindFirstEmptySlotIndex::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.GetAllConsumablesClasses
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_GetAllConsumablesClasses final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AConsumableItem>>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_GetAllConsumablesClasses) == 0x000008, "Wrong alignment on InventoryFunctions_GetAllConsumablesClasses");
static_assert(sizeof(InventoryFunctions_GetAllConsumablesClasses) == 0x000018, "Wrong size on InventoryFunctions_GetAllConsumablesClasses");
static_assert(offsetof(InventoryFunctions_GetAllConsumablesClasses, TargetGrid) == 0x000000, "Member 'InventoryFunctions_GetAllConsumablesClasses::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_GetAllConsumablesClasses, ReturnValue) == 0x000008, "Member 'InventoryFunctions_GetAllConsumablesClasses::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.GetAllConsumablesSlots
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_GetAllConsumablesSlots final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBackpackItemSlot>              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_GetAllConsumablesSlots) == 0x000008, "Wrong alignment on InventoryFunctions_GetAllConsumablesSlots");
static_assert(sizeof(InventoryFunctions_GetAllConsumablesSlots) == 0x000018, "Wrong size on InventoryFunctions_GetAllConsumablesSlots");
static_assert(offsetof(InventoryFunctions_GetAllConsumablesSlots, TargetGrid) == 0x000000, "Member 'InventoryFunctions_GetAllConsumablesSlots::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_GetAllConsumablesSlots, ReturnValue) == 0x000008, "Member 'InventoryFunctions_GetAllConsumablesSlots::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.GetBackpackDescriptor
// 0x0020 (0x0020 - 0x0000)
struct InventoryFunctions_GetBackpackDescriptor final
{
public:
	const class UInventoryComponent*              SourceInventory;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FResourceGrid                          ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_GetBackpackDescriptor) == 0x000008, "Wrong alignment on InventoryFunctions_GetBackpackDescriptor");
static_assert(sizeof(InventoryFunctions_GetBackpackDescriptor) == 0x000020, "Wrong size on InventoryFunctions_GetBackpackDescriptor");
static_assert(offsetof(InventoryFunctions_GetBackpackDescriptor, SourceInventory) == 0x000000, "Member 'InventoryFunctions_GetBackpackDescriptor::SourceInventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_GetBackpackDescriptor, ReturnValue) == 0x000008, "Member 'InventoryFunctions_GetBackpackDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.GetInventoryWeapons
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_GetInventoryWeapons final
{
public:
	const class APawn*                            PlayerPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AWeapon*>                        ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_GetInventoryWeapons) == 0x000008, "Wrong alignment on InventoryFunctions_GetInventoryWeapons");
static_assert(sizeof(InventoryFunctions_GetInventoryWeapons) == 0x000018, "Wrong size on InventoryFunctions_GetInventoryWeapons");
static_assert(offsetof(InventoryFunctions_GetInventoryWeapons, PlayerPawn) == 0x000000, "Member 'InventoryFunctions_GetInventoryWeapons::PlayerPawn' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_GetInventoryWeapons, ReturnValue) == 0x000008, "Member 'InventoryFunctions_GetInventoryWeapons::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.GetItemCategoryName
// 0x0020 (0x0020 - 0x0000)
struct InventoryFunctions_GetItemCategoryName final
{
public:
	EItemCategory                                 Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_GetItemCategoryName) == 0x000008, "Wrong alignment on InventoryFunctions_GetItemCategoryName");
static_assert(sizeof(InventoryFunctions_GetItemCategoryName) == 0x000020, "Wrong size on InventoryFunctions_GetItemCategoryName");
static_assert(offsetof(InventoryFunctions_GetItemCategoryName, Category) == 0x000000, "Member 'InventoryFunctions_GetItemCategoryName::Category' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_GetItemCategoryName, ReturnValue) == 0x000008, "Member 'InventoryFunctions_GetItemCategoryName::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.HowManyCanBeStored
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_HowManyCanBeStored final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_HowManyCanBeStored) == 0x000008, "Wrong alignment on InventoryFunctions_HowManyCanBeStored");
static_assert(sizeof(InventoryFunctions_HowManyCanBeStored) == 0x000018, "Wrong size on InventoryFunctions_HowManyCanBeStored");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStored, TargetGrid) == 0x000000, "Member 'InventoryFunctions_HowManyCanBeStored::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStored, Resource) == 0x000008, "Member 'InventoryFunctions_HowManyCanBeStored::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStored, ReturnValue) == 0x000010, "Member 'InventoryFunctions_HowManyCanBeStored::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.HowManyCanBeStoredInOneSlot
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_HowManyCanBeStoredInOneSlot final
{
public:
	const class UInventoryComponent*              Inventory;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_HowManyCanBeStoredInOneSlot) == 0x000008, "Wrong alignment on InventoryFunctions_HowManyCanBeStoredInOneSlot");
static_assert(sizeof(InventoryFunctions_HowManyCanBeStoredInOneSlot) == 0x000018, "Wrong size on InventoryFunctions_HowManyCanBeStoredInOneSlot");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStoredInOneSlot, Inventory) == 0x000000, "Member 'InventoryFunctions_HowManyCanBeStoredInOneSlot::Inventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStoredInOneSlot, Resource) == 0x000008, "Member 'InventoryFunctions_HowManyCanBeStoredInOneSlot::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeStoredInOneSlot, ReturnValue) == 0x000010, "Member 'InventoryFunctions_HowManyCanBeStoredInOneSlot::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.HowManyCanBeTakenFromSlot
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_HowManyCanBeTakenFromSlot final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AItemForBackpack*                 Resource;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_HowManyCanBeTakenFromSlot) == 0x000008, "Wrong alignment on InventoryFunctions_HowManyCanBeTakenFromSlot");
static_assert(sizeof(InventoryFunctions_HowManyCanBeTakenFromSlot) == 0x000018, "Wrong size on InventoryFunctions_HowManyCanBeTakenFromSlot");
static_assert(offsetof(InventoryFunctions_HowManyCanBeTakenFromSlot, TargetGrid) == 0x000000, "Member 'InventoryFunctions_HowManyCanBeTakenFromSlot::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeTakenFromSlot, Resource) == 0x000008, "Member 'InventoryFunctions_HowManyCanBeTakenFromSlot::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_HowManyCanBeTakenFromSlot, ReturnValue) == 0x000010, "Member 'InventoryFunctions_HowManyCanBeTakenFromSlot::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.InitBackpackFromDescriptor
// 0x0020 (0x0020 - 0x0000)
struct InventoryFunctions_InitBackpackFromDescriptor final
{
public:
	class UInventoryComponent*                    TargetInventory;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FResourceGrid                          SourceGrid;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_InitBackpackFromDescriptor) == 0x000008, "Wrong alignment on InventoryFunctions_InitBackpackFromDescriptor");
static_assert(sizeof(InventoryFunctions_InitBackpackFromDescriptor) == 0x000020, "Wrong size on InventoryFunctions_InitBackpackFromDescriptor");
static_assert(offsetof(InventoryFunctions_InitBackpackFromDescriptor, TargetInventory) == 0x000000, "Member 'InventoryFunctions_InitBackpackFromDescriptor::TargetInventory' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_InitBackpackFromDescriptor, SourceGrid) == 0x000008, "Member 'InventoryFunctions_InitBackpackFromDescriptor::SourceGrid' has a wrong offset!");

// Function Flame.InventoryFunctions.IsAmmoCompatibleWithLoadout
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_IsAmmoCompatibleWithLoadout final
{
public:
	const class APawn*                            PlayerPawn;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_IsAmmoCompatibleWithLoadout) == 0x000008, "Wrong alignment on InventoryFunctions_IsAmmoCompatibleWithLoadout");
static_assert(sizeof(InventoryFunctions_IsAmmoCompatibleWithLoadout) == 0x000018, "Wrong size on InventoryFunctions_IsAmmoCompatibleWithLoadout");
static_assert(offsetof(InventoryFunctions_IsAmmoCompatibleWithLoadout, PlayerPawn) == 0x000000, "Member 'InventoryFunctions_IsAmmoCompatibleWithLoadout::PlayerPawn' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_IsAmmoCompatibleWithLoadout, AmmoClass) == 0x000008, "Member 'InventoryFunctions_IsAmmoCompatibleWithLoadout::AmmoClass' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_IsAmmoCompatibleWithLoadout, ReturnValue) == 0x000010, "Member 'InventoryFunctions_IsAmmoCompatibleWithLoadout::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.IsGridEmpty
// 0x0010 (0x0010 - 0x0000)
struct InventoryFunctions_IsGridEmpty final
{
public:
	const class UItemsList*                       TargetGrid;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_IsGridEmpty) == 0x000008, "Wrong alignment on InventoryFunctions_IsGridEmpty");
static_assert(sizeof(InventoryFunctions_IsGridEmpty) == 0x000010, "Wrong size on InventoryFunctions_IsGridEmpty");
static_assert(offsetof(InventoryFunctions_IsGridEmpty, TargetGrid) == 0x000000, "Member 'InventoryFunctions_IsGridEmpty::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_IsGridEmpty, ReturnValue) == 0x000008, "Member 'InventoryFunctions_IsGridEmpty::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.MergeGrids
// 0x0010 (0x0010 - 0x0000)
struct InventoryFunctions_MergeGrids final
{
public:
	class UItemsGrid*                             TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UItemsGrid*                             SourceGrid;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_MergeGrids) == 0x000008, "Wrong alignment on InventoryFunctions_MergeGrids");
static_assert(sizeof(InventoryFunctions_MergeGrids) == 0x000010, "Wrong size on InventoryFunctions_MergeGrids");
static_assert(offsetof(InventoryFunctions_MergeGrids, TargetGrid) == 0x000000, "Member 'InventoryFunctions_MergeGrids::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_MergeGrids, SourceGrid) == 0x000008, "Member 'InventoryFunctions_MergeGrids::SourceGrid' has a wrong offset!");

// Function Flame.InventoryFunctions.StoreResource
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_StoreResource final
{
public:
	class UItemsList*                             TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InventoryFunctions_StoreResource) == 0x000008, "Wrong alignment on InventoryFunctions_StoreResource");
static_assert(sizeof(InventoryFunctions_StoreResource) == 0x000018, "Wrong size on InventoryFunctions_StoreResource");
static_assert(offsetof(InventoryFunctions_StoreResource, TargetGrid) == 0x000000, "Member 'InventoryFunctions_StoreResource::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_StoreResource, Resource) == 0x000008, "Member 'InventoryFunctions_StoreResource::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_StoreResource, Count) == 0x000010, "Member 'InventoryFunctions_StoreResource::Count' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_StoreResource, ReturnValue) == 0x000014, "Member 'InventoryFunctions_StoreResource::ReturnValue' has a wrong offset!");

// Function Flame.InventoryFunctions.UpdateResource
// 0x0018 (0x0018 - 0x0000)
struct InventoryFunctions_UpdateResource final
{
public:
	class UItemsList*                             TargetGrid;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItemForBackpack>           Resource;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InventoryFunctions_UpdateResource) == 0x000008, "Wrong alignment on InventoryFunctions_UpdateResource");
static_assert(sizeof(InventoryFunctions_UpdateResource) == 0x000018, "Wrong size on InventoryFunctions_UpdateResource");
static_assert(offsetof(InventoryFunctions_UpdateResource, TargetGrid) == 0x000000, "Member 'InventoryFunctions_UpdateResource::TargetGrid' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_UpdateResource, Resource) == 0x000008, "Member 'InventoryFunctions_UpdateResource::Resource' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_UpdateResource, Count) == 0x000010, "Member 'InventoryFunctions_UpdateResource::Count' has a wrong offset!");
static_assert(offsetof(InventoryFunctions_UpdateResource, ReturnValue) == 0x000014, "Member 'InventoryFunctions_UpdateResource::ReturnValue' has a wrong offset!");

// Function Flame.ItemClassHelpers.GetItemRowFromDataTable
// 0x0130 (0x0130 - 0x0000)
struct ItemClassHelpers_GetItemRowFromDataTable final
{
public:
	class UDataTable*                             DataTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemClassTableRow                     RowData;                                           // 0x0018(0x0118)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemClassHelpers_GetItemRowFromDataTable) == 0x000008, "Wrong alignment on ItemClassHelpers_GetItemRowFromDataTable");
static_assert(sizeof(ItemClassHelpers_GetItemRowFromDataTable) == 0x000130, "Wrong size on ItemClassHelpers_GetItemRowFromDataTable");
static_assert(offsetof(ItemClassHelpers_GetItemRowFromDataTable, DataTable) == 0x000000, "Member 'ItemClassHelpers_GetItemRowFromDataTable::DataTable' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetItemRowFromDataTable, RowName) == 0x000008, "Member 'ItemClassHelpers_GetItemRowFromDataTable::RowName' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetItemRowFromDataTable, Success) == 0x000010, "Member 'ItemClassHelpers_GetItemRowFromDataTable::Success' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetItemRowFromDataTable, RowData) == 0x000018, "Member 'ItemClassHelpers_GetItemRowFromDataTable::RowData' has a wrong offset!");

// Function Flame.ItemClassHelpers.GetTableRowFromItemClass
// 0x0028 (0x0028 - 0x0000)
struct ItemClassHelpers_GetTableRowFromItemClass final
{
public:
	TSubclassOf<class AItem>                      ItemClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    TableHandle;                                       // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemClassHelpers_GetTableRowFromItemClass) == 0x000008, "Wrong alignment on ItemClassHelpers_GetTableRowFromItemClass");
static_assert(sizeof(ItemClassHelpers_GetTableRowFromItemClass) == 0x000028, "Wrong size on ItemClassHelpers_GetTableRowFromItemClass");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemClass, ItemClass) == 0x000000, "Member 'ItemClassHelpers_GetTableRowFromItemClass::ItemClass' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemClass, Success) == 0x000008, "Member 'ItemClassHelpers_GetTableRowFromItemClass::Success' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemClass, TableHandle) == 0x000010, "Member 'ItemClassHelpers_GetTableRowFromItemClass::TableHandle' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemClass, WorldContextObject) == 0x000020, "Member 'ItemClassHelpers_GetTableRowFromItemClass::WorldContextObject' has a wrong offset!");

// Function Flame.ItemClassHelpers.GetTableRowFromItemName
// 0x0030 (0x0030 - 0x0000)
struct ItemClassHelpers_GetTableRowFromItemName final
{
public:
	class FString                                 ItemName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    TableHandle;                                       // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemClassHelpers_GetTableRowFromItemName) == 0x000008, "Wrong alignment on ItemClassHelpers_GetTableRowFromItemName");
static_assert(sizeof(ItemClassHelpers_GetTableRowFromItemName) == 0x000030, "Wrong size on ItemClassHelpers_GetTableRowFromItemName");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemName, ItemName) == 0x000000, "Member 'ItemClassHelpers_GetTableRowFromItemName::ItemName' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemName, Success) == 0x000010, "Member 'ItemClassHelpers_GetTableRowFromItemName::Success' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemName, TableHandle) == 0x000018, "Member 'ItemClassHelpers_GetTableRowFromItemName::TableHandle' has a wrong offset!");
static_assert(offsetof(ItemClassHelpers_GetTableRowFromItemName, WorldContextObject) == 0x000028, "Member 'ItemClassHelpers_GetTableRowFromItemName::WorldContextObject' has a wrong offset!");

// Function Flame.OnlineStatusComponent.GetOverview
// 0x0010 (0x0010 - 0x0000)
struct OnlineStatusComponent_GetOverview final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStatusComponent_GetOverview) == 0x000008, "Wrong alignment on OnlineStatusComponent_GetOverview");
static_assert(sizeof(OnlineStatusComponent_GetOverview) == 0x000010, "Wrong size on OnlineStatusComponent_GetOverview");
static_assert(offsetof(OnlineStatusComponent_GetOverview, Player) == 0x000000, "Member 'OnlineStatusComponent_GetOverview::Player' has a wrong offset!");
static_assert(offsetof(OnlineStatusComponent_GetOverview, ReturnValue) == 0x000008, "Member 'OnlineStatusComponent_GetOverview::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineStatusComponent.GetOverviewDelegate__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct OnlineStatusComponent_GetOverviewDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudOverviewResponse                 Data;                                              // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStatusComponent_GetOverviewDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineStatusComponent_GetOverviewDelegate__DelegateSignature");
static_assert(sizeof(OnlineStatusComponent_GetOverviewDelegate__DelegateSignature) == 0x0000A8, "Wrong size on OnlineStatusComponent_GetOverviewDelegate__DelegateSignature");
static_assert(offsetof(OnlineStatusComponent_GetOverviewDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineStatusComponent_GetOverviewDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineStatusComponent_GetOverviewDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineStatusComponent_GetOverviewDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineStatusComponent.GetStatus
// 0x0010 (0x0010 - 0x0000)
struct OnlineStatusComponent_GetStatus final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineStatusComponent_GetStatus) == 0x000008, "Wrong alignment on OnlineStatusComponent_GetStatus");
static_assert(sizeof(OnlineStatusComponent_GetStatus) == 0x000010, "Wrong size on OnlineStatusComponent_GetStatus");
static_assert(offsetof(OnlineStatusComponent_GetStatus, Player) == 0x000000, "Member 'OnlineStatusComponent_GetStatus::Player' has a wrong offset!");
static_assert(offsetof(OnlineStatusComponent_GetStatus, ReturnValue) == 0x000008, "Member 'OnlineStatusComponent_GetStatus::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineStatusComponent.GetStatusDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct OnlineStatusComponent_GetStatusDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudStatusResponse                   Data;                                              // 0x0058(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineStatusComponent_GetStatusDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineStatusComponent_GetStatusDelegate__DelegateSignature");
static_assert(sizeof(OnlineStatusComponent_GetStatusDelegate__DelegateSignature) == 0x000080, "Wrong size on OnlineStatusComponent_GetStatusDelegate__DelegateSignature");
static_assert(offsetof(OnlineStatusComponent_GetStatusDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineStatusComponent_GetStatusDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineStatusComponent_GetStatusDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineStatusComponent_GetStatusDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.PlatformStoreOffersManager.FindPlatformOfferByGameStoreId
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOffersManager_FindPlatformOfferByGameStoreId final
{
public:
	struct FGameStoreProductId                    GameStoreProductId;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UPlatformStoreOfferInfo*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_FindPlatformOfferByGameStoreId) == 0x000008, "Wrong alignment on PlatformStoreOffersManager_FindPlatformOfferByGameStoreId");
static_assert(sizeof(PlatformStoreOffersManager_FindPlatformOfferByGameStoreId) == 0x000018, "Wrong size on PlatformStoreOffersManager_FindPlatformOfferByGameStoreId");
static_assert(offsetof(PlatformStoreOffersManager_FindPlatformOfferByGameStoreId, GameStoreProductId) == 0x000000, "Member 'PlatformStoreOffersManager_FindPlatformOfferByGameStoreId::GameStoreProductId' has a wrong offset!");
static_assert(offsetof(PlatformStoreOffersManager_FindPlatformOfferByGameStoreId, ReturnValue) == 0x000010, "Member 'PlatformStoreOffersManager_FindPlatformOfferByGameStoreId::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOffersManager.FindPlatformOfferByPlatfromId
// 0x0018 (0x0018 - 0x0000)
struct PlatformStoreOffersManager_FindPlatformOfferByPlatfromId final
{
public:
	class FString                                 PlatformId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformStoreOfferInfo*                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_FindPlatformOfferByPlatfromId) == 0x000008, "Wrong alignment on PlatformStoreOffersManager_FindPlatformOfferByPlatfromId");
static_assert(sizeof(PlatformStoreOffersManager_FindPlatformOfferByPlatfromId) == 0x000018, "Wrong size on PlatformStoreOffersManager_FindPlatformOfferByPlatfromId");
static_assert(offsetof(PlatformStoreOffersManager_FindPlatformOfferByPlatfromId, PlatformId) == 0x000000, "Member 'PlatformStoreOffersManager_FindPlatformOfferByPlatfromId::PlatformId' has a wrong offset!");
static_assert(offsetof(PlatformStoreOffersManager_FindPlatformOfferByPlatfromId, ReturnValue) == 0x000010, "Member 'PlatformStoreOffersManager_FindPlatformOfferByPlatfromId::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.PlatformStoreOffersManager.PlatformStoreOffersStateChanged__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature final
{
public:
	EPlatformStoreOffersState                     OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlatformStoreOffersState                     NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature");
static_assert(sizeof(PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature) == 0x000002, "Wrong size on PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature");
static_assert(offsetof(PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature, OldState) == 0x000000, "Member 'PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature, NewState) == 0x000001, "Member 'PlatformStoreOffersManager_PlatformStoreOffersStateChanged__DelegateSignature::NewState' has a wrong offset!");

// Function Flame.PlatformStoreOffersManager.RefreshPlatformStoreOffers
// 0x0002 (0x0002 - 0x0000)
struct PlatformStoreOffersManager_RefreshPlatformStoreOffers final
{
public:
	EPlatformStoreOffersRefreshMode               RefreshMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_RefreshPlatformStoreOffers) == 0x000001, "Wrong alignment on PlatformStoreOffersManager_RefreshPlatformStoreOffers");
static_assert(sizeof(PlatformStoreOffersManager_RefreshPlatformStoreOffers) == 0x000002, "Wrong size on PlatformStoreOffersManager_RefreshPlatformStoreOffers");
static_assert(offsetof(PlatformStoreOffersManager_RefreshPlatformStoreOffers, RefreshMode) == 0x000000, "Member 'PlatformStoreOffersManager_RefreshPlatformStoreOffers::RefreshMode' has a wrong offset!");
static_assert(offsetof(PlatformStoreOffersManager_RefreshPlatformStoreOffers, ReturnValue) == 0x000001, "Member 'PlatformStoreOffersManager_RefreshPlatformStoreOffers::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOffersManager.GetOffersManagerState
// 0x0001 (0x0001 - 0x0000)
struct PlatformStoreOffersManager_GetOffersManagerState final
{
public:
	EPlatformStoreOffersState                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_GetOffersManagerState) == 0x000001, "Wrong alignment on PlatformStoreOffersManager_GetOffersManagerState");
static_assert(sizeof(PlatformStoreOffersManager_GetOffersManagerState) == 0x000001, "Wrong size on PlatformStoreOffersManager_GetOffersManagerState");
static_assert(offsetof(PlatformStoreOffersManager_GetOffersManagerState, ReturnValue) == 0x000000, "Member 'PlatformStoreOffersManager_GetOffersManagerState::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreOffersManager.GetPlatformOffers
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreOffersManager_GetPlatformOffers final
{
public:
	TArray<class UPlatformStoreOfferInfo*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreOffersManager_GetPlatformOffers) == 0x000008, "Wrong alignment on PlatformStoreOffersManager_GetPlatformOffers");
static_assert(sizeof(PlatformStoreOffersManager_GetPlatformOffers) == 0x000010, "Wrong size on PlatformStoreOffersManager_GetPlatformOffers");
static_assert(offsetof(PlatformStoreOffersManager_GetPlatformOffers, ReturnValue) == 0x000000, "Member 'PlatformStoreOffersManager_GetPlatformOffers::ReturnValue' has a wrong offset!");

// Function Flame.NetworkStatsWidget.UpdateTexts
// 0x0078 (0x0078 - 0x0000)
struct NetworkStatsWidget_UpdateTexts final
{
public:
	class FText                                   LagText;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BandwidthInText;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   BandwidthOutText;                                  // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   LossInText;                                        // 0x0048(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   LossOutText;                                       // 0x0060(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkStatsWidget_UpdateTexts) == 0x000008, "Wrong alignment on NetworkStatsWidget_UpdateTexts");
static_assert(sizeof(NetworkStatsWidget_UpdateTexts) == 0x000078, "Wrong size on NetworkStatsWidget_UpdateTexts");
static_assert(offsetof(NetworkStatsWidget_UpdateTexts, LagText) == 0x000000, "Member 'NetworkStatsWidget_UpdateTexts::LagText' has a wrong offset!");
static_assert(offsetof(NetworkStatsWidget_UpdateTexts, BandwidthInText) == 0x000018, "Member 'NetworkStatsWidget_UpdateTexts::BandwidthInText' has a wrong offset!");
static_assert(offsetof(NetworkStatsWidget_UpdateTexts, BandwidthOutText) == 0x000030, "Member 'NetworkStatsWidget_UpdateTexts::BandwidthOutText' has a wrong offset!");
static_assert(offsetof(NetworkStatsWidget_UpdateTexts, LossInText) == 0x000048, "Member 'NetworkStatsWidget_UpdateTexts::LossInText' has a wrong offset!");
static_assert(offsetof(NetworkStatsWidget_UpdateTexts, LossOutText) == 0x000060, "Member 'NetworkStatsWidget_UpdateTexts::LossOutText' has a wrong offset!");

// Function Flame.NetworkStatsWidget.UpdateVisibilityFromGameSettings
// 0x0048 (0x0048 - 0x0000)
struct NetworkStatsWidget_UpdateVisibilityFromGameSettings final
{
public:
	struct FGameSaveSettings                      GameSettings;                                      // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkStatsWidget_UpdateVisibilityFromGameSettings) == 0x000008, "Wrong alignment on NetworkStatsWidget_UpdateVisibilityFromGameSettings");
static_assert(sizeof(NetworkStatsWidget_UpdateVisibilityFromGameSettings) == 0x000048, "Wrong size on NetworkStatsWidget_UpdateVisibilityFromGameSettings");
static_assert(offsetof(NetworkStatsWidget_UpdateVisibilityFromGameSettings, GameSettings) == 0x000000, "Member 'NetworkStatsWidget_UpdateVisibilityFromGameSettings::GameSettings' has a wrong offset!");

// Function Flame.NetworkStatsWidget.IsActivatedOnOptions
// 0x0001 (0x0001 - 0x0000)
struct NetworkStatsWidget_IsActivatedOnOptions final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkStatsWidget_IsActivatedOnOptions) == 0x000001, "Wrong alignment on NetworkStatsWidget_IsActivatedOnOptions");
static_assert(sizeof(NetworkStatsWidget_IsActivatedOnOptions) == 0x000001, "Wrong size on NetworkStatsWidget_IsActivatedOnOptions");
static_assert(offsetof(NetworkStatsWidget_IsActivatedOnOptions, ReturnValue) == 0x000000, "Member 'NetworkStatsWidget_IsActivatedOnOptions::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.ComposeQuaternions
// 0x0030 (0x0030 - 0x0000)
struct QuaternionsBPFunctions_ComposeQuaternions final
{
public:
	struct FQuat                                  A;                                                 // 0x0000(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  B;                                                 // 0x0010(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_ComposeQuaternions) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_ComposeQuaternions");
static_assert(sizeof(QuaternionsBPFunctions_ComposeQuaternions) == 0x000030, "Wrong size on QuaternionsBPFunctions_ComposeQuaternions");
static_assert(offsetof(QuaternionsBPFunctions_ComposeQuaternions, A) == 0x000000, "Member 'QuaternionsBPFunctions_ComposeQuaternions::A' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_ComposeQuaternions, B) == 0x000010, "Member 'QuaternionsBPFunctions_ComposeQuaternions::B' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_ComposeQuaternions, ReturnValue) == 0x000020, "Member 'QuaternionsBPFunctions_ComposeQuaternions::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.InverseTransformRotationQuat
// 0x0050 (0x0050 - 0x0000)
struct QuaternionsBPFunctions_InverseTransformRotationQuat final
{
public:
	struct FTransform                             T;                                                 // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0030(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_InverseTransformRotationQuat) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_InverseTransformRotationQuat");
static_assert(sizeof(QuaternionsBPFunctions_InverseTransformRotationQuat) == 0x000050, "Wrong size on QuaternionsBPFunctions_InverseTransformRotationQuat");
static_assert(offsetof(QuaternionsBPFunctions_InverseTransformRotationQuat, T) == 0x000000, "Member 'QuaternionsBPFunctions_InverseTransformRotationQuat::T' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_InverseTransformRotationQuat, Rotation) == 0x000030, "Member 'QuaternionsBPFunctions_InverseTransformRotationQuat::Rotation' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_InverseTransformRotationQuat, ReturnValue) == 0x000040, "Member 'QuaternionsBPFunctions_InverseTransformRotationQuat::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.NormalizeQuaternion
// 0x0020 (0x0020 - 0x0000)
struct QuaternionsBPFunctions_NormalizeQuaternion final
{
public:
	struct FQuat                                  Quaternion;                                        // 0x0000(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_NormalizeQuaternion) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_NormalizeQuaternion");
static_assert(sizeof(QuaternionsBPFunctions_NormalizeQuaternion) == 0x000020, "Wrong size on QuaternionsBPFunctions_NormalizeQuaternion");
static_assert(offsetof(QuaternionsBPFunctions_NormalizeQuaternion, Quaternion) == 0x000000, "Member 'QuaternionsBPFunctions_NormalizeQuaternion::Quaternion' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_NormalizeQuaternion, ReturnValue) == 0x000010, "Member 'QuaternionsBPFunctions_NormalizeQuaternion::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.QuaternionToRotator
// 0x0020 (0x0020 - 0x0000)
struct QuaternionsBPFunctions_QuaternionToRotator final
{
public:
	struct FQuat                                  Quaternion;                                        // 0x0000(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuaternionsBPFunctions_QuaternionToRotator) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_QuaternionToRotator");
static_assert(sizeof(QuaternionsBPFunctions_QuaternionToRotator) == 0x000020, "Wrong size on QuaternionsBPFunctions_QuaternionToRotator");
static_assert(offsetof(QuaternionsBPFunctions_QuaternionToRotator, Quaternion) == 0x000000, "Member 'QuaternionsBPFunctions_QuaternionToRotator::Quaternion' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_QuaternionToRotator, ReturnValue) == 0x000010, "Member 'QuaternionsBPFunctions_QuaternionToRotator::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.RotateTransformQuat
// 0x0070 (0x0070 - 0x0000)
struct QuaternionsBPFunctions_RotateTransformQuat final
{
public:
	struct FTransform                             T;                                                 // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuat                                  Rotation;                                          // 0x0030(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_RotateTransformQuat) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_RotateTransformQuat");
static_assert(sizeof(QuaternionsBPFunctions_RotateTransformQuat) == 0x000070, "Wrong size on QuaternionsBPFunctions_RotateTransformQuat");
static_assert(offsetof(QuaternionsBPFunctions_RotateTransformQuat, T) == 0x000000, "Member 'QuaternionsBPFunctions_RotateTransformQuat::T' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_RotateTransformQuat, Rotation) == 0x000030, "Member 'QuaternionsBPFunctions_RotateTransformQuat::Rotation' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_RotateTransformQuat, ReturnValue) == 0x000040, "Member 'QuaternionsBPFunctions_RotateTransformQuat::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.RotatorToQuaternion
// 0x0020 (0x0020 - 0x0000)
struct QuaternionsBPFunctions_RotatorToQuaternion final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_RotatorToQuaternion) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_RotatorToQuaternion");
static_assert(sizeof(QuaternionsBPFunctions_RotatorToQuaternion) == 0x000020, "Wrong size on QuaternionsBPFunctions_RotatorToQuaternion");
static_assert(offsetof(QuaternionsBPFunctions_RotatorToQuaternion, Rotation) == 0x000000, "Member 'QuaternionsBPFunctions_RotatorToQuaternion::Rotation' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_RotatorToQuaternion, ReturnValue) == 0x000010, "Member 'QuaternionsBPFunctions_RotatorToQuaternion::ReturnValue' has a wrong offset!");

// Function Flame.QuaternionsBPFunctions.SetRelativeRotationQuat
// 0x0020 (0x0020 - 0x0000)
struct QuaternionsBPFunctions_SetRelativeRotationQuat final
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  NewRotation;                                       // 0x0010(0x0010)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuaternionsBPFunctions_SetRelativeRotationQuat) == 0x000010, "Wrong alignment on QuaternionsBPFunctions_SetRelativeRotationQuat");
static_assert(sizeof(QuaternionsBPFunctions_SetRelativeRotationQuat) == 0x000020, "Wrong size on QuaternionsBPFunctions_SetRelativeRotationQuat");
static_assert(offsetof(QuaternionsBPFunctions_SetRelativeRotationQuat, SceneComponent) == 0x000000, "Member 'QuaternionsBPFunctions_SetRelativeRotationQuat::SceneComponent' has a wrong offset!");
static_assert(offsetof(QuaternionsBPFunctions_SetRelativeRotationQuat, NewRotation) == 0x000010, "Member 'QuaternionsBPFunctions_SetRelativeRotationQuat::NewRotation' has a wrong offset!");

// Function Flame.OnlineBoostersComponent.ActivateBoosterTickets
// 0x0020 (0x0020 - 0x0000)
struct OnlineBoostersComponent_ActivateBoosterTickets final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoosterTicketSku;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineBoostersComponent_ActivateBoosterTickets) == 0x000008, "Wrong alignment on OnlineBoostersComponent_ActivateBoosterTickets");
static_assert(sizeof(OnlineBoostersComponent_ActivateBoosterTickets) == 0x000020, "Wrong size on OnlineBoostersComponent_ActivateBoosterTickets");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTickets, Player) == 0x000000, "Member 'OnlineBoostersComponent_ActivateBoosterTickets::Player' has a wrong offset!");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTickets, BoosterTicketSku) == 0x000008, "Member 'OnlineBoostersComponent_ActivateBoosterTickets::BoosterTicketSku' has a wrong offset!");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTickets, Count) == 0x000018, "Member 'OnlineBoostersComponent_ActivateBoosterTickets::Count' has a wrong offset!");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTickets, ReturnValue) == 0x00001C, "Member 'OnlineBoostersComponent_ActivateBoosterTickets::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineBoostersComponent.ActivateBoosterTicketsDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBoosterDetails                        Data;                                              // 0x0058(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature");
static_assert(sizeof(OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature) == 0x000078, "Wrong size on OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineBoostersComponent_ActivateBoosterTicketsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.RiverCollision.GenerateCollisionMesh
// 0x0020 (0x0020 - 0x0000)
struct RiverCollision_GenerateCollisionMesh final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Indices;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverCollision_GenerateCollisionMesh) == 0x000008, "Wrong alignment on RiverCollision_GenerateCollisionMesh");
static_assert(sizeof(RiverCollision_GenerateCollisionMesh) == 0x000020, "Wrong size on RiverCollision_GenerateCollisionMesh");
static_assert(offsetof(RiverCollision_GenerateCollisionMesh, Vertices) == 0x000000, "Member 'RiverCollision_GenerateCollisionMesh::Vertices' has a wrong offset!");
static_assert(offsetof(RiverCollision_GenerateCollisionMesh, Indices) == 0x000010, "Member 'RiverCollision_GenerateCollisionMesh::Indices' has a wrong offset!");

// Function Flame.RiverCollision.SetCollisionPointHeight
// 0x0004 (0x0004 - 0x0000)
struct RiverCollision_SetCollisionPointHeight final
{
public:
	float                                         NewHeight;                                         // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverCollision_SetCollisionPointHeight) == 0x000004, "Wrong alignment on RiverCollision_SetCollisionPointHeight");
static_assert(sizeof(RiverCollision_SetCollisionPointHeight) == 0x000004, "Wrong size on RiverCollision_SetCollisionPointHeight");
static_assert(offsetof(RiverCollision_SetCollisionPointHeight, NewHeight) == 0x000000, "Member 'RiverCollision_SetCollisionPointHeight::NewHeight' has a wrong offset!");

// Function Flame.RiverCollision.SetRiverOwner
// 0x0008 (0x0008 - 0x0000)
struct RiverCollision_SetRiverOwner final
{
public:
	class AActor*                                 NewOwner;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverCollision_SetRiverOwner) == 0x000008, "Wrong alignment on RiverCollision_SetRiverOwner");
static_assert(sizeof(RiverCollision_SetRiverOwner) == 0x000008, "Wrong size on RiverCollision_SetRiverOwner");
static_assert(offsetof(RiverCollision_SetRiverOwner, NewOwner) == 0x000000, "Member 'RiverCollision_SetRiverOwner::NewOwner' has a wrong offset!");

// Function Flame.RiverCollision.GetCollisionPointHeight
// 0x0004 (0x0004 - 0x0000)
struct RiverCollision_GetCollisionPointHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverCollision_GetCollisionPointHeight) == 0x000004, "Wrong alignment on RiverCollision_GetCollisionPointHeight");
static_assert(sizeof(RiverCollision_GetCollisionPointHeight) == 0x000004, "Wrong size on RiverCollision_GetCollisionPointHeight");
static_assert(offsetof(RiverCollision_GetCollisionPointHeight, ReturnValue) == 0x000000, "Member 'RiverCollision_GetCollisionPointHeight::ReturnValue' has a wrong offset!");

// Function Flame.RiverCollision.GetRiverOwner
// 0x0008 (0x0008 - 0x0000)
struct RiverCollision_GetRiverOwner final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverCollision_GetRiverOwner) == 0x000008, "Wrong alignment on RiverCollision_GetRiverOwner");
static_assert(sizeof(RiverCollision_GetRiverOwner) == 0x000008, "Wrong size on RiverCollision_GetRiverOwner");
static_assert(offsetof(RiverCollision_GetRiverOwner, ReturnValue) == 0x000000, "Member 'RiverCollision_GetRiverOwner::ReturnValue' has a wrong offset!");

// Function Flame.ObstacleComponent.AddEdge
// 0x0024 (0x0024 - 0x0000)
struct ObstacleComponent_AddEdge final
{
public:
	struct FObstacleEdge                          Edge;                                              // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_AddEdge) == 0x000004, "Wrong alignment on ObstacleComponent_AddEdge");
static_assert(sizeof(ObstacleComponent_AddEdge) == 0x000024, "Wrong size on ObstacleComponent_AddEdge");
static_assert(offsetof(ObstacleComponent_AddEdge, Edge) == 0x000000, "Member 'ObstacleComponent_AddEdge::Edge' has a wrong offset!");

// Function Flame.ObstacleComponent.AddSplineTransformedEdges
// 0x0010 (0x0010 - 0x0000)
struct ObstacleComponent_AddSplineTransformedEdges final
{
public:
	const class UObstacleAsset*                   Obstacle;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USplineMeshComponent*             SplineMeshComponent;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_AddSplineTransformedEdges) == 0x000008, "Wrong alignment on ObstacleComponent_AddSplineTransformedEdges");
static_assert(sizeof(ObstacleComponent_AddSplineTransformedEdges) == 0x000010, "Wrong size on ObstacleComponent_AddSplineTransformedEdges");
static_assert(offsetof(ObstacleComponent_AddSplineTransformedEdges, Obstacle) == 0x000000, "Member 'ObstacleComponent_AddSplineTransformedEdges::Obstacle' has a wrong offset!");
static_assert(offsetof(ObstacleComponent_AddSplineTransformedEdges, SplineMeshComponent) == 0x000008, "Member 'ObstacleComponent_AddSplineTransformedEdges::SplineMeshComponent' has a wrong offset!");

// Function Flame.ObstacleComponent.AddTransformedEdges
// 0x0040 (0x0040 - 0x0000)
struct ObstacleComponent_AddTransformedEdges final
{
public:
	const class UObstacleAsset*                   Obstacle;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_AddTransformedEdges) == 0x000010, "Wrong alignment on ObstacleComponent_AddTransformedEdges");
static_assert(sizeof(ObstacleComponent_AddTransformedEdges) == 0x000040, "Wrong size on ObstacleComponent_AddTransformedEdges");
static_assert(offsetof(ObstacleComponent_AddTransformedEdges, Obstacle) == 0x000000, "Member 'ObstacleComponent_AddTransformedEdges::Obstacle' has a wrong offset!");
static_assert(offsetof(ObstacleComponent_AddTransformedEdges, Transform) == 0x000010, "Member 'ObstacleComponent_AddTransformedEdges::Transform' has a wrong offset!");

// Function Flame.ObstacleComponent.SetObstacleAsset
// 0x0008 (0x0008 - 0x0000)
struct ObstacleComponent_SetObstacleAsset final
{
public:
	class UObstacleAsset*                         Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_SetObstacleAsset) == 0x000008, "Wrong alignment on ObstacleComponent_SetObstacleAsset");
static_assert(sizeof(ObstacleComponent_SetObstacleAsset) == 0x000008, "Wrong size on ObstacleComponent_SetObstacleAsset");
static_assert(offsetof(ObstacleComponent_SetObstacleAsset, Asset) == 0x000000, "Member 'ObstacleComponent_SetObstacleAsset::Asset' has a wrong offset!");

// Function Flame.ObstacleComponent.SetObstacleEnabled
// 0x0001 (0x0001 - 0x0000)
struct ObstacleComponent_SetObstacleEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_SetObstacleEnabled) == 0x000001, "Wrong alignment on ObstacleComponent_SetObstacleEnabled");
static_assert(sizeof(ObstacleComponent_SetObstacleEnabled) == 0x000001, "Wrong size on ObstacleComponent_SetObstacleEnabled");
static_assert(offsetof(ObstacleComponent_SetObstacleEnabled, bEnabled) == 0x000000, "Member 'ObstacleComponent_SetObstacleEnabled::bEnabled' has a wrong offset!");

// Function Flame.ObstacleComponent.GetTransformedEdges
// 0x0018 (0x0018 - 0x0000)
struct ObstacleComponent_GetTransformedEdges final
{
public:
	const class USplineMeshComponent*             SplineMesh;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FObstacleEdge>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_GetTransformedEdges) == 0x000008, "Wrong alignment on ObstacleComponent_GetTransformedEdges");
static_assert(sizeof(ObstacleComponent_GetTransformedEdges) == 0x000018, "Wrong size on ObstacleComponent_GetTransformedEdges");
static_assert(offsetof(ObstacleComponent_GetTransformedEdges, SplineMesh) == 0x000000, "Member 'ObstacleComponent_GetTransformedEdges::SplineMesh' has a wrong offset!");
static_assert(offsetof(ObstacleComponent_GetTransformedEdges, ReturnValue) == 0x000008, "Member 'ObstacleComponent_GetTransformedEdges::ReturnValue' has a wrong offset!");

// Function Flame.ObstacleComponent.HasEdges
// 0x0001 (0x0001 - 0x0000)
struct ObstacleComponent_HasEdges final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_HasEdges) == 0x000001, "Wrong alignment on ObstacleComponent_HasEdges");
static_assert(sizeof(ObstacleComponent_HasEdges) == 0x000001, "Wrong size on ObstacleComponent_HasEdges");
static_assert(offsetof(ObstacleComponent_HasEdges, ReturnValue) == 0x000000, "Member 'ObstacleComponent_HasEdges::ReturnValue' has a wrong offset!");

// Function Flame.ObstacleComponent.IsObstacleEnabled
// 0x0001 (0x0001 - 0x0000)
struct ObstacleComponent_IsObstacleEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObstacleComponent_IsObstacleEnabled) == 0x000001, "Wrong alignment on ObstacleComponent_IsObstacleEnabled");
static_assert(sizeof(ObstacleComponent_IsObstacleEnabled) == 0x000001, "Wrong size on ObstacleComponent_IsObstacleEnabled");
static_assert(offsetof(ObstacleComponent_IsObstacleEnabled, ReturnValue) == 0x000000, "Member 'ObstacleComponent_IsObstacleEnabled::ReturnValue' has a wrong offset!");

// Function Flame.OnlineCharityBoxComponent.AddToCharityBox
// 0x0010 (0x0010 - 0x0000)
struct OnlineCharityBoxComponent_AddToCharityBox final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudCharityBoxAddInfo                Info;                                              // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCharityBoxComponent_AddToCharityBox) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_AddToCharityBox");
static_assert(sizeof(OnlineCharityBoxComponent_AddToCharityBox) == 0x000010, "Wrong size on OnlineCharityBoxComponent_AddToCharityBox");
static_assert(offsetof(OnlineCharityBoxComponent_AddToCharityBox, Player) == 0x000000, "Member 'OnlineCharityBoxComponent_AddToCharityBox::Player' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_AddToCharityBox, Info) == 0x000008, "Member 'OnlineCharityBoxComponent_AddToCharityBox::Info' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_AddToCharityBox, ReturnValue) == 0x00000C, "Member 'OnlineCharityBoxComponent_AddToCharityBox::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineCharityBoxComponent.AddToCharityBoxDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudCharityBoxState                  Data;                                              // 0x0058(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature");
static_assert(sizeof(OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature) == 0x000080, "Wrong size on OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature");
static_assert(offsetof(OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineCharityBoxComponent_AddToCharityBoxDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineCharityBoxComponent.ClaimCharityBoxRewards
// 0x0020 (0x0020 - 0x0000)
struct OnlineCharityBoxComponent_ClaimCharityBoxRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SeasonName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineCharityBoxComponent_ClaimCharityBoxRewards) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_ClaimCharityBoxRewards");
static_assert(sizeof(OnlineCharityBoxComponent_ClaimCharityBoxRewards) == 0x000020, "Wrong size on OnlineCharityBoxComponent_ClaimCharityBoxRewards");
static_assert(offsetof(OnlineCharityBoxComponent_ClaimCharityBoxRewards, Player) == 0x000000, "Member 'OnlineCharityBoxComponent_ClaimCharityBoxRewards::Player' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_ClaimCharityBoxRewards, SeasonName) == 0x000008, "Member 'OnlineCharityBoxComponent_ClaimCharityBoxRewards::SeasonName' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_ClaimCharityBoxRewards, ReturnValue) == 0x000018, "Member 'OnlineCharityBoxComponent_ClaimCharityBoxRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineCharityBoxComponent.ClaimCharityBoxRewardsDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudCharityBoxClaimInfo              Data;                                              // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature) == 0x000070, "Wrong size on OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineCharityBoxComponent_ClaimCharityBoxRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineCharityBoxComponent.GetCharityBoxSeasonsInfo
// 0x0010 (0x0010 - 0x0000)
struct OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo");
static_assert(sizeof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo) == 0x000010, "Wrong size on OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo, Player) == 0x000000, "Member 'OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo::Player' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo, ReturnValue) == 0x000008, "Member 'OnlineCharityBoxComponent_GetCharityBoxSeasonsInfo::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineCharityBoxComponent.GetCharityBoxSeasonsInfoDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudCharityBoxSeasonsInfo            Data;                                              // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature");
static_assert(sizeof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature) == 0x000070, "Wrong size on OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineCharityBoxComponent_GetCharityBoxSeasonsInfoDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineCharityBoxComponent.GetCharityBoxState
// 0x0010 (0x0010 - 0x0000)
struct OnlineCharityBoxComponent_GetCharityBoxState final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineCharityBoxComponent_GetCharityBoxState) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_GetCharityBoxState");
static_assert(sizeof(OnlineCharityBoxComponent_GetCharityBoxState) == 0x000010, "Wrong size on OnlineCharityBoxComponent_GetCharityBoxState");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxState, Player) == 0x000000, "Member 'OnlineCharityBoxComponent_GetCharityBoxState::Player' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxState, ReturnValue) == 0x000008, "Member 'OnlineCharityBoxComponent_GetCharityBoxState::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineCharityBoxComponent.GetCharityBoxStateDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudCharityBoxState                  Data;                                              // 0x0058(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature");
static_assert(sizeof(OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature) == 0x000080, "Wrong size on OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineCharityBoxComponent_GetCharityBoxStateDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.ItemInfoWidget.SetItem
// 0x0008 (0x0008 - 0x0000)
struct ItemInfoWidget_SetItem final
{
public:
	class AItem*                                  InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInfoWidget_SetItem) == 0x000008, "Wrong alignment on ItemInfoWidget_SetItem");
static_assert(sizeof(ItemInfoWidget_SetItem) == 0x000008, "Wrong size on ItemInfoWidget_SetItem");
static_assert(offsetof(ItemInfoWidget_SetItem, InItem) == 0x000000, "Member 'ItemInfoWidget_SetItem::InItem' has a wrong offset!");

// Function Flame.LeaderboardSystem.InvalidLeaderboardRequest
// 0x0004 (0x0004 - 0x0000)
struct LeaderboardSystem_InvalidLeaderboardRequest final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_InvalidLeaderboardRequest) == 0x000004, "Wrong alignment on LeaderboardSystem_InvalidLeaderboardRequest");
static_assert(sizeof(LeaderboardSystem_InvalidLeaderboardRequest) == 0x000004, "Wrong size on LeaderboardSystem_InvalidLeaderboardRequest");
static_assert(offsetof(LeaderboardSystem_InvalidLeaderboardRequest, ReturnValue) == 0x000000, "Member 'LeaderboardSystem_InvalidLeaderboardRequest::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.ClearAllCachedLeaderboardData
// 0x0001 (0x0001 - 0x0000)
struct LeaderboardSystem_ClearAllCachedLeaderboardData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_ClearAllCachedLeaderboardData) == 0x000001, "Wrong alignment on LeaderboardSystem_ClearAllCachedLeaderboardData");
static_assert(sizeof(LeaderboardSystem_ClearAllCachedLeaderboardData) == 0x000001, "Wrong size on LeaderboardSystem_ClearAllCachedLeaderboardData");
static_assert(offsetof(LeaderboardSystem_ClearAllCachedLeaderboardData, ReturnValue) == 0x000000, "Member 'LeaderboardSystem_ClearAllCachedLeaderboardData::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.ClearCachedLeaderboardData
// 0x000C (0x000C - 0x0000)
struct LeaderboardSystem_ClearCachedLeaderboardData final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardSystem_ClearCachedLeaderboardData) == 0x000004, "Wrong alignment on LeaderboardSystem_ClearCachedLeaderboardData");
static_assert(sizeof(LeaderboardSystem_ClearCachedLeaderboardData) == 0x00000C, "Wrong size on LeaderboardSystem_ClearCachedLeaderboardData");
static_assert(offsetof(LeaderboardSystem_ClearCachedLeaderboardData, StatName) == 0x000000, "Member 'LeaderboardSystem_ClearCachedLeaderboardData::StatName' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ClearCachedLeaderboardData, ReturnValue) == 0x000008, "Member 'LeaderboardSystem_ClearCachedLeaderboardData::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.ClearCachedLeaderboardRequest
// 0x0018 (0x0018 - 0x0000)
struct LeaderboardSystem_ClearCachedLeaderboardRequest final
{
public:
	struct FLeaderboardReadContext                BoardContext;                                      // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardSystem_ClearCachedLeaderboardRequest) == 0x000004, "Wrong alignment on LeaderboardSystem_ClearCachedLeaderboardRequest");
static_assert(sizeof(LeaderboardSystem_ClearCachedLeaderboardRequest) == 0x000018, "Wrong size on LeaderboardSystem_ClearCachedLeaderboardRequest");
static_assert(offsetof(LeaderboardSystem_ClearCachedLeaderboardRequest, BoardContext) == 0x000000, "Member 'LeaderboardSystem_ClearCachedLeaderboardRequest::BoardContext' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ClearCachedLeaderboardRequest, ReturnValue) == 0x000014, "Member 'LeaderboardSystem_ClearCachedLeaderboardRequest::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.GetLeaderboardSystemMonitor
// 0x0008 (0x0008 - 0x0000)
struct LeaderboardSystem_GetLeaderboardSystemMonitor final
{
public:
	class ULeaderboardSystemMonitor*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_GetLeaderboardSystemMonitor) == 0x000008, "Wrong alignment on LeaderboardSystem_GetLeaderboardSystemMonitor");
static_assert(sizeof(LeaderboardSystem_GetLeaderboardSystemMonitor) == 0x000008, "Wrong size on LeaderboardSystem_GetLeaderboardSystemMonitor");
static_assert(offsetof(LeaderboardSystem_GetLeaderboardSystemMonitor, ReturnValue) == 0x000000, "Member 'LeaderboardSystem_GetLeaderboardSystemMonitor::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.LeaderboardSystem.OnLeaderboardReadBoardFinished__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLeaderboardReadContext                BoardContext;                                      // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLeaderboardData                       LeaderboardData;                                   // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature) == 0x000008, "Wrong alignment on LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature");
static_assert(sizeof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature) == 0x000038, "Wrong size on LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature, Succeeded) == 0x000000, "Member 'LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature::Succeeded' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature, RequestId) == 0x000004, "Member 'LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature::RequestId' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature, BoardContext) == 0x000008, "Member 'LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature::BoardContext' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature, LeaderboardData) == 0x000020, "Member 'LeaderboardSystem_OnLeaderboardReadBoardFinished__DelegateSignature::LeaderboardData' has a wrong offset!");

// DelegateFunction Flame.LeaderboardSystem.OnLeaderboardWriteBoardDataFinished__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RequestId;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature) == 0x000004, "Wrong alignment on LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature");
static_assert(sizeof(LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature) == 0x000008, "Wrong size on LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature, Succeeded) == 0x000000, "Member 'LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature::Succeeded' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature, RequestId) == 0x000004, "Member 'LeaderboardSystem_OnLeaderboardWriteBoardDataFinished__DelegateSignature::RequestId' has a wrong offset!");

// Function Flame.LeaderboardSystem.ReadLeaderboardData
// 0x0030 (0x0030 - 0x0000)
struct LeaderboardSystem_ReadLeaderboardData final
{
public:
	const class AHumanPlayerController*           Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLeaderboardReadContext                BoardContext;                                      // 0x0008(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CheckCachedData;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              UseCacheIfNotOlderThan;                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardSystem_ReadLeaderboardData) == 0x000008, "Wrong alignment on LeaderboardSystem_ReadLeaderboardData");
static_assert(sizeof(LeaderboardSystem_ReadLeaderboardData) == 0x000030, "Wrong size on LeaderboardSystem_ReadLeaderboardData");
static_assert(offsetof(LeaderboardSystem_ReadLeaderboardData, Controller) == 0x000000, "Member 'LeaderboardSystem_ReadLeaderboardData::Controller' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ReadLeaderboardData, BoardContext) == 0x000008, "Member 'LeaderboardSystem_ReadLeaderboardData::BoardContext' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ReadLeaderboardData, CheckCachedData) == 0x00001C, "Member 'LeaderboardSystem_ReadLeaderboardData::CheckCachedData' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ReadLeaderboardData, UseCacheIfNotOlderThan) == 0x000020, "Member 'LeaderboardSystem_ReadLeaderboardData::UseCacheIfNotOlderThan' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_ReadLeaderboardData, ReturnValue) == 0x000028, "Member 'LeaderboardSystem_ReadLeaderboardData::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.SetupLocalLeaderboardData
// 0x0018 (0x0018 - 0x0000)
struct LeaderboardSystem_SetupLocalLeaderboardData final
{
public:
	class FString                                 CsvFileName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LeaderboardSystem_SetupLocalLeaderboardData) == 0x000008, "Wrong alignment on LeaderboardSystem_SetupLocalLeaderboardData");
static_assert(sizeof(LeaderboardSystem_SetupLocalLeaderboardData) == 0x000018, "Wrong size on LeaderboardSystem_SetupLocalLeaderboardData");
static_assert(offsetof(LeaderboardSystem_SetupLocalLeaderboardData, CsvFileName) == 0x000000, "Member 'LeaderboardSystem_SetupLocalLeaderboardData::CsvFileName' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_SetupLocalLeaderboardData, ReturnValue) == 0x000010, "Member 'LeaderboardSystem_SetupLocalLeaderboardData::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.WriteLeaderboardData
// 0x0018 (0x0018 - 0x0000)
struct LeaderboardSystem_WriteLeaderboardData final
{
public:
	const class AHumanPlayerController*           Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoardName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerValue;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_WriteLeaderboardData) == 0x000008, "Wrong alignment on LeaderboardSystem_WriteLeaderboardData");
static_assert(sizeof(LeaderboardSystem_WriteLeaderboardData) == 0x000018, "Wrong size on LeaderboardSystem_WriteLeaderboardData");
static_assert(offsetof(LeaderboardSystem_WriteLeaderboardData, Controller) == 0x000000, "Member 'LeaderboardSystem_WriteLeaderboardData::Controller' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_WriteLeaderboardData, BoardName) == 0x000008, "Member 'LeaderboardSystem_WriteLeaderboardData::BoardName' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_WriteLeaderboardData, PlayerValue) == 0x000010, "Member 'LeaderboardSystem_WriteLeaderboardData::PlayerValue' has a wrong offset!");
static_assert(offsetof(LeaderboardSystem_WriteLeaderboardData, ReturnValue) == 0x000014, "Member 'LeaderboardSystem_WriteLeaderboardData::ReturnValue' has a wrong offset!");

// Function Flame.LeaderboardSystem.IsLocalLeaderboardEnabled
// 0x0001 (0x0001 - 0x0000)
struct LeaderboardSystem_IsLocalLeaderboardEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystem_IsLocalLeaderboardEnabled) == 0x000001, "Wrong alignment on LeaderboardSystem_IsLocalLeaderboardEnabled");
static_assert(sizeof(LeaderboardSystem_IsLocalLeaderboardEnabled) == 0x000001, "Wrong size on LeaderboardSystem_IsLocalLeaderboardEnabled");
static_assert(offsetof(LeaderboardSystem_IsLocalLeaderboardEnabled, ReturnValue) == 0x000000, "Member 'LeaderboardSystem_IsLocalLeaderboardEnabled::ReturnValue' has a wrong offset!");

// Function Flame.ConsumablePlan.GetConsumableClass
// 0x0008 (0x0008 - 0x0000)
struct ConsumablePlan_GetConsumableClass final
{
public:
	TSubclassOf<class AConsumableItem>            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsumablePlan_GetConsumableClass) == 0x000008, "Wrong alignment on ConsumablePlan_GetConsumableClass");
static_assert(sizeof(ConsumablePlan_GetConsumableClass) == 0x000008, "Wrong size on ConsumablePlan_GetConsumableClass");
static_assert(offsetof(ConsumablePlan_GetConsumableClass, ReturnValue) == 0x000000, "Member 'ConsumablePlan_GetConsumableClass::ReturnValue' has a wrong offset!");

// Function Flame.OnlineUserStatsComponent.GetUserStatistics
// 0x0010 (0x0010 - 0x0000)
struct OnlineUserStatsComponent_GetUserStatistics final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserStatsComponent_GetUserStatistics) == 0x000008, "Wrong alignment on OnlineUserStatsComponent_GetUserStatistics");
static_assert(sizeof(OnlineUserStatsComponent_GetUserStatistics) == 0x000010, "Wrong size on OnlineUserStatsComponent_GetUserStatistics");
static_assert(offsetof(OnlineUserStatsComponent_GetUserStatistics, Player) == 0x000000, "Member 'OnlineUserStatsComponent_GetUserStatistics::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserStatsComponent_GetUserStatistics, ReturnValue) == 0x000008, "Member 'OnlineUserStatsComponent_GetUserStatistics::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineUserStatsComponent.GetUserStatisticsDelegate__DelegateSignature
// 0x0418 (0x0418 - 0x0000)
struct OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudUserProfileStatistics            Data;                                              // 0x0058(0x03C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature");
static_assert(sizeof(OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature) == 0x000418, "Wrong size on OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature");
static_assert(offsetof(OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineUserStatsComponent_GetUserStatisticsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.WeaponPlan.GetWeaponClass
// 0x0008 (0x0008 - 0x0000)
struct WeaponPlan_GetWeaponClass final
{
public:
	TSubclassOf<class AWeapon>                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponPlan_GetWeaponClass) == 0x000008, "Wrong alignment on WeaponPlan_GetWeaponClass");
static_assert(sizeof(WeaponPlan_GetWeaponClass) == 0x000008, "Wrong size on WeaponPlan_GetWeaponClass");
static_assert(offsetof(WeaponPlan_GetWeaponClass, ReturnValue) == 0x000000, "Member 'WeaponPlan_GetWeaponClass::ReturnValue' has a wrong offset!");

// Function Flame.ItemRarities.GetItemRarities
// 0x0010 (0x0010 - 0x0000)
struct ItemRarities_GetItemRarities final
{
public:
	TArray<struct FItemRarity>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemRarities_GetItemRarities) == 0x000008, "Wrong alignment on ItemRarities_GetItemRarities");
static_assert(sizeof(ItemRarities_GetItemRarities) == 0x000010, "Wrong size on ItemRarities_GetItemRarities");
static_assert(offsetof(ItemRarities_GetItemRarities, ReturnValue) == 0x000000, "Member 'ItemRarities_GetItemRarities::ReturnValue' has a wrong offset!");

// Function Flame.PerformanceTests.dealayedCommand1
// 0x0018 (0x0018 - 0x0000)
struct PerformanceTests_DealayedCommand1 final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandType                                  CommandType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerformanceTests_DealayedCommand1) == 0x000008, "Wrong alignment on PerformanceTests_DealayedCommand1");
static_assert(sizeof(PerformanceTests_DealayedCommand1) == 0x000018, "Wrong size on PerformanceTests_DealayedCommand1");
static_assert(offsetof(PerformanceTests_DealayedCommand1, Command) == 0x000000, "Member 'PerformanceTests_DealayedCommand1::Command' has a wrong offset!");
static_assert(offsetof(PerformanceTests_DealayedCommand1, CommandType) == 0x000010, "Member 'PerformanceTests_DealayedCommand1::CommandType' has a wrong offset!");

// Function Flame.PerformanceTests.dealayedCommand2
// 0x0018 (0x0018 - 0x0000)
struct PerformanceTests_DealayedCommand2 final
{
public:
	class FString                                 Command;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommandType                                  CommandType;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerformanceTests_DealayedCommand2) == 0x000008, "Wrong alignment on PerformanceTests_DealayedCommand2");
static_assert(sizeof(PerformanceTests_DealayedCommand2) == 0x000018, "Wrong size on PerformanceTests_DealayedCommand2");
static_assert(offsetof(PerformanceTests_DealayedCommand2, Command) == 0x000000, "Member 'PerformanceTests_DealayedCommand2::Command' has a wrong offset!");
static_assert(offsetof(PerformanceTests_DealayedCommand2, CommandType) == 0x000010, "Member 'PerformanceTests_DealayedCommand2::CommandType' has a wrong offset!");

// Function Flame.PerformanceTests.DelayedWrite
// 0x0010 (0x0010 - 0x0000)
struct PerformanceTests_DelayedWrite final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerformanceTests_DelayedWrite) == 0x000008, "Wrong alignment on PerformanceTests_DelayedWrite");
static_assert(sizeof(PerformanceTests_DelayedWrite) == 0x000010, "Wrong size on PerformanceTests_DelayedWrite");
static_assert(offsetof(PerformanceTests_DelayedWrite, Filename) == 0x000000, "Member 'PerformanceTests_DelayedWrite::Filename' has a wrong offset!");

// Function Flame.PerformanceTests.performanceTestsTriggered
// 0x0004 (0x0004 - 0x0000)
struct PerformanceTests_PerformanceTestsTriggered final
{
public:
	int32                                         Mode;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerformanceTests_PerformanceTestsTriggered) == 0x000004, "Wrong alignment on PerformanceTests_PerformanceTestsTriggered");
static_assert(sizeof(PerformanceTests_PerformanceTestsTriggered) == 0x000004, "Wrong size on PerformanceTests_PerformanceTestsTriggered");
static_assert(offsetof(PerformanceTests_PerformanceTestsTriggered, Mode) == 0x000000, "Member 'PerformanceTests_PerformanceTestsTriggered::Mode' has a wrong offset!");

// Function Flame.NotificationListBase.AddNotification
// 0x0008 (0x0008 - 0x0000)
struct NotificationListBase_AddNotification final
{
public:
	class UNotificationBase*                      InNotification;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_AddNotification) == 0x000008, "Wrong alignment on NotificationListBase_AddNotification");
static_assert(sizeof(NotificationListBase_AddNotification) == 0x000008, "Wrong size on NotificationListBase_AddNotification");
static_assert(offsetof(NotificationListBase_AddNotification, InNotification) == 0x000000, "Member 'NotificationListBase_AddNotification::InNotification' has a wrong offset!");

// Function Flame.NotificationListBase.OnAddNotification
// 0x0008 (0x0008 - 0x0000)
struct NotificationListBase_OnAddNotification final
{
public:
	class UNotificationBase*                      InNotification;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_OnAddNotification) == 0x000008, "Wrong alignment on NotificationListBase_OnAddNotification");
static_assert(sizeof(NotificationListBase_OnAddNotification) == 0x000008, "Wrong size on NotificationListBase_OnAddNotification");
static_assert(offsetof(NotificationListBase_OnAddNotification, InNotification) == 0x000000, "Member 'NotificationListBase_OnAddNotification::InNotification' has a wrong offset!");

// Function Flame.NotificationListBase.OnMenuClosed
// 0x0008 (0x0008 - 0x0000)
struct NotificationListBase_OnMenuClosed final
{
public:
	class UMenuWidget*                            MenuWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_OnMenuClosed) == 0x000008, "Wrong alignment on NotificationListBase_OnMenuClosed");
static_assert(sizeof(NotificationListBase_OnMenuClosed) == 0x000008, "Wrong size on NotificationListBase_OnMenuClosed");
static_assert(offsetof(NotificationListBase_OnMenuClosed, MenuWidget) == 0x000000, "Member 'NotificationListBase_OnMenuClosed::MenuWidget' has a wrong offset!");

// Function Flame.NotificationListBase.OnMenuOpened
// 0x0008 (0x0008 - 0x0000)
struct NotificationListBase_OnMenuOpened final
{
public:
	class UMenuWidget*                            MenuWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_OnMenuOpened) == 0x000008, "Wrong alignment on NotificationListBase_OnMenuOpened");
static_assert(sizeof(NotificationListBase_OnMenuOpened) == 0x000008, "Wrong size on NotificationListBase_OnMenuOpened");
static_assert(offsetof(NotificationListBase_OnMenuOpened, MenuWidget) == 0x000000, "Member 'NotificationListBase_OnMenuOpened::MenuWidget' has a wrong offset!");

// Function Flame.NotificationListBase.FindNotificationToRemove
// 0x0008 (0x0008 - 0x0000)
struct NotificationListBase_FindNotificationToRemove final
{
public:
	class UNotificationBase*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_FindNotificationToRemove) == 0x000008, "Wrong alignment on NotificationListBase_FindNotificationToRemove");
static_assert(sizeof(NotificationListBase_FindNotificationToRemove) == 0x000008, "Wrong size on NotificationListBase_FindNotificationToRemove");
static_assert(offsetof(NotificationListBase_FindNotificationToRemove, ReturnValue) == 0x000000, "Member 'NotificationListBase_FindNotificationToRemove::ReturnValue' has a wrong offset!");

// Function Flame.NotificationListBase.GetChannels
// 0x0004 (0x0004 - 0x0000)
struct NotificationListBase_GetChannels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_GetChannels) == 0x000004, "Wrong alignment on NotificationListBase_GetChannels");
static_assert(sizeof(NotificationListBase_GetChannels) == 0x000004, "Wrong size on NotificationListBase_GetChannels");
static_assert(offsetof(NotificationListBase_GetChannels, ReturnValue) == 0x000000, "Member 'NotificationListBase_GetChannels::ReturnValue' has a wrong offset!");

// Function Flame.NotificationListBase.GetMinPriority
// 0x0004 (0x0004 - 0x0000)
struct NotificationListBase_GetMinPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationListBase_GetMinPriority) == 0x000004, "Wrong alignment on NotificationListBase_GetMinPriority");
static_assert(sizeof(NotificationListBase_GetMinPriority) == 0x000004, "Wrong size on NotificationListBase_GetMinPriority");
static_assert(offsetof(NotificationListBase_GetMinPriority, ReturnValue) == 0x000000, "Member 'NotificationListBase_GetMinPriority::ReturnValue' has a wrong offset!");

// Function Flame.ItemTransferWidget.OnSwapWeaponsClosed
// 0x0008 (0x0008 - 0x0000)
struct ItemTransferWidget_OnSwapWeaponsClosed final
{
public:
	class UFlameWidget*                           FlameWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_OnSwapWeaponsClosed) == 0x000008, "Wrong alignment on ItemTransferWidget_OnSwapWeaponsClosed");
static_assert(sizeof(ItemTransferWidget_OnSwapWeaponsClosed) == 0x000008, "Wrong size on ItemTransferWidget_OnSwapWeaponsClosed");
static_assert(offsetof(ItemTransferWidget_OnSwapWeaponsClosed, FlameWidget) == 0x000000, "Member 'ItemTransferWidget_OnSwapWeaponsClosed::FlameWidget' has a wrong offset!");

// Function Flame.ItemTransferWidget.TakeFlameSlot
// 0x0010 (0x0010 - 0x0000)
struct ItemTransferWidget_TakeFlameSlot final
{
public:
	class UFlameSlot*                             InFlameSlot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputIcon                                    InInputAction;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ItemTransferWidget_TakeFlameSlot) == 0x000008, "Wrong alignment on ItemTransferWidget_TakeFlameSlot");
static_assert(sizeof(ItemTransferWidget_TakeFlameSlot) == 0x000010, "Wrong size on ItemTransferWidget_TakeFlameSlot");
static_assert(offsetof(ItemTransferWidget_TakeFlameSlot, InFlameSlot) == 0x000000, "Member 'ItemTransferWidget_TakeFlameSlot::InFlameSlot' has a wrong offset!");
static_assert(offsetof(ItemTransferWidget_TakeFlameSlot, InInputAction) == 0x000008, "Member 'ItemTransferWidget_TakeFlameSlot::InInputAction' has a wrong offset!");

// Function Flame.ItemTransferWidget.IsDestroyAllowed
// 0x0001 (0x0001 - 0x0000)
struct ItemTransferWidget_IsDestroyAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemTransferWidget_IsDestroyAllowed) == 0x000001, "Wrong alignment on ItemTransferWidget_IsDestroyAllowed");
static_assert(sizeof(ItemTransferWidget_IsDestroyAllowed) == 0x000001, "Wrong size on ItemTransferWidget_IsDestroyAllowed");
static_assert(offsetof(ItemTransferWidget_IsDestroyAllowed, ReturnValue) == 0x000000, "Member 'ItemTransferWidget_IsDestroyAllowed::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.ConstructJsonObject
// 0x0010 (0x0010 - 0x0000)
struct JsonObject_ConstructJsonObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_ConstructJsonObject) == 0x000008, "Wrong alignment on JsonObject_ConstructJsonObject");
static_assert(sizeof(JsonObject_ConstructJsonObject) == 0x000010, "Wrong size on JsonObject_ConstructJsonObject");
static_assert(offsetof(JsonObject_ConstructJsonObject, WorldContextObject) == 0x000000, "Member 'JsonObject_ConstructJsonObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonObject_ConstructJsonObject, ReturnValue) == 0x000008, "Member 'JsonObject_ConstructJsonObject::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.ExportToString
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_ExportToString final
{
public:
	bool                                          Pretty;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_ExportToString) == 0x000008, "Wrong alignment on JsonObject_ExportToString");
static_assert(sizeof(JsonObject_ExportToString) == 0x000018, "Wrong size on JsonObject_ExportToString");
static_assert(offsetof(JsonObject_ExportToString, Pretty) == 0x000000, "Member 'JsonObject_ExportToString::Pretty' has a wrong offset!");
static_assert(offsetof(JsonObject_ExportToString, ReturnValue) == 0x000008, "Member 'JsonObject_ExportToString::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetFieldNames
// 0x0010 (0x0010 - 0x0000)
struct JsonObject_GetFieldNames final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetFieldNames) == 0x000008, "Wrong alignment on JsonObject_GetFieldNames");
static_assert(sizeof(JsonObject_GetFieldNames) == 0x000010, "Wrong size on JsonObject_GetFieldNames");
static_assert(offsetof(JsonObject_GetFieldNames, ReturnValue) == 0x000000, "Member 'JsonObject_GetFieldNames::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.MergeJsonObject
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_MergeJsonObject final
{
public:
	class UJsonObject*                            InJsonObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Overwrite;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonObject*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_MergeJsonObject) == 0x000008, "Wrong alignment on JsonObject_MergeJsonObject");
static_assert(sizeof(JsonObject_MergeJsonObject) == 0x000018, "Wrong size on JsonObject_MergeJsonObject");
static_assert(offsetof(JsonObject_MergeJsonObject, InJsonObject) == 0x000000, "Member 'JsonObject_MergeJsonObject::InJsonObject' has a wrong offset!");
static_assert(offsetof(JsonObject_MergeJsonObject, Overwrite) == 0x000008, "Member 'JsonObject_MergeJsonObject::Overwrite' has a wrong offset!");
static_assert(offsetof(JsonObject_MergeJsonObject, ReturnValue) == 0x000010, "Member 'JsonObject_MergeJsonObject::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.RemoveField
// 0x0010 (0x0010 - 0x0000)
struct JsonObject_RemoveField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_RemoveField) == 0x000008, "Wrong alignment on JsonObject_RemoveField");
static_assert(sizeof(JsonObject_RemoveField) == 0x000010, "Wrong size on JsonObject_RemoveField");
static_assert(offsetof(JsonObject_RemoveField, FieldName) == 0x000000, "Member 'JsonObject_RemoveField::FieldName' has a wrong offset!");

// Function Flame.JsonObject.SetArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJsonValue*>                     InArray;                                           // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetArrayField) == 0x000008, "Wrong alignment on JsonObject_SetArrayField");
static_assert(sizeof(JsonObject_SetArrayField) == 0x000028, "Wrong size on JsonObject_SetArrayField");
static_assert(offsetof(JsonObject_SetArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetArrayField, InArray) == 0x000010, "Member 'JsonObject_SetArrayField::InArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetBoolArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetBoolArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  BoolArray;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetBoolArrayField) == 0x000008, "Wrong alignment on JsonObject_SetBoolArrayField");
static_assert(sizeof(JsonObject_SetBoolArrayField) == 0x000028, "Wrong size on JsonObject_SetBoolArrayField");
static_assert(offsetof(JsonObject_SetBoolArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetBoolArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetBoolArrayField, BoolArray) == 0x000010, "Member 'JsonObject_SetBoolArrayField::BoolArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetBoolArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetBoolArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetBoolField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_SetBoolField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonObject*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetBoolField) == 0x000008, "Wrong alignment on JsonObject_SetBoolField");
static_assert(sizeof(JsonObject_SetBoolField) == 0x000020, "Wrong size on JsonObject_SetBoolField");
static_assert(offsetof(JsonObject_SetBoolField, FieldName) == 0x000000, "Member 'JsonObject_SetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetBoolField, InValue) == 0x000010, "Member 'JsonObject_SetBoolField::InValue' has a wrong offset!");
static_assert(offsetof(JsonObject_SetBoolField, ReturnValue) == 0x000018, "Member 'JsonObject_SetBoolField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_SetField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonValue*                             JsonValue;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetField) == 0x000008, "Wrong alignment on JsonObject_SetField");
static_assert(sizeof(JsonObject_SetField) == 0x000020, "Wrong size on JsonObject_SetField");
static_assert(offsetof(JsonObject_SetField, FieldName) == 0x000000, "Member 'JsonObject_SetField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetField, JsonValue) == 0x000010, "Member 'JsonObject_SetField::JsonValue' has a wrong offset!");
static_assert(offsetof(JsonObject_SetField, ReturnValue) == 0x000018, "Member 'JsonObject_SetField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetIntegerArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetIntegerArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 NumberArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetIntegerArrayField) == 0x000008, "Wrong alignment on JsonObject_SetIntegerArrayField");
static_assert(sizeof(JsonObject_SetIntegerArrayField) == 0x000028, "Wrong size on JsonObject_SetIntegerArrayField");
static_assert(offsetof(JsonObject_SetIntegerArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetIntegerArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetIntegerArrayField, NumberArray) == 0x000010, "Member 'JsonObject_SetIntegerArrayField::NumberArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetIntegerArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetIntegerArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetIntegerField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_SetIntegerField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonObject*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetIntegerField) == 0x000008, "Wrong alignment on JsonObject_SetIntegerField");
static_assert(sizeof(JsonObject_SetIntegerField) == 0x000020, "Wrong size on JsonObject_SetIntegerField");
static_assert(offsetof(JsonObject_SetIntegerField, FieldName) == 0x000000, "Member 'JsonObject_SetIntegerField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetIntegerField, Number) == 0x000010, "Member 'JsonObject_SetIntegerField::Number' has a wrong offset!");
static_assert(offsetof(JsonObject_SetIntegerField, ReturnValue) == 0x000018, "Member 'JsonObject_SetIntegerField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetNumberArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetNumberArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 NumberArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetNumberArrayField) == 0x000008, "Wrong alignment on JsonObject_SetNumberArrayField");
static_assert(sizeof(JsonObject_SetNumberArrayField) == 0x000028, "Wrong size on JsonObject_SetNumberArrayField");
static_assert(offsetof(JsonObject_SetNumberArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetNumberArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetNumberArrayField, NumberArray) == 0x000010, "Member 'JsonObject_SetNumberArrayField::NumberArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetNumberArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetNumberArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetNumberField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_SetNumberField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonObject*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetNumberField) == 0x000008, "Wrong alignment on JsonObject_SetNumberField");
static_assert(sizeof(JsonObject_SetNumberField) == 0x000020, "Wrong size on JsonObject_SetNumberField");
static_assert(offsetof(JsonObject_SetNumberField, FieldName) == 0x000000, "Member 'JsonObject_SetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetNumberField, Number) == 0x000010, "Member 'JsonObject_SetNumberField::Number' has a wrong offset!");
static_assert(offsetof(JsonObject_SetNumberField, ReturnValue) == 0x000018, "Member 'JsonObject_SetNumberField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetObjectArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetObjectArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJsonObject*>                    ObjectArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetObjectArrayField) == 0x000008, "Wrong alignment on JsonObject_SetObjectArrayField");
static_assert(sizeof(JsonObject_SetObjectArrayField) == 0x000028, "Wrong size on JsonObject_SetObjectArrayField");
static_assert(offsetof(JsonObject_SetObjectArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetObjectArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetObjectArrayField, ObjectArray) == 0x000010, "Member 'JsonObject_SetObjectArrayField::ObjectArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetObjectArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetObjectArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetObjectField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_SetObjectField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            JsonObject;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetObjectField) == 0x000008, "Wrong alignment on JsonObject_SetObjectField");
static_assert(sizeof(JsonObject_SetObjectField) == 0x000020, "Wrong size on JsonObject_SetObjectField");
static_assert(offsetof(JsonObject_SetObjectField, FieldName) == 0x000000, "Member 'JsonObject_SetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetObjectField, JsonObject) == 0x000010, "Member 'JsonObject_SetObjectField::JsonObject' has a wrong offset!");
static_assert(offsetof(JsonObject_SetObjectField, ReturnValue) == 0x000018, "Member 'JsonObject_SetObjectField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetStringArrayField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetStringArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StringArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetStringArrayField) == 0x000008, "Wrong alignment on JsonObject_SetStringArrayField");
static_assert(sizeof(JsonObject_SetStringArrayField) == 0x000028, "Wrong size on JsonObject_SetStringArrayField");
static_assert(offsetof(JsonObject_SetStringArrayField, FieldName) == 0x000000, "Member 'JsonObject_SetStringArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetStringArrayField, StringArray) == 0x000010, "Member 'JsonObject_SetStringArrayField::StringArray' has a wrong offset!");
static_assert(offsetof(JsonObject_SetStringArrayField, ReturnValue) == 0x000020, "Member 'JsonObject_SetStringArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.SetStringField
// 0x0028 (0x0028 - 0x0000)
struct JsonObject_SetStringField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_SetStringField) == 0x000008, "Wrong alignment on JsonObject_SetStringField");
static_assert(sizeof(JsonObject_SetStringField) == 0x000028, "Wrong size on JsonObject_SetStringField");
static_assert(offsetof(JsonObject_SetStringField, FieldName) == 0x000000, "Member 'JsonObject_SetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_SetStringField, StringValue) == 0x000010, "Member 'JsonObject_SetStringField::StringValue' has a wrong offset!");
static_assert(offsetof(JsonObject_SetStringField, ReturnValue) == 0x000020, "Member 'JsonObject_SetStringField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJsonValue*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetArrayField) == 0x000008, "Wrong alignment on JsonObject_GetArrayField");
static_assert(sizeof(JsonObject_GetArrayField) == 0x000020, "Wrong size on JsonObject_GetArrayField");
static_assert(offsetof(JsonObject_GetArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetBoolArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetBoolArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetBoolArrayField) == 0x000008, "Wrong alignment on JsonObject_GetBoolArrayField");
static_assert(sizeof(JsonObject_GetBoolArrayField) == 0x000020, "Wrong size on JsonObject_GetBoolArrayField");
static_assert(offsetof(JsonObject_GetBoolArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetBoolArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetBoolArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetBoolArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetBoolField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_GetBoolField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JsonObject_GetBoolField) == 0x000008, "Wrong alignment on JsonObject_GetBoolField");
static_assert(sizeof(JsonObject_GetBoolField) == 0x000018, "Wrong size on JsonObject_GetBoolField");
static_assert(offsetof(JsonObject_GetBoolField, FieldName) == 0x000000, "Member 'JsonObject_GetBoolField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetBoolField, ReturnValue) == 0x000010, "Member 'JsonObject_GetBoolField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_GetField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonValue*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetField) == 0x000008, "Wrong alignment on JsonObject_GetField");
static_assert(sizeof(JsonObject_GetField) == 0x000018, "Wrong size on JsonObject_GetField");
static_assert(offsetof(JsonObject_GetField, FieldName) == 0x000000, "Member 'JsonObject_GetField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetField, ReturnValue) == 0x000010, "Member 'JsonObject_GetField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetIntegerArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetIntegerArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetIntegerArrayField) == 0x000008, "Wrong alignment on JsonObject_GetIntegerArrayField");
static_assert(sizeof(JsonObject_GetIntegerArrayField) == 0x000020, "Wrong size on JsonObject_GetIntegerArrayField");
static_assert(offsetof(JsonObject_GetIntegerArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetIntegerArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetIntegerArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetIntegerArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetIntegerField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_GetIntegerField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JsonObject_GetIntegerField) == 0x000008, "Wrong alignment on JsonObject_GetIntegerField");
static_assert(sizeof(JsonObject_GetIntegerField) == 0x000018, "Wrong size on JsonObject_GetIntegerField");
static_assert(offsetof(JsonObject_GetIntegerField, FieldName) == 0x000000, "Member 'JsonObject_GetIntegerField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetIntegerField, ReturnValue) == 0x000010, "Member 'JsonObject_GetIntegerField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetNumberArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetNumberArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetNumberArrayField) == 0x000008, "Wrong alignment on JsonObject_GetNumberArrayField");
static_assert(sizeof(JsonObject_GetNumberArrayField) == 0x000020, "Wrong size on JsonObject_GetNumberArrayField");
static_assert(offsetof(JsonObject_GetNumberArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetNumberArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetNumberArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetNumberArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetNumberField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_GetNumberField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JsonObject_GetNumberField) == 0x000008, "Wrong alignment on JsonObject_GetNumberField");
static_assert(sizeof(JsonObject_GetNumberField) == 0x000018, "Wrong size on JsonObject_GetNumberField");
static_assert(offsetof(JsonObject_GetNumberField, FieldName) == 0x000000, "Member 'JsonObject_GetNumberField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetNumberField, ReturnValue) == 0x000010, "Member 'JsonObject_GetNumberField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetObjectArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetObjectArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJsonObject*>                    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetObjectArrayField) == 0x000008, "Wrong alignment on JsonObject_GetObjectArrayField");
static_assert(sizeof(JsonObject_GetObjectArrayField) == 0x000020, "Wrong size on JsonObject_GetObjectArrayField");
static_assert(offsetof(JsonObject_GetObjectArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetObjectArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetObjectArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetObjectArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetObjectField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_GetObjectField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetObjectField) == 0x000008, "Wrong alignment on JsonObject_GetObjectField");
static_assert(sizeof(JsonObject_GetObjectField) == 0x000018, "Wrong size on JsonObject_GetObjectField");
static_assert(offsetof(JsonObject_GetObjectField, FieldName) == 0x000000, "Member 'JsonObject_GetObjectField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetObjectField, ReturnValue) == 0x000010, "Member 'JsonObject_GetObjectField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetStringArrayField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetStringArrayField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetStringArrayField) == 0x000008, "Wrong alignment on JsonObject_GetStringArrayField");
static_assert(sizeof(JsonObject_GetStringArrayField) == 0x000020, "Wrong size on JsonObject_GetStringArrayField");
static_assert(offsetof(JsonObject_GetStringArrayField, FieldName) == 0x000000, "Member 'JsonObject_GetStringArrayField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetStringArrayField, ReturnValue) == 0x000010, "Member 'JsonObject_GetStringArrayField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.GetStringField
// 0x0020 (0x0020 - 0x0000)
struct JsonObject_GetStringField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonObject_GetStringField) == 0x000008, "Wrong alignment on JsonObject_GetStringField");
static_assert(sizeof(JsonObject_GetStringField) == 0x000020, "Wrong size on JsonObject_GetStringField");
static_assert(offsetof(JsonObject_GetStringField, FieldName) == 0x000000, "Member 'JsonObject_GetStringField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_GetStringField, ReturnValue) == 0x000010, "Member 'JsonObject_GetStringField::ReturnValue' has a wrong offset!");

// Function Flame.JsonObject.HasField
// 0x0018 (0x0018 - 0x0000)
struct JsonObject_HasField final
{
public:
	class FString                                 FieldName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(JsonObject_HasField) == 0x000008, "Wrong alignment on JsonObject_HasField");
static_assert(sizeof(JsonObject_HasField) == 0x000018, "Wrong size on JsonObject_HasField");
static_assert(offsetof(JsonObject_HasField, FieldName) == 0x000000, "Member 'JsonObject_HasField::FieldName' has a wrong offset!");
static_assert(offsetof(JsonObject_HasField, ReturnValue) == 0x000010, "Member 'JsonObject_HasField::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.ConstructJsonValueArray
// 0x0020 (0x0020 - 0x0000)
struct JsonValue_ConstructJsonValueArray final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UJsonValue*>                     InArray;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UJsonValue*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_ConstructJsonValueArray) == 0x000008, "Wrong alignment on JsonValue_ConstructJsonValueArray");
static_assert(sizeof(JsonValue_ConstructJsonValueArray) == 0x000020, "Wrong size on JsonValue_ConstructJsonValueArray");
static_assert(offsetof(JsonValue_ConstructJsonValueArray, WorldContextObject) == 0x000000, "Member 'JsonValue_ConstructJsonValueArray::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueArray, InArray) == 0x000008, "Member 'JsonValue_ConstructJsonValueArray::InArray' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueArray, ReturnValue) == 0x000018, "Member 'JsonValue_ConstructJsonValueArray::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.ConstructJsonValueBool
// 0x0018 (0x0018 - 0x0000)
struct JsonValue_ConstructJsonValueBool final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InValue;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonValue*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_ConstructJsonValueBool) == 0x000008, "Wrong alignment on JsonValue_ConstructJsonValueBool");
static_assert(sizeof(JsonValue_ConstructJsonValueBool) == 0x000018, "Wrong size on JsonValue_ConstructJsonValueBool");
static_assert(offsetof(JsonValue_ConstructJsonValueBool, WorldContextObject) == 0x000000, "Member 'JsonValue_ConstructJsonValueBool::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueBool, InValue) == 0x000008, "Member 'JsonValue_ConstructJsonValueBool::InValue' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueBool, ReturnValue) == 0x000010, "Member 'JsonValue_ConstructJsonValueBool::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.ConstructJsonValueNumber
// 0x0018 (0x0018 - 0x0000)
struct JsonValue_ConstructJsonValueNumber final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Number;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UJsonValue*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_ConstructJsonValueNumber) == 0x000008, "Wrong alignment on JsonValue_ConstructJsonValueNumber");
static_assert(sizeof(JsonValue_ConstructJsonValueNumber) == 0x000018, "Wrong size on JsonValue_ConstructJsonValueNumber");
static_assert(offsetof(JsonValue_ConstructJsonValueNumber, WorldContextObject) == 0x000000, "Member 'JsonValue_ConstructJsonValueNumber::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueNumber, Number) == 0x000008, "Member 'JsonValue_ConstructJsonValueNumber::Number' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueNumber, ReturnValue) == 0x000010, "Member 'JsonValue_ConstructJsonValueNumber::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.ConstructJsonValueObject
// 0x0018 (0x0018 - 0x0000)
struct JsonValue_ConstructJsonValueObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonObject*                            JsonObject;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonValue*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_ConstructJsonValueObject) == 0x000008, "Wrong alignment on JsonValue_ConstructJsonValueObject");
static_assert(sizeof(JsonValue_ConstructJsonValueObject) == 0x000018, "Wrong size on JsonValue_ConstructJsonValueObject");
static_assert(offsetof(JsonValue_ConstructJsonValueObject, WorldContextObject) == 0x000000, "Member 'JsonValue_ConstructJsonValueObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueObject, JsonObject) == 0x000008, "Member 'JsonValue_ConstructJsonValueObject::JsonObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueObject, ReturnValue) == 0x000010, "Member 'JsonValue_ConstructJsonValueObject::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.ConstructJsonValueString
// 0x0020 (0x0020 - 0x0000)
struct JsonValue_ConstructJsonValueString final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringValue;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJsonValue*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_ConstructJsonValueString) == 0x000008, "Wrong alignment on JsonValue_ConstructJsonValueString");
static_assert(sizeof(JsonValue_ConstructJsonValueString) == 0x000020, "Wrong size on JsonValue_ConstructJsonValueString");
static_assert(offsetof(JsonValue_ConstructJsonValueString, WorldContextObject) == 0x000000, "Member 'JsonValue_ConstructJsonValueString::WorldContextObject' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueString, StringValue) == 0x000008, "Member 'JsonValue_ConstructJsonValueString::StringValue' has a wrong offset!");
static_assert(offsetof(JsonValue_ConstructJsonValueString, ReturnValue) == 0x000018, "Member 'JsonValue_ConstructJsonValueString::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.AsObject
// 0x0008 (0x0008 - 0x0000)
struct JsonValue_AsObject final
{
public:
	class UJsonObject*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_AsObject) == 0x000008, "Wrong alignment on JsonValue_AsObject");
static_assert(sizeof(JsonValue_AsObject) == 0x000008, "Wrong size on JsonValue_AsObject");
static_assert(offsetof(JsonValue_AsObject, ReturnValue) == 0x000000, "Member 'JsonValue_AsObject::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.AsArray
// 0x0010 (0x0010 - 0x0000)
struct JsonValue_AsArray final
{
public:
	TArray<class UJsonValue*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_AsArray) == 0x000008, "Wrong alignment on JsonValue_AsArray");
static_assert(sizeof(JsonValue_AsArray) == 0x000010, "Wrong size on JsonValue_AsArray");
static_assert(offsetof(JsonValue_AsArray, ReturnValue) == 0x000000, "Member 'JsonValue_AsArray::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.AsBool
// 0x0001 (0x0001 - 0x0000)
struct JsonValue_AsBool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_AsBool) == 0x000001, "Wrong alignment on JsonValue_AsBool");
static_assert(sizeof(JsonValue_AsBool) == 0x000001, "Wrong size on JsonValue_AsBool");
static_assert(offsetof(JsonValue_AsBool, ReturnValue) == 0x000000, "Member 'JsonValue_AsBool::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.AsNumber
// 0x0004 (0x0004 - 0x0000)
struct JsonValue_AsNumber final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_AsNumber) == 0x000004, "Wrong alignment on JsonValue_AsNumber");
static_assert(sizeof(JsonValue_AsNumber) == 0x000004, "Wrong size on JsonValue_AsNumber");
static_assert(offsetof(JsonValue_AsNumber, ReturnValue) == 0x000000, "Member 'JsonValue_AsNumber::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.AsString
// 0x0010 (0x0010 - 0x0000)
struct JsonValue_AsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_AsString) == 0x000008, "Wrong alignment on JsonValue_AsString");
static_assert(sizeof(JsonValue_AsString) == 0x000010, "Wrong size on JsonValue_AsString");
static_assert(offsetof(JsonValue_AsString, ReturnValue) == 0x000000, "Member 'JsonValue_AsString::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.GetType
// 0x0001 (0x0001 - 0x0000)
struct JsonValue_GetType final
{
public:
	EJsonType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_GetType) == 0x000001, "Wrong alignment on JsonValue_GetType");
static_assert(sizeof(JsonValue_GetType) == 0x000001, "Wrong size on JsonValue_GetType");
static_assert(offsetof(JsonValue_GetType, ReturnValue) == 0x000000, "Member 'JsonValue_GetType::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.GetTypeString
// 0x0010 (0x0010 - 0x0000)
struct JsonValue_GetTypeString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_GetTypeString) == 0x000008, "Wrong alignment on JsonValue_GetTypeString");
static_assert(sizeof(JsonValue_GetTypeString) == 0x000010, "Wrong size on JsonValue_GetTypeString");
static_assert(offsetof(JsonValue_GetTypeString, ReturnValue) == 0x000000, "Member 'JsonValue_GetTypeString::ReturnValue' has a wrong offset!");

// Function Flame.JsonValue.IsNull
// 0x0001 (0x0001 - 0x0000)
struct JsonValue_IsNull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JsonValue_IsNull) == 0x000001, "Wrong alignment on JsonValue_IsNull");
static_assert(sizeof(JsonValue_IsNull) == 0x000001, "Wrong size on JsonValue_IsNull");
static_assert(offsetof(JsonValue_IsNull, ReturnValue) == 0x000000, "Member 'JsonValue_IsNull::ReturnValue' has a wrong offset!");

// Function Flame.LayeredSoundAudioComponent.SetLayerEnabled
// 0x0010 (0x0010 - 0x0000)
struct LayeredSoundAudioComponent_SetLayerEnabled final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLayer;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LayeredSoundAudioComponent_SetLayerEnabled) == 0x000004, "Wrong alignment on LayeredSoundAudioComponent_SetLayerEnabled");
static_assert(sizeof(LayeredSoundAudioComponent_SetLayerEnabled) == 0x000010, "Wrong size on LayeredSoundAudioComponent_SetLayerEnabled");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerEnabled, LayerName) == 0x000000, "Member 'LayeredSoundAudioComponent_SetLayerEnabled::LayerName' has a wrong offset!");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerEnabled, bEnableLayer) == 0x000008, "Member 'LayeredSoundAudioComponent_SetLayerEnabled::bEnableLayer' has a wrong offset!");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerEnabled, FadeTime) == 0x00000C, "Member 'LayeredSoundAudioComponent_SetLayerEnabled::FadeTime' has a wrong offset!");

// Function Flame.LayeredSoundAudioComponent.SetLayerValue
// 0x0010 (0x0010 - 0x0000)
struct LayeredSoundAudioComponent_SetLayerValue final
{
public:
	class FName                                   LayerName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LayeredSoundAudioComponent_SetLayerValue) == 0x000004, "Wrong alignment on LayeredSoundAudioComponent_SetLayerValue");
static_assert(sizeof(LayeredSoundAudioComponent_SetLayerValue) == 0x000010, "Wrong size on LayeredSoundAudioComponent_SetLayerValue");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerValue, LayerName) == 0x000000, "Member 'LayeredSoundAudioComponent_SetLayerValue::LayerName' has a wrong offset!");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerValue, Value) == 0x000008, "Member 'LayeredSoundAudioComponent_SetLayerValue::Value' has a wrong offset!");
static_assert(offsetof(LayeredSoundAudioComponent_SetLayerValue, FadeTime) == 0x00000C, "Member 'LayeredSoundAudioComponent_SetLayerValue::FadeTime' has a wrong offset!");

// Function Flame.LeaderboardSystemMonitor.OnLeaderboardReadCall
// 0x0014 (0x0014 - 0x0000)
struct LeaderboardSystemMonitor_OnLeaderboardReadCall final
{
public:
	struct FLeaderboardReadContext                BoardContext;                                      // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystemMonitor_OnLeaderboardReadCall) == 0x000004, "Wrong alignment on LeaderboardSystemMonitor_OnLeaderboardReadCall");
static_assert(sizeof(LeaderboardSystemMonitor_OnLeaderboardReadCall) == 0x000014, "Wrong size on LeaderboardSystemMonitor_OnLeaderboardReadCall");
static_assert(offsetof(LeaderboardSystemMonitor_OnLeaderboardReadCall, BoardContext) == 0x000000, "Member 'LeaderboardSystemMonitor_OnLeaderboardReadCall::BoardContext' has a wrong offset!");

// Function Flame.LeaderboardSystemMonitor.OnLeaderboardWriteCall
// 0x000C (0x000C - 0x0000)
struct LeaderboardSystemMonitor_OnLeaderboardWriteCall final
{
public:
	class FName                                   BoardName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerValue;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaderboardSystemMonitor_OnLeaderboardWriteCall) == 0x000004, "Wrong alignment on LeaderboardSystemMonitor_OnLeaderboardWriteCall");
static_assert(sizeof(LeaderboardSystemMonitor_OnLeaderboardWriteCall) == 0x00000C, "Wrong size on LeaderboardSystemMonitor_OnLeaderboardWriteCall");
static_assert(offsetof(LeaderboardSystemMonitor_OnLeaderboardWriteCall, BoardName) == 0x000000, "Member 'LeaderboardSystemMonitor_OnLeaderboardWriteCall::BoardName' has a wrong offset!");
static_assert(offsetof(LeaderboardSystemMonitor_OnLeaderboardWriteCall, PlayerValue) == 0x000008, "Member 'LeaderboardSystemMonitor_OnLeaderboardWriteCall::PlayerValue' has a wrong offset!");

// Function Flame.LoadoutWidget.GetFocusedItem
// 0x0008 (0x0008 - 0x0000)
struct LoadoutWidget_GetFocusedItem final
{
public:
	class AItem*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutWidget_GetFocusedItem) == 0x000008, "Wrong alignment on LoadoutWidget_GetFocusedItem");
static_assert(sizeof(LoadoutWidget_GetFocusedItem) == 0x000008, "Wrong size on LoadoutWidget_GetFocusedItem");
static_assert(offsetof(LoadoutWidget_GetFocusedItem, ReturnValue) == 0x000000, "Member 'LoadoutWidget_GetFocusedItem::ReturnValue' has a wrong offset!");

// Function Flame.LoadoutWidget.GetFocusedSlot
// 0x0008 (0x0008 - 0x0000)
struct LoadoutWidget_GetFocusedSlot final
{
public:
	class UFlameSlot*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutWidget_GetFocusedSlot) == 0x000008, "Wrong alignment on LoadoutWidget_GetFocusedSlot");
static_assert(sizeof(LoadoutWidget_GetFocusedSlot) == 0x000008, "Wrong size on LoadoutWidget_GetFocusedSlot");
static_assert(offsetof(LoadoutWidget_GetFocusedSlot, ReturnValue) == 0x000000, "Member 'LoadoutWidget_GetFocusedSlot::ReturnValue' has a wrong offset!");

// Function Flame.LoadoutWidget.IsDestroyAllowed
// 0x0001 (0x0001 - 0x0000)
struct LoadoutWidget_IsDestroyAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutWidget_IsDestroyAllowed) == 0x000001, "Wrong alignment on LoadoutWidget_IsDestroyAllowed");
static_assert(sizeof(LoadoutWidget_IsDestroyAllowed) == 0x000001, "Wrong size on LoadoutWidget_IsDestroyAllowed");
static_assert(offsetof(LoadoutWidget_IsDestroyAllowed, ReturnValue) == 0x000000, "Member 'LoadoutWidget_IsDestroyAllowed::ReturnValue' has a wrong offset!");

// Function Flame.LootableWeapon.LootWeapon
// 0x0010 (0x0010 - 0x0000)
struct LootableWeapon_LootWeapon final
{
public:
	class AHumanCharacter*                        TargetCharacter;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootableWeapon_LootWeapon) == 0x000008, "Wrong alignment on LootableWeapon_LootWeapon");
static_assert(sizeof(LootableWeapon_LootWeapon) == 0x000010, "Wrong size on LootableWeapon_LootWeapon");
static_assert(offsetof(LootableWeapon_LootWeapon, TargetCharacter) == 0x000000, "Member 'LootableWeapon_LootWeapon::TargetCharacter' has a wrong offset!");
static_assert(offsetof(LootableWeapon_LootWeapon, ReturnValue) == 0x000008, "Member 'LootableWeapon_LootWeapon::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.LootBoxComponent.AllLootBoxesInfoDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLootBoxesInfoCloud                    LootBoxesInfo;                                     // 0x0058(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature");
static_assert(sizeof(LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature) == 0x000068, "Wrong size on LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature");
static_assert(offsetof(LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature, LootBoxesInfo) == 0x000058, "Member 'LootBoxComponent_AllLootBoxesInfoDelegate__DelegateSignature::LootBoxesInfo' has a wrong offset!");

// Function Flame.LootBoxComponent.GetAllLootBoxesInfoItem
// 0x0010 (0x0010 - 0x0000)
struct LootBoxComponent_GetAllLootBoxesInfoItem final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootBoxComponent_GetAllLootBoxesInfoItem) == 0x000008, "Wrong alignment on LootBoxComponent_GetAllLootBoxesInfoItem");
static_assert(sizeof(LootBoxComponent_GetAllLootBoxesInfoItem) == 0x000010, "Wrong size on LootBoxComponent_GetAllLootBoxesInfoItem");
static_assert(offsetof(LootBoxComponent_GetAllLootBoxesInfoItem, Player) == 0x000000, "Member 'LootBoxComponent_GetAllLootBoxesInfoItem::Player' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_GetAllLootBoxesInfoItem, ReturnValue) == 0x000008, "Member 'LootBoxComponent_GetAllLootBoxesInfoItem::ReturnValue' has a wrong offset!");

// Function Flame.LootBoxComponent.GetLootBoxInfo
// 0x0020 (0x0020 - 0x0000)
struct LootBoxComponent_GetLootBoxInfo final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootBoxName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootBoxComponent_GetLootBoxInfo) == 0x000008, "Wrong alignment on LootBoxComponent_GetLootBoxInfo");
static_assert(sizeof(LootBoxComponent_GetLootBoxInfo) == 0x000020, "Wrong size on LootBoxComponent_GetLootBoxInfo");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfo, Player) == 0x000000, "Member 'LootBoxComponent_GetLootBoxInfo::Player' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfo, LootBoxName) == 0x000008, "Member 'LootBoxComponent_GetLootBoxInfo::LootBoxName' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfo, ReturnValue) == 0x000018, "Member 'LootBoxComponent_GetLootBoxInfo::ReturnValue' has a wrong offset!");

// Function Flame.LootBoxComponent.GetLootBoxInfoItem
// 0x0018 (0x0018 - 0x0000)
struct LootBoxComponent_GetLootBoxInfoItem final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      LootBox;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootBoxComponent_GetLootBoxInfoItem) == 0x000008, "Wrong alignment on LootBoxComponent_GetLootBoxInfoItem");
static_assert(sizeof(LootBoxComponent_GetLootBoxInfoItem) == 0x000018, "Wrong size on LootBoxComponent_GetLootBoxInfoItem");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfoItem, Player) == 0x000000, "Member 'LootBoxComponent_GetLootBoxInfoItem::Player' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfoItem, LootBox) == 0x000008, "Member 'LootBoxComponent_GetLootBoxInfoItem::LootBox' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_GetLootBoxInfoItem, ReturnValue) == 0x000010, "Member 'LootBoxComponent_GetLootBoxInfoItem::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.LootBoxComponent.LootBoxInfoDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct LootBoxComponent_LootBoxInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLootBoxInfoCloud                      LootBoxInfo;                                       // 0x0058(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootBoxComponent_LootBoxInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on LootBoxComponent_LootBoxInfoDelegate__DelegateSignature");
static_assert(sizeof(LootBoxComponent_LootBoxInfoDelegate__DelegateSignature) == 0x000088, "Wrong size on LootBoxComponent_LootBoxInfoDelegate__DelegateSignature");
static_assert(offsetof(LootBoxComponent_LootBoxInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'LootBoxComponent_LootBoxInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_LootBoxInfoDelegate__DelegateSignature, LootBoxInfo) == 0x000058, "Member 'LootBoxComponent_LootBoxInfoDelegate__DelegateSignature::LootBoxInfo' has a wrong offset!");

// Function Flame.LootBoxComponent.OpenLootBox
// 0x0020 (0x0020 - 0x0000)
struct LootBoxComponent_OpenLootBox final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LootBoxName;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootBoxComponent_OpenLootBox) == 0x000008, "Wrong alignment on LootBoxComponent_OpenLootBox");
static_assert(sizeof(LootBoxComponent_OpenLootBox) == 0x000020, "Wrong size on LootBoxComponent_OpenLootBox");
static_assert(offsetof(LootBoxComponent_OpenLootBox, Player) == 0x000000, "Member 'LootBoxComponent_OpenLootBox::Player' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_OpenLootBox, LootBoxName) == 0x000008, "Member 'LootBoxComponent_OpenLootBox::LootBoxName' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_OpenLootBox, ReturnValue) == 0x000018, "Member 'LootBoxComponent_OpenLootBox::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.LootBoxComponent.OpenLootBoxDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct LootBoxComponent_OpenLootBoxDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLootBoxOpenedCloudResult              LootBoxItems;                                      // 0x0058(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LootBoxComponent_OpenLootBoxDelegate__DelegateSignature) == 0x000008, "Wrong alignment on LootBoxComponent_OpenLootBoxDelegate__DelegateSignature");
static_assert(sizeof(LootBoxComponent_OpenLootBoxDelegate__DelegateSignature) == 0x000080, "Wrong size on LootBoxComponent_OpenLootBoxDelegate__DelegateSignature");
static_assert(offsetof(LootBoxComponent_OpenLootBoxDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'LootBoxComponent_OpenLootBoxDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_OpenLootBoxDelegate__DelegateSignature, LootBoxItems) == 0x000058, "Member 'LootBoxComponent_OpenLootBoxDelegate__DelegateSignature::LootBoxItems' has a wrong offset!");

// Function Flame.LootBoxComponent.OpenLootBoxItem
// 0x0018 (0x0018 - 0x0000)
struct LootBoxComponent_OpenLootBoxItem final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      LootBox;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LootBoxComponent_OpenLootBoxItem) == 0x000008, "Wrong alignment on LootBoxComponent_OpenLootBoxItem");
static_assert(sizeof(LootBoxComponent_OpenLootBoxItem) == 0x000018, "Wrong size on LootBoxComponent_OpenLootBoxItem");
static_assert(offsetof(LootBoxComponent_OpenLootBoxItem, Player) == 0x000000, "Member 'LootBoxComponent_OpenLootBoxItem::Player' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_OpenLootBoxItem, LootBox) == 0x000008, "Member 'LootBoxComponent_OpenLootBoxItem::LootBox' has a wrong offset!");
static_assert(offsetof(LootBoxComponent_OpenLootBoxItem, ReturnValue) == 0x000010, "Member 'LootBoxComponent_OpenLootBoxItem::ReturnValue' has a wrong offset!");

// Function Flame.MapsManager.GetGameInstance
// 0x0008 (0x0008 - 0x0000)
struct MapsManager_GetGameInstance final
{
public:
	class UFlameGameInstance*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapsManager_GetGameInstance) == 0x000008, "Wrong alignment on MapsManager_GetGameInstance");
static_assert(sizeof(MapsManager_GetGameInstance) == 0x000008, "Wrong size on MapsManager_GetGameInstance");
static_assert(offsetof(MapsManager_GetGameInstance, ReturnValue) == 0x000000, "Member 'MapsManager_GetGameInstance::ReturnValue' has a wrong offset!");

// Function Flame.MapsManager.GetMapsRotation
// 0x0010 (0x0010 - 0x0000)
struct MapsManager_GetMapsRotation final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapsManager_GetMapsRotation) == 0x000008, "Wrong alignment on MapsManager_GetMapsRotation");
static_assert(sizeof(MapsManager_GetMapsRotation) == 0x000010, "Wrong size on MapsManager_GetMapsRotation");
static_assert(offsetof(MapsManager_GetMapsRotation, Player) == 0x000000, "Member 'MapsManager_GetMapsRotation::Player' has a wrong offset!");
static_assert(offsetof(MapsManager_GetMapsRotation, ReturnValue) == 0x000008, "Member 'MapsManager_GetMapsRotation::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MapsManager.GetMapsRotationDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct MapsManager_GetMapsRotationDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Userid;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudMapRotationsResponse             Data;                                              // 0x0068(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapsManager_GetMapsRotationDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MapsManager_GetMapsRotationDelegate__DelegateSignature");
static_assert(sizeof(MapsManager_GetMapsRotationDelegate__DelegateSignature) == 0x000078, "Wrong size on MapsManager_GetMapsRotationDelegate__DelegateSignature");
static_assert(offsetof(MapsManager_GetMapsRotationDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MapsManager_GetMapsRotationDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MapsManager_GetMapsRotationDelegate__DelegateSignature, Userid) == 0x000058, "Member 'MapsManager_GetMapsRotationDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(MapsManager_GetMapsRotationDelegate__DelegateSignature, Data) == 0x000068, "Member 'MapsManager_GetMapsRotationDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.MapsManager.Tick
// 0x0004 (0x0004 - 0x0000)
struct MapsManager_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapsManager_Tick) == 0x000004, "Wrong alignment on MapsManager_Tick");
static_assert(sizeof(MapsManager_Tick) == 0x000004, "Wrong size on MapsManager_Tick");
static_assert(offsetof(MapsManager_Tick, DeltaTime) == 0x000000, "Member 'MapsManager_Tick::DeltaTime' has a wrong offset!");

// Function Flame.MapsManager.GetDefaultMapRotationSlot
// 0x0050 (0x0050 - 0x0000)
struct MapsManager_GetDefaultMapRotationSlot final
{
public:
	struct FCloudMapRotationSlot                  ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapsManager_GetDefaultMapRotationSlot) == 0x000008, "Wrong alignment on MapsManager_GetDefaultMapRotationSlot");
static_assert(sizeof(MapsManager_GetDefaultMapRotationSlot) == 0x000050, "Wrong size on MapsManager_GetDefaultMapRotationSlot");
static_assert(offsetof(MapsManager_GetDefaultMapRotationSlot, ReturnValue) == 0x000000, "Member 'MapsManager_GetDefaultMapRotationSlot::ReturnValue' has a wrong offset!");

// Function Flame.MatchInfoComponent.CommitMatchSettings
// 0x0018 (0x0018 - 0x0000)
struct MatchInfoComponent_CommitMatchSettings final
{
public:
	TArray<struct FCloudUserLobbyInfo>            UserInfos;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_CommitMatchSettings) == 0x000008, "Wrong alignment on MatchInfoComponent_CommitMatchSettings");
static_assert(sizeof(MatchInfoComponent_CommitMatchSettings) == 0x000018, "Wrong size on MatchInfoComponent_CommitMatchSettings");
static_assert(offsetof(MatchInfoComponent_CommitMatchSettings, UserInfos) == 0x000000, "Member 'MatchInfoComponent_CommitMatchSettings::UserInfos' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_CommitMatchSettings, ReturnValue) == 0x000010, "Member 'MatchInfoComponent_CommitMatchSettings::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.CommitMatchSettingsDelegate__DelegateSignature
// 0x00A0 (0x00A0 - 0x0000)
struct MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudMatchCommitInfo                  CloudSettings;                                     // 0x0058(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature) == 0x0000A0, "Wrong size on MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature, CloudSettings) == 0x000058, "Member 'MatchInfoComponent_CommitMatchSettingsDelegate__DelegateSignature::CloudSettings' has a wrong offset!");

// Function Flame.MatchInfoComponent.GetLootSettings
// 0x0004 (0x0004 - 0x0000)
struct MatchInfoComponent_GetLootSettings final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetLootSettings) == 0x000004, "Wrong alignment on MatchInfoComponent_GetLootSettings");
static_assert(sizeof(MatchInfoComponent_GetLootSettings) == 0x000004, "Wrong size on MatchInfoComponent_GetLootSettings");
static_assert(offsetof(MatchInfoComponent_GetLootSettings, ReturnValue) == 0x000000, "Member 'MatchInfoComponent_GetLootSettings::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.GetLootSettingsDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudLootSettings                     LootSettings;                                      // 0x0058(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature) == 0x000078, "Wrong size on MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature, LootSettings) == 0x000058, "Member 'MatchInfoComponent_GetLootSettingsDelegate__DelegateSignature::LootSettings' has a wrong offset!");

// Function Flame.MatchInfoComponent.GetMatchLoadouts
// 0x0020 (0x0020 - 0x0000)
struct MatchInfoComponent_GetMatchLoadouts final
{
public:
	struct FCloudGetMatchLoadoutsRequest          RequestSettings;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_GetMatchLoadouts) == 0x000008, "Wrong alignment on MatchInfoComponent_GetMatchLoadouts");
static_assert(sizeof(MatchInfoComponent_GetMatchLoadouts) == 0x000020, "Wrong size on MatchInfoComponent_GetMatchLoadouts");
static_assert(offsetof(MatchInfoComponent_GetMatchLoadouts, RequestSettings) == 0x000000, "Member 'MatchInfoComponent_GetMatchLoadouts::RequestSettings' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetMatchLoadouts, ReturnValue) == 0x000018, "Member 'MatchInfoComponent_GetMatchLoadouts::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.GetMatchLoadoutsDelegate__DelegateSignature
// 0x0090 (0x0090 - 0x0000)
struct MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudMatchLoadouts                    Loadouts;                                          // 0x0058(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature) == 0x000090, "Wrong size on MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature, Loadouts) == 0x000058, "Member 'MatchInfoComponent_GetMatchLoadoutsDelegate__DelegateSignature::Loadouts' has a wrong offset!");

// Function Flame.MatchInfoComponent.GetMatchSettings
// 0x0004 (0x0004 - 0x0000)
struct MatchInfoComponent_GetMatchSettings final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetMatchSettings) == 0x000004, "Wrong alignment on MatchInfoComponent_GetMatchSettings");
static_assert(sizeof(MatchInfoComponent_GetMatchSettings) == 0x000004, "Wrong size on MatchInfoComponent_GetMatchSettings");
static_assert(offsetof(MatchInfoComponent_GetMatchSettings, ReturnValue) == 0x000000, "Member 'MatchInfoComponent_GetMatchSettings::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.GetMatchSettingsDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudMatchSettingsInfo                CommitSettings;                                    // 0x0058(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature) == 0x000080, "Wrong size on MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature, CommitSettings) == 0x000058, "Member 'MatchInfoComponent_GetMatchSettingsDelegate__DelegateSignature::CommitSettings' has a wrong offset!");

// Function Flame.MatchInfoComponent.GetUserMatchesStatistic
// 0x0010 (0x0010 - 0x0000)
struct MatchInfoComponent_GetUserMatchesStatistic final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudUserMatchStatisticsPeriod               TimePeriod;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetUserMatchesStatistic) == 0x000008, "Wrong alignment on MatchInfoComponent_GetUserMatchesStatistic");
static_assert(sizeof(MatchInfoComponent_GetUserMatchesStatistic) == 0x000010, "Wrong size on MatchInfoComponent_GetUserMatchesStatistic");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatistic, Player) == 0x000000, "Member 'MatchInfoComponent_GetUserMatchesStatistic::Player' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatistic, TimePeriod) == 0x000008, "Member 'MatchInfoComponent_GetUserMatchesStatistic::TimePeriod' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatistic, ReturnValue) == 0x00000C, "Member 'MatchInfoComponent_GetUserMatchesStatistic::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.GetUserMatchesStatisticDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECloudUserMatchStatisticsPeriod               TimePeriod;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudUserMatchesStatistic             Data;                                              // 0x005C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature) == 0x000068, "Wrong size on MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, TimePeriod) == 0x000058, "Member 'MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::TimePeriod' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, Data) == 0x00005C, "Member 'MatchInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::Data' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.MatchStartedDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct MatchInfoComponent_MatchStartedDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_MatchStartedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_MatchStartedDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_MatchStartedDelegate__DelegateSignature) == 0x000068, "Wrong size on MatchInfoComponent_MatchStartedDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_MatchStartedDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_MatchStartedDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_MatchStartedDelegate__DelegateSignature, MatchID) == 0x000058, "Member 'MatchInfoComponent_MatchStartedDelegate__DelegateSignature::MatchID' has a wrong offset!");

// Function Flame.MatchInfoComponent.RegisterMatch
// 0x0028 (0x0028 - 0x0000)
struct MatchInfoComponent_RegisterMatch final
{
public:
	class FString                                 GameMode;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_RegisterMatch) == 0x000008, "Wrong alignment on MatchInfoComponent_RegisterMatch");
static_assert(sizeof(MatchInfoComponent_RegisterMatch) == 0x000028, "Wrong size on MatchInfoComponent_RegisterMatch");
static_assert(offsetof(MatchInfoComponent_RegisterMatch, GameMode) == 0x000000, "Member 'MatchInfoComponent_RegisterMatch::GameMode' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_RegisterMatch, Map) == 0x000010, "Member 'MatchInfoComponent_RegisterMatch::Map' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_RegisterMatch, ReturnValue) == 0x000020, "Member 'MatchInfoComponent_RegisterMatch::ReturnValue' has a wrong offset!");

// Function Flame.MatchInfoComponent.RegisterUserToMatch
// 0x0020 (0x0020 - 0x0000)
struct MatchInfoComponent_RegisterUserToMatch final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_RegisterUserToMatch) == 0x000008, "Wrong alignment on MatchInfoComponent_RegisterUserToMatch");
static_assert(sizeof(MatchInfoComponent_RegisterUserToMatch) == 0x000020, "Wrong size on MatchInfoComponent_RegisterUserToMatch");
static_assert(offsetof(MatchInfoComponent_RegisterUserToMatch, Player) == 0x000000, "Member 'MatchInfoComponent_RegisterUserToMatch::Player' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_RegisterUserToMatch, GroupName) == 0x000008, "Member 'MatchInfoComponent_RegisterUserToMatch::GroupName' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_RegisterUserToMatch, ReturnValue) == 0x000018, "Member 'MatchInfoComponent_RegisterUserToMatch::ReturnValue' has a wrong offset!");

// Function Flame.MatchInfoComponent.SetMatchResultForPlayer
// 0x0100 (0x0100 - 0x0000)
struct MatchInfoComponent_SetMatchResultForPlayer final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserMatchInfo                         MatchInfo;                                         // 0x0008(0x00F0)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x00F8(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_SetMatchResultForPlayer) == 0x000008, "Wrong alignment on MatchInfoComponent_SetMatchResultForPlayer");
static_assert(sizeof(MatchInfoComponent_SetMatchResultForPlayer) == 0x000100, "Wrong size on MatchInfoComponent_SetMatchResultForPlayer");
static_assert(offsetof(MatchInfoComponent_SetMatchResultForPlayer, Player) == 0x000000, "Member 'MatchInfoComponent_SetMatchResultForPlayer::Player' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetMatchResultForPlayer, MatchInfo) == 0x000008, "Member 'MatchInfoComponent_SetMatchResultForPlayer::MatchInfo' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetMatchResultForPlayer, ReturnValue) == 0x0000F8, "Member 'MatchInfoComponent_SetMatchResultForPlayer::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.SetPlayerMatchDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHumanPlayerController*                 Player;                                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserMatchReward                       Reward;                                            // 0x0060(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature) == 0x000070, "Wrong size on MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature, Player) == 0x000058, "Member 'MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature, Reward) == 0x000060, "Member 'MatchInfoComponent_SetPlayerMatchDelegate__DelegateSignature::Reward' has a wrong offset!");

// Function Flame.MatchInfoComponent.SetTutorialCompleted
// 0x0010 (0x0010 - 0x0000)
struct MatchInfoComponent_SetTutorialCompleted final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TutorialCompleted;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_SetTutorialCompleted) == 0x000008, "Wrong alignment on MatchInfoComponent_SetTutorialCompleted");
static_assert(sizeof(MatchInfoComponent_SetTutorialCompleted) == 0x000010, "Wrong size on MatchInfoComponent_SetTutorialCompleted");
static_assert(offsetof(MatchInfoComponent_SetTutorialCompleted, Player) == 0x000000, "Member 'MatchInfoComponent_SetTutorialCompleted::Player' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetTutorialCompleted, TutorialCompleted) == 0x000008, "Member 'MatchInfoComponent_SetTutorialCompleted::TutorialCompleted' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_SetTutorialCompleted, ReturnValue) == 0x00000C, "Member 'MatchInfoComponent_SetTutorialCompleted::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.SetTutorialCompletedDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature) == 0x000058, "Wrong size on MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_SetTutorialCompletedDelegate__DelegateSignature::RequestResult' has a wrong offset!");

// Function Flame.MatchInfoComponent.UnregisterMatch
// 0x0018 (0x0018 - 0x0000)
struct MatchInfoComponent_UnregisterMatch final
{
public:
	class FString                                 MatchCloudId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_UnregisterMatch) == 0x000008, "Wrong alignment on MatchInfoComponent_UnregisterMatch");
static_assert(sizeof(MatchInfoComponent_UnregisterMatch) == 0x000018, "Wrong size on MatchInfoComponent_UnregisterMatch");
static_assert(offsetof(MatchInfoComponent_UnregisterMatch, MatchCloudId) == 0x000000, "Member 'MatchInfoComponent_UnregisterMatch::MatchCloudId' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_UnregisterMatch, ReturnValue) == 0x000010, "Member 'MatchInfoComponent_UnregisterMatch::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.UnregisterMatchDelegate__DelegateSignature
// 0x0058 (0x0058 - 0x0000)
struct MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature) == 0x000058, "Wrong size on MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_UnregisterMatchDelegate__DelegateSignature::RequestResult' has a wrong offset!");

// Function Flame.MatchInfoComponent.UnregisterUserFromMatch
// 0x0018 (0x0018 - 0x0000)
struct MatchInfoComponent_UnregisterUserFromMatch final
{
public:
	class FString                                 Userid;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MatchInfoComponent_UnregisterUserFromMatch) == 0x000008, "Wrong alignment on MatchInfoComponent_UnregisterUserFromMatch");
static_assert(sizeof(MatchInfoComponent_UnregisterUserFromMatch) == 0x000018, "Wrong size on MatchInfoComponent_UnregisterUserFromMatch");
static_assert(offsetof(MatchInfoComponent_UnregisterUserFromMatch, Userid) == 0x000000, "Member 'MatchInfoComponent_UnregisterUserFromMatch::Userid' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_UnregisterUserFromMatch, ReturnValue) == 0x000010, "Member 'MatchInfoComponent_UnregisterUserFromMatch::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.UserRegisteredDelegate__DelegateSignature
// 0x0060 (0x0060 - 0x0000)
struct MatchInfoComponent_UserRegisteredDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHumanPlayerController*                 Player;                                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_UserRegisteredDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_UserRegisteredDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_UserRegisteredDelegate__DelegateSignature) == 0x000060, "Wrong size on MatchInfoComponent_UserRegisteredDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_UserRegisteredDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_UserRegisteredDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_UserRegisteredDelegate__DelegateSignature, Player) == 0x000058, "Member 'MatchInfoComponent_UserRegisteredDelegate__DelegateSignature::Player' has a wrong offset!");

// DelegateFunction Flame.MatchInfoComponent.UserUnregisteredDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Userid;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature) == 0x000008, "Wrong alignment on MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature");
static_assert(sizeof(MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature) == 0x000068, "Wrong size on MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature");
static_assert(offsetof(MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature, Userid) == 0x000058, "Member 'MatchInfoComponent_UserUnregisteredDelegate__DelegateSignature::Userid' has a wrong offset!");

// Function Flame.MatchInfoComponent.GetMatchId
// 0x0010 (0x0010 - 0x0000)
struct MatchInfoComponent_GetMatchId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchInfoComponent_GetMatchId) == 0x000008, "Wrong alignment on MatchInfoComponent_GetMatchId");
static_assert(sizeof(MatchInfoComponent_GetMatchId) == 0x000010, "Wrong size on MatchInfoComponent_GetMatchId");
static_assert(offsetof(MatchInfoComponent_GetMatchId, ReturnValue) == 0x000000, "Member 'MatchInfoComponent_GetMatchId::ReturnValue' has a wrong offset!");

// Function Flame.MessageBoxWidget.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct MessageBoxWidget_SetMessage final
{
public:
	class FText                                   InMessage;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageBoxWidget_SetMessage) == 0x000008, "Wrong alignment on MessageBoxWidget_SetMessage");
static_assert(sizeof(MessageBoxWidget_SetMessage) == 0x000018, "Wrong size on MessageBoxWidget_SetMessage");
static_assert(offsetof(MessageBoxWidget_SetMessage, InMessage) == 0x000000, "Member 'MessageBoxWidget_SetMessage::InMessage' has a wrong offset!");

// Function Flame.MessageBoxWidget.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct MessageBoxWidget_SetTitle final
{
public:
	class FText                                   InTitle;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageBoxWidget_SetTitle) == 0x000008, "Wrong alignment on MessageBoxWidget_SetTitle");
static_assert(sizeof(MessageBoxWidget_SetTitle) == 0x000018, "Wrong size on MessageBoxWidget_SetTitle");
static_assert(offsetof(MessageBoxWidget_SetTitle, InTitle) == 0x000000, "Member 'MessageBoxWidget_SetTitle::InTitle' has a wrong offset!");

// Function Flame.MessageBoxWidget.SetType
// 0x0001 (0x0001 - 0x0000)
struct MessageBoxWidget_SetType final
{
public:
	EMessageBoxType                               InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MessageBoxWidget_SetType) == 0x000001, "Wrong alignment on MessageBoxWidget_SetType");
static_assert(sizeof(MessageBoxWidget_SetType) == 0x000001, "Wrong size on MessageBoxWidget_SetType");
static_assert(offsetof(MessageBoxWidget_SetType, InType) == 0x000000, "Member 'MessageBoxWidget_SetType::InType' has a wrong offset!");

// Function Flame.MotionAimComponent.SetMotionAimEnabled
// 0x0003 (0x0003 - 0x0000)
struct MotionAimComponent_SetMotionAimEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlsoSixAxisSensors;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlsoAimAssist;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MotionAimComponent_SetMotionAimEnabled) == 0x000001, "Wrong alignment on MotionAimComponent_SetMotionAimEnabled");
static_assert(sizeof(MotionAimComponent_SetMotionAimEnabled) == 0x000003, "Wrong size on MotionAimComponent_SetMotionAimEnabled");
static_assert(offsetof(MotionAimComponent_SetMotionAimEnabled, bEnabled) == 0x000000, "Member 'MotionAimComponent_SetMotionAimEnabled::bEnabled' has a wrong offset!");
static_assert(offsetof(MotionAimComponent_SetMotionAimEnabled, bAlsoSixAxisSensors) == 0x000001, "Member 'MotionAimComponent_SetMotionAimEnabled::bAlsoSixAxisSensors' has a wrong offset!");
static_assert(offsetof(MotionAimComponent_SetMotionAimEnabled, bAlsoAimAssist) == 0x000002, "Member 'MotionAimComponent_SetMotionAimEnabled::bAlsoAimAssist' has a wrong offset!");

// Function Flame.NavLinkClimb.JumpAfterTime
// 0x0008 (0x0008 - 0x0000)
struct NavLinkClimb_JumpAfterTime final
{
public:
	class AHumanCharacter*                        HumanCharacter;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavLinkClimb_JumpAfterTime) == 0x000008, "Wrong alignment on NavLinkClimb_JumpAfterTime");
static_assert(sizeof(NavLinkClimb_JumpAfterTime) == 0x000008, "Wrong size on NavLinkClimb_JumpAfterTime");
static_assert(offsetof(NavLinkClimb_JumpAfterTime, HumanCharacter) == 0x000000, "Member 'NavLinkClimb_JumpAfterTime::HumanCharacter' has a wrong offset!");

// Function Flame.NavLinkClimb.OnActorBeginOverlapDelegate
// 0x00B0 (0x00B0 - 0x0000)
struct NavLinkClimb_OnActorBeginOverlapDelegate final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavLinkClimb_OnActorBeginOverlapDelegate) == 0x000008, "Wrong alignment on NavLinkClimb_OnActorBeginOverlapDelegate");
static_assert(sizeof(NavLinkClimb_OnActorBeginOverlapDelegate) == 0x0000B0, "Wrong size on NavLinkClimb_OnActorBeginOverlapDelegate");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, OverlappedComponent) == 0x000000, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, OtherActor) == 0x000008, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::OtherActor' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, OtherComp) == 0x000010, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::OtherComp' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, OtherBodyIndex) == 0x000018, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, bFromSweep) == 0x00001C, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::bFromSweep' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorBeginOverlapDelegate, SweepResult) == 0x000020, "Member 'NavLinkClimb_OnActorBeginOverlapDelegate::SweepResult' has a wrong offset!");

// Function Flame.NavLinkClimb.OnActorEndOverlapDelegate
// 0x0020 (0x0020 - 0x0000)
struct NavLinkClimb_OnActorEndOverlapDelegate final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavLinkClimb_OnActorEndOverlapDelegate) == 0x000008, "Wrong alignment on NavLinkClimb_OnActorEndOverlapDelegate");
static_assert(sizeof(NavLinkClimb_OnActorEndOverlapDelegate) == 0x000020, "Wrong size on NavLinkClimb_OnActorEndOverlapDelegate");
static_assert(offsetof(NavLinkClimb_OnActorEndOverlapDelegate, OverlappedComponent) == 0x000000, "Member 'NavLinkClimb_OnActorEndOverlapDelegate::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorEndOverlapDelegate, OtherActor) == 0x000008, "Member 'NavLinkClimb_OnActorEndOverlapDelegate::OtherActor' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorEndOverlapDelegate, OtherComp) == 0x000010, "Member 'NavLinkClimb_OnActorEndOverlapDelegate::OtherComp' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnActorEndOverlapDelegate, OtherBodyIndex) == 0x000018, "Member 'NavLinkClimb_OnActorEndOverlapDelegate::OtherBodyIndex' has a wrong offset!");

// Function Flame.NavLinkClimb.OnNavLinkReached
// 0x0020 (0x0020 - 0x0000)
struct NavLinkClimb_OnNavLinkReached final
{
public:
	class UNavLinkCustomComponent*                NavLinkComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavLinkClimb_OnNavLinkReached) == 0x000008, "Wrong alignment on NavLinkClimb_OnNavLinkReached");
static_assert(sizeof(NavLinkClimb_OnNavLinkReached) == 0x000020, "Wrong size on NavLinkClimb_OnNavLinkReached");
static_assert(offsetof(NavLinkClimb_OnNavLinkReached, NavLinkComponent) == 0x000000, "Member 'NavLinkClimb_OnNavLinkReached::NavLinkComponent' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnNavLinkReached, Actor) == 0x000008, "Member 'NavLinkClimb_OnNavLinkReached::Actor' has a wrong offset!");
static_assert(offsetof(NavLinkClimb_OnNavLinkReached, Destination) == 0x000010, "Member 'NavLinkClimb_OnNavLinkReached::Destination' has a wrong offset!");

// Function Flame.NotificationBase.ToString
// 0x0010 (0x0010 - 0x0000)
struct NotificationBase_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationBase_ToString) == 0x000008, "Wrong alignment on NotificationBase_ToString");
static_assert(sizeof(NotificationBase_ToString) == 0x000010, "Wrong size on NotificationBase_ToString");
static_assert(offsetof(NotificationBase_ToString, ReturnValue) == 0x000000, "Member 'NotificationBase_ToString::ReturnValue' has a wrong offset!");

// Function Flame.NotificationSubscriber.AddNotification
// 0x0008 (0x0008 - 0x0000)
struct NotificationSubscriber_AddNotification final
{
public:
	class UNotificationBase*                      InNotification;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationSubscriber_AddNotification) == 0x000008, "Wrong alignment on NotificationSubscriber_AddNotification");
static_assert(sizeof(NotificationSubscriber_AddNotification) == 0x000008, "Wrong size on NotificationSubscriber_AddNotification");
static_assert(offsetof(NotificationSubscriber_AddNotification, InNotification) == 0x000000, "Member 'NotificationSubscriber_AddNotification::InNotification' has a wrong offset!");

// Function Flame.NotificationSubscriber.GetChannels
// 0x0004 (0x0004 - 0x0000)
struct NotificationSubscriber_GetChannels final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationSubscriber_GetChannels) == 0x000004, "Wrong alignment on NotificationSubscriber_GetChannels");
static_assert(sizeof(NotificationSubscriber_GetChannels) == 0x000004, "Wrong size on NotificationSubscriber_GetChannels");
static_assert(offsetof(NotificationSubscriber_GetChannels, ReturnValue) == 0x000000, "Member 'NotificationSubscriber_GetChannels::ReturnValue' has a wrong offset!");

// Function Flame.NotificationSubscriber.GetMinPriority
// 0x0004 (0x0004 - 0x0000)
struct NotificationSubscriber_GetMinPriority final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NotificationSubscriber_GetMinPriority) == 0x000004, "Wrong alignment on NotificationSubscriber_GetMinPriority");
static_assert(sizeof(NotificationSubscriber_GetMinPriority) == 0x000004, "Wrong size on NotificationSubscriber_GetMinPriority");
static_assert(offsetof(NotificationSubscriber_GetMinPriority, ReturnValue) == 0x000000, "Member 'NotificationSubscriber_GetMinPriority::ReturnValue' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.ClaimUserChallenge
// 0x0028 (0x0028 - 0x0000)
struct OnlineChallengesComponent_ClaimUserChallenge final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotCategory;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeName;                                     // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_ClaimUserChallenge) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ClaimUserChallenge");
static_assert(sizeof(OnlineChallengesComponent_ClaimUserChallenge) == 0x000028, "Wrong size on OnlineChallengesComponent_ClaimUserChallenge");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallenge, Player) == 0x000000, "Member 'OnlineChallengesComponent_ClaimUserChallenge::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallenge, SlotCategory) == 0x000008, "Member 'OnlineChallengesComponent_ClaimUserChallenge::SlotCategory' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallenge, SlotId) == 0x000018, "Member 'OnlineChallengesComponent_ClaimUserChallenge::SlotId' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallenge, ChallengeName) == 0x00001C, "Member 'OnlineChallengesComponent_ClaimUserChallenge::ChallengeName' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallenge, ReturnValue) == 0x000024, "Member 'OnlineChallengesComponent_ClaimUserChallenge::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.ClaimUserChallengeDelegate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudChallengeClaimResult             ClaimResult;                                       // 0x0058(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature) == 0x0000C8, "Wrong size on OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature, ClaimResult) == 0x000058, "Member 'OnlineChallengesComponent_ClaimUserChallengeDelegate__DelegateSignature::ClaimResult' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.ClaimUserSeasonChallenge
// 0x0010 (0x0010 - 0x0000)
struct OnlineChallengesComponent_ClaimUserSeasonChallenge final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_ClaimUserSeasonChallenge) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ClaimUserSeasonChallenge");
static_assert(sizeof(OnlineChallengesComponent_ClaimUserSeasonChallenge) == 0x000010, "Wrong size on OnlineChallengesComponent_ClaimUserSeasonChallenge");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserSeasonChallenge, Player) == 0x000000, "Member 'OnlineChallengesComponent_ClaimUserSeasonChallenge::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserSeasonChallenge, ReturnValue) == 0x000008, "Member 'OnlineChallengesComponent_ClaimUserSeasonChallenge::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.ClaimUserSeasonChallengeDelegate__DelegateSignature
// 0x0078 (0x0078 - 0x0000)
struct OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudSeasonChallengeClaimResult       ClaimResult;                                       // 0x0058(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature) == 0x000078, "Wrong size on OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature, ClaimResult) == 0x000058, "Member 'OnlineChallengesComponent_ClaimUserSeasonChallengeDelegate__DelegateSignature::ClaimResult' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.GetUserChallengeSlots
// 0x0010 (0x0010 - 0x0000)
struct OnlineChallengesComponent_GetUserChallengeSlots final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_GetUserChallengeSlots) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserChallengeSlots");
static_assert(sizeof(OnlineChallengesComponent_GetUserChallengeSlots) == 0x000010, "Wrong size on OnlineChallengesComponent_GetUserChallengeSlots");
static_assert(offsetof(OnlineChallengesComponent_GetUserChallengeSlots, Player) == 0x000000, "Member 'OnlineChallengesComponent_GetUserChallengeSlots::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserChallengeSlots, ReturnValue) == 0x000008, "Member 'OnlineChallengesComponent_GetUserChallengeSlots::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.GetUserChallengeSlotsDelegate__DelegateSignature
// 0x00B0 (0x00B0 - 0x0000)
struct OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudGetChallengeResponse             Response;                                          // 0x0058(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature) == 0x0000B0, "Wrong size on OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature, Response) == 0x000058, "Member 'OnlineChallengesComponent_GetUserChallengeSlotsDelegate__DelegateSignature::Response' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.GetUserSeasonChallengeProgress
// 0x0010 (0x0010 - 0x0000)
struct OnlineChallengesComponent_GetUserSeasonChallengeProgress final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_GetUserSeasonChallengeProgress) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserSeasonChallengeProgress");
static_assert(sizeof(OnlineChallengesComponent_GetUserSeasonChallengeProgress) == 0x000010, "Wrong size on OnlineChallengesComponent_GetUserSeasonChallengeProgress");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeProgress, Player) == 0x000000, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeProgress::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeProgress, ReturnValue) == 0x000008, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeProgress::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.GetUserSeasonChallengeProgressDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudSeasonChallengeProgressResult    Response;                                          // 0x0058(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature) == 0x000068, "Wrong size on OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature, Response) == 0x000058, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeProgressDelegate__DelegateSignature::Response' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.GetUserSeasonChallengeRewards
// 0x0010 (0x0010 - 0x0000)
struct OnlineChallengesComponent_GetUserSeasonChallengeRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_GetUserSeasonChallengeRewards) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserSeasonChallengeRewards");
static_assert(sizeof(OnlineChallengesComponent_GetUserSeasonChallengeRewards) == 0x000010, "Wrong size on OnlineChallengesComponent_GetUserSeasonChallengeRewards");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeRewards, Player) == 0x000000, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeRewards::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeRewards, ReturnValue) == 0x000008, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.GetUserSeasonChallengeRewardsDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudSeasonChallengeRewardsResult     Response;                                          // 0x0058(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature) == 0x000068, "Wrong size on OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature, Response) == 0x000058, "Member 'OnlineChallengesComponent_GetUserSeasonChallengeRewardsDelegate__DelegateSignature::Response' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.ReRollUserChallenge
// 0x0028 (0x0028 - 0x0000)
struct OnlineChallengesComponent_ReRollUserChallenge final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotCategory;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeName;                                     // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_ReRollUserChallenge) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ReRollUserChallenge");
static_assert(sizeof(OnlineChallengesComponent_ReRollUserChallenge) == 0x000028, "Wrong size on OnlineChallengesComponent_ReRollUserChallenge");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallenge, Player) == 0x000000, "Member 'OnlineChallengesComponent_ReRollUserChallenge::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallenge, SlotCategory) == 0x000008, "Member 'OnlineChallengesComponent_ReRollUserChallenge::SlotCategory' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallenge, SlotId) == 0x000018, "Member 'OnlineChallengesComponent_ReRollUserChallenge::SlotId' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallenge, ChallengeName) == 0x00001C, "Member 'OnlineChallengesComponent_ReRollUserChallenge::ChallengeName' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallenge, ReturnValue) == 0x000024, "Member 'OnlineChallengesComponent_ReRollUserChallenge::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.ReRollUserChallengeDelegate__DelegateSignature
// 0x00C8 (0x00C8 - 0x0000)
struct OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudChallengeClaimResult             Response;                                          // 0x0058(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature) == 0x0000C8, "Wrong size on OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature, Response) == 0x000058, "Member 'OnlineChallengesComponent_ReRollUserChallengeDelegate__DelegateSignature::Response' has a wrong offset!");

// Function Flame.OnlineChallengesComponent.SetUserChallengeProgress
// 0x0030 (0x0030 - 0x0000)
struct OnlineChallengesComponent_SetUserChallengeProgress final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotCategory;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotId;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChallengeName;                                     // 0x001C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineChallengesComponent_SetUserChallengeProgress) == 0x000008, "Wrong alignment on OnlineChallengesComponent_SetUserChallengeProgress");
static_assert(sizeof(OnlineChallengesComponent_SetUserChallengeProgress) == 0x000030, "Wrong size on OnlineChallengesComponent_SetUserChallengeProgress");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, Player) == 0x000000, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::Player' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, SlotCategory) == 0x000008, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::SlotCategory' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, SlotId) == 0x000018, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::SlotId' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, ChallengeName) == 0x00001C, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::ChallengeName' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, Progress) == 0x000024, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::Progress' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgress, ReturnValue) == 0x000028, "Member 'OnlineChallengesComponent_SetUserChallengeProgress::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineChallengesComponent.SetUserChallengeProgressDelegate__DelegateSignature
// 0x00A8 (0x00A8 - 0x0000)
struct OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudChallengeSlotInfo                ProgressResult;                                    // 0x0058(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature");
static_assert(sizeof(OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature) == 0x0000A8, "Wrong size on OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature, ProgressResult) == 0x000058, "Member 'OnlineChallengesComponent_SetUserChallengeProgressDelegate__DelegateSignature::ProgressResult' has a wrong offset!");

// Function Flame.OnlineMapRewardsComponent.GetMapRewards
// 0x0010 (0x0010 - 0x0000)
struct OnlineMapRewardsComponent_GetMapRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineMapRewardsComponent_GetMapRewards) == 0x000008, "Wrong alignment on OnlineMapRewardsComponent_GetMapRewards");
static_assert(sizeof(OnlineMapRewardsComponent_GetMapRewards) == 0x000010, "Wrong size on OnlineMapRewardsComponent_GetMapRewards");
static_assert(offsetof(OnlineMapRewardsComponent_GetMapRewards, Player) == 0x000000, "Member 'OnlineMapRewardsComponent_GetMapRewards::Player' has a wrong offset!");
static_assert(offsetof(OnlineMapRewardsComponent_GetMapRewards, ReturnValue) == 0x000008, "Member 'OnlineMapRewardsComponent_GetMapRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineMapRewardsComponent.GetMapRewardsDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudMapRewardsResult                 Data;                                              // 0x0058(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature) == 0x000068, "Wrong size on OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineMapRewardsComponent_GetMapRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineUserLeaderBoardsComponent.GetUserLeaderBoardDetail
// 0x0040 (0x0040 - 0x0000)
struct OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudUserLeaderBoardDetailRequest     Req;                                               // 0x0008(0x0030)(Parm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail) == 0x000008, "Wrong alignment on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail");
static_assert(sizeof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail) == 0x000040, "Wrong size on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail, Player) == 0x000000, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail, Req) == 0x000008, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail::Req' has a wrong offset!");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail, ReturnValue) == 0x000038, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetail::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineUserLeaderBoardsComponent.GetUserLeaderBoardDetailDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudUserLeaderBoardDetailDto         Data;                                              // 0x0058(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature");
static_assert(sizeof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature) == 0x000088, "Wrong size on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardDetailDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineUserLeaderBoardsComponent.GetUserLeaderBoards
// 0x0010 (0x0010 - 0x0000)
struct OnlineUserLeaderBoardsComponent_GetUserLeaderBoards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoards) == 0x000008, "Wrong alignment on OnlineUserLeaderBoardsComponent_GetUserLeaderBoards");
static_assert(sizeof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoards) == 0x000010, "Wrong size on OnlineUserLeaderBoardsComponent_GetUserLeaderBoards");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoards, Player) == 0x000000, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoards::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoards, ReturnValue) == 0x000008, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineUserLeaderBoardsComponent.GetUserLeaderBoardsDelegate__DelegateSignature
// 0x03B8 (0x03B8 - 0x0000)
struct OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudUserLeaderBoards                 Data;                                              // 0x0058(0x0360)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature");
static_assert(sizeof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature) == 0x0003B8, "Wrong size on OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineUserLeaderBoardsComponent_GetUserLeaderBoardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.OnlineWipeRewardsComponent.GetUserWipeRewards
// 0x0010 (0x0010 - 0x0000)
struct OnlineWipeRewardsComponent_GetUserWipeRewards final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineWipeRewardsComponent_GetUserWipeRewards) == 0x000008, "Wrong alignment on OnlineWipeRewardsComponent_GetUserWipeRewards");
static_assert(sizeof(OnlineWipeRewardsComponent_GetUserWipeRewards) == 0x000010, "Wrong size on OnlineWipeRewardsComponent_GetUserWipeRewards");
static_assert(offsetof(OnlineWipeRewardsComponent_GetUserWipeRewards, Player) == 0x000000, "Member 'OnlineWipeRewardsComponent_GetUserWipeRewards::Player' has a wrong offset!");
static_assert(offsetof(OnlineWipeRewardsComponent_GetUserWipeRewards, ReturnValue) == 0x000008, "Member 'OnlineWipeRewardsComponent_GetUserWipeRewards::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineWipeRewardsComponent.GetUserWipeRewardsDelegate__DelegateSignature
// 0x0088 (0x0088 - 0x0000)
struct OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudUserWipeRewards                  Data;                                              // 0x0058(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature");
static_assert(sizeof(OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature) == 0x000088, "Wrong size on OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature");
static_assert(offsetof(OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature, Data) == 0x000058, "Member 'OnlineWipeRewardsComponent_GetUserWipeRewardsDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.PhysicsFunctions.GetHitOptimisedSurfaceType
// 0x0040 (0x0040 - 0x0000)
struct PhysicsFunctions_GetHitOptimisedSurfaceType final
{
public:
	struct FHitResultSimplified                   HitOptimised;                                      // 0x0000(0x003C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsFunctions_GetHitOptimisedSurfaceType) == 0x000004, "Wrong alignment on PhysicsFunctions_GetHitOptimisedSurfaceType");
static_assert(sizeof(PhysicsFunctions_GetHitOptimisedSurfaceType) == 0x000040, "Wrong size on PhysicsFunctions_GetHitOptimisedSurfaceType");
static_assert(offsetof(PhysicsFunctions_GetHitOptimisedSurfaceType, HitOptimised) == 0x000000, "Member 'PhysicsFunctions_GetHitOptimisedSurfaceType::HitOptimised' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_GetHitOptimisedSurfaceType, ReturnValue) == 0x00003C, "Member 'PhysicsFunctions_GetHitOptimisedSurfaceType::ReturnValue' has a wrong offset!");

// Function Flame.PhysicsFunctions.GetHitSurfaceType
// 0x0090 (0x0090 - 0x0000)
struct PhysicsFunctions_GetHitSurfaceType final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x008C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsFunctions_GetHitSurfaceType) == 0x000004, "Wrong alignment on PhysicsFunctions_GetHitSurfaceType");
static_assert(sizeof(PhysicsFunctions_GetHitSurfaceType) == 0x000090, "Wrong size on PhysicsFunctions_GetHitSurfaceType");
static_assert(offsetof(PhysicsFunctions_GetHitSurfaceType, HitResult) == 0x000000, "Member 'PhysicsFunctions_GetHitSurfaceType::HitResult' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_GetHitSurfaceType, ReturnValue) == 0x00008C, "Member 'PhysicsFunctions_GetHitSurfaceType::ReturnValue' has a wrong offset!");

// Function Flame.PhysicsFunctions.IsPointInBuilding
// 0x0018 (0x0018 - 0x0000)
struct PhysicsFunctions_IsPointInBuilding final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointToTest;                                       // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsFunctions_IsPointInBuilding) == 0x000008, "Wrong alignment on PhysicsFunctions_IsPointInBuilding");
static_assert(sizeof(PhysicsFunctions_IsPointInBuilding) == 0x000018, "Wrong size on PhysicsFunctions_IsPointInBuilding");
static_assert(offsetof(PhysicsFunctions_IsPointInBuilding, WorldContextObject) == 0x000000, "Member 'PhysicsFunctions_IsPointInBuilding::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInBuilding, PointToTest) == 0x000008, "Member 'PhysicsFunctions_IsPointInBuilding::PointToTest' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInBuilding, ReturnValue) == 0x000014, "Member 'PhysicsFunctions_IsPointInBuilding::ReturnValue' has a wrong offset!");

// Function Flame.PhysicsFunctions.IsPointInWater
// 0x0030 (0x0030 - 0x0000)
struct PhysicsFunctions_IsPointInWater final
{
public:
	float                                         Depth;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WaterSurfaceLocation;                              // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PointToTest;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectionLength;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PhysicsFunctions_IsPointInWater) == 0x000008, "Wrong alignment on PhysicsFunctions_IsPointInWater");
static_assert(sizeof(PhysicsFunctions_IsPointInWater) == 0x000030, "Wrong size on PhysicsFunctions_IsPointInWater");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, Depth) == 0x000000, "Member 'PhysicsFunctions_IsPointInWater::Depth' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, WaterSurfaceLocation) == 0x000004, "Member 'PhysicsFunctions_IsPointInWater::WaterSurfaceLocation' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, WorldContextObject) == 0x000010, "Member 'PhysicsFunctions_IsPointInWater::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, PointToTest) == 0x000018, "Member 'PhysicsFunctions_IsPointInWater::PointToTest' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, DetectionLength) == 0x000024, "Member 'PhysicsFunctions_IsPointInWater::DetectionLength' has a wrong offset!");
static_assert(offsetof(PhysicsFunctions_IsPointInWater, ReturnValue) == 0x000028, "Member 'PhysicsFunctions_IsPointInWater::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.GetPlatformStoreOffersManager
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreSystem_GetPlatformStoreOffersManager final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlatformStoreOffersManager*            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_GetPlatformStoreOffersManager) == 0x000008, "Wrong alignment on PlatformStoreSystem_GetPlatformStoreOffersManager");
static_assert(sizeof(PlatformStoreSystem_GetPlatformStoreOffersManager) == 0x000010, "Wrong size on PlatformStoreSystem_GetPlatformStoreOffersManager");
static_assert(offsetof(PlatformStoreSystem_GetPlatformStoreOffersManager, WorldContextObject) == 0x000000, "Member 'PlatformStoreSystem_GetPlatformStoreOffersManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_GetPlatformStoreOffersManager, ReturnValue) == 0x000008, "Member 'PlatformStoreSystem_GetPlatformStoreOffersManager::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.CheckoutInSystemShop
// 0x0040 (0x0040 - 0x0000)
struct PlatformStoreSystem_CheckoutInSystemShop final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductId;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_CheckoutInSystemShop) == 0x000008, "Wrong alignment on PlatformStoreSystem_CheckoutInSystemShop");
static_assert(sizeof(PlatformStoreSystem_CheckoutInSystemShop) == 0x000040, "Wrong size on PlatformStoreSystem_CheckoutInSystemShop");
static_assert(offsetof(PlatformStoreSystem_CheckoutInSystemShop, InUserId) == 0x000000, "Member 'PlatformStoreSystem_CheckoutInSystemShop::InUserId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_CheckoutInSystemShop, ProductId) == 0x000028, "Member 'PlatformStoreSystem_CheckoutInSystemShop::ProductId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_CheckoutInSystemShop, ReturnValue) == 0x000038, "Member 'PlatformStoreSystem_CheckoutInSystemShop::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.GetCurrentPurchaseRequest
// 0x0008 (0x0008 - 0x0000)
struct PlatformStoreSystem_GetCurrentPurchaseRequest final
{
public:
	class UPlatformStorePurchaseHandlerBase*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_GetCurrentPurchaseRequest) == 0x000008, "Wrong alignment on PlatformStoreSystem_GetCurrentPurchaseRequest");
static_assert(sizeof(PlatformStoreSystem_GetCurrentPurchaseRequest) == 0x000008, "Wrong size on PlatformStoreSystem_GetCurrentPurchaseRequest");
static_assert(offsetof(PlatformStoreSystem_GetCurrentPurchaseRequest, ReturnValue) == 0x000000, "Member 'PlatformStoreSystem_GetCurrentPurchaseRequest::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.OnPurchaseFinished
// 0x0090 (0x0090 - 0x0000)
struct PlatformStoreSystem_OnPurchaseFinished final
{
public:
	struct FCloudRequestResult                    CloudRequestResult;                                // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FGameStorePurchaseResult               GameStorePurchaseResult;                           // 0x0058(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_OnPurchaseFinished) == 0x000008, "Wrong alignment on PlatformStoreSystem_OnPurchaseFinished");
static_assert(sizeof(PlatformStoreSystem_OnPurchaseFinished) == 0x000090, "Wrong size on PlatformStoreSystem_OnPurchaseFinished");
static_assert(offsetof(PlatformStoreSystem_OnPurchaseFinished, CloudRequestResult) == 0x000000, "Member 'PlatformStoreSystem_OnPurchaseFinished::CloudRequestResult' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_OnPurchaseFinished, GameStorePurchaseResult) == 0x000058, "Member 'PlatformStoreSystem_OnPurchaseFinished::GameStorePurchaseResult' has a wrong offset!");

// Function Flame.PlatformStoreSystem.OnStoreOverlayActivated
// 0x0001 (0x0001 - 0x0000)
struct PlatformStoreSystem_OnStoreOverlayActivated final
{
public:
	bool                                          bIsActive;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_OnStoreOverlayActivated) == 0x000001, "Wrong alignment on PlatformStoreSystem_OnStoreOverlayActivated");
static_assert(sizeof(PlatformStoreSystem_OnStoreOverlayActivated) == 0x000001, "Wrong size on PlatformStoreSystem_OnStoreOverlayActivated");
static_assert(offsetof(PlatformStoreSystem_OnStoreOverlayActivated, bIsActive) == 0x000000, "Member 'PlatformStoreSystem_OnStoreOverlayActivated::bIsActive' has a wrong offset!");

// Function Flame.PlatformStoreSystem.OpenSystemShop
// 0x0008 (0x0008 - 0x0000)
struct PlatformStoreSystem_OpenSystemShop final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_OpenSystemShop) == 0x000004, "Wrong alignment on PlatformStoreSystem_OpenSystemShop");
static_assert(sizeof(PlatformStoreSystem_OpenSystemShop) == 0x000008, "Wrong size on PlatformStoreSystem_OpenSystemShop");
static_assert(offsetof(PlatformStoreSystem_OpenSystemShop, ControllerId) == 0x000000, "Member 'PlatformStoreSystem_OpenSystemShop::ControllerId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_OpenSystemShop, ReturnValue) == 0x000004, "Member 'PlatformStoreSystem_OpenSystemShop::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.OpenSystemShopItem
// 0x0020 (0x0020 - 0x0000)
struct PlatformStoreSystem_OpenSystemShopItem final
{
public:
	int32                                         ControllerId;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlatformProductId;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_OpenSystemShopItem) == 0x000008, "Wrong alignment on PlatformStoreSystem_OpenSystemShopItem");
static_assert(sizeof(PlatformStoreSystem_OpenSystemShopItem) == 0x000020, "Wrong size on PlatformStoreSystem_OpenSystemShopItem");
static_assert(offsetof(PlatformStoreSystem_OpenSystemShopItem, ControllerId) == 0x000000, "Member 'PlatformStoreSystem_OpenSystemShopItem::ControllerId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_OpenSystemShopItem, PlatformProductId) == 0x000008, "Member 'PlatformStoreSystem_OpenSystemShopItem::PlatformProductId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_OpenSystemShopItem, ReturnValue) == 0x000018, "Member 'PlatformStoreSystem_OpenSystemShopItem::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.PlatformStoreSystem.RefreshPlatformPurchasesFinished__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequestResult                    Result;                                            // 0x0028(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature) == 0x000008, "Wrong alignment on PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature");
static_assert(sizeof(PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature) == 0x000080, "Wrong size on PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature");
static_assert(offsetof(PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature, Userid) == 0x000000, "Member 'PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature, Result) == 0x000028, "Member 'PlatformStoreSystem_RefreshPlatformPurchasesFinished__DelegateSignature::Result' has a wrong offset!");

// Function Flame.PlatformStoreSystem.RefreshPlatformPurchasesOnCloud
// 0x0038 (0x0038 - 0x0000)
struct PlatformStoreSystem_RefreshPlatformPurchasesOnCloud final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       ControllerUserId;                                  // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_RefreshPlatformPurchasesOnCloud) == 0x000008, "Wrong alignment on PlatformStoreSystem_RefreshPlatformPurchasesOnCloud");
static_assert(sizeof(PlatformStoreSystem_RefreshPlatformPurchasesOnCloud) == 0x000038, "Wrong size on PlatformStoreSystem_RefreshPlatformPurchasesOnCloud");
static_assert(offsetof(PlatformStoreSystem_RefreshPlatformPurchasesOnCloud, Controller) == 0x000000, "Member 'PlatformStoreSystem_RefreshPlatformPurchasesOnCloud::Controller' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_RefreshPlatformPurchasesOnCloud, ControllerUserId) == 0x000008, "Member 'PlatformStoreSystem_RefreshPlatformPurchasesOnCloud::ControllerUserId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_RefreshPlatformPurchasesOnCloud, ReturnValue) == 0x000030, "Member 'PlatformStoreSystem_RefreshPlatformPurchasesOnCloud::ReturnValue' has a wrong offset!");

// Function Flame.PlatformStoreSystem.SetPurchaseFinishedDelegate
// 0x0010 (0x0010 - 0x0000)
struct PlatformStoreSystem_SetPurchaseFinishedDelegate final
{
public:
	TDelegate<void(struct FCloudRequestResult& CloudRequestResult, struct FGameStorePurchaseResult& GameStorePurchaseResult)> Callback;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_SetPurchaseFinishedDelegate) == 0x000004, "Wrong alignment on PlatformStoreSystem_SetPurchaseFinishedDelegate");
static_assert(sizeof(PlatformStoreSystem_SetPurchaseFinishedDelegate) == 0x000010, "Wrong size on PlatformStoreSystem_SetPurchaseFinishedDelegate");
static_assert(offsetof(PlatformStoreSystem_SetPurchaseFinishedDelegate, Callback) == 0x000000, "Member 'PlatformStoreSystem_SetPurchaseFinishedDelegate::Callback' has a wrong offset!");

// Function Flame.PlatformStoreSystem.ShowLastPlatfromRefreshErrorMessage
// 0x0030 (0x0030 - 0x0000)
struct PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearError;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage) == 0x000008, "Wrong alignment on PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage");
static_assert(sizeof(PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage) == 0x000030, "Wrong size on PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage");
static_assert(offsetof(PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage, InUserId) == 0x000000, "Member 'PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage::InUserId' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage, ClearError) == 0x000028, "Member 'PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage::ClearError' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage, ReturnValue) == 0x000029, "Member 'PlatformStoreSystem_ShowLastPlatfromRefreshErrorMessage::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.PlatformStoreSystem.SystemShopClosed__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PlatformStoreSystem_SystemShopClosed__DelegateSignature final
{
public:
	bool                                          Purchased;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformStoreSystem_SystemShopClosed__DelegateSignature) == 0x000001, "Wrong alignment on PlatformStoreSystem_SystemShopClosed__DelegateSignature");
static_assert(sizeof(PlatformStoreSystem_SystemShopClosed__DelegateSignature) == 0x000001, "Wrong size on PlatformStoreSystem_SystemShopClosed__DelegateSignature");
static_assert(offsetof(PlatformStoreSystem_SystemShopClosed__DelegateSignature, Purchased) == 0x000000, "Member 'PlatformStoreSystem_SystemShopClosed__DelegateSignature::Purchased' has a wrong offset!");

// Function Flame.PlatformStoreSystem.IsAllowedToMakePurchases
// 0x0030 (0x0030 - 0x0000)
struct PlatformStoreSystem_IsAllowedToMakePurchases final
{
public:
	struct FUniqueNetIdRepl                       Userid;                                            // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformStoreSystem_IsAllowedToMakePurchases) == 0x000008, "Wrong alignment on PlatformStoreSystem_IsAllowedToMakePurchases");
static_assert(sizeof(PlatformStoreSystem_IsAllowedToMakePurchases) == 0x000030, "Wrong size on PlatformStoreSystem_IsAllowedToMakePurchases");
static_assert(offsetof(PlatformStoreSystem_IsAllowedToMakePurchases, Userid) == 0x000000, "Member 'PlatformStoreSystem_IsAllowedToMakePurchases::Userid' has a wrong offset!");
static_assert(offsetof(PlatformStoreSystem_IsAllowedToMakePurchases, ReturnValue) == 0x000028, "Member 'PlatformStoreSystem_IsAllowedToMakePurchases::ReturnValue' has a wrong offset!");

// Function Flame.PlatformToolsSteam.IsMicrotransactionEnabled
// 0x0001 (0x0001 - 0x0000)
struct PlatformToolsSteam_IsMicrotransactionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformToolsSteam_IsMicrotransactionEnabled) == 0x000001, "Wrong alignment on PlatformToolsSteam_IsMicrotransactionEnabled");
static_assert(sizeof(PlatformToolsSteam_IsMicrotransactionEnabled) == 0x000001, "Wrong size on PlatformToolsSteam_IsMicrotransactionEnabled");
static_assert(offsetof(PlatformToolsSteam_IsMicrotransactionEnabled, ReturnValue) == 0x000000, "Member 'PlatformToolsSteam_IsMicrotransactionEnabled::ReturnValue' has a wrong offset!");

// Function Flame.PlatformToolsSteam.IsOverlayEnabled
// 0x0001 (0x0001 - 0x0000)
struct PlatformToolsSteam_IsOverlayEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformToolsSteam_IsOverlayEnabled) == 0x000001, "Wrong alignment on PlatformToolsSteam_IsOverlayEnabled");
static_assert(sizeof(PlatformToolsSteam_IsOverlayEnabled) == 0x000001, "Wrong size on PlatformToolsSteam_IsOverlayEnabled");
static_assert(offsetof(PlatformToolsSteam_IsOverlayEnabled, ReturnValue) == 0x000000, "Member 'PlatformToolsSteam_IsOverlayEnabled::ReturnValue' has a wrong offset!");

// Function Flame.PlayerGroupInfo.CheckNewPlayer
// 0x0010 (0x0010 - 0x0000)
struct PlayerGroupInfo_CheckNewPlayer final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerGroupInfo_CheckNewPlayer) == 0x000008, "Wrong alignment on PlayerGroupInfo_CheckNewPlayer");
static_assert(sizeof(PlayerGroupInfo_CheckNewPlayer) == 0x000010, "Wrong size on PlayerGroupInfo_CheckNewPlayer");
static_assert(offsetof(PlayerGroupInfo_CheckNewPlayer, Controller) == 0x000000, "Member 'PlayerGroupInfo_CheckNewPlayer::Controller' has a wrong offset!");
static_assert(offsetof(PlayerGroupInfo_CheckNewPlayer, ReturnValue) == 0x000008, "Member 'PlayerGroupInfo_CheckNewPlayer::ReturnValue' has a wrong offset!");

// Function Flame.PlayerGroupInfo.FindPlayerStartForController
// 0x0010 (0x0010 - 0x0000)
struct PlayerGroupInfo_FindPlayerStartForController final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStartFlame*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerGroupInfo_FindPlayerStartForController) == 0x000008, "Wrong alignment on PlayerGroupInfo_FindPlayerStartForController");
static_assert(sizeof(PlayerGroupInfo_FindPlayerStartForController) == 0x000010, "Wrong size on PlayerGroupInfo_FindPlayerStartForController");
static_assert(offsetof(PlayerGroupInfo_FindPlayerStartForController, Controller) == 0x000000, "Member 'PlayerGroupInfo_FindPlayerStartForController::Controller' has a wrong offset!");
static_assert(offsetof(PlayerGroupInfo_FindPlayerStartForController, ReturnValue) == 0x000008, "Member 'PlayerGroupInfo_FindPlayerStartForController::ReturnValue' has a wrong offset!");

// Function Flame.PlayerGroupInfo.GetControllers
// 0x0010 (0x0010 - 0x0000)
struct PlayerGroupInfo_GetControllers final
{
public:
	TArray<class AHumanPlayerController*>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerGroupInfo_GetControllers) == 0x000008, "Wrong alignment on PlayerGroupInfo_GetControllers");
static_assert(sizeof(PlayerGroupInfo_GetControllers) == 0x000010, "Wrong size on PlayerGroupInfo_GetControllers");
static_assert(offsetof(PlayerGroupInfo_GetControllers, ReturnValue) == 0x000000, "Member 'PlayerGroupInfo_GetControllers::ReturnValue' has a wrong offset!");

// Function Flame.PlayerGroupInfo.GetPrimaryGroupStart
// 0x0008 (0x0008 - 0x0000)
struct PlayerGroupInfo_GetPrimaryGroupStart final
{
public:
	class APlayerStartPrimary*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerGroupInfo_GetPrimaryGroupStart) == 0x000008, "Wrong alignment on PlayerGroupInfo_GetPrimaryGroupStart");
static_assert(sizeof(PlayerGroupInfo_GetPrimaryGroupStart) == 0x000008, "Wrong size on PlayerGroupInfo_GetPrimaryGroupStart");
static_assert(offsetof(PlayerGroupInfo_GetPrimaryGroupStart, ReturnValue) == 0x000000, "Member 'PlayerGroupInfo_GetPrimaryGroupStart::ReturnValue' has a wrong offset!");

// Function Flame.PlayerGroupInfo.GetPlayerCount
// 0x0008 (0x0008 - 0x0000)
struct PlayerGroupInfo_GetPlayerCount final
{
public:
	bool                                          OnlyActive;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerGroupInfo_GetPlayerCount) == 0x000004, "Wrong alignment on PlayerGroupInfo_GetPlayerCount");
static_assert(sizeof(PlayerGroupInfo_GetPlayerCount) == 0x000008, "Wrong size on PlayerGroupInfo_GetPlayerCount");
static_assert(offsetof(PlayerGroupInfo_GetPlayerCount, OnlyActive) == 0x000000, "Member 'PlayerGroupInfo_GetPlayerCount::OnlyActive' has a wrong offset!");
static_assert(offsetof(PlayerGroupInfo_GetPlayerCount, ReturnValue) == 0x000004, "Member 'PlayerGroupInfo_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Flame.PlayerInfoWidget.SetPlayerNetId
// 0x0028 (0x0028 - 0x0000)
struct PlayerInfoWidget_SetPlayerNetId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoWidget_SetPlayerNetId) == 0x000008, "Wrong alignment on PlayerInfoWidget_SetPlayerNetId");
static_assert(sizeof(PlayerInfoWidget_SetPlayerNetId) == 0x000028, "Wrong size on PlayerInfoWidget_SetPlayerNetId");
static_assert(offsetof(PlayerInfoWidget_SetPlayerNetId, InPlayerNetId) == 0x000000, "Member 'PlayerInfoWidget_SetPlayerNetId::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayerInfoWidget.IsValidPlayer
// 0x0001 (0x0001 - 0x0000)
struct PlayerInfoWidget_IsValidPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInfoWidget_IsValidPlayer) == 0x000001, "Wrong alignment on PlayerInfoWidget_IsValidPlayer");
static_assert(sizeof(PlayerInfoWidget_IsValidPlayer) == 0x000001, "Wrong size on PlayerInfoWidget_IsValidPlayer");
static_assert(offsetof(PlayerInfoWidget_IsValidPlayer, ReturnValue) == 0x000000, "Member 'PlayerInfoWidget_IsValidPlayer::ReturnValue' has a wrong offset!");

// Function Flame.PlayerLobby.SelectNextLobbyStartForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PlayerLobby_SelectNextLobbyStartForPlayer final
{
public:
	class AController*                            Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStartFlame*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLobby_SelectNextLobbyStartForPlayer) == 0x000008, "Wrong alignment on PlayerLobby_SelectNextLobbyStartForPlayer");
static_assert(sizeof(PlayerLobby_SelectNextLobbyStartForPlayer) == 0x000010, "Wrong size on PlayerLobby_SelectNextLobbyStartForPlayer");
static_assert(offsetof(PlayerLobby_SelectNextLobbyStartForPlayer, Player) == 0x000000, "Member 'PlayerLobby_SelectNextLobbyStartForPlayer::Player' has a wrong offset!");
static_assert(offsetof(PlayerLobby_SelectNextLobbyStartForPlayer, ReturnValue) == 0x000008, "Member 'PlayerLobby_SelectNextLobbyStartForPlayer::ReturnValue' has a wrong offset!");

// Function Flame.PlayerLobby.SetReady
// 0x0008 (0x0008 - 0x0000)
struct PlayerLobby_SetReady final
{
public:
	class UMarketplaceComponent*                  TheInstigator;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLobby_SetReady) == 0x000008, "Wrong alignment on PlayerLobby_SetReady");
static_assert(sizeof(PlayerLobby_SetReady) == 0x000008, "Wrong size on PlayerLobby_SetReady");
static_assert(offsetof(PlayerLobby_SetReady, TheInstigator) == 0x000000, "Member 'PlayerLobby_SetReady::TheInstigator' has a wrong offset!");

// Function Flame.PlayerNicknameWidget.AdjustIconSizeToFontSize
// 0x0010 (0x0010 - 0x0000)
struct PlayerNicknameWidget_AdjustIconSizeToFontSize final
{
public:
	int32                                         FontSize;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 Icon;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNicknameWidget_AdjustIconSizeToFontSize) == 0x000008, "Wrong alignment on PlayerNicknameWidget_AdjustIconSizeToFontSize");
static_assert(sizeof(PlayerNicknameWidget_AdjustIconSizeToFontSize) == 0x000010, "Wrong size on PlayerNicknameWidget_AdjustIconSizeToFontSize");
static_assert(offsetof(PlayerNicknameWidget_AdjustIconSizeToFontSize, FontSize) == 0x000000, "Member 'PlayerNicknameWidget_AdjustIconSizeToFontSize::FontSize' has a wrong offset!");
static_assert(offsetof(PlayerNicknameWidget_AdjustIconSizeToFontSize, Icon) == 0x000008, "Member 'PlayerNicknameWidget_AdjustIconSizeToFontSize::Icon' has a wrong offset!");

// Function Flame.PlayerNicknameWidget.SetDefaultNameAndPlatform
// 0x0018 (0x0018 - 0x0000)
struct PlayerNicknameWidget_SetDefaultNameAndPlatform final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlamePlatform                                Platform;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerNicknameWidget_SetDefaultNameAndPlatform) == 0x000008, "Wrong alignment on PlayerNicknameWidget_SetDefaultNameAndPlatform");
static_assert(sizeof(PlayerNicknameWidget_SetDefaultNameAndPlatform) == 0x000018, "Wrong size on PlayerNicknameWidget_SetDefaultNameAndPlatform");
static_assert(offsetof(PlayerNicknameWidget_SetDefaultNameAndPlatform, Name_0) == 0x000000, "Member 'PlayerNicknameWidget_SetDefaultNameAndPlatform::Name_0' has a wrong offset!");
static_assert(offsetof(PlayerNicknameWidget_SetDefaultNameAndPlatform, Platform) == 0x000010, "Member 'PlayerNicknameWidget_SetDefaultNameAndPlatform::Platform' has a wrong offset!");

// Function Flame.PlayerNicknameWidget.SetMaximumCharacters
// 0x0004 (0x0004 - 0x0000)
struct PlayerNicknameWidget_SetMaximumCharacters final
{
public:
	int32                                         Max;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNicknameWidget_SetMaximumCharacters) == 0x000004, "Wrong alignment on PlayerNicknameWidget_SetMaximumCharacters");
static_assert(sizeof(PlayerNicknameWidget_SetMaximumCharacters) == 0x000004, "Wrong size on PlayerNicknameWidget_SetMaximumCharacters");
static_assert(offsetof(PlayerNicknameWidget_SetMaximumCharacters, Max) == 0x000000, "Member 'PlayerNicknameWidget_SetMaximumCharacters::Max' has a wrong offset!");

// Function Flame.PlayerNicknameWidget.SetPlayerNetId
// 0x0028 (0x0028 - 0x0000)
struct PlayerNicknameWidget_SetPlayerNetId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNicknameWidget_SetPlayerNetId) == 0x000008, "Wrong alignment on PlayerNicknameWidget_SetPlayerNetId");
static_assert(sizeof(PlayerNicknameWidget_SetPlayerNetId) == 0x000028, "Wrong size on PlayerNicknameWidget_SetPlayerNetId");
static_assert(offsetof(PlayerNicknameWidget_SetPlayerNetId, InPlayerNetId) == 0x000000, "Member 'PlayerNicknameWidget_SetPlayerNetId::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayerNicknameWidget.SetPlayerOfflineInfo
// 0x0040 (0x0040 - 0x0000)
struct PlayerNicknameWidget_SetPlayerOfflineInfo final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlamePlatform                                Platform;                                          // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerNicknameWidget_SetPlayerOfflineInfo) == 0x000008, "Wrong alignment on PlayerNicknameWidget_SetPlayerOfflineInfo");
static_assert(sizeof(PlayerNicknameWidget_SetPlayerOfflineInfo) == 0x000040, "Wrong size on PlayerNicknameWidget_SetPlayerOfflineInfo");
static_assert(offsetof(PlayerNicknameWidget_SetPlayerOfflineInfo, InPlayerNetId) == 0x000000, "Member 'PlayerNicknameWidget_SetPlayerOfflineInfo::InPlayerNetId' has a wrong offset!");
static_assert(offsetof(PlayerNicknameWidget_SetPlayerOfflineInfo, Name_0) == 0x000028, "Member 'PlayerNicknameWidget_SetPlayerOfflineInfo::Name_0' has a wrong offset!");
static_assert(offsetof(PlayerNicknameWidget_SetPlayerOfflineInfo, Platform) == 0x000038, "Member 'PlayerNicknameWidget_SetPlayerOfflineInfo::Platform' has a wrong offset!");

// Function Flame.PlayerNotification.SetPlayerNetId
// 0x0028 (0x0028 - 0x0000)
struct PlayerNotification_SetPlayerNetId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerNotification_SetPlayerNetId) == 0x000008, "Wrong alignment on PlayerNotification_SetPlayerNetId");
static_assert(sizeof(PlayerNotification_SetPlayerNetId) == 0x000028, "Wrong size on PlayerNotification_SetPlayerNetId");
static_assert(offsetof(PlayerNotification_SetPlayerNetId, InPlayerNetId) == 0x000000, "Member 'PlayerNotification_SetPlayerNetId::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayerPresenceWidget.OnPresenceUpdated
// 0x0001 (0x0001 - 0x0000)
struct PlayerPresenceWidget_OnPresenceUpdated final
{
public:
	EPlayerPresence                               InPresence;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPresenceWidget_OnPresenceUpdated) == 0x000001, "Wrong alignment on PlayerPresenceWidget_OnPresenceUpdated");
static_assert(sizeof(PlayerPresenceWidget_OnPresenceUpdated) == 0x000001, "Wrong size on PlayerPresenceWidget_OnPresenceUpdated");
static_assert(offsetof(PlayerPresenceWidget_OnPresenceUpdated, InPresence) == 0x000000, "Member 'PlayerPresenceWidget_OnPresenceUpdated::InPresence' has a wrong offset!");

// Function Flame.PlayerPresenceWidget.SetPlayerNetId
// 0x0028 (0x0028 - 0x0000)
struct PlayerPresenceWidget_SetPlayerNetId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPresenceWidget_SetPlayerNetId) == 0x000008, "Wrong alignment on PlayerPresenceWidget_SetPlayerNetId");
static_assert(sizeof(PlayerPresenceWidget_SetPlayerNetId) == 0x000028, "Wrong size on PlayerPresenceWidget_SetPlayerNetId");
static_assert(offsetof(PlayerPresenceWidget_SetPlayerNetId, InPlayerNetId) == 0x000000, "Member 'PlayerPresenceWidget_SetPlayerNetId::InPlayerNetId' has a wrong offset!");

// Function Flame.PlayersFunctions.GetAvailableAmmo
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetAvailableAmmo final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AAmmoItem>>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetAvailableAmmo) == 0x000008, "Wrong alignment on PlayersFunctions_GetAvailableAmmo");
static_assert(sizeof(PlayersFunctions_GetAvailableAmmo) == 0x000018, "Wrong size on PlayersFunctions_GetAvailableAmmo");
static_assert(offsetof(PlayersFunctions_GetAvailableAmmo, Controller) == 0x000000, "Member 'PlayersFunctions_GetAvailableAmmo::Controller' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAvailableAmmo, ReturnValue) == 0x000008, "Member 'PlayersFunctions_GetAvailableAmmo::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetAvailableConsumables
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetAvailableConsumables final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AConsumableItem>>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetAvailableConsumables) == 0x000008, "Wrong alignment on PlayersFunctions_GetAvailableConsumables");
static_assert(sizeof(PlayersFunctions_GetAvailableConsumables) == 0x000018, "Wrong size on PlayersFunctions_GetAvailableConsumables");
static_assert(offsetof(PlayersFunctions_GetAvailableConsumables, Controller) == 0x000000, "Member 'PlayersFunctions_GetAvailableConsumables::Controller' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAvailableConsumables, ReturnValue) == 0x000008, "Member 'PlayersFunctions_GetAvailableConsumables::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetAvailableWeapons
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetAvailableWeapons final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeapon>>            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetAvailableWeapons) == 0x000008, "Wrong alignment on PlayersFunctions_GetAvailableWeapons");
static_assert(sizeof(PlayersFunctions_GetAvailableWeapons) == 0x000018, "Wrong size on PlayersFunctions_GetAvailableWeapons");
static_assert(offsetof(PlayersFunctions_GetAvailableWeapons, Controller) == 0x000000, "Member 'PlayersFunctions_GetAvailableWeapons::Controller' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAvailableWeapons, ReturnValue) == 0x000008, "Member 'PlayersFunctions_GetAvailableWeapons::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetAverageDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetAverageDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetAverageDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetAverageDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetAverageDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetAverageDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetAverageDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetAverageDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAverageDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetAverageDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAverageDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetAverageDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetAverageSquaredDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetAverageSquaredDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetAverageSquaredDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetAverageSquaredDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetAverageSquaredDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetAverageSquaredDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetAverageSquaredDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetAverageSquaredDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAverageSquaredDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetAverageSquaredDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetAverageSquaredDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetAverageSquaredDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetMaxDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetMaxDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetMaxDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetMaxDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetMaxDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetMaxDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetMaxDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetMaxDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMaxDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetMaxDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMaxDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetMaxDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetMaxSquaredDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetMaxSquaredDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetMaxSquaredDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetMaxSquaredDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetMaxSquaredDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetMaxSquaredDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetMaxSquaredDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetMaxSquaredDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMaxSquaredDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetMaxSquaredDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMaxSquaredDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetMaxSquaredDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetMinDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetMinDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetMinDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetMinDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetMinDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetMinDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetMinDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetMinDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMinDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetMinDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMinDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetMinDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetMinSquaredDistToPlayers
// 0x0018 (0x0018 - 0x0000)
struct PlayersFunctions_GetMinSquaredDistToPlayers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetMinSquaredDistToPlayers) == 0x000008, "Wrong alignment on PlayersFunctions_GetMinSquaredDistToPlayers");
static_assert(sizeof(PlayersFunctions_GetMinSquaredDistToPlayers) == 0x000018, "Wrong size on PlayersFunctions_GetMinSquaredDistToPlayers");
static_assert(offsetof(PlayersFunctions_GetMinSquaredDistToPlayers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetMinSquaredDistToPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMinSquaredDistToPlayers, WorldPos) == 0x000008, "Member 'PlayersFunctions_GetMinSquaredDistToPlayers::WorldPos' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetMinSquaredDistToPlayers, ReturnValue) == 0x000014, "Member 'PlayersFunctions_GetMinSquaredDistToPlayers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetPlayerControllers
// 0x0020 (0x0020 - 0x0000)
struct PlayersFunctions_GetPlayerControllers final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreWithoutPawn;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APlayerController*>              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetPlayerControllers) == 0x000008, "Wrong alignment on PlayersFunctions_GetPlayerControllers");
static_assert(sizeof(PlayersFunctions_GetPlayerControllers) == 0x000020, "Wrong size on PlayersFunctions_GetPlayerControllers");
static_assert(offsetof(PlayersFunctions_GetPlayerControllers, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetPlayerControllers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetPlayerControllers, IgnoreWithoutPawn) == 0x000008, "Member 'PlayersFunctions_GetPlayerControllers::IgnoreWithoutPawn' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetPlayerControllers, ReturnValue) == 0x000010, "Member 'PlayersFunctions_GetPlayerControllers::ReturnValue' has a wrong offset!");

// Function Flame.PlayersFunctions.GetPlayersCount
// 0x0010 (0x0010 - 0x0000)
struct PlayersFunctions_GetPlayersCount final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreWithoutPawn;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersFunctions_GetPlayersCount) == 0x000008, "Wrong alignment on PlayersFunctions_GetPlayersCount");
static_assert(sizeof(PlayersFunctions_GetPlayersCount) == 0x000010, "Wrong size on PlayersFunctions_GetPlayersCount");
static_assert(offsetof(PlayersFunctions_GetPlayersCount, WorldContextObject) == 0x000000, "Member 'PlayersFunctions_GetPlayersCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetPlayersCount, IgnoreWithoutPawn) == 0x000008, "Member 'PlayersFunctions_GetPlayersCount::IgnoreWithoutPawn' has a wrong offset!");
static_assert(offsetof(PlayersFunctions_GetPlayersCount, ReturnValue) == 0x00000C, "Member 'PlayersFunctions_GetPlayersCount::ReturnValue' has a wrong offset!");

// Function Flame.PlayerStartPrimary.FindStartForPlayer
// 0x0010 (0x0010 - 0x0000)
struct PlayerStartPrimary_FindStartForPlayer final
{
public:
	class AHumanPlayerController*                 Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerStartFlame*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStartPrimary_FindStartForPlayer) == 0x000008, "Wrong alignment on PlayerStartPrimary_FindStartForPlayer");
static_assert(sizeof(PlayerStartPrimary_FindStartForPlayer) == 0x000010, "Wrong size on PlayerStartPrimary_FindStartForPlayer");
static_assert(offsetof(PlayerStartPrimary_FindStartForPlayer, Controller) == 0x000000, "Member 'PlayerStartPrimary_FindStartForPlayer::Controller' has a wrong offset!");
static_assert(offsetof(PlayerStartPrimary_FindStartForPlayer, ReturnValue) == 0x000008, "Member 'PlayerStartPrimary_FindStartForPlayer::ReturnValue' has a wrong offset!");

// Function Flame.PoiseComponent.Inflict
// 0x0018 (0x0018 - 0x0000)
struct PoiseComponent_Inflict final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AWeapon*                          Weapon;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageType                                   DamageType;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoiseInfo                             ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PoiseComponent_Inflict) == 0x000008, "Wrong alignment on PoiseComponent_Inflict");
static_assert(sizeof(PoiseComponent_Inflict) == 0x000018, "Wrong size on PoiseComponent_Inflict");
static_assert(offsetof(PoiseComponent_Inflict, Damage) == 0x000000, "Member 'PoiseComponent_Inflict::Damage' has a wrong offset!");
static_assert(offsetof(PoiseComponent_Inflict, Weapon) == 0x000008, "Member 'PoiseComponent_Inflict::Weapon' has a wrong offset!");
static_assert(offsetof(PoiseComponent_Inflict, DamageType) == 0x000010, "Member 'PoiseComponent_Inflict::DamageType' has a wrong offset!");
static_assert(offsetof(PoiseComponent_Inflict, ReturnValue) == 0x000014, "Member 'PoiseComponent_Inflict::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileWeapon.MulticastFireBullet
// 0x0028 (0x0028 - 0x0000)
struct ProjectileWeapon_MulticastFireBullet final
{
public:
	struct FVector_NetQuantize                    Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector_NetQuantizeNormal>      Directions;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bShouldSpawnTracer;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProjectileWeapon_MulticastFireBullet) == 0x000008, "Wrong alignment on ProjectileWeapon_MulticastFireBullet");
static_assert(sizeof(ProjectileWeapon_MulticastFireBullet) == 0x000028, "Wrong size on ProjectileWeapon_MulticastFireBullet");
static_assert(offsetof(ProjectileWeapon_MulticastFireBullet, Location) == 0x000000, "Member 'ProjectileWeapon_MulticastFireBullet::Location' has a wrong offset!");
static_assert(offsetof(ProjectileWeapon_MulticastFireBullet, Directions) == 0x000010, "Member 'ProjectileWeapon_MulticastFireBullet::Directions' has a wrong offset!");
static_assert(offsetof(ProjectileWeapon_MulticastFireBullet, bShouldSpawnTracer) == 0x000020, "Member 'ProjectileWeapon_MulticastFireBullet::bShouldSpawnTracer' has a wrong offset!");

// Function Flame.ProjectileWeapon.OnRep_AmmoCount
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_OnRep_AmmoCount final
{
public:
	int32                                         PreviousCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_OnRep_AmmoCount) == 0x000004, "Wrong alignment on ProjectileWeapon_OnRep_AmmoCount");
static_assert(sizeof(ProjectileWeapon_OnRep_AmmoCount) == 0x000004, "Wrong size on ProjectileWeapon_OnRep_AmmoCount");
static_assert(offsetof(ProjectileWeapon_OnRep_AmmoCount, PreviousCount) == 0x000000, "Member 'ProjectileWeapon_OnRep_AmmoCount::PreviousCount' has a wrong offset!");

// Function Flame.ProjectileWeapon.OnRep_ChamberLoadedAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_OnRep_ChamberLoadedAmmoCount final
{
public:
	int32                                         PreviousCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_OnRep_ChamberLoadedAmmoCount) == 0x000004, "Wrong alignment on ProjectileWeapon_OnRep_ChamberLoadedAmmoCount");
static_assert(sizeof(ProjectileWeapon_OnRep_ChamberLoadedAmmoCount) == 0x000004, "Wrong size on ProjectileWeapon_OnRep_ChamberLoadedAmmoCount");
static_assert(offsetof(ProjectileWeapon_OnRep_ChamberLoadedAmmoCount, PreviousCount) == 0x000000, "Member 'ProjectileWeapon_OnRep_ChamberLoadedAmmoCount::PreviousCount' has a wrong offset!");

// Function Flame.ProjectileWeapon.GetChamberLoadedAmmo
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_GetChamberLoadedAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_GetChamberLoadedAmmo) == 0x000004, "Wrong alignment on ProjectileWeapon_GetChamberLoadedAmmo");
static_assert(sizeof(ProjectileWeapon_GetChamberLoadedAmmo) == 0x000004, "Wrong size on ProjectileWeapon_GetChamberLoadedAmmo");
static_assert(offsetof(ProjectileWeapon_GetChamberLoadedAmmo, ReturnValue) == 0x000000, "Member 'ProjectileWeapon_GetChamberLoadedAmmo::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileWeapon.GetCurrentAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_GetCurrentAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_GetCurrentAmmoCount) == 0x000004, "Wrong alignment on ProjectileWeapon_GetCurrentAmmoCount");
static_assert(sizeof(ProjectileWeapon_GetCurrentAmmoCount) == 0x000004, "Wrong size on ProjectileWeapon_GetCurrentAmmoCount");
static_assert(offsetof(ProjectileWeapon_GetCurrentAmmoCount, ReturnValue) == 0x000000, "Member 'ProjectileWeapon_GetCurrentAmmoCount::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileWeapon.GetCurrentAmmoRatio
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_GetCurrentAmmoRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_GetCurrentAmmoRatio) == 0x000004, "Wrong alignment on ProjectileWeapon_GetCurrentAmmoRatio");
static_assert(sizeof(ProjectileWeapon_GetCurrentAmmoRatio) == 0x000004, "Wrong size on ProjectileWeapon_GetCurrentAmmoRatio");
static_assert(offsetof(ProjectileWeapon_GetCurrentAmmoRatio, ReturnValue) == 0x000000, "Member 'ProjectileWeapon_GetCurrentAmmoRatio::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileWeapon.GetCurrentChamberCount
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_GetCurrentChamberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_GetCurrentChamberCount) == 0x000004, "Wrong alignment on ProjectileWeapon_GetCurrentChamberCount");
static_assert(sizeof(ProjectileWeapon_GetCurrentChamberCount) == 0x000004, "Wrong size on ProjectileWeapon_GetCurrentChamberCount");
static_assert(offsetof(ProjectileWeapon_GetCurrentChamberCount, ReturnValue) == 0x000000, "Member 'ProjectileWeapon_GetCurrentChamberCount::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileWeapon.GetCurrentModifiedDispersion
// 0x0004 (0x0004 - 0x0000)
struct ProjectileWeapon_GetCurrentModifiedDispersion final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileWeapon_GetCurrentModifiedDispersion) == 0x000004, "Wrong alignment on ProjectileWeapon_GetCurrentModifiedDispersion");
static_assert(sizeof(ProjectileWeapon_GetCurrentModifiedDispersion) == 0x000004, "Wrong size on ProjectileWeapon_GetCurrentModifiedDispersion");
static_assert(offsetof(ProjectileWeapon_GetCurrentModifiedDispersion, ReturnValue) == 0x000000, "Member 'ProjectileWeapon_GetCurrentModifiedDispersion::ReturnValue' has a wrong offset!");

// Function Flame.ProfilePictureQuery.OnDownloadImageFailed
// 0x0008 (0x0008 - 0x0000)
struct ProfilePictureQuery_OnDownloadImageFailed final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureQuery_OnDownloadImageFailed) == 0x000008, "Wrong alignment on ProfilePictureQuery_OnDownloadImageFailed");
static_assert(sizeof(ProfilePictureQuery_OnDownloadImageFailed) == 0x000008, "Wrong size on ProfilePictureQuery_OnDownloadImageFailed");
static_assert(offsetof(ProfilePictureQuery_OnDownloadImageFailed, Texture) == 0x000000, "Member 'ProfilePictureQuery_OnDownloadImageFailed::Texture' has a wrong offset!");

// Function Flame.ProfilePictureQuery.OnDownloadImageSucceeded
// 0x0008 (0x0008 - 0x0000)
struct ProfilePictureQuery_OnDownloadImageSucceeded final
{
public:
	class UTexture2DDynamic*                      Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureQuery_OnDownloadImageSucceeded) == 0x000008, "Wrong alignment on ProfilePictureQuery_OnDownloadImageSucceeded");
static_assert(sizeof(ProfilePictureQuery_OnDownloadImageSucceeded) == 0x000008, "Wrong size on ProfilePictureQuery_OnDownloadImageSucceeded");
static_assert(offsetof(ProfilePictureQuery_OnDownloadImageSucceeded, Texture) == 0x000000, "Member 'ProfilePictureQuery_OnDownloadImageSucceeded::Texture' has a wrong offset!");

// Function Flame.ProfilePictureWidget.OnDownloadCompleted
// 0x0030 (0x0030 - 0x0000)
struct ProfilePictureWidget_OnDownloadCompleted final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      InTexture;                                         // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureWidget_OnDownloadCompleted) == 0x000008, "Wrong alignment on ProfilePictureWidget_OnDownloadCompleted");
static_assert(sizeof(ProfilePictureWidget_OnDownloadCompleted) == 0x000030, "Wrong size on ProfilePictureWidget_OnDownloadCompleted");
static_assert(offsetof(ProfilePictureWidget_OnDownloadCompleted, InPlayerNetId) == 0x000000, "Member 'ProfilePictureWidget_OnDownloadCompleted::InPlayerNetId' has a wrong offset!");
static_assert(offsetof(ProfilePictureWidget_OnDownloadCompleted, InTexture) == 0x000028, "Member 'ProfilePictureWidget_OnDownloadCompleted::InTexture' has a wrong offset!");

// Function Flame.ProfilePictureWidget.OnDownloadStarted
// 0x0028 (0x0028 - 0x0000)
struct ProfilePictureWidget_OnDownloadStarted final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureWidget_OnDownloadStarted) == 0x000008, "Wrong alignment on ProfilePictureWidget_OnDownloadStarted");
static_assert(sizeof(ProfilePictureWidget_OnDownloadStarted) == 0x000028, "Wrong size on ProfilePictureWidget_OnDownloadStarted");
static_assert(offsetof(ProfilePictureWidget_OnDownloadStarted, InPlayerNetId) == 0x000000, "Member 'ProfilePictureWidget_OnDownloadStarted::InPlayerNetId' has a wrong offset!");

// Function Flame.ProfilePictureWidget.SetPlayerNetId
// 0x0028 (0x0028 - 0x0000)
struct ProfilePictureWidget_SetPlayerNetId final
{
public:
	struct FUniqueNetIdRepl                       InPlayerNetId;                                     // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfilePictureWidget_SetPlayerNetId) == 0x000008, "Wrong alignment on ProfilePictureWidget_SetPlayerNetId");
static_assert(sizeof(ProfilePictureWidget_SetPlayerNetId) == 0x000028, "Wrong size on ProfilePictureWidget_SetPlayerNetId");
static_assert(offsetof(ProfilePictureWidget_SetPlayerNetId, InPlayerNetId) == 0x000000, "Member 'ProfilePictureWidget_SetPlayerNetId::InPlayerNetId' has a wrong offset!");

// Function Flame.BulletManager.AddBulletImpactEmitter
// 0x0018 (0x0018 - 0x0000)
struct BulletManager_AddBulletImpactEmitter final
{
public:
	class AHumanCharacter*                        OwnerHuman;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              Surface;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_AddBulletImpactEmitter) == 0x000008, "Wrong alignment on BulletManager_AddBulletImpactEmitter");
static_assert(sizeof(BulletManager_AddBulletImpactEmitter) == 0x000018, "Wrong size on BulletManager_AddBulletImpactEmitter");
static_assert(offsetof(BulletManager_AddBulletImpactEmitter, OwnerHuman) == 0x000000, "Member 'BulletManager_AddBulletImpactEmitter::OwnerHuman' has a wrong offset!");
static_assert(offsetof(BulletManager_AddBulletImpactEmitter, Surface) == 0x000008, "Member 'BulletManager_AddBulletImpactEmitter::Surface' has a wrong offset!");
static_assert(offsetof(BulletManager_AddBulletImpactEmitter, ParticleSystem) == 0x000010, "Member 'BulletManager_AddBulletImpactEmitter::ParticleSystem' has a wrong offset!");

// Function Flame.BulletManager.AddTracerActor
// 0x0008 (0x0008 - 0x0000)
struct BulletManager_AddTracerActor final
{
public:
	class AActor*                                 TracerActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_AddTracerActor) == 0x000008, "Wrong alignment on BulletManager_AddTracerActor");
static_assert(sizeof(BulletManager_AddTracerActor) == 0x000008, "Wrong size on BulletManager_AddTracerActor");
static_assert(offsetof(BulletManager_AddTracerActor, TracerActor) == 0x000000, "Member 'BulletManager_AddTracerActor::TracerActor' has a wrong offset!");

// Function Flame.BulletManager.CreateTrace
// 0x0050 (0x0050 - 0x0000)
struct BulletManager_CreateTrace final
{
public:
	TSubclassOf<class AItem>                      ProjectileClass;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProjectileTracer*                      Projectile;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        ProjectileOwner;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                OwningWeapon;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FirePositionRaw;                                   // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FireDirectionRaw;                                  // 0x0044(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_CreateTrace) == 0x000008, "Wrong alignment on BulletManager_CreateTrace");
static_assert(sizeof(BulletManager_CreateTrace) == 0x000050, "Wrong size on BulletManager_CreateTrace");
static_assert(offsetof(BulletManager_CreateTrace, ProjectileClass) == 0x000000, "Member 'BulletManager_CreateTrace::ProjectileClass' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, Location) == 0x000008, "Member 'BulletManager_CreateTrace::Location' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, Direction) == 0x000014, "Member 'BulletManager_CreateTrace::Direction' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, Projectile) == 0x000020, "Member 'BulletManager_CreateTrace::Projectile' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, ProjectileOwner) == 0x000028, "Member 'BulletManager_CreateTrace::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, OwningWeapon) == 0x000030, "Member 'BulletManager_CreateTrace::OwningWeapon' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, FirePositionRaw) == 0x000038, "Member 'BulletManager_CreateTrace::FirePositionRaw' has a wrong offset!");
static_assert(offsetof(BulletManager_CreateTrace, FireDirectionRaw) == 0x000044, "Member 'BulletManager_CreateTrace::FireDirectionRaw' has a wrong offset!");

// Function Flame.BulletManager.OnHit
// 0x0058 (0x0058 - 0x0000)
struct BulletManager_OnHit final
{
public:
	TSubclassOf<class AItem>                      BulletType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitResultOptimised;                                // 0x0008(0x003C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  OwnerCharacter;                                    // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPenetrating;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeformed;                                       // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletManager_OnHit) == 0x000008, "Wrong alignment on BulletManager_OnHit");
static_assert(sizeof(BulletManager_OnHit) == 0x000058, "Wrong size on BulletManager_OnHit");
static_assert(offsetof(BulletManager_OnHit, BulletType) == 0x000000, "Member 'BulletManager_OnHit::BulletType' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHit, HitResultOptimised) == 0x000008, "Member 'BulletManager_OnHit::HitResultOptimised' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHit, OwnerCharacter) == 0x000048, "Member 'BulletManager_OnHit::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHit, bIsPenetrating) == 0x000050, "Member 'BulletManager_OnHit::bIsPenetrating' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHit, bIsDeformed) == 0x000051, "Member 'BulletManager_OnHit::bIsDeformed' has a wrong offset!");

// Function Flame.BulletManager.OnHitRelativePosition
// 0x0060 (0x0060 - 0x0000)
struct BulletManager_OnHitRelativePosition final
{
public:
	TSubclassOf<class AItem>                      BulletType;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResultSimplified                   HitResultOptimised;                                // 0x0008(0x003C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  OwnerCharacter;                                    // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPenetrating;                                    // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeformed;                                       // 0x0051(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeHitPosition;                               // 0x0054(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_OnHitRelativePosition) == 0x000008, "Wrong alignment on BulletManager_OnHitRelativePosition");
static_assert(sizeof(BulletManager_OnHitRelativePosition) == 0x000060, "Wrong size on BulletManager_OnHitRelativePosition");
static_assert(offsetof(BulletManager_OnHitRelativePosition, BulletType) == 0x000000, "Member 'BulletManager_OnHitRelativePosition::BulletType' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHitRelativePosition, HitResultOptimised) == 0x000008, "Member 'BulletManager_OnHitRelativePosition::HitResultOptimised' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHitRelativePosition, OwnerCharacter) == 0x000048, "Member 'BulletManager_OnHitRelativePosition::OwnerCharacter' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHitRelativePosition, bIsPenetrating) == 0x000050, "Member 'BulletManager_OnHitRelativePosition::bIsPenetrating' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHitRelativePosition, bIsDeformed) == 0x000051, "Member 'BulletManager_OnHitRelativePosition::bIsDeformed' has a wrong offset!");
static_assert(offsetof(BulletManager_OnHitRelativePosition, RelativeHitPosition) == 0x000054, "Member 'BulletManager_OnHitRelativePosition::RelativeHitPosition' has a wrong offset!");

// Function Flame.BulletManager.OnProjectileFlyby
// 0x0038 (0x0038 - 0x0000)
struct BulletManager_OnProjectileFlyby final
{
public:
	EProjectileType                               ProjectileType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectileOriginLocation;                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectileRectangularLocation;                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  PlayerVictim;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AHumanCharacter*                  PlayerInstigator;                                  // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsBeingHit;                                 // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletManager_OnProjectileFlyby) == 0x000008, "Wrong alignment on BulletManager_OnProjectileFlyby");
static_assert(sizeof(BulletManager_OnProjectileFlyby) == 0x000038, "Wrong size on BulletManager_OnProjectileFlyby");
static_assert(offsetof(BulletManager_OnProjectileFlyby, ProjectileType) == 0x000000, "Member 'BulletManager_OnProjectileFlyby::ProjectileType' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlyby, ProjectileOriginLocation) == 0x000004, "Member 'BulletManager_OnProjectileFlyby::ProjectileOriginLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlyby, ProjectileRectangularLocation) == 0x000010, "Member 'BulletManager_OnProjectileFlyby::ProjectileRectangularLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlyby, PlayerVictim) == 0x000020, "Member 'BulletManager_OnProjectileFlyby::PlayerVictim' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlyby, PlayerInstigator) == 0x000028, "Member 'BulletManager_OnProjectileFlyby::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlyby, bPlayerIsBeingHit) == 0x000030, "Member 'BulletManager_OnProjectileFlyby::bPlayerIsBeingHit' has a wrong offset!");

// Function Flame.BulletManager.OnProjectileFlybyGeneric
// 0x0060 (0x0060 - 0x0000)
struct BulletManager_OnProjectileFlybyGeneric final
{
public:
	EProjectileType                               ProjectileType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ProjectileOriginLocation;                          // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AHumanCharacter*                  PlayerVictim;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AHumanCharacter*                  PlayerInstigator;                                  // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsBeingHit;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResultSimplified                   HitOptimised;                                      // 0x0024(0x003C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_OnProjectileFlybyGeneric) == 0x000008, "Wrong alignment on BulletManager_OnProjectileFlybyGeneric");
static_assert(sizeof(BulletManager_OnProjectileFlybyGeneric) == 0x000060, "Wrong size on BulletManager_OnProjectileFlybyGeneric");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, ProjectileType) == 0x000000, "Member 'BulletManager_OnProjectileFlybyGeneric::ProjectileType' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, ProjectileOriginLocation) == 0x000004, "Member 'BulletManager_OnProjectileFlybyGeneric::ProjectileOriginLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, PlayerVictim) == 0x000010, "Member 'BulletManager_OnProjectileFlybyGeneric::PlayerVictim' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, PlayerInstigator) == 0x000018, "Member 'BulletManager_OnProjectileFlybyGeneric::PlayerInstigator' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, bPlayerIsBeingHit) == 0x000020, "Member 'BulletManager_OnProjectileFlybyGeneric::bPlayerIsBeingHit' has a wrong offset!");
static_assert(offsetof(BulletManager_OnProjectileFlybyGeneric, HitOptimised) == 0x000024, "Member 'BulletManager_OnProjectileFlybyGeneric::HitOptimised' has a wrong offset!");

// Function Flame.BulletManager.PlayArrowWhizz
// 0x0018 (0x0018 - 0x0000)
struct BulletManager_PlayArrowWhizz final
{
public:
	struct FVector                                WhizzLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArrowSpeed;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_PlayArrowWhizz) == 0x000008, "Wrong alignment on BulletManager_PlayArrowWhizz");
static_assert(sizeof(BulletManager_PlayArrowWhizz) == 0x000018, "Wrong size on BulletManager_PlayArrowWhizz");
static_assert(offsetof(BulletManager_PlayArrowWhizz, WhizzLocation) == 0x000000, "Member 'BulletManager_PlayArrowWhizz::WhizzLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayArrowWhizz, ArrowSpeed) == 0x00000C, "Member 'BulletManager_PlayArrowWhizz::ArrowSpeed' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayArrowWhizz, ReturnValue) == 0x000010, "Member 'BulletManager_PlayArrowWhizz::ReturnValue' has a wrong offset!");

// Function Flame.BulletManager.PlayBulletSonicCrack
// 0x0038 (0x0038 - 0x0000)
struct BulletManager_PlayBulletSonicCrack final
{
public:
	struct FVector                                SonicCrackLocation;                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BulletOrigin;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  PlayerVictim;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsBeingHit;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProjectileDeformed;                             // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_PlayBulletSonicCrack) == 0x000008, "Wrong alignment on BulletManager_PlayBulletSonicCrack");
static_assert(sizeof(BulletManager_PlayBulletSonicCrack) == 0x000038, "Wrong size on BulletManager_PlayBulletSonicCrack");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, SonicCrackLocation) == 0x000000, "Member 'BulletManager_PlayBulletSonicCrack::SonicCrackLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, BulletOrigin) == 0x00000C, "Member 'BulletManager_PlayBulletSonicCrack::BulletOrigin' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, BulletSpeed) == 0x000018, "Member 'BulletManager_PlayBulletSonicCrack::BulletSpeed' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, PlayerVictim) == 0x000020, "Member 'BulletManager_PlayBulletSonicCrack::PlayerVictim' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, bPlayerIsBeingHit) == 0x000028, "Member 'BulletManager_PlayBulletSonicCrack::bPlayerIsBeingHit' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, bIsProjectileDeformed) == 0x000029, "Member 'BulletManager_PlayBulletSonicCrack::bIsProjectileDeformed' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletSonicCrack, ReturnValue) == 0x000030, "Member 'BulletManager_PlayBulletSonicCrack::ReturnValue' has a wrong offset!");

// Function Flame.BulletManager.PlayBulletWhizz
// 0x0038 (0x0038 - 0x0000)
struct BulletManager_PlayBulletWhizz final
{
public:
	struct FVector                                WhizzLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BulletOrigin;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AHumanCharacter*                  PlayerVictim;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayerIsBeingHit;                                 // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProjectileDeformed;                             // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_PlayBulletWhizz) == 0x000008, "Wrong alignment on BulletManager_PlayBulletWhizz");
static_assert(sizeof(BulletManager_PlayBulletWhizz) == 0x000038, "Wrong size on BulletManager_PlayBulletWhizz");
static_assert(offsetof(BulletManager_PlayBulletWhizz, WhizzLocation) == 0x000000, "Member 'BulletManager_PlayBulletWhizz::WhizzLocation' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, BulletOrigin) == 0x00000C, "Member 'BulletManager_PlayBulletWhizz::BulletOrigin' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, BulletSpeed) == 0x000018, "Member 'BulletManager_PlayBulletWhizz::BulletSpeed' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, PlayerVictim) == 0x000020, "Member 'BulletManager_PlayBulletWhizz::PlayerVictim' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, bPlayerIsBeingHit) == 0x000028, "Member 'BulletManager_PlayBulletWhizz::bPlayerIsBeingHit' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, bIsProjectileDeformed) == 0x000029, "Member 'BulletManager_PlayBulletWhizz::bIsProjectileDeformed' has a wrong offset!");
static_assert(offsetof(BulletManager_PlayBulletWhizz, ReturnValue) == 0x000030, "Member 'BulletManager_PlayBulletWhizz::ReturnValue' has a wrong offset!");

// Function Flame.BulletManager.RemoveTracerActor
// 0x0008 (0x0008 - 0x0000)
struct BulletManager_RemoveTracerActor final
{
public:
	class AActor*                                 TracerActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_RemoveTracerActor) == 0x000008, "Wrong alignment on BulletManager_RemoveTracerActor");
static_assert(sizeof(BulletManager_RemoveTracerActor) == 0x000008, "Wrong size on BulletManager_RemoveTracerActor");
static_assert(offsetof(BulletManager_RemoveTracerActor, TracerActor) == 0x000000, "Member 'BulletManager_RemoveTracerActor::TracerActor' has a wrong offset!");

// Function Flame.BulletManager.StopArrowWhizz
// 0x0008 (0x0008 - 0x0000)
struct BulletManager_StopArrowWhizz final
{
public:
	class UAudioComponent*                        WhizzSound;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BulletManager_StopArrowWhizz) == 0x000008, "Wrong alignment on BulletManager_StopArrowWhizz");
static_assert(sizeof(BulletManager_StopArrowWhizz) == 0x000008, "Wrong size on BulletManager_StopArrowWhizz");
static_assert(offsetof(BulletManager_StopArrowWhizz, WhizzSound) == 0x000000, "Member 'BulletManager_StopArrowWhizz::WhizzSound' has a wrong offset!");

// Function Flame.BulletManager.TryMovingBulletImpactEmitter
// 0x0038 (0x0038 - 0x0000)
struct BulletManager_TryMovingBulletImpactEmitter final
{
public:
	class AHumanCharacter*                        OwnerHuman;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              Surface;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BulletManager_TryMovingBulletImpactEmitter) == 0x000008, "Wrong alignment on BulletManager_TryMovingBulletImpactEmitter");
static_assert(sizeof(BulletManager_TryMovingBulletImpactEmitter) == 0x000038, "Wrong size on BulletManager_TryMovingBulletImpactEmitter");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, OwnerHuman) == 0x000000, "Member 'BulletManager_TryMovingBulletImpactEmitter::OwnerHuman' has a wrong offset!");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, Surface) == 0x000008, "Member 'BulletManager_TryMovingBulletImpactEmitter::Surface' has a wrong offset!");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, Location) == 0x00000C, "Member 'BulletManager_TryMovingBulletImpactEmitter::Location' has a wrong offset!");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, Rotator) == 0x000018, "Member 'BulletManager_TryMovingBulletImpactEmitter::Rotator' has a wrong offset!");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, Scale) == 0x000024, "Member 'BulletManager_TryMovingBulletImpactEmitter::Scale' has a wrong offset!");
static_assert(offsetof(BulletManager_TryMovingBulletImpactEmitter, ReturnValue) == 0x000030, "Member 'BulletManager_TryMovingBulletImpactEmitter::ReturnValue' has a wrong offset!");

// Function Flame.ProjectileBlueprintLibrary.GetBulletTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct ProjectileBlueprintLibrary_GetBulletTraceChannel final
{
public:
	ECollisionChannel                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectileBlueprintLibrary_GetBulletTraceChannel) == 0x000001, "Wrong alignment on ProjectileBlueprintLibrary_GetBulletTraceChannel");
static_assert(sizeof(ProjectileBlueprintLibrary_GetBulletTraceChannel) == 0x000001, "Wrong size on ProjectileBlueprintLibrary_GetBulletTraceChannel");
static_assert(offsetof(ProjectileBlueprintLibrary_GetBulletTraceChannel, ReturnValue) == 0x000000, "Member 'ProjectileBlueprintLibrary_GetBulletTraceChannel::ReturnValue' has a wrong offset!");

// Function Flame.RadiationShieldingComponent.AddShielding
// 0x0001 (0x0001 - 0x0000)
struct RadiationShieldingComponent_AddShielding final
{
public:
	ERadiationShieldingLevel                      Level;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadiationShieldingComponent_AddShielding) == 0x000001, "Wrong alignment on RadiationShieldingComponent_AddShielding");
static_assert(sizeof(RadiationShieldingComponent_AddShielding) == 0x000001, "Wrong size on RadiationShieldingComponent_AddShielding");
static_assert(offsetof(RadiationShieldingComponent_AddShielding, Level) == 0x000000, "Member 'RadiationShieldingComponent_AddShielding::Level' has a wrong offset!");

// Function Flame.RadiationShieldingComponent.OnBuildingEnter
// 0x0008 (0x0008 - 0x0000)
struct RadiationShieldingComponent_OnBuildingEnter final
{
public:
	class AActor*                                 Building;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadiationShieldingComponent_OnBuildingEnter) == 0x000008, "Wrong alignment on RadiationShieldingComponent_OnBuildingEnter");
static_assert(sizeof(RadiationShieldingComponent_OnBuildingEnter) == 0x000008, "Wrong size on RadiationShieldingComponent_OnBuildingEnter");
static_assert(offsetof(RadiationShieldingComponent_OnBuildingEnter, Building) == 0x000000, "Member 'RadiationShieldingComponent_OnBuildingEnter::Building' has a wrong offset!");

// Function Flame.RadiationShieldingComponent.OnBuildingLeave
// 0x0008 (0x0008 - 0x0000)
struct RadiationShieldingComponent_OnBuildingLeave final
{
public:
	class AActor*                                 Building;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadiationShieldingComponent_OnBuildingLeave) == 0x000008, "Wrong alignment on RadiationShieldingComponent_OnBuildingLeave");
static_assert(sizeof(RadiationShieldingComponent_OnBuildingLeave) == 0x000008, "Wrong size on RadiationShieldingComponent_OnBuildingLeave");
static_assert(offsetof(RadiationShieldingComponent_OnBuildingLeave, Building) == 0x000000, "Member 'RadiationShieldingComponent_OnBuildingLeave::Building' has a wrong offset!");

// Function Flame.RadiationShieldingComponent.RemoveShielding
// 0x0001 (0x0001 - 0x0000)
struct RadiationShieldingComponent_RemoveShielding final
{
public:
	ERadiationShieldingLevel                      Level;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadiationShieldingComponent_RemoveShielding) == 0x000001, "Wrong alignment on RadiationShieldingComponent_RemoveShielding");
static_assert(sizeof(RadiationShieldingComponent_RemoveShielding) == 0x000001, "Wrong size on RadiationShieldingComponent_RemoveShielding");
static_assert(offsetof(RadiationShieldingComponent_RemoveShielding, Level) == 0x000000, "Member 'RadiationShieldingComponent_RemoveShielding::Level' has a wrong offset!");

// Function Flame.RadiationShieldingComponent.GetCurrentRadiationShieldingLevel
// 0x0001 (0x0001 - 0x0000)
struct RadiationShieldingComponent_GetCurrentRadiationShieldingLevel final
{
public:
	ERadiationShieldingLevel                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RadiationShieldingComponent_GetCurrentRadiationShieldingLevel) == 0x000001, "Wrong alignment on RadiationShieldingComponent_GetCurrentRadiationShieldingLevel");
static_assert(sizeof(RadiationShieldingComponent_GetCurrentRadiationShieldingLevel) == 0x000001, "Wrong size on RadiationShieldingComponent_GetCurrentRadiationShieldingLevel");
static_assert(offsetof(RadiationShieldingComponent_GetCurrentRadiationShieldingLevel, ReturnValue) == 0x000000, "Member 'RadiationShieldingComponent_GetCurrentRadiationShieldingLevel::ReturnValue' has a wrong offset!");

// Function Flame.RichPresence.SetRichPresence
// 0x0010 (0x0010 - 0x0000)
struct RichPresence_SetRichPresence final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichPresence_SetRichPresence) == 0x000008, "Wrong alignment on RichPresence_SetRichPresence");
static_assert(sizeof(RichPresence_SetRichPresence) == 0x000010, "Wrong size on RichPresence_SetRichPresence");
static_assert(offsetof(RichPresence_SetRichPresence, MapName) == 0x000000, "Member 'RichPresence_SetRichPresence::MapName' has a wrong offset!");

// Function Flame.RiverSplineComponent.GenerateColliders
// 0x0020 (0x0020 - 0x0000)
struct RiverSplineComponent_GenerateColliders final
{
public:
	float                                         HeightAddition;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceStep;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidthStep;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRiverSplinePointDimensions>    PointDimensions;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverSplineComponent_GenerateColliders) == 0x000008, "Wrong alignment on RiverSplineComponent_GenerateColliders");
static_assert(sizeof(RiverSplineComponent_GenerateColliders) == 0x000020, "Wrong size on RiverSplineComponent_GenerateColliders");
static_assert(offsetof(RiverSplineComponent_GenerateColliders, HeightAddition) == 0x000000, "Member 'RiverSplineComponent_GenerateColliders::HeightAddition' has a wrong offset!");
static_assert(offsetof(RiverSplineComponent_GenerateColliders, DistanceStep) == 0x000004, "Member 'RiverSplineComponent_GenerateColliders::DistanceStep' has a wrong offset!");
static_assert(offsetof(RiverSplineComponent_GenerateColliders, WidthStep) == 0x000008, "Member 'RiverSplineComponent_GenerateColliders::WidthStep' has a wrong offset!");
static_assert(offsetof(RiverSplineComponent_GenerateColliders, PointDimensions) == 0x000010, "Member 'RiverSplineComponent_GenerateColliders::PointDimensions' has a wrong offset!");

// Function Flame.RiverSplineComponent.SetScaleAtRiverSplinePoint
// 0x0010 (0x0010 - 0x0000)
struct RiverSplineComponent_SetScaleAtRiverSplinePoint final
{
public:
	int32                                         PointIdx;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverSplineComponent_SetScaleAtRiverSplinePoint) == 0x000004, "Wrong alignment on RiverSplineComponent_SetScaleAtRiverSplinePoint");
static_assert(sizeof(RiverSplineComponent_SetScaleAtRiverSplinePoint) == 0x000010, "Wrong size on RiverSplineComponent_SetScaleAtRiverSplinePoint");
static_assert(offsetof(RiverSplineComponent_SetScaleAtRiverSplinePoint, PointIdx) == 0x000000, "Member 'RiverSplineComponent_SetScaleAtRiverSplinePoint::PointIdx' has a wrong offset!");
static_assert(offsetof(RiverSplineComponent_SetScaleAtRiverSplinePoint, Scale) == 0x000004, "Member 'RiverSplineComponent_SetScaleAtRiverSplinePoint::Scale' has a wrong offset!");

// Function Flame.RiverSplineComponent.UpdateMaxFordingDepth
// 0x0004 (0x0004 - 0x0000)
struct RiverSplineComponent_UpdateMaxFordingDepth final
{
public:
	float                                         NewMaxFordingDepth;                                // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverSplineComponent_UpdateMaxFordingDepth) == 0x000004, "Wrong alignment on RiverSplineComponent_UpdateMaxFordingDepth");
static_assert(sizeof(RiverSplineComponent_UpdateMaxFordingDepth) == 0x000004, "Wrong size on RiverSplineComponent_UpdateMaxFordingDepth");
static_assert(offsetof(RiverSplineComponent_UpdateMaxFordingDepth, NewMaxFordingDepth) == 0x000000, "Member 'RiverSplineComponent_UpdateMaxFordingDepth::NewMaxFordingDepth' has a wrong offset!");

// Function Flame.RiverSplineComponent.GetSplinePointAtDistanceAlongSpline
// 0x0008 (0x0008 - 0x0000)
struct RiverSplineComponent_GetSplinePointAtDistanceAlongSpline final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiverSplineComponent_GetSplinePointAtDistanceAlongSpline) == 0x000004, "Wrong alignment on RiverSplineComponent_GetSplinePointAtDistanceAlongSpline");
static_assert(sizeof(RiverSplineComponent_GetSplinePointAtDistanceAlongSpline) == 0x000008, "Wrong size on RiverSplineComponent_GetSplinePointAtDistanceAlongSpline");
static_assert(offsetof(RiverSplineComponent_GetSplinePointAtDistanceAlongSpline, Distance) == 0x000000, "Member 'RiverSplineComponent_GetSplinePointAtDistanceAlongSpline::Distance' has a wrong offset!");
static_assert(offsetof(RiverSplineComponent_GetSplinePointAtDistanceAlongSpline, ReturnValue) == 0x000004, "Member 'RiverSplineComponent_GetSplinePointAtDistanceAlongSpline::ReturnValue' has a wrong offset!");

// Function Flame.ScarecrowActor.MulticastOnPlayerDied
// 0x0098 (0x0098 - 0x0000)
struct ScarecrowActor_MulticastOnPlayerDied final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScarecrowActor_MulticastOnPlayerDied) == 0x000008, "Wrong alignment on ScarecrowActor_MulticastOnPlayerDied");
static_assert(sizeof(ScarecrowActor_MulticastOnPlayerDied) == 0x000098, "Wrong size on ScarecrowActor_MulticastOnPlayerDied");
static_assert(offsetof(ScarecrowActor_MulticastOnPlayerDied, DamageAmount) == 0x000000, "Member 'ScarecrowActor_MulticastOnPlayerDied::DamageAmount' has a wrong offset!");
static_assert(offsetof(ScarecrowActor_MulticastOnPlayerDied, HitResult) == 0x000004, "Member 'ScarecrowActor_MulticastOnPlayerDied::HitResult' has a wrong offset!");
static_assert(offsetof(ScarecrowActor_MulticastOnPlayerDied, InstigatingCharacter) == 0x000090, "Member 'ScarecrowActor_MulticastOnPlayerDied::InstigatingCharacter' has a wrong offset!");

// Function Flame.ScarecrowActor.OnPlayerDied
// 0x0098 (0x0098 - 0x0000)
struct ScarecrowActor_OnPlayerDied final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0004(0x008C)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0090(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScarecrowActor_OnPlayerDied) == 0x000008, "Wrong alignment on ScarecrowActor_OnPlayerDied");
static_assert(sizeof(ScarecrowActor_OnPlayerDied) == 0x000098, "Wrong size on ScarecrowActor_OnPlayerDied");
static_assert(offsetof(ScarecrowActor_OnPlayerDied, DamageAmount) == 0x000000, "Member 'ScarecrowActor_OnPlayerDied::DamageAmount' has a wrong offset!");
static_assert(offsetof(ScarecrowActor_OnPlayerDied, HitResult) == 0x000004, "Member 'ScarecrowActor_OnPlayerDied::HitResult' has a wrong offset!");
static_assert(offsetof(ScarecrowActor_OnPlayerDied, InstigatingCharacter) == 0x000090, "Member 'ScarecrowActor_OnPlayerDied::InstigatingCharacter' has a wrong offset!");

// Function Flame.ScarecrowActor.TakeDamageBlueprint
// 0x0010 (0x0010 - 0x0000)
struct ScarecrowActor_TakeDamageBlueprint final
{
public:
	float                                         DamageAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanCharacter*                        InstigatingCharacter;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScarecrowActor_TakeDamageBlueprint) == 0x000008, "Wrong alignment on ScarecrowActor_TakeDamageBlueprint");
static_assert(sizeof(ScarecrowActor_TakeDamageBlueprint) == 0x000010, "Wrong size on ScarecrowActor_TakeDamageBlueprint");
static_assert(offsetof(ScarecrowActor_TakeDamageBlueprint, DamageAmount) == 0x000000, "Member 'ScarecrowActor_TakeDamageBlueprint::DamageAmount' has a wrong offset!");
static_assert(offsetof(ScarecrowActor_TakeDamageBlueprint, InstigatingCharacter) == 0x000008, "Member 'ScarecrowActor_TakeDamageBlueprint::InstigatingCharacter' has a wrong offset!");

// Function Flame.SceneComponentSmoothing.SetSourceComponent
// 0x0008 (0x0008 - 0x0000)
struct SceneComponentSmoothing_SetSourceComponent final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SceneComponentSmoothing_SetSourceComponent) == 0x000008, "Wrong alignment on SceneComponentSmoothing_SetSourceComponent");
static_assert(sizeof(SceneComponentSmoothing_SetSourceComponent) == 0x000008, "Wrong size on SceneComponentSmoothing_SetSourceComponent");
static_assert(offsetof(SceneComponentSmoothing_SetSourceComponent, Component) == 0x000000, "Member 'SceneComponentSmoothing_SetSourceComponent::Component' has a wrong offset!");

// Function Flame.SectionHeaderWidget.SetSectionNameAndType
// 0x0020 (0x0020 - 0x0000)
struct SectionHeaderWidget_SetSectionNameAndType final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EStashSection                                 Type;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SectionHeaderWidget_SetSectionNameAndType) == 0x000008, "Wrong alignment on SectionHeaderWidget_SetSectionNameAndType");
static_assert(sizeof(SectionHeaderWidget_SetSectionNameAndType) == 0x000020, "Wrong size on SectionHeaderWidget_SetSectionNameAndType");
static_assert(offsetof(SectionHeaderWidget_SetSectionNameAndType, InText) == 0x000000, "Member 'SectionHeaderWidget_SetSectionNameAndType::InText' has a wrong offset!");
static_assert(offsetof(SectionHeaderWidget_SetSectionNameAndType, Type) == 0x000018, "Member 'SectionHeaderWidget_SetSectionNameAndType::Type' has a wrong offset!");

// Function Flame.SelectionWheelComponent.OpenWheel
// 0x0001 (0x0001 - 0x0000)
struct SelectionWheelComponent_OpenWheel final
{
public:
	ESelectionWheelType                           WheelType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_OpenWheel) == 0x000001, "Wrong alignment on SelectionWheelComponent_OpenWheel");
static_assert(sizeof(SelectionWheelComponent_OpenWheel) == 0x000001, "Wrong size on SelectionWheelComponent_OpenWheel");
static_assert(offsetof(SelectionWheelComponent_OpenWheel, WheelType) == 0x000000, "Member 'SelectionWheelComponent_OpenWheel::WheelType' has a wrong offset!");

// Function Flame.SelectionWheelComponent.SelectLastItem
// 0x0001 (0x0001 - 0x0000)
struct SelectionWheelComponent_SelectLastItem final
{
public:
	ESelectionWheelType                           WheelType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_SelectLastItem) == 0x000001, "Wrong alignment on SelectionWheelComponent_SelectLastItem");
static_assert(sizeof(SelectionWheelComponent_SelectLastItem) == 0x000001, "Wrong size on SelectionWheelComponent_SelectLastItem");
static_assert(offsetof(SelectionWheelComponent_SelectLastItem, WheelType) == 0x000000, "Member 'SelectionWheelComponent_SelectLastItem::WheelType' has a wrong offset!");

// Function Flame.SelectionWheelComponent.SetWeaponWheelIndex
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheelComponent_SetWeaponWheelIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_SetWeaponWheelIndex) == 0x000004, "Wrong alignment on SelectionWheelComponent_SetWeaponWheelIndex");
static_assert(sizeof(SelectionWheelComponent_SetWeaponWheelIndex) == 0x000004, "Wrong size on SelectionWheelComponent_SetWeaponWheelIndex");
static_assert(offsetof(SelectionWheelComponent_SetWeaponWheelIndex, Index_0) == 0x000000, "Member 'SelectionWheelComponent_SetWeaponWheelIndex::Index_0' has a wrong offset!");

// Function Flame.SelectionWheelComponent.CanWheelOpen
// 0x0002 (0x0002 - 0x0000)
struct SelectionWheelComponent_CanWheelOpen final
{
public:
	ESelectionWheelType                           WheelType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_CanWheelOpen) == 0x000001, "Wrong alignment on SelectionWheelComponent_CanWheelOpen");
static_assert(sizeof(SelectionWheelComponent_CanWheelOpen) == 0x000002, "Wrong size on SelectionWheelComponent_CanWheelOpen");
static_assert(offsetof(SelectionWheelComponent_CanWheelOpen, WheelType) == 0x000000, "Member 'SelectionWheelComponent_CanWheelOpen::WheelType' has a wrong offset!");
static_assert(offsetof(SelectionWheelComponent_CanWheelOpen, ReturnValue) == 0x000001, "Member 'SelectionWheelComponent_CanWheelOpen::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheelComponent.GetWeaponIndices
// 0x0010 (0x0010 - 0x0000)
struct SelectionWheelComponent_GetWeaponIndices final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_GetWeaponIndices) == 0x000008, "Wrong alignment on SelectionWheelComponent_GetWeaponIndices");
static_assert(sizeof(SelectionWheelComponent_GetWeaponIndices) == 0x000010, "Wrong size on SelectionWheelComponent_GetWeaponIndices");
static_assert(offsetof(SelectionWheelComponent_GetWeaponIndices, ReturnValue) == 0x000000, "Member 'SelectionWheelComponent_GetWeaponIndices::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheelComponent.IsWheelOpen
// 0x0001 (0x0001 - 0x0000)
struct SelectionWheelComponent_IsWheelOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelComponent_IsWheelOpen) == 0x000001, "Wrong alignment on SelectionWheelComponent_IsWheelOpen");
static_assert(sizeof(SelectionWheelComponent_IsWheelOpen) == 0x000001, "Wrong size on SelectionWheelComponent_IsWheelOpen");
static_assert(offsetof(SelectionWheelComponent_IsWheelOpen, ReturnValue) == 0x000000, "Member 'SelectionWheelComponent_IsWheelOpen::ReturnValue' has a wrong offset!");

// Function Flame.SelectionWheelWeaponSlot.SetAmmoAngle
// 0x0004 (0x0004 - 0x0000)
struct SelectionWheelWeaponSlot_SetAmmoAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectionWheelWeaponSlot_SetAmmoAngle) == 0x000004, "Wrong alignment on SelectionWheelWeaponSlot_SetAmmoAngle");
static_assert(sizeof(SelectionWheelWeaponSlot_SetAmmoAngle) == 0x000004, "Wrong size on SelectionWheelWeaponSlot_SetAmmoAngle");
static_assert(offsetof(SelectionWheelWeaponSlot_SetAmmoAngle, InAngle) == 0x000000, "Member 'SelectionWheelWeaponSlot_SetAmmoAngle::InAngle' has a wrong offset!");

// Function Flame.ShelterFunctions.BoostImprovementUpgrade
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_BoostImprovementUpgrade final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_BoostImprovementUpgrade) == 0x000008, "Wrong alignment on ShelterFunctions_BoostImprovementUpgrade");
static_assert(sizeof(ShelterFunctions_BoostImprovementUpgrade) == 0x000018, "Wrong size on ShelterFunctions_BoostImprovementUpgrade");
static_assert(offsetof(ShelterFunctions_BoostImprovementUpgrade, Slot) == 0x000000, "Member 'ShelterFunctions_BoostImprovementUpgrade::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_BoostImprovementUpgrade, OneStash) == 0x000008, "Member 'ShelterFunctions_BoostImprovementUpgrade::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_BoostImprovementUpgrade, ReturnValue) == 0x000010, "Member 'ShelterFunctions_BoostImprovementUpgrade::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.CanBoostImprovementUpgrade
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_CanBoostImprovementUpgrade final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_CanBoostImprovementUpgrade) == 0x000008, "Wrong alignment on ShelterFunctions_CanBoostImprovementUpgrade");
static_assert(sizeof(ShelterFunctions_CanBoostImprovementUpgrade) == 0x000018, "Wrong size on ShelterFunctions_CanBoostImprovementUpgrade");
static_assert(offsetof(ShelterFunctions_CanBoostImprovementUpgrade, Slot) == 0x000000, "Member 'ShelterFunctions_CanBoostImprovementUpgrade::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanBoostImprovementUpgrade, OneStash) == 0x000008, "Member 'ShelterFunctions_CanBoostImprovementUpgrade::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanBoostImprovementUpgrade, ReturnValue) == 0x000010, "Member 'ShelterFunctions_CanBoostImprovementUpgrade::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.CanBuildSlot
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_CanBuildSlot final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_CanBuildSlot) == 0x000008, "Wrong alignment on ShelterFunctions_CanBuildSlot");
static_assert(sizeof(ShelterFunctions_CanBuildSlot) == 0x000018, "Wrong size on ShelterFunctions_CanBuildSlot");
static_assert(offsetof(ShelterFunctions_CanBuildSlot, Slot) == 0x000000, "Member 'ShelterFunctions_CanBuildSlot::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanBuildSlot, OneStash) == 0x000008, "Member 'ShelterFunctions_CanBuildSlot::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanBuildSlot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_CanBuildSlot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.CanCollectFromImprovement
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_CanCollectFromImprovement final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_CanCollectFromImprovement) == 0x000008, "Wrong alignment on ShelterFunctions_CanCollectFromImprovement");
static_assert(sizeof(ShelterFunctions_CanCollectFromImprovement) == 0x000018, "Wrong size on ShelterFunctions_CanCollectFromImprovement");
static_assert(offsetof(ShelterFunctions_CanCollectFromImprovement, Slot) == 0x000000, "Member 'ShelterFunctions_CanCollectFromImprovement::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanCollectFromImprovement, OneStash) == 0x000008, "Member 'ShelterFunctions_CanCollectFromImprovement::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanCollectFromImprovement, ReturnValue) == 0x000010, "Member 'ShelterFunctions_CanCollectFromImprovement::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.CanUpgradeLevel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_CanUpgradeLevel final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_CanUpgradeLevel) == 0x000008, "Wrong alignment on ShelterFunctions_CanUpgradeLevel");
static_assert(sizeof(ShelterFunctions_CanUpgradeLevel) == 0x000010, "Wrong size on ShelterFunctions_CanUpgradeLevel");
static_assert(offsetof(ShelterFunctions_CanUpgradeLevel, OneStash) == 0x000000, "Member 'ShelterFunctions_CanUpgradeLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CanUpgradeLevel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_CanUpgradeLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.CollectFromShelterImprovementSlot
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_CollectFromShelterImprovementSlot final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_CollectFromShelterImprovementSlot) == 0x000008, "Wrong alignment on ShelterFunctions_CollectFromShelterImprovementSlot");
static_assert(sizeof(ShelterFunctions_CollectFromShelterImprovementSlot) == 0x000018, "Wrong size on ShelterFunctions_CollectFromShelterImprovementSlot");
static_assert(offsetof(ShelterFunctions_CollectFromShelterImprovementSlot, SlotClass) == 0x000000, "Member 'ShelterFunctions_CollectFromShelterImprovementSlot::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CollectFromShelterImprovementSlot, OneStash) == 0x000008, "Member 'ShelterFunctions_CollectFromShelterImprovementSlot::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_CollectFromShelterImprovementSlot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_CollectFromShelterImprovementSlot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.DeconstructSpecialResource
// 0x0030 (0x0030 - 0x0000)
struct ShelterFunctions_DeconstructSpecialResource final
{
public:
	TSubclassOf<class AShelterResourceItem>       ShelterResourceClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           OneStash;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             UICallback;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_DeconstructSpecialResource) == 0x000008, "Wrong alignment on ShelterFunctions_DeconstructSpecialResource");
static_assert(sizeof(ShelterFunctions_DeconstructSpecialResource) == 0x000030, "Wrong size on ShelterFunctions_DeconstructSpecialResource");
static_assert(offsetof(ShelterFunctions_DeconstructSpecialResource, ShelterResourceClass) == 0x000000, "Member 'ShelterFunctions_DeconstructSpecialResource::ShelterResourceClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_DeconstructSpecialResource, Count) == 0x000008, "Member 'ShelterFunctions_DeconstructSpecialResource::Count' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_DeconstructSpecialResource, OneStash) == 0x000010, "Member 'ShelterFunctions_DeconstructSpecialResource::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_DeconstructSpecialResource, UICallback) == 0x000018, "Member 'ShelterFunctions_DeconstructSpecialResource::UICallback' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_DeconstructSpecialResource, ReturnValue) == 0x000028, "Member 'ShelterFunctions_DeconstructSpecialResource::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetAllImprovements
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetAllImprovements final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCloudImprovementInfo>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetAllImprovements) == 0x000008, "Wrong alignment on ShelterFunctions_GetAllImprovements");
static_assert(sizeof(ShelterFunctions_GetAllImprovements) == 0x000018, "Wrong size on ShelterFunctions_GetAllImprovements");
static_assert(offsetof(ShelterFunctions_GetAllImprovements, OneStash) == 0x000000, "Member 'ShelterFunctions_GetAllImprovements::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetAllImprovements, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetAllImprovements::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetAllRepairs
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetAllRepairs final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AShelterRepair>>     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetAllRepairs) == 0x000008, "Wrong alignment on ShelterFunctions_GetAllRepairs");
static_assert(sizeof(ShelterFunctions_GetAllRepairs) == 0x000018, "Wrong size on ShelterFunctions_GetAllRepairs");
static_assert(offsetof(ShelterFunctions_GetAllRepairs, OneStash) == 0x000000, "Member 'ShelterFunctions_GetAllRepairs::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetAllRepairs, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetAllRepairs::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetBoosterTicket
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetBoosterTicket final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TypeKey;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetBoosterTicket) == 0x000008, "Wrong alignment on ShelterFunctions_GetBoosterTicket");
static_assert(sizeof(ShelterFunctions_GetBoosterTicket) == 0x000020, "Wrong size on ShelterFunctions_GetBoosterTicket");
static_assert(offsetof(ShelterFunctions_GetBoosterTicket, OneStash) == 0x000000, "Member 'ShelterFunctions_GetBoosterTicket::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicket, TypeKey) == 0x000008, "Member 'ShelterFunctions_GetBoosterTicket::TypeKey' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicket, ReturnValue) == 0x000018, "Member 'ShelterFunctions_GetBoosterTicket::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetBoosterTicketDetails
// 0x0048 (0x0048 - 0x0000)
struct ShelterFunctions_GetBoosterTicketDetails final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoosterDetails                        BoosterDetails;                                    // 0x0020(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetBoosterTicketDetails) == 0x000008, "Wrong alignment on ShelterFunctions_GetBoosterTicketDetails");
static_assert(sizeof(ShelterFunctions_GetBoosterTicketDetails) == 0x000048, "Wrong size on ShelterFunctions_GetBoosterTicketDetails");
static_assert(offsetof(ShelterFunctions_GetBoosterTicketDetails, OneStash) == 0x000000, "Member 'ShelterFunctions_GetBoosterTicketDetails::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicketDetails, Type) == 0x000008, "Member 'ShelterFunctions_GetBoosterTicketDetails::Type' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicketDetails, Index_0) == 0x000018, "Member 'ShelterFunctions_GetBoosterTicketDetails::Index_0' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicketDetails, BoosterDetails) == 0x000020, "Member 'ShelterFunctions_GetBoosterTicketDetails::BoosterDetails' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoosterTicketDetails, ReturnValue) == 0x000040, "Member 'ShelterFunctions_GetBoosterTicketDetails::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetBoostImprovementUpgradePrice
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetBoostImprovementUpgradePrice final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetBoostImprovementUpgradePrice) == 0x000008, "Wrong alignment on ShelterFunctions_GetBoostImprovementUpgradePrice");
static_assert(sizeof(ShelterFunctions_GetBoostImprovementUpgradePrice) == 0x000018, "Wrong size on ShelterFunctions_GetBoostImprovementUpgradePrice");
static_assert(offsetof(ShelterFunctions_GetBoostImprovementUpgradePrice, Slot) == 0x000000, "Member 'ShelterFunctions_GetBoostImprovementUpgradePrice::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoostImprovementUpgradePrice, OneStash) == 0x000008, "Member 'ShelterFunctions_GetBoostImprovementUpgradePrice::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetBoostImprovementUpgradePrice, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetBoostImprovementUpgradePrice::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfChemicals
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfChemicals final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfChemicals) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfChemicals");
static_assert(sizeof(ShelterFunctions_GetCountOfChemicals) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfChemicals");
static_assert(offsetof(ShelterFunctions_GetCountOfChemicals, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfChemicals::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfChemicals, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfChemicals::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfElectronics
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfElectronics final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfElectronics) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfElectronics");
static_assert(sizeof(ShelterFunctions_GetCountOfElectronics) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfElectronics");
static_assert(offsetof(ShelterFunctions_GetCountOfElectronics, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfElectronics::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfElectronics, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfElectronics::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfFertilizer
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfFertilizer final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfFertilizer) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfFertilizer");
static_assert(sizeof(ShelterFunctions_GetCountOfFertilizer) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfFertilizer");
static_assert(offsetof(ShelterFunctions_GetCountOfFertilizer, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfFertilizer::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfFertilizer, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfFertilizer::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfFuel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfFuel final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfFuel) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfFuel");
static_assert(sizeof(ShelterFunctions_GetCountOfFuel) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfFuel");
static_assert(offsetof(ShelterFunctions_GetCountOfFuel, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfFuel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfFuel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfFuel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfGlass
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfGlass final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfGlass) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfGlass");
static_assert(sizeof(ShelterFunctions_GetCountOfGlass) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfGlass");
static_assert(offsetof(ShelterFunctions_GetCountOfGlass, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfGlass::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfGlass, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfGlass::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfImprovementsInProgress
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfImprovementsInProgress final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfImprovementsInProgress) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfImprovementsInProgress");
static_assert(sizeof(ShelterFunctions_GetCountOfImprovementsInProgress) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfImprovementsInProgress");
static_assert(offsetof(ShelterFunctions_GetCountOfImprovementsInProgress, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfImprovementsInProgress::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfImprovementsInProgress, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfImprovementsInProgress::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfLootForCollectFromImprovement
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetCountOfLootForCollectFromImprovement final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfLootForCollectFromImprovement) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfLootForCollectFromImprovement");
static_assert(sizeof(ShelterFunctions_GetCountOfLootForCollectFromImprovement) == 0x000018, "Wrong size on ShelterFunctions_GetCountOfLootForCollectFromImprovement");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovement, Slot) == 0x000000, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovement::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovement, OneStash) == 0x000008, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovement::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovement, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovement::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfLootForCollectFromImprovementWithPrecision
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision");
static_assert(sizeof(ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision) == 0x000018, "Wrong size on ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision, Slot) == 0x000000, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision, OneStash) == 0x000008, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetCountOfLootForCollectFromImprovementWithPrecision::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfMetalParts
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfMetalParts final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfMetalParts) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfMetalParts");
static_assert(sizeof(ShelterFunctions_GetCountOfMetalParts) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfMetalParts");
static_assert(offsetof(ShelterFunctions_GetCountOfMetalParts, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfMetalParts::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfMetalParts, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfMetalParts::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfNails
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfNails final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfNails) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfNails");
static_assert(sizeof(ShelterFunctions_GetCountOfNails) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfNails");
static_assert(offsetof(ShelterFunctions_GetCountOfNails, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfNails::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfNails, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfNails::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfShelterResource
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetCountOfShelterResource final
{
public:
	TSubclassOf<class AShelterResourceItem>       ShelterResourceClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfShelterResource) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfShelterResource");
static_assert(sizeof(ShelterFunctions_GetCountOfShelterResource) == 0x000018, "Wrong size on ShelterFunctions_GetCountOfShelterResource");
static_assert(offsetof(ShelterFunctions_GetCountOfShelterResource, ShelterResourceClass) == 0x000000, "Member 'ShelterFunctions_GetCountOfShelterResource::ShelterResourceClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfShelterResource, OneStash) == 0x000008, "Member 'ShelterFunctions_GetCountOfShelterResource::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfShelterResource, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetCountOfShelterResource::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCountOfWire
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCountOfWire final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCountOfWire) == 0x000008, "Wrong alignment on ShelterFunctions_GetCountOfWire");
static_assert(sizeof(ShelterFunctions_GetCountOfWire) == 0x000010, "Wrong size on ShelterFunctions_GetCountOfWire");
static_assert(offsetof(ShelterFunctions_GetCountOfWire, OneStash) == 0x000000, "Member 'ShelterFunctions_GetCountOfWire::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCountOfWire, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCountOfWire::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCraftingTableLevel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetCraftingTableLevel final
{
public:
	const class AStash*                           Stash;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCraftingTableLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetCraftingTableLevel");
static_assert(sizeof(ShelterFunctions_GetCraftingTableLevel) == 0x000010, "Wrong size on ShelterFunctions_GetCraftingTableLevel");
static_assert(offsetof(ShelterFunctions_GetCraftingTableLevel, Stash) == 0x000000, "Member 'ShelterFunctions_GetCraftingTableLevel::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCraftingTableLevel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetCraftingTableLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCurrentGeneratorRateMultiplier
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetCurrentGeneratorRateMultiplier final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCurrentGeneratorRateMultiplier) == 0x000008, "Wrong alignment on ShelterFunctions_GetCurrentGeneratorRateMultiplier");
static_assert(sizeof(ShelterFunctions_GetCurrentGeneratorRateMultiplier) == 0x000018, "Wrong size on ShelterFunctions_GetCurrentGeneratorRateMultiplier");
static_assert(offsetof(ShelterFunctions_GetCurrentGeneratorRateMultiplier, Slot) == 0x000000, "Member 'ShelterFunctions_GetCurrentGeneratorRateMultiplier::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCurrentGeneratorRateMultiplier, OneStash) == 0x000008, "Member 'ShelterFunctions_GetCurrentGeneratorRateMultiplier::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCurrentGeneratorRateMultiplier, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetCurrentGeneratorRateMultiplier::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetCurrentImprovementLevel
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetCurrentImprovementLevel final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetCurrentImprovementLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetCurrentImprovementLevel");
static_assert(sizeof(ShelterFunctions_GetCurrentImprovementLevel) == 0x000018, "Wrong size on ShelterFunctions_GetCurrentImprovementLevel");
static_assert(offsetof(ShelterFunctions_GetCurrentImprovementLevel, Slot) == 0x000000, "Member 'ShelterFunctions_GetCurrentImprovementLevel::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCurrentImprovementLevel, OneStash) == 0x000008, "Member 'ShelterFunctions_GetCurrentImprovementLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetCurrentImprovementLevel, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetCurrentImprovementLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetFoodCurrency
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetFoodCurrency final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetFoodCurrency) == 0x000008, "Wrong alignment on ShelterFunctions_GetFoodCurrency");
static_assert(sizeof(ShelterFunctions_GetFoodCurrency) == 0x000010, "Wrong size on ShelterFunctions_GetFoodCurrency");
static_assert(offsetof(ShelterFunctions_GetFoodCurrency, OneStash) == 0x000000, "Member 'ShelterFunctions_GetFoodCurrency::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetFoodCurrency, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetFoodCurrency::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetFoodCurrencyCap
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetFoodCurrencyCap final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetFoodCurrencyCap) == 0x000008, "Wrong alignment on ShelterFunctions_GetFoodCurrencyCap");
static_assert(sizeof(ShelterFunctions_GetFoodCurrencyCap) == 0x000010, "Wrong size on ShelterFunctions_GetFoodCurrencyCap");
static_assert(offsetof(ShelterFunctions_GetFoodCurrencyCap, OneStash) == 0x000000, "Member 'ShelterFunctions_GetFoodCurrencyCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetFoodCurrencyCap, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetFoodCurrencyCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetGeneratorRate
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetGeneratorRate final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           OneStash;                                          // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBonusMode                                    Mode;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetGeneratorRate) == 0x000008, "Wrong alignment on ShelterFunctions_GetGeneratorRate");
static_assert(sizeof(ShelterFunctions_GetGeneratorRate) == 0x000020, "Wrong size on ShelterFunctions_GetGeneratorRate");
static_assert(offsetof(ShelterFunctions_GetGeneratorRate, Slot) == 0x000000, "Member 'ShelterFunctions_GetGeneratorRate::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetGeneratorRate, Level) == 0x000008, "Member 'ShelterFunctions_GetGeneratorRate::Level' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetGeneratorRate, OneStash) == 0x000010, "Member 'ShelterFunctions_GetGeneratorRate::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetGeneratorRate, Mode) == 0x000018, "Member 'ShelterFunctions_GetGeneratorRate::Mode' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetGeneratorRate, ReturnValue) == 0x00001C, "Member 'ShelterFunctions_GetGeneratorRate::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetHardCurrency
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetHardCurrency final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetHardCurrency) == 0x000008, "Wrong alignment on ShelterFunctions_GetHardCurrency");
static_assert(sizeof(ShelterFunctions_GetHardCurrency) == 0x000010, "Wrong size on ShelterFunctions_GetHardCurrency");
static_assert(offsetof(ShelterFunctions_GetHardCurrency, OneStash) == 0x000000, "Member 'ShelterFunctions_GetHardCurrency::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetHardCurrency, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetHardCurrency::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetHardCurrencyCap
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetHardCurrencyCap final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetHardCurrencyCap) == 0x000008, "Wrong alignment on ShelterFunctions_GetHardCurrencyCap");
static_assert(sizeof(ShelterFunctions_GetHardCurrencyCap) == 0x000010, "Wrong size on ShelterFunctions_GetHardCurrencyCap");
static_assert(offsetof(ShelterFunctions_GetHardCurrencyCap, OneStash) == 0x000000, "Member 'ShelterFunctions_GetHardCurrencyCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetHardCurrencyCap, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetHardCurrencyCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetImprovementsCount
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetImprovementsCount final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetImprovementsCount) == 0x000008, "Wrong alignment on ShelterFunctions_GetImprovementsCount");
static_assert(sizeof(ShelterFunctions_GetImprovementsCount) == 0x000010, "Wrong size on ShelterFunctions_GetImprovementsCount");
static_assert(offsetof(ShelterFunctions_GetImprovementsCount, OneStash) == 0x000000, "Member 'ShelterFunctions_GetImprovementsCount::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementsCount, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetImprovementsCount::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetImprovementSlotState
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetImprovementSlotState final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShelterSlotInfo                       ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetImprovementSlotState) == 0x000008, "Wrong alignment on ShelterFunctions_GetImprovementSlotState");
static_assert(sizeof(ShelterFunctions_GetImprovementSlotState) == 0x000020, "Wrong size on ShelterFunctions_GetImprovementSlotState");
static_assert(offsetof(ShelterFunctions_GetImprovementSlotState, Slot) == 0x000000, "Member 'ShelterFunctions_GetImprovementSlotState::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementSlotState, OneStash) == 0x000008, "Member 'ShelterFunctions_GetImprovementSlotState::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementSlotState, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetImprovementSlotState::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetImprovementStatus
// 0x0088 (0x0088 - 0x0000)
struct ShelterFunctions_GetImprovementStatus final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudImprovementInfo                  ReturnValue;                                       // 0x0010(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetImprovementStatus) == 0x000008, "Wrong alignment on ShelterFunctions_GetImprovementStatus");
static_assert(sizeof(ShelterFunctions_GetImprovementStatus) == 0x000088, "Wrong size on ShelterFunctions_GetImprovementStatus");
static_assert(offsetof(ShelterFunctions_GetImprovementStatus, SlotClass) == 0x000000, "Member 'ShelterFunctions_GetImprovementStatus::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementStatus, OneStash) == 0x000008, "Member 'ShelterFunctions_GetImprovementStatus::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementStatus, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetImprovementStatus::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetImprovementTextDescriptionForLevel
// 0x0038 (0x0038 - 0x0000)
struct ShelterFunctions_GetImprovementTextDescriptionForLevel final
{
public:
	TSubclassOf<class AShelterImprovement>        Improvement;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShelterImprovementDescription                Mode;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           OneStash;                                          // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImprovementTextDescription            ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetImprovementTextDescriptionForLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetImprovementTextDescriptionForLevel");
static_assert(sizeof(ShelterFunctions_GetImprovementTextDescriptionForLevel) == 0x000038, "Wrong size on ShelterFunctions_GetImprovementTextDescriptionForLevel");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, Improvement) == 0x000000, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::Improvement' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, Slot) == 0x000008, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, Level) == 0x000010, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::Level' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, Mode) == 0x000014, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::Mode' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, OneStash) == 0x000018, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetImprovementTextDescriptionForLevel, ReturnValue) == 0x000020, "Member 'ShelterFunctions_GetImprovementTextDescriptionForLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetInfoAboutImprovementInSlot
// 0x0080 (0x0080 - 0x0000)
struct ShelterFunctions_GetInfoAboutImprovementInSlot final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShelterImprovementInfo                ReturnValue;                                       // 0x0010(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetInfoAboutImprovementInSlot) == 0x000008, "Wrong alignment on ShelterFunctions_GetInfoAboutImprovementInSlot");
static_assert(sizeof(ShelterFunctions_GetInfoAboutImprovementInSlot) == 0x000080, "Wrong size on ShelterFunctions_GetInfoAboutImprovementInSlot");
static_assert(offsetof(ShelterFunctions_GetInfoAboutImprovementInSlot, Slot) == 0x000000, "Member 'ShelterFunctions_GetInfoAboutImprovementInSlot::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetInfoAboutImprovementInSlot, OneStash) == 0x000008, "Member 'ShelterFunctions_GetInfoAboutImprovementInSlot::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetInfoAboutImprovementInSlot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetInfoAboutImprovementInSlot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetInstantPriceToUpgradeImprovementForCertainLevel
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel");
static_assert(sizeof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel) == 0x000020, "Wrong size on ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel");
static_assert(offsetof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel, SlotClass) == 0x000000, "Member 'ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel, Level) == 0x000008, "Member 'ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel::Level' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel, Stash) == 0x000010, "Member 'ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel, ReturnValue) == 0x000018, "Member 'ShelterFunctions_GetInstantPriceToUpgradeImprovementForCertainLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetLevelDescriptor
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetLevelDescriptor final
{
public:
	int32                                         NeededLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudDataShelterLevel                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetLevelDescriptor) == 0x000008, "Wrong alignment on ShelterFunctions_GetLevelDescriptor");
static_assert(sizeof(ShelterFunctions_GetLevelDescriptor) == 0x000020, "Wrong size on ShelterFunctions_GetLevelDescriptor");
static_assert(offsetof(ShelterFunctions_GetLevelDescriptor, NeededLevel) == 0x000000, "Member 'ShelterFunctions_GetLevelDescriptor::NeededLevel' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetLevelDescriptor, OneStash) == 0x000008, "Member 'ShelterFunctions_GetLevelDescriptor::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetLevelDescriptor, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetLevelDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetMaterialCostForNextLevel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetMaterialCostForNextLevel final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetMaterialCostForNextLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetMaterialCostForNextLevel");
static_assert(sizeof(ShelterFunctions_GetMaterialCostForNextLevel) == 0x000010, "Wrong size on ShelterFunctions_GetMaterialCostForNextLevel");
static_assert(offsetof(ShelterFunctions_GetMaterialCostForNextLevel, OneStash) == 0x000000, "Member 'ShelterFunctions_GetMaterialCostForNextLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaterialCostForNextLevel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetMaterialCostForNextLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetMaterialCurrency
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetMaterialCurrency final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetMaterialCurrency) == 0x000008, "Wrong alignment on ShelterFunctions_GetMaterialCurrency");
static_assert(sizeof(ShelterFunctions_GetMaterialCurrency) == 0x000010, "Wrong size on ShelterFunctions_GetMaterialCurrency");
static_assert(offsetof(ShelterFunctions_GetMaterialCurrency, OneStash) == 0x000000, "Member 'ShelterFunctions_GetMaterialCurrency::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaterialCurrency, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetMaterialCurrency::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetMaterialCurrencyCap
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetMaterialCurrencyCap final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetMaterialCurrencyCap) == 0x000008, "Wrong alignment on ShelterFunctions_GetMaterialCurrencyCap");
static_assert(sizeof(ShelterFunctions_GetMaterialCurrencyCap) == 0x000010, "Wrong size on ShelterFunctions_GetMaterialCurrencyCap");
static_assert(offsetof(ShelterFunctions_GetMaterialCurrencyCap, OneStash) == 0x000000, "Member 'ShelterFunctions_GetMaterialCurrencyCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaterialCurrencyCap, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetMaterialCurrencyCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetMaxImprovementLevel
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetMaxImprovementLevel final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetMaxImprovementLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetMaxImprovementLevel");
static_assert(sizeof(ShelterFunctions_GetMaxImprovementLevel) == 0x000018, "Wrong size on ShelterFunctions_GetMaxImprovementLevel");
static_assert(offsetof(ShelterFunctions_GetMaxImprovementLevel, Slot) == 0x000000, "Member 'ShelterFunctions_GetMaxImprovementLevel::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaxImprovementLevel, OneStash) == 0x000008, "Member 'ShelterFunctions_GetMaxImprovementLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaxImprovementLevel, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetMaxImprovementLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetMaxImprovementsInProgress
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetMaxImprovementsInProgress final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetMaxImprovementsInProgress) == 0x000008, "Wrong alignment on ShelterFunctions_GetMaxImprovementsInProgress");
static_assert(sizeof(ShelterFunctions_GetMaxImprovementsInProgress) == 0x000010, "Wrong size on ShelterFunctions_GetMaxImprovementsInProgress");
static_assert(offsetof(ShelterFunctions_GetMaxImprovementsInProgress, OneStash) == 0x000000, "Member 'ShelterFunctions_GetMaxImprovementsInProgress::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetMaxImprovementsInProgress, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetMaxImprovementsInProgress::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetNeededImprovementsCountForNextLevel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetNeededImprovementsCountForNextLevel final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetNeededImprovementsCountForNextLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetNeededImprovementsCountForNextLevel");
static_assert(sizeof(ShelterFunctions_GetNeededImprovementsCountForNextLevel) == 0x000010, "Wrong size on ShelterFunctions_GetNeededImprovementsCountForNextLevel");
static_assert(offsetof(ShelterFunctions_GetNeededImprovementsCountForNextLevel, OneStash) == 0x000000, "Member 'ShelterFunctions_GetNeededImprovementsCountForNextLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetNeededImprovementsCountForNextLevel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetNeededImprovementsCountForNextLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetNeededLevelForImprovement
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetNeededLevelForImprovement final
{
public:
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetNeededLevelForImprovement) == 0x000008, "Wrong alignment on ShelterFunctions_GetNeededLevelForImprovement");
static_assert(sizeof(ShelterFunctions_GetNeededLevelForImprovement) == 0x000018, "Wrong size on ShelterFunctions_GetNeededLevelForImprovement");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForImprovement, ImprovementClass) == 0x000000, "Member 'ShelterFunctions_GetNeededLevelForImprovement::ImprovementClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForImprovement, Stash) == 0x000008, "Member 'ShelterFunctions_GetNeededLevelForImprovement::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForImprovement, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetNeededLevelForImprovement::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetNeededLevelForSlot
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetNeededLevelForSlot final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetNeededLevelForSlot) == 0x000008, "Wrong alignment on ShelterFunctions_GetNeededLevelForSlot");
static_assert(sizeof(ShelterFunctions_GetNeededLevelForSlot) == 0x000018, "Wrong size on ShelterFunctions_GetNeededLevelForSlot");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForSlot, Slot) == 0x000000, "Member 'ShelterFunctions_GetNeededLevelForSlot::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForSlot, Stash) == 0x000008, "Member 'ShelterFunctions_GetNeededLevelForSlot::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetNeededLevelForSlot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetNeededLevelForSlot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetRemainingImprovementBuildingTime
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetRemainingImprovementBuildingTime final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetRemainingImprovementBuildingTime) == 0x000008, "Wrong alignment on ShelterFunctions_GetRemainingImprovementBuildingTime");
static_assert(sizeof(ShelterFunctions_GetRemainingImprovementBuildingTime) == 0x000018, "Wrong size on ShelterFunctions_GetRemainingImprovementBuildingTime");
static_assert(offsetof(ShelterFunctions_GetRemainingImprovementBuildingTime, SlotClass) == 0x000000, "Member 'ShelterFunctions_GetRemainingImprovementBuildingTime::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRemainingImprovementBuildingTime, OneStash) == 0x000008, "Member 'ShelterFunctions_GetRemainingImprovementBuildingTime::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRemainingImprovementBuildingTime, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetRemainingImprovementBuildingTime::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetRepairLevel
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetRepairLevel final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetRepairLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetRepairLevel");
static_assert(sizeof(ShelterFunctions_GetRepairLevel) == 0x000010, "Wrong size on ShelterFunctions_GetRepairLevel");
static_assert(offsetof(ShelterFunctions_GetRepairLevel, OneStash) == 0x000000, "Member 'ShelterFunctions_GetRepairLevel::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRepairLevel, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetRepairLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetRepairLevelCap
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_GetRepairLevelCap final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetRepairLevelCap) == 0x000008, "Wrong alignment on ShelterFunctions_GetRepairLevelCap");
static_assert(sizeof(ShelterFunctions_GetRepairLevelCap) == 0x000010, "Wrong size on ShelterFunctions_GetRepairLevelCap");
static_assert(offsetof(ShelterFunctions_GetRepairLevelCap, OneStash) == 0x000000, "Member 'ShelterFunctions_GetRepairLevelCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRepairLevelCap, ReturnValue) == 0x000008, "Member 'ShelterFunctions_GetRepairLevelCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetRequirementsForUpgrade
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetRequirementsForUpgrade final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FShelterResourceInfo>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetRequirementsForUpgrade) == 0x000008, "Wrong alignment on ShelterFunctions_GetRequirementsForUpgrade");
static_assert(sizeof(ShelterFunctions_GetRequirementsForUpgrade) == 0x000020, "Wrong size on ShelterFunctions_GetRequirementsForUpgrade");
static_assert(offsetof(ShelterFunctions_GetRequirementsForUpgrade, Slot) == 0x000000, "Member 'ShelterFunctions_GetRequirementsForUpgrade::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRequirementsForUpgrade, OneStash) == 0x000008, "Member 'ShelterFunctions_GetRequirementsForUpgrade::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetRequirementsForUpgrade, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetRequirementsForUpgrade::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetShelterResourceMaterialCost
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetShelterResourceMaterialCost final
{
public:
	TSubclassOf<class AShelterResourceItem>       ShelterResourceClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetShelterResourceMaterialCost) == 0x000008, "Wrong alignment on ShelterFunctions_GetShelterResourceMaterialCost");
static_assert(sizeof(ShelterFunctions_GetShelterResourceMaterialCost) == 0x000018, "Wrong size on ShelterFunctions_GetShelterResourceMaterialCost");
static_assert(offsetof(ShelterFunctions_GetShelterResourceMaterialCost, ShelterResourceClass) == 0x000000, "Member 'ShelterFunctions_GetShelterResourceMaterialCost::ShelterResourceClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetShelterResourceMaterialCost, OneStash) == 0x000008, "Member 'ShelterFunctions_GetShelterResourceMaterialCost::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetShelterResourceMaterialCost, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetShelterResourceMaterialCost::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetSlotLootCapacity
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetSlotLootCapacity final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_GetSlotLootCapacity) == 0x000008, "Wrong alignment on ShelterFunctions_GetSlotLootCapacity");
static_assert(sizeof(ShelterFunctions_GetSlotLootCapacity) == 0x000018, "Wrong size on ShelterFunctions_GetSlotLootCapacity");
static_assert(offsetof(ShelterFunctions_GetSlotLootCapacity, Slot) == 0x000000, "Member 'ShelterFunctions_GetSlotLootCapacity::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetSlotLootCapacity, OneStash) == 0x000008, "Member 'ShelterFunctions_GetSlotLootCapacity::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetSlotLootCapacity, ReturnValue) == 0x000010, "Member 'ShelterFunctions_GetSlotLootCapacity::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetTimeToUpgradeImprovementForCertainLevel
// 0x0020 (0x0020 - 0x0000)
struct ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AStash*                           Stash;                                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBonusMode                                    Mode;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel");
static_assert(sizeof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel) == 0x000020, "Wrong size on ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel, SlotClass) == 0x000000, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel, Level) == 0x000008, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel::Level' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel, Stash) == 0x000010, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel, Mode) == 0x000018, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel::Mode' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel, ReturnValue) == 0x00001C, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForCertainLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.GetTimeToUpgradeImprovementForNextLevel
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel final
{
public:
	TSubclassOf<class AShelterSlot>               SlotClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           Stash;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBonusMode                                    Mode;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel) == 0x000008, "Wrong alignment on ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel");
static_assert(sizeof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel) == 0x000018, "Wrong size on ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel, SlotClass) == 0x000000, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel::SlotClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel, Stash) == 0x000008, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel, Mode) == 0x000010, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel::Mode' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel, ReturnValue) == 0x000014, "Member 'ShelterFunctions_GetTimeToUpgradeImprovementForNextLevel::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.HasLevelForBuildImprovement
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_HasLevelForBuildImprovement final
{
public:
	TSubclassOf<class AShelterImprovement>        ImprovementClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_HasLevelForBuildImprovement) == 0x000008, "Wrong alignment on ShelterFunctions_HasLevelForBuildImprovement");
static_assert(sizeof(ShelterFunctions_HasLevelForBuildImprovement) == 0x000018, "Wrong size on ShelterFunctions_HasLevelForBuildImprovement");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildImprovement, ImprovementClass) == 0x000000, "Member 'ShelterFunctions_HasLevelForBuildImprovement::ImprovementClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildImprovement, Stash) == 0x000008, "Member 'ShelterFunctions_HasLevelForBuildImprovement::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildImprovement, ReturnValue) == 0x000010, "Member 'ShelterFunctions_HasLevelForBuildImprovement::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.HasLevelForBuildSlot
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_HasLevelForBuildSlot final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStash*                                 Stash;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_HasLevelForBuildSlot) == 0x000008, "Wrong alignment on ShelterFunctions_HasLevelForBuildSlot");
static_assert(sizeof(ShelterFunctions_HasLevelForBuildSlot) == 0x000018, "Wrong size on ShelterFunctions_HasLevelForBuildSlot");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildSlot, Slot) == 0x000000, "Member 'ShelterFunctions_HasLevelForBuildSlot::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildSlot, Stash) == 0x000008, "Member 'ShelterFunctions_HasLevelForBuildSlot::Stash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasLevelForBuildSlot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_HasLevelForBuildSlot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.HasToken
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_HasToken final
{
public:
	TSubclassOf<class AToken>                     TokenClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_HasToken) == 0x000008, "Wrong alignment on ShelterFunctions_HasToken");
static_assert(sizeof(ShelterFunctions_HasToken) == 0x000018, "Wrong size on ShelterFunctions_HasToken");
static_assert(offsetof(ShelterFunctions_HasToken, TokenClass) == 0x000000, "Member 'ShelterFunctions_HasToken::TokenClass' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasToken, OneStash) == 0x000008, "Member 'ShelterFunctions_HasToken::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_HasToken, ReturnValue) == 0x000010, "Member 'ShelterFunctions_HasToken::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.IsMatchmakingAllowed
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_IsMatchmakingAllowed final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_IsMatchmakingAllowed) == 0x000008, "Wrong alignment on ShelterFunctions_IsMatchmakingAllowed");
static_assert(sizeof(ShelterFunctions_IsMatchmakingAllowed) == 0x000010, "Wrong size on ShelterFunctions_IsMatchmakingAllowed");
static_assert(offsetof(ShelterFunctions_IsMatchmakingAllowed, WorldContextObject) == 0x000000, "Member 'ShelterFunctions_IsMatchmakingAllowed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsMatchmakingAllowed, ReturnValue) == 0x000008, "Member 'ShelterFunctions_IsMatchmakingAllowed::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.IsSlotFullOfLoot
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_IsSlotFullOfLoot final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_IsSlotFullOfLoot) == 0x000008, "Wrong alignment on ShelterFunctions_IsSlotFullOfLoot");
static_assert(sizeof(ShelterFunctions_IsSlotFullOfLoot) == 0x000018, "Wrong size on ShelterFunctions_IsSlotFullOfLoot");
static_assert(offsetof(ShelterFunctions_IsSlotFullOfLoot, Slot) == 0x000000, "Member 'ShelterFunctions_IsSlotFullOfLoot::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsSlotFullOfLoot, OneStash) == 0x000008, "Member 'ShelterFunctions_IsSlotFullOfLoot::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsSlotFullOfLoot, ReturnValue) == 0x000010, "Member 'ShelterFunctions_IsSlotFullOfLoot::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.RepairLevelUp
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_RepairLevelUp final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_RepairLevelUp) == 0x000008, "Wrong alignment on ShelterFunctions_RepairLevelUp");
static_assert(sizeof(ShelterFunctions_RepairLevelUp) == 0x000010, "Wrong size on ShelterFunctions_RepairLevelUp");
static_assert(offsetof(ShelterFunctions_RepairLevelUp, OneStash) == 0x000000, "Member 'ShelterFunctions_RepairLevelUp::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_RepairLevelUp, ReturnValue) == 0x000008, "Member 'ShelterFunctions_RepairLevelUp::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.UpgradeImprovement
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_UpgradeImprovement final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudRequest                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_UpgradeImprovement) == 0x000008, "Wrong alignment on ShelterFunctions_UpgradeImprovement");
static_assert(sizeof(ShelterFunctions_UpgradeImprovement) == 0x000018, "Wrong size on ShelterFunctions_UpgradeImprovement");
static_assert(offsetof(ShelterFunctions_UpgradeImprovement, Slot) == 0x000000, "Member 'ShelterFunctions_UpgradeImprovement::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_UpgradeImprovement, OneStash) == 0x000008, "Member 'ShelterFunctions_UpgradeImprovement::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_UpgradeImprovement, ReturnValue) == 0x000010, "Member 'ShelterFunctions_UpgradeImprovement::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.IsShelterLevelLowerThanCap
// 0x0010 (0x0010 - 0x0000)
struct ShelterFunctions_IsShelterLevelLowerThanCap final
{
public:
	const class AStash*                           OneStash;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_IsShelterLevelLowerThanCap) == 0x000008, "Wrong alignment on ShelterFunctions_IsShelterLevelLowerThanCap");
static_assert(sizeof(ShelterFunctions_IsShelterLevelLowerThanCap) == 0x000010, "Wrong size on ShelterFunctions_IsShelterLevelLowerThanCap");
static_assert(offsetof(ShelterFunctions_IsShelterLevelLowerThanCap, OneStash) == 0x000000, "Member 'ShelterFunctions_IsShelterLevelLowerThanCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsShelterLevelLowerThanCap, ReturnValue) == 0x000008, "Member 'ShelterFunctions_IsShelterLevelLowerThanCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterFunctions.IsSlotLevelLowerThanCap
// 0x0018 (0x0018 - 0x0000)
struct ShelterFunctions_IsSlotLevelLowerThanCap final
{
public:
	TSubclassOf<class AShelterSlot>               Slot;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AStash*                           OneStash;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterFunctions_IsSlotLevelLowerThanCap) == 0x000008, "Wrong alignment on ShelterFunctions_IsSlotLevelLowerThanCap");
static_assert(sizeof(ShelterFunctions_IsSlotLevelLowerThanCap) == 0x000018, "Wrong size on ShelterFunctions_IsSlotLevelLowerThanCap");
static_assert(offsetof(ShelterFunctions_IsSlotLevelLowerThanCap, Slot) == 0x000000, "Member 'ShelterFunctions_IsSlotLevelLowerThanCap::Slot' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsSlotLevelLowerThanCap, OneStash) == 0x000008, "Member 'ShelterFunctions_IsSlotLevelLowerThanCap::OneStash' has a wrong offset!");
static_assert(offsetof(ShelterFunctions_IsSlotLevelLowerThanCap, ReturnValue) == 0x000010, "Member 'ShelterFunctions_IsSlotLevelLowerThanCap::ReturnValue' has a wrong offset!");

// Function Flame.ShelterImprovement.SetParentShelterSlot
// 0x0008 (0x0008 - 0x0000)
struct ShelterImprovement_SetParentShelterSlot final
{
public:
	TSubclassOf<class AShelterSlot>               OwnerSlot;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterImprovement_SetParentShelterSlot) == 0x000008, "Wrong alignment on ShelterImprovement_SetParentShelterSlot");
static_assert(sizeof(ShelterImprovement_SetParentShelterSlot) == 0x000008, "Wrong size on ShelterImprovement_SetParentShelterSlot");
static_assert(offsetof(ShelterImprovement_SetParentShelterSlot, OwnerSlot) == 0x000000, "Member 'ShelterImprovement_SetParentShelterSlot::OwnerSlot' has a wrong offset!");

// Function Flame.ShelterImprovement.GetParentSlot
// 0x0008 (0x0008 - 0x0000)
struct ShelterImprovement_GetParentSlot final
{
public:
	TSubclassOf<class AShelterSlot>               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterImprovement_GetParentSlot) == 0x000008, "Wrong alignment on ShelterImprovement_GetParentSlot");
static_assert(sizeof(ShelterImprovement_GetParentSlot) == 0x000008, "Wrong size on ShelterImprovement_GetParentSlot");
static_assert(offsetof(ShelterImprovement_GetParentSlot, ReturnValue) == 0x000000, "Member 'ShelterImprovement_GetParentSlot::ReturnValue' has a wrong offset!");

// Function Flame.TabControlWidget.Lock
// 0x0001 (0x0001 - 0x0000)
struct TabControlWidget_Lock final
{
public:
	bool                                          bApplyToParents;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_Lock) == 0x000001, "Wrong alignment on TabControlWidget_Lock");
static_assert(sizeof(TabControlWidget_Lock) == 0x000001, "Wrong size on TabControlWidget_Lock");
static_assert(offsetof(TabControlWidget_Lock, bApplyToParents) == 0x000000, "Member 'TabControlWidget_Lock::bApplyToParents' has a wrong offset!");

// Function Flame.TabControlWidget.OnSelectionChanged
// 0x0008 (0x0008 - 0x0000)
struct TabControlWidget_OnSelectionChanged final
{
public:
	int32                                         NewIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldIndex;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_OnSelectionChanged) == 0x000004, "Wrong alignment on TabControlWidget_OnSelectionChanged");
static_assert(sizeof(TabControlWidget_OnSelectionChanged) == 0x000008, "Wrong size on TabControlWidget_OnSelectionChanged");
static_assert(offsetof(TabControlWidget_OnSelectionChanged, NewIndex) == 0x000000, "Member 'TabControlWidget_OnSelectionChanged::NewIndex' has a wrong offset!");
static_assert(offsetof(TabControlWidget_OnSelectionChanged, OldIndex) == 0x000004, "Member 'TabControlWidget_OnSelectionChanged::OldIndex' has a wrong offset!");

// Function Flame.TabControlWidget.ReselectTab
// 0x0004 (0x0004 - 0x0000)
struct TabControlWidget_ReselectTab final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_ReselectTab) == 0x000004, "Wrong alignment on TabControlWidget_ReselectTab");
static_assert(sizeof(TabControlWidget_ReselectTab) == 0x000004, "Wrong size on TabControlWidget_ReselectTab");
static_assert(offsetof(TabControlWidget_ReselectTab, TabIndex) == 0x000000, "Member 'TabControlWidget_ReselectTab::TabIndex' has a wrong offset!");

// Function Flame.TabControlWidget.SelectTab
// 0x0004 (0x0004 - 0x0000)
struct TabControlWidget_SelectTab final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_SelectTab) == 0x000004, "Wrong alignment on TabControlWidget_SelectTab");
static_assert(sizeof(TabControlWidget_SelectTab) == 0x000004, "Wrong size on TabControlWidget_SelectTab");
static_assert(offsetof(TabControlWidget_SelectTab, TabIndex) == 0x000000, "Member 'TabControlWidget_SelectTab::TabIndex' has a wrong offset!");

// Function Flame.TabControlWidget.SetInitialTabIndex
// 0x0004 (0x0004 - 0x0000)
struct TabControlWidget_SetInitialTabIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_SetInitialTabIndex) == 0x000004, "Wrong alignment on TabControlWidget_SetInitialTabIndex");
static_assert(sizeof(TabControlWidget_SetInitialTabIndex) == 0x000004, "Wrong size on TabControlWidget_SetInitialTabIndex");
static_assert(offsetof(TabControlWidget_SetInitialTabIndex, InIndex) == 0x000000, "Member 'TabControlWidget_SetInitialTabIndex::InIndex' has a wrong offset!");

// Function Flame.TabControlWidget.Unlock
// 0x0001 (0x0001 - 0x0000)
struct TabControlWidget_Unlock final
{
public:
	bool                                          bApplyToParents;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_Unlock) == 0x000001, "Wrong alignment on TabControlWidget_Unlock");
static_assert(sizeof(TabControlWidget_Unlock) == 0x000001, "Wrong size on TabControlWidget_Unlock");
static_assert(offsetof(TabControlWidget_Unlock, bApplyToParents) == 0x000000, "Member 'TabControlWidget_Unlock::bApplyToParents' has a wrong offset!");

// Function Flame.TabControlWidget.CreateTabs
// 0x0010 (0x0010 - 0x0000)
struct TabControlWidget_CreateTabs final
{
public:
	TArray<class UTabWidget*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_CreateTabs) == 0x000008, "Wrong alignment on TabControlWidget_CreateTabs");
static_assert(sizeof(TabControlWidget_CreateTabs) == 0x000010, "Wrong size on TabControlWidget_CreateTabs");
static_assert(offsetof(TabControlWidget_CreateTabs, ReturnValue) == 0x000000, "Member 'TabControlWidget_CreateTabs::ReturnValue' has a wrong offset!");

// Function Flame.TabControlWidget.GetSelectedTab
// 0x0008 (0x0008 - 0x0000)
struct TabControlWidget_GetSelectedTab final
{
public:
	class UTabWidget*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_GetSelectedTab) == 0x000008, "Wrong alignment on TabControlWidget_GetSelectedTab");
static_assert(sizeof(TabControlWidget_GetSelectedTab) == 0x000008, "Wrong size on TabControlWidget_GetSelectedTab");
static_assert(offsetof(TabControlWidget_GetSelectedTab, ReturnValue) == 0x000000, "Member 'TabControlWidget_GetSelectedTab::ReturnValue' has a wrong offset!");

// Function Flame.TabControlWidget.GetTabCount
// 0x0004 (0x0004 - 0x0000)
struct TabControlWidget_GetTabCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_GetTabCount) == 0x000004, "Wrong alignment on TabControlWidget_GetTabCount");
static_assert(sizeof(TabControlWidget_GetTabCount) == 0x000004, "Wrong size on TabControlWidget_GetTabCount");
static_assert(offsetof(TabControlWidget_GetTabCount, ReturnValue) == 0x000000, "Member 'TabControlWidget_GetTabCount::ReturnValue' has a wrong offset!");

// Function Flame.TabControlWidget.IsLocked
// 0x0001 (0x0001 - 0x0000)
struct TabControlWidget_IsLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabControlWidget_IsLocked) == 0x000001, "Wrong alignment on TabControlWidget_IsLocked");
static_assert(sizeof(TabControlWidget_IsLocked) == 0x000001, "Wrong size on TabControlWidget_IsLocked");
static_assert(offsetof(TabControlWidget_IsLocked, ReturnValue) == 0x000000, "Member 'TabControlWidget_IsLocked::ReturnValue' has a wrong offset!");

// Function Flame.ShelterMainTabControl.SelectMainTab
// 0x0001 (0x0001 - 0x0000)
struct ShelterMainTabControl_SelectMainTab final
{
public:
	EShelterMainTab                               Tab;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMainTabControl_SelectMainTab) == 0x000001, "Wrong alignment on ShelterMainTabControl_SelectMainTab");
static_assert(sizeof(ShelterMainTabControl_SelectMainTab) == 0x000001, "Wrong size on ShelterMainTabControl_SelectMainTab");
static_assert(offsetof(ShelterMainTabControl_SelectMainTab, Tab) == 0x000000, "Member 'ShelterMainTabControl_SelectMainTab::Tab' has a wrong offset!");

// Function Flame.ShelterMainTabControl.SetInitialMainTab
// 0x0001 (0x0001 - 0x0000)
struct ShelterMainTabControl_SetInitialMainTab final
{
public:
	EShelterMainTab                               Tab;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMainTabControl_SetInitialMainTab) == 0x000001, "Wrong alignment on ShelterMainTabControl_SetInitialMainTab");
static_assert(sizeof(ShelterMainTabControl_SetInitialMainTab) == 0x000001, "Wrong size on ShelterMainTabControl_SetInitialMainTab");
static_assert(offsetof(ShelterMainTabControl_SetInitialMainTab, Tab) == 0x000000, "Member 'ShelterMainTabControl_SetInitialMainTab::Tab' has a wrong offset!");

// Function Flame.ShelterMainTabControl.GetTabIndex
// 0x0008 (0x0008 - 0x0000)
struct ShelterMainTabControl_GetTabIndex final
{
public:
	EShelterMainTab                               InTab;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMainTabControl_GetTabIndex) == 0x000004, "Wrong alignment on ShelterMainTabControl_GetTabIndex");
static_assert(sizeof(ShelterMainTabControl_GetTabIndex) == 0x000008, "Wrong size on ShelterMainTabControl_GetTabIndex");
static_assert(offsetof(ShelterMainTabControl_GetTabIndex, InTab) == 0x000000, "Member 'ShelterMainTabControl_GetTabIndex::InTab' has a wrong offset!");
static_assert(offsetof(ShelterMainTabControl_GetTabIndex, ReturnValue) == 0x000004, "Member 'ShelterMainTabControl_GetTabIndex::ReturnValue' has a wrong offset!");

// Function Flame.ShelterMapTile.NativeOnCrossPlayCheckFinished
// 0x0001 (0x0001 - 0x0000)
struct ShelterMapTile_NativeOnCrossPlayCheckFinished final
{
public:
	bool                                          bCanUserCrossPlay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_NativeOnCrossPlayCheckFinished) == 0x000001, "Wrong alignment on ShelterMapTile_NativeOnCrossPlayCheckFinished");
static_assert(sizeof(ShelterMapTile_NativeOnCrossPlayCheckFinished) == 0x000001, "Wrong size on ShelterMapTile_NativeOnCrossPlayCheckFinished");
static_assert(offsetof(ShelterMapTile_NativeOnCrossPlayCheckFinished, bCanUserCrossPlay) == 0x000000, "Member 'ShelterMapTile_NativeOnCrossPlayCheckFinished::bCanUserCrossPlay' has a wrong offset!");

// Function Flame.ShelterMapTile.NativeOnPlayerJoinedGroup
// 0x0038 (0x0038 - 0x0000)
struct ShelterMapTile_NativeOnPlayerJoinedGroup final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGroupId;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_NativeOnPlayerJoinedGroup) == 0x000008, "Wrong alignment on ShelterMapTile_NativeOnPlayerJoinedGroup");
static_assert(sizeof(ShelterMapTile_NativeOnPlayerJoinedGroup) == 0x000038, "Wrong size on ShelterMapTile_NativeOnPlayerJoinedGroup");
static_assert(offsetof(ShelterMapTile_NativeOnPlayerJoinedGroup, InUserId) == 0x000000, "Member 'ShelterMapTile_NativeOnPlayerJoinedGroup::InUserId' has a wrong offset!");
static_assert(offsetof(ShelterMapTile_NativeOnPlayerJoinedGroup, InGroupId) == 0x000028, "Member 'ShelterMapTile_NativeOnPlayerJoinedGroup::InGroupId' has a wrong offset!");

// Function Flame.ShelterMapTile.NativeOnPlayerLeftGroup
// 0x0038 (0x0038 - 0x0000)
struct ShelterMapTile_NativeOnPlayerLeftGroup final
{
public:
	struct FUniqueNetIdRepl                       InUserId;                                          // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGroupId;                                         // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_NativeOnPlayerLeftGroup) == 0x000008, "Wrong alignment on ShelterMapTile_NativeOnPlayerLeftGroup");
static_assert(sizeof(ShelterMapTile_NativeOnPlayerLeftGroup) == 0x000038, "Wrong size on ShelterMapTile_NativeOnPlayerLeftGroup");
static_assert(offsetof(ShelterMapTile_NativeOnPlayerLeftGroup, InUserId) == 0x000000, "Member 'ShelterMapTile_NativeOnPlayerLeftGroup::InUserId' has a wrong offset!");
static_assert(offsetof(ShelterMapTile_NativeOnPlayerLeftGroup, InGroupId) == 0x000028, "Member 'ShelterMapTile_NativeOnPlayerLeftGroup::InGroupId' has a wrong offset!");

// DelegateFunction Flame.ShelterMapTile.OnMapTileFocused__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ShelterMapTile_OnMapTileFocused__DelegateSignature final
{
public:
	const class UShelterMapTile*                  InMapTile;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_OnMapTileFocused__DelegateSignature) == 0x000008, "Wrong alignment on ShelterMapTile_OnMapTileFocused__DelegateSignature");
static_assert(sizeof(ShelterMapTile_OnMapTileFocused__DelegateSignature) == 0x000008, "Wrong size on ShelterMapTile_OnMapTileFocused__DelegateSignature");
static_assert(offsetof(ShelterMapTile_OnMapTileFocused__DelegateSignature, InMapTile) == 0x000000, "Member 'ShelterMapTile_OnMapTileFocused__DelegateSignature::InMapTile' has a wrong offset!");

// Function Flame.ShelterMapTile.SetCloudMapRotationSlot
// 0x0050 (0x0050 - 0x0000)
struct ShelterMapTile_SetCloudMapRotationSlot final
{
public:
	struct FCloudMapRotationSlot                  InCloudMapRotationSlot;                            // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_SetCloudMapRotationSlot) == 0x000008, "Wrong alignment on ShelterMapTile_SetCloudMapRotationSlot");
static_assert(sizeof(ShelterMapTile_SetCloudMapRotationSlot) == 0x000050, "Wrong size on ShelterMapTile_SetCloudMapRotationSlot");
static_assert(offsetof(ShelterMapTile_SetCloudMapRotationSlot, InCloudMapRotationSlot) == 0x000000, "Member 'ShelterMapTile_SetCloudMapRotationSlot::InCloudMapRotationSlot' has a wrong offset!");

// Function Flame.ShelterMapTile.GetGameModeAlias
// 0x0008 (0x0008 - 0x0000)
struct ShelterMapTile_GetGameModeAlias final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_GetGameModeAlias) == 0x000004, "Wrong alignment on ShelterMapTile_GetGameModeAlias");
static_assert(sizeof(ShelterMapTile_GetGameModeAlias) == 0x000008, "Wrong size on ShelterMapTile_GetGameModeAlias");
static_assert(offsetof(ShelterMapTile_GetGameModeAlias, ReturnValue) == 0x000000, "Member 'ShelterMapTile_GetGameModeAlias::ReturnValue' has a wrong offset!");

// Function Flame.ShelterMapTile.IsAllowed
// 0x0001 (0x0001 - 0x0000)
struct ShelterMapTile_IsAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_IsAllowed) == 0x000001, "Wrong alignment on ShelterMapTile_IsAllowed");
static_assert(sizeof(ShelterMapTile_IsAllowed) == 0x000001, "Wrong size on ShelterMapTile_IsAllowed");
static_assert(offsetof(ShelterMapTile_IsAllowed, ReturnValue) == 0x000000, "Member 'ShelterMapTile_IsAllowed::ReturnValue' has a wrong offset!");

// Function Flame.ShelterMapTile.IsMapRotationSlotCurrentlyValid
// 0x0040 (0x0040 - 0x0000)
struct ShelterMapTile_IsMapRotationSlotCurrentlyValid final
{
public:
	struct FMapRotationSlotEntry                  InMapRotationSlot;                                 // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ShelterMapTile_IsMapRotationSlotCurrentlyValid) == 0x000008, "Wrong alignment on ShelterMapTile_IsMapRotationSlotCurrentlyValid");
static_assert(sizeof(ShelterMapTile_IsMapRotationSlotCurrentlyValid) == 0x000040, "Wrong size on ShelterMapTile_IsMapRotationSlotCurrentlyValid");
static_assert(offsetof(ShelterMapTile_IsMapRotationSlotCurrentlyValid, InMapRotationSlot) == 0x000000, "Member 'ShelterMapTile_IsMapRotationSlotCurrentlyValid::InMapRotationSlot' has a wrong offset!");
static_assert(offsetof(ShelterMapTile_IsMapRotationSlotCurrentlyValid, ReturnValue) == 0x000038, "Member 'ShelterMapTile_IsMapRotationSlotCurrentlyValid::ReturnValue' has a wrong offset!");

// Function Flame.ShelterMapTile.ToClientDateTime
// 0x0010 (0x0010 - 0x0000)
struct ShelterMapTile_ToClientDateTime final
{
public:
	struct FDateTime                              InCloudTime;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterMapTile_ToClientDateTime) == 0x000008, "Wrong alignment on ShelterMapTile_ToClientDateTime");
static_assert(sizeof(ShelterMapTile_ToClientDateTime) == 0x000010, "Wrong size on ShelterMapTile_ToClientDateTime");
static_assert(offsetof(ShelterMapTile_ToClientDateTime, InCloudTime) == 0x000000, "Member 'ShelterMapTile_ToClientDateTime::InCloudTime' has a wrong offset!");
static_assert(offsetof(ShelterMapTile_ToClientDateTime, ReturnValue) == 0x000008, "Member 'ShelterMapTile_ToClientDateTime::ReturnValue' has a wrong offset!");

// Function Flame.ShelterStashItemProvider.SetCurrentPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct ShelterStashItemProvider_SetCurrentPlayerPawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStashItemProvider_SetCurrentPlayerPawn) == 0x000008, "Wrong alignment on ShelterStashItemProvider_SetCurrentPlayerPawn");
static_assert(sizeof(ShelterStashItemProvider_SetCurrentPlayerPawn) == 0x000008, "Wrong size on ShelterStashItemProvider_SetCurrentPlayerPawn");
static_assert(offsetof(ShelterStashItemProvider_SetCurrentPlayerPawn, InPawn) == 0x000000, "Member 'ShelterStashItemProvider_SetCurrentPlayerPawn::InPawn' has a wrong offset!");

// Function Flame.ShelterStashItemProvider.SetCurrentSection
// 0x0001 (0x0001 - 0x0000)
struct ShelterStashItemProvider_SetCurrentSection final
{
public:
	EStashSection                                 InSection;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStashItemProvider_SetCurrentSection) == 0x000001, "Wrong alignment on ShelterStashItemProvider_SetCurrentSection");
static_assert(sizeof(ShelterStashItemProvider_SetCurrentSection) == 0x000001, "Wrong size on ShelterStashItemProvider_SetCurrentSection");
static_assert(offsetof(ShelterStashItemProvider_SetCurrentSection, InSection) == 0x000000, "Member 'ShelterStashItemProvider_SetCurrentSection::InSection' has a wrong offset!");

// Function Flame.ShelterStashItemProvider.SetCurrentView
// 0x0001 (0x0001 - 0x0000)
struct ShelterStashItemProvider_SetCurrentView final
{
public:
	EInventoryView                                InCurrentTab;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStashItemProvider_SetCurrentView) == 0x000001, "Wrong alignment on ShelterStashItemProvider_SetCurrentView");
static_assert(sizeof(ShelterStashItemProvider_SetCurrentView) == 0x000001, "Wrong size on ShelterStashItemProvider_SetCurrentView");
static_assert(offsetof(ShelterStashItemProvider_SetCurrentView, InCurrentTab) == 0x000000, "Member 'ShelterStashItemProvider_SetCurrentView::InCurrentTab' has a wrong offset!");

// Function Flame.ShelterStashItemProvider.GetUnlockedAmmoTypes
// 0x0010 (0x0010 - 0x0000)
struct ShelterStashItemProvider_GetUnlockedAmmoTypes final
{
public:
	TArray<TSubclassOf<class AAmmoItem>>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterStashItemProvider_GetUnlockedAmmoTypes) == 0x000008, "Wrong alignment on ShelterStashItemProvider_GetUnlockedAmmoTypes");
static_assert(sizeof(ShelterStashItemProvider_GetUnlockedAmmoTypes) == 0x000010, "Wrong size on ShelterStashItemProvider_GetUnlockedAmmoTypes");
static_assert(offsetof(ShelterStashItemProvider_GetUnlockedAmmoTypes, ReturnValue) == 0x000000, "Member 'ShelterStashItemProvider_GetUnlockedAmmoTypes::ReturnValue' has a wrong offset!");

// Function Flame.ShelterTimerManager.GetLastUpdateTime
// 0x0008 (0x0008 - 0x0000)
struct ShelterTimerManager_GetLastUpdateTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterTimerManager_GetLastUpdateTime) == 0x000008, "Wrong alignment on ShelterTimerManager_GetLastUpdateTime");
static_assert(sizeof(ShelterTimerManager_GetLastUpdateTime) == 0x000008, "Wrong size on ShelterTimerManager_GetLastUpdateTime");
static_assert(offsetof(ShelterTimerManager_GetLastUpdateTime, ReturnValue) == 0x000000, "Member 'ShelterTimerManager_GetLastUpdateTime::ReturnValue' has a wrong offset!");

// Function Flame.ShelterUIBase.GetItemPreviews
// 0x0008 (0x0008 - 0x0000)
struct ShelterUIBase_GetItemPreviews final
{
public:
	class AMannequin*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShelterUIBase_GetItemPreviews) == 0x000008, "Wrong alignment on ShelterUIBase_GetItemPreviews");
static_assert(sizeof(ShelterUIBase_GetItemPreviews) == 0x000008, "Wrong size on ShelterUIBase_GetItemPreviews");
static_assert(offsetof(ShelterUIBase_GetItemPreviews, ReturnValue) == 0x000000, "Member 'ShelterUIBase_GetItemPreviews::ReturnValue' has a wrong offset!");

// Function Flame.OnlineSimpleRequestComponent.SendSimpleNoAuthGetRequestJson
// 0x0018 (0x0018 - 0x0000)
struct OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson final
{
public:
	class FString                                 APIName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson) == 0x000008, "Wrong alignment on OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson");
static_assert(sizeof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson) == 0x000018, "Wrong size on OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson");
static_assert(offsetof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson, APIName) == 0x000000, "Member 'OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson::APIName' has a wrong offset!");
static_assert(offsetof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson, ReturnValue) == 0x000010, "Member 'OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJson::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineSimpleRequestComponent.SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 APIName;                                           // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UJsonValue*                       Data;                                              // 0x0068(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature");
static_assert(sizeof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature) == 0x000070, "Wrong size on OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature");
static_assert(offsetof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature, APIName) == 0x000058, "Member 'OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature::APIName' has a wrong offset!");
static_assert(offsetof(OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature, Data) == 0x000068, "Member 'OnlineSimpleRequestComponent_SendSimpleNoAuthGetRequestJsonDelegate__DelegateSignature::Data' has a wrong offset!");

// Function Flame.SkinFunctions.ApplySkinExtraGeometry
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_ApplySkinExtraGeometry final
{
public:
	const class AItemSkin*                        Skin;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ExtraGeometryMesh;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkinFunctions_ApplySkinExtraGeometry) == 0x000008, "Wrong alignment on SkinFunctions_ApplySkinExtraGeometry");
static_assert(sizeof(SkinFunctions_ApplySkinExtraGeometry) == 0x000018, "Wrong size on SkinFunctions_ApplySkinExtraGeometry");
static_assert(offsetof(SkinFunctions_ApplySkinExtraGeometry, Skin) == 0x000000, "Member 'SkinFunctions_ApplySkinExtraGeometry::Skin' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ApplySkinExtraGeometry, ExtraGeometryMesh) == 0x000008, "Member 'SkinFunctions_ApplySkinExtraGeometry::ExtraGeometryMesh' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ApplySkinExtraGeometry, ReturnValue) == 0x000010, "Member 'SkinFunctions_ApplySkinExtraGeometry::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.ApplyWeaponSkinVisual
// 0x0020 (0x0020 - 0x0000)
struct SkinFunctions_ApplyWeaponSkinVisual final
{
public:
	TSubclassOf<class AItemSkin>                  SkinClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         Mesh;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkinFunctions_ApplyWeaponSkinVisual) == 0x000008, "Wrong alignment on SkinFunctions_ApplyWeaponSkinVisual");
static_assert(sizeof(SkinFunctions_ApplyWeaponSkinVisual) == 0x000020, "Wrong size on SkinFunctions_ApplyWeaponSkinVisual");
static_assert(offsetof(SkinFunctions_ApplyWeaponSkinVisual, SkinClass) == 0x000000, "Member 'SkinFunctions_ApplyWeaponSkinVisual::SkinClass' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ApplyWeaponSkinVisual, Weapon) == 0x000008, "Member 'SkinFunctions_ApplyWeaponSkinVisual::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ApplyWeaponSkinVisual, Mesh) == 0x000010, "Member 'SkinFunctions_ApplyWeaponSkinVisual::Mesh' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ApplyWeaponSkinVisual, ReturnValue) == 0x000018, "Member 'SkinFunctions_ApplyWeaponSkinVisual::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.ClearExtraSkinGeometryVisuals
// 0x0008 (0x0008 - 0x0000)
struct SkinFunctions_ClearExtraSkinGeometryVisuals final
{
public:
	class UMeshComponent*                         MainWeaponMesh;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_ClearExtraSkinGeometryVisuals) == 0x000008, "Wrong alignment on SkinFunctions_ClearExtraSkinGeometryVisuals");
static_assert(sizeof(SkinFunctions_ClearExtraSkinGeometryVisuals) == 0x000008, "Wrong size on SkinFunctions_ClearExtraSkinGeometryVisuals");
static_assert(offsetof(SkinFunctions_ClearExtraSkinGeometryVisuals, MainWeaponMesh) == 0x000000, "Member 'SkinFunctions_ClearExtraSkinGeometryVisuals::MainWeaponMesh' has a wrong offset!");

// Function Flame.SkinFunctions.ClearSkinFromWeapon
// 0x0010 (0x0010 - 0x0000)
struct SkinFunctions_ClearSkinFromWeapon final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_ClearSkinFromWeapon) == 0x000008, "Wrong alignment on SkinFunctions_ClearSkinFromWeapon");
static_assert(sizeof(SkinFunctions_ClearSkinFromWeapon) == 0x000010, "Wrong size on SkinFunctions_ClearSkinFromWeapon");
static_assert(offsetof(SkinFunctions_ClearSkinFromWeapon, Player) == 0x000000, "Member 'SkinFunctions_ClearSkinFromWeapon::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ClearSkinFromWeapon, Weapon) == 0x000008, "Member 'SkinFunctions_ClearSkinFromWeapon::Weapon' has a wrong offset!");

// Function Flame.SkinFunctions.ClearWeaponSkinVisual
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_ClearWeaponSkinVisual final
{
public:
	class UMeshComponent*                         PrimaryMesh;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkinFunctions_ClearWeaponSkinVisual) == 0x000008, "Wrong alignment on SkinFunctions_ClearWeaponSkinVisual");
static_assert(sizeof(SkinFunctions_ClearWeaponSkinVisual) == 0x000018, "Wrong size on SkinFunctions_ClearWeaponSkinVisual");
static_assert(offsetof(SkinFunctions_ClearWeaponSkinVisual, PrimaryMesh) == 0x000000, "Member 'SkinFunctions_ClearWeaponSkinVisual::PrimaryMesh' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ClearWeaponSkinVisual, Weapon) == 0x000008, "Member 'SkinFunctions_ClearWeaponSkinVisual::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_ClearWeaponSkinVisual, ReturnValue) == 0x000010, "Member 'SkinFunctions_ClearWeaponSkinVisual::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetAllAvailableItemSkins
// 0x0020 (0x0020 - 0x0000)
struct SkinFunctions_GetAllAvailableItemSkins final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AItem>                      Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AItemSkin>>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetAllAvailableItemSkins) == 0x000008, "Wrong alignment on SkinFunctions_GetAllAvailableItemSkins");
static_assert(sizeof(SkinFunctions_GetAllAvailableItemSkins) == 0x000020, "Wrong size on SkinFunctions_GetAllAvailableItemSkins");
static_assert(offsetof(SkinFunctions_GetAllAvailableItemSkins, Player) == 0x000000, "Member 'SkinFunctions_GetAllAvailableItemSkins::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllAvailableItemSkins, Item) == 0x000008, "Member 'SkinFunctions_GetAllAvailableItemSkins::Item' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllAvailableItemSkins, ReturnValue) == 0x000010, "Member 'SkinFunctions_GetAllAvailableItemSkins::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetAllAvailableWeaponSkins
// 0x0020 (0x0020 - 0x0000)
struct SkinFunctions_GetAllAvailableWeaponSkins final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeaponSkin>>        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetAllAvailableWeaponSkins) == 0x000008, "Wrong alignment on SkinFunctions_GetAllAvailableWeaponSkins");
static_assert(sizeof(SkinFunctions_GetAllAvailableWeaponSkins) == 0x000020, "Wrong size on SkinFunctions_GetAllAvailableWeaponSkins");
static_assert(offsetof(SkinFunctions_GetAllAvailableWeaponSkins, Player) == 0x000000, "Member 'SkinFunctions_GetAllAvailableWeaponSkins::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllAvailableWeaponSkins, Weapon) == 0x000008, "Member 'SkinFunctions_GetAllAvailableWeaponSkins::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllAvailableWeaponSkins, ReturnValue) == 0x000010, "Member 'SkinFunctions_GetAllAvailableWeaponSkins::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetAllOwnedSkins
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_GetAllOwnedSkins final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AItemSkin>>          ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetAllOwnedSkins) == 0x000008, "Wrong alignment on SkinFunctions_GetAllOwnedSkins");
static_assert(sizeof(SkinFunctions_GetAllOwnedSkins) == 0x000018, "Wrong size on SkinFunctions_GetAllOwnedSkins");
static_assert(offsetof(SkinFunctions_GetAllOwnedSkins, Player) == 0x000000, "Member 'SkinFunctions_GetAllOwnedSkins::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllOwnedSkins, ReturnValue) == 0x000008, "Member 'SkinFunctions_GetAllOwnedSkins::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetAllOwnedWeaponSkins
// 0x0020 (0x0020 - 0x0000)
struct SkinFunctions_GetAllOwnedWeaponSkins final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AWeaponSkin>>        ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetAllOwnedWeaponSkins) == 0x000008, "Wrong alignment on SkinFunctions_GetAllOwnedWeaponSkins");
static_assert(sizeof(SkinFunctions_GetAllOwnedWeaponSkins) == 0x000020, "Wrong size on SkinFunctions_GetAllOwnedWeaponSkins");
static_assert(offsetof(SkinFunctions_GetAllOwnedWeaponSkins, Player) == 0x000000, "Member 'SkinFunctions_GetAllOwnedWeaponSkins::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllOwnedWeaponSkins, Weapon) == 0x000008, "Member 'SkinFunctions_GetAllOwnedWeaponSkins::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetAllOwnedWeaponSkins, ReturnValue) == 0x000010, "Member 'SkinFunctions_GetAllOwnedWeaponSkins::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetBasicSkinSlotNames
// 0x0010 (0x0010 - 0x0000)
struct SkinFunctions_GetBasicSkinSlotNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetBasicSkinSlotNames) == 0x000008, "Wrong alignment on SkinFunctions_GetBasicSkinSlotNames");
static_assert(sizeof(SkinFunctions_GetBasicSkinSlotNames) == 0x000010, "Wrong size on SkinFunctions_GetBasicSkinSlotNames");
static_assert(offsetof(SkinFunctions_GetBasicSkinSlotNames, ReturnValue) == 0x000000, "Member 'SkinFunctions_GetBasicSkinSlotNames::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetExtraSkinSlotNames
// 0x0010 (0x0010 - 0x0000)
struct SkinFunctions_GetExtraSkinSlotNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetExtraSkinSlotNames) == 0x000008, "Wrong alignment on SkinFunctions_GetExtraSkinSlotNames");
static_assert(sizeof(SkinFunctions_GetExtraSkinSlotNames) == 0x000010, "Wrong size on SkinFunctions_GetExtraSkinSlotNames");
static_assert(offsetof(SkinFunctions_GetExtraSkinSlotNames, ReturnValue) == 0x000000, "Member 'SkinFunctions_GetExtraSkinSlotNames::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetWeaponFromSkin
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_GetWeaponFromSkin final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponSkin>                Skin;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetWeaponFromSkin) == 0x000008, "Wrong alignment on SkinFunctions_GetWeaponFromSkin");
static_assert(sizeof(SkinFunctions_GetWeaponFromSkin) == 0x000018, "Wrong size on SkinFunctions_GetWeaponFromSkin");
static_assert(offsetof(SkinFunctions_GetWeaponFromSkin, Player) == 0x000000, "Member 'SkinFunctions_GetWeaponFromSkin::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetWeaponFromSkin, Skin) == 0x000008, "Member 'SkinFunctions_GetWeaponFromSkin::Skin' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetWeaponFromSkin, ReturnValue) == 0x000010, "Member 'SkinFunctions_GetWeaponFromSkin::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.GetWeaponSkin
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_GetWeaponSkin final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponSkin>                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_GetWeaponSkin) == 0x000008, "Wrong alignment on SkinFunctions_GetWeaponSkin");
static_assert(sizeof(SkinFunctions_GetWeaponSkin) == 0x000018, "Wrong size on SkinFunctions_GetWeaponSkin");
static_assert(offsetof(SkinFunctions_GetWeaponSkin, Player) == 0x000000, "Member 'SkinFunctions_GetWeaponSkin::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetWeaponSkin, Weapon) == 0x000008, "Member 'SkinFunctions_GetWeaponSkin::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_GetWeaponSkin, ReturnValue) == 0x000010, "Member 'SkinFunctions_GetWeaponSkin::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.LoadSkinMaterialSynchronous
// 0x0030 (0x0030 - 0x0000)
struct SkinFunctions_LoadSkinMaterialSynchronous final
{
public:
	TSoftObjectPtr<class UMaterialInstance>       MaterialLink;                                      // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_LoadSkinMaterialSynchronous) == 0x000008, "Wrong alignment on SkinFunctions_LoadSkinMaterialSynchronous");
static_assert(sizeof(SkinFunctions_LoadSkinMaterialSynchronous) == 0x000030, "Wrong size on SkinFunctions_LoadSkinMaterialSynchronous");
static_assert(offsetof(SkinFunctions_LoadSkinMaterialSynchronous, MaterialLink) == 0x000000, "Member 'SkinFunctions_LoadSkinMaterialSynchronous::MaterialLink' has a wrong offset!");
static_assert(offsetof(SkinFunctions_LoadSkinMaterialSynchronous, ReturnValue) == 0x000028, "Member 'SkinFunctions_LoadSkinMaterialSynchronous::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.SetDefaultWeaponSkinVisual
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_SetDefaultWeaponSkinVisual final
{
public:
	class UMeshComponent*                         PrimaryMesh;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkinFunctions_SetDefaultWeaponSkinVisual) == 0x000008, "Wrong alignment on SkinFunctions_SetDefaultWeaponSkinVisual");
static_assert(sizeof(SkinFunctions_SetDefaultWeaponSkinVisual) == 0x000018, "Wrong size on SkinFunctions_SetDefaultWeaponSkinVisual");
static_assert(offsetof(SkinFunctions_SetDefaultWeaponSkinVisual, PrimaryMesh) == 0x000000, "Member 'SkinFunctions_SetDefaultWeaponSkinVisual::PrimaryMesh' has a wrong offset!");
static_assert(offsetof(SkinFunctions_SetDefaultWeaponSkinVisual, Weapon) == 0x000008, "Member 'SkinFunctions_SetDefaultWeaponSkinVisual::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_SetDefaultWeaponSkinVisual, ReturnValue) == 0x000010, "Member 'SkinFunctions_SetDefaultWeaponSkinVisual::ReturnValue' has a wrong offset!");

// Function Flame.SkinFunctions.SetSkinToWeapon
// 0x0018 (0x0018 - 0x0000)
struct SkinFunctions_SetSkinToWeapon final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    Weapon;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeaponSkin>                Skin;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkinFunctions_SetSkinToWeapon) == 0x000008, "Wrong alignment on SkinFunctions_SetSkinToWeapon");
static_assert(sizeof(SkinFunctions_SetSkinToWeapon) == 0x000018, "Wrong size on SkinFunctions_SetSkinToWeapon");
static_assert(offsetof(SkinFunctions_SetSkinToWeapon, Player) == 0x000000, "Member 'SkinFunctions_SetSkinToWeapon::Player' has a wrong offset!");
static_assert(offsetof(SkinFunctions_SetSkinToWeapon, Weapon) == 0x000008, "Member 'SkinFunctions_SetSkinToWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(SkinFunctions_SetSkinToWeapon, Skin) == 0x000010, "Member 'SkinFunctions_SetSkinToWeapon::Skin' has a wrong offset!");

// Function Flame.SlotVisual.SetBackground
// 0x0001 (0x0001 - 0x0000)
struct SlotVisual_SetBackground final
{
public:
	ESlotVisualBackground                         InBackground;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_SetBackground) == 0x000001, "Wrong alignment on SlotVisual_SetBackground");
static_assert(sizeof(SlotVisual_SetBackground) == 0x000001, "Wrong size on SlotVisual_SetBackground");
static_assert(offsetof(SlotVisual_SetBackground, InBackground) == 0x000000, "Member 'SlotVisual_SetBackground::InBackground' has a wrong offset!");

// Function Flame.SlotVisual.SetCount
// 0x0004 (0x0004 - 0x0000)
struct SlotVisual_SetCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_SetCount) == 0x000004, "Wrong alignment on SlotVisual_SetCount");
static_assert(sizeof(SlotVisual_SetCount) == 0x000004, "Wrong size on SlotVisual_SetCount");
static_assert(offsetof(SlotVisual_SetCount, InCount) == 0x000000, "Member 'SlotVisual_SetCount::InCount' has a wrong offset!");

// Function Flame.SlotVisual.SetNoItemIcon
// 0x0008 (0x0008 - 0x0000)
struct SlotVisual_SetNoItemIcon final
{
public:
	class UTexture2D*                             InIcon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_SetNoItemIcon) == 0x000008, "Wrong alignment on SlotVisual_SetNoItemIcon");
static_assert(sizeof(SlotVisual_SetNoItemIcon) == 0x000008, "Wrong size on SlotVisual_SetNoItemIcon");
static_assert(offsetof(SlotVisual_SetNoItemIcon, InIcon) == 0x000000, "Member 'SlotVisual_SetNoItemIcon::InIcon' has a wrong offset!");

// Function Flame.SlotVisual.SetSlotColor
// 0x0010 (0x0010 - 0x0000)
struct SlotVisual_SetSlotColor final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_SetSlotColor) == 0x000004, "Wrong alignment on SlotVisual_SetSlotColor");
static_assert(sizeof(SlotVisual_SetSlotColor) == 0x000010, "Wrong size on SlotVisual_SetSlotColor");
static_assert(offsetof(SlotVisual_SetSlotColor, InColor) == 0x000000, "Member 'SlotVisual_SetSlotColor::InColor' has a wrong offset!");

// Function Flame.SlotVisual.SetSlotOpacity
// 0x0004 (0x0004 - 0x0000)
struct SlotVisual_SetSlotOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_SetSlotOpacity) == 0x000004, "Wrong alignment on SlotVisual_SetSlotOpacity");
static_assert(sizeof(SlotVisual_SetSlotOpacity) == 0x000004, "Wrong size on SlotVisual_SetSlotOpacity");
static_assert(offsetof(SlotVisual_SetSlotOpacity, InOpacity) == 0x000000, "Member 'SlotVisual_SetSlotOpacity::InOpacity' has a wrong offset!");

// Function Flame.SlotVisual.ShowEffect
// 0x0001 (0x0001 - 0x0000)
struct SlotVisual_ShowEffect final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_ShowEffect) == 0x000001, "Wrong alignment on SlotVisual_ShowEffect");
static_assert(sizeof(SlotVisual_ShowEffect) == 0x000001, "Wrong size on SlotVisual_ShowEffect");
static_assert(offsetof(SlotVisual_ShowEffect, Value) == 0x000000, "Member 'SlotVisual_ShowEffect::Value' has a wrong offset!");

// Function Flame.SlotVisual.ShowFocus
// 0x0001 (0x0001 - 0x0000)
struct SlotVisual_ShowFocus final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_ShowFocus) == 0x000001, "Wrong alignment on SlotVisual_ShowFocus");
static_assert(sizeof(SlotVisual_ShowFocus) == 0x000001, "Wrong size on SlotVisual_ShowFocus");
static_assert(offsetof(SlotVisual_ShowFocus, Value) == 0x000000, "Member 'SlotVisual_ShowFocus::Value' has a wrong offset!");

// Function Flame.SlotVisual.ShowInsuranceIcon
// 0x0001 (0x0001 - 0x0000)
struct SlotVisual_ShowInsuranceIcon final
{
public:
	bool                                          InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlotVisual_ShowInsuranceIcon) == 0x000001, "Wrong alignment on SlotVisual_ShowInsuranceIcon");
static_assert(sizeof(SlotVisual_ShowInsuranceIcon) == 0x000001, "Wrong size on SlotVisual_ShowInsuranceIcon");
static_assert(offsetof(SlotVisual_ShowInsuranceIcon, InValue) == 0x000000, "Member 'SlotVisual_ShowInsuranceIcon::InValue' has a wrong offset!");

// Function Flame.SpectatorSpringArmComponent.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct SpectatorSpringArmComponent_AddIgnoredActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorSpringArmComponent_AddIgnoredActor) == 0x000008, "Wrong alignment on SpectatorSpringArmComponent_AddIgnoredActor");
static_assert(sizeof(SpectatorSpringArmComponent_AddIgnoredActor) == 0x000008, "Wrong size on SpectatorSpringArmComponent_AddIgnoredActor");
static_assert(offsetof(SpectatorSpringArmComponent_AddIgnoredActor, Actor) == 0x000000, "Member 'SpectatorSpringArmComponent_AddIgnoredActor::Actor' has a wrong offset!");

// Function Flame.SpectatorSpringArmComponent.RemoveIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct SpectatorSpringArmComponent_RemoveIgnoredActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectatorSpringArmComponent_RemoveIgnoredActor) == 0x000008, "Wrong alignment on SpectatorSpringArmComponent_RemoveIgnoredActor");
static_assert(sizeof(SpectatorSpringArmComponent_RemoveIgnoredActor) == 0x000008, "Wrong size on SpectatorSpringArmComponent_RemoveIgnoredActor");
static_assert(offsetof(SpectatorSpringArmComponent_RemoveIgnoredActor, Actor) == 0x000000, "Member 'SpectatorSpringArmComponent_RemoveIgnoredActor::Actor' has a wrong offset!");

// Function Flame.SpeedModifierComponent.GetSpeedModifierData
// 0x0030 (0x0030 - 0x0000)
struct SpeedModifierComponent_GetSpeedModifierData final
{
public:
	TArray<struct FContextSpeedModifier>          OutContext;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActiveEventSpeedModifierCurve> OutCurve;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FActiveEventSpeedModifierConstant> OutConstant;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpeedModifierComponent_GetSpeedModifierData) == 0x000008, "Wrong alignment on SpeedModifierComponent_GetSpeedModifierData");
static_assert(sizeof(SpeedModifierComponent_GetSpeedModifierData) == 0x000030, "Wrong size on SpeedModifierComponent_GetSpeedModifierData");
static_assert(offsetof(SpeedModifierComponent_GetSpeedModifierData, OutContext) == 0x000000, "Member 'SpeedModifierComponent_GetSpeedModifierData::OutContext' has a wrong offset!");
static_assert(offsetof(SpeedModifierComponent_GetSpeedModifierData, OutCurve) == 0x000010, "Member 'SpeedModifierComponent_GetSpeedModifierData::OutCurve' has a wrong offset!");
static_assert(offsetof(SpeedModifierComponent_GetSpeedModifierData, OutConstant) == 0x000020, "Member 'SpeedModifierComponent_GetSpeedModifierData::OutConstant' has a wrong offset!");

// Function Flame.CurveStamina.GetValues
// 0x0010 (0x0010 - 0x0000)
struct CurveStamina_GetValues final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveStamina_GetValues) == 0x000004, "Wrong alignment on CurveStamina_GetValues");
static_assert(sizeof(CurveStamina_GetValues) == 0x000010, "Wrong size on CurveStamina_GetValues");
static_assert(offsetof(CurveStamina_GetValues, InTime) == 0x000000, "Member 'CurveStamina_GetValues::InTime' has a wrong offset!");
static_assert(offsetof(CurveStamina_GetValues, ReturnValue) == 0x000004, "Member 'CurveStamina_GetValues::ReturnValue' has a wrong offset!");

// Function Flame.CurveStaminaMultiplier.GetValues
// 0x0010 (0x0010 - 0x0000)
struct CurveStaminaMultiplier_GetValues final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurveStaminaMultiplier_GetValues) == 0x000004, "Wrong alignment on CurveStaminaMultiplier_GetValues");
static_assert(sizeof(CurveStaminaMultiplier_GetValues) == 0x000010, "Wrong size on CurveStaminaMultiplier_GetValues");
static_assert(offsetof(CurveStaminaMultiplier_GetValues, InTime) == 0x000000, "Member 'CurveStaminaMultiplier_GetValues::InTime' has a wrong offset!");
static_assert(offsetof(CurveStaminaMultiplier_GetValues, ReturnValue) == 0x000004, "Member 'CurveStaminaMultiplier_GetValues::ReturnValue' has a wrong offset!");

// Function Flame.StartScreen.NativeOnUserLoginChanged
// 0x0008 (0x0008 - 0x0000)
struct StartScreen_NativeOnUserLoginChanged final
{
public:
	bool                                          bLogin;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UserIndex;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartScreen_NativeOnUserLoginChanged) == 0x000004, "Wrong alignment on StartScreen_NativeOnUserLoginChanged");
static_assert(sizeof(StartScreen_NativeOnUserLoginChanged) == 0x000008, "Wrong size on StartScreen_NativeOnUserLoginChanged");
static_assert(offsetof(StartScreen_NativeOnUserLoginChanged, bLogin) == 0x000000, "Member 'StartScreen_NativeOnUserLoginChanged::bLogin' has a wrong offset!");
static_assert(offsetof(StartScreen_NativeOnUserLoginChanged, UserIndex) == 0x000004, "Member 'StartScreen_NativeOnUserLoginChanged::UserIndex' has a wrong offset!");

// Function Flame.StartScreen.OnFirstTimeOptionsClosed
// 0x0008 (0x0008 - 0x0000)
struct StartScreen_OnFirstTimeOptionsClosed final
{
public:
	class UFlameWidget*                           InOptionsWidget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartScreen_OnFirstTimeOptionsClosed) == 0x000008, "Wrong alignment on StartScreen_OnFirstTimeOptionsClosed");
static_assert(sizeof(StartScreen_OnFirstTimeOptionsClosed) == 0x000008, "Wrong size on StartScreen_OnFirstTimeOptionsClosed");
static_assert(offsetof(StartScreen_OnFirstTimeOptionsClosed, InOptionsWidget) == 0x000000, "Member 'StartScreen_OnFirstTimeOptionsClosed::InOptionsWidget' has a wrong offset!");

// Function Flame.StashComponent.OnRep_PostChangeCraftingAmmo
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_OnRep_PostChangeCraftingAmmo final
{
public:
	class UAmmoCraftingList*                      OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_OnRep_PostChangeCraftingAmmo) == 0x000008, "Wrong alignment on StashComponent_OnRep_PostChangeCraftingAmmo");
static_assert(sizeof(StashComponent_OnRep_PostChangeCraftingAmmo) == 0x000008, "Wrong size on StashComponent_OnRep_PostChangeCraftingAmmo");
static_assert(offsetof(StashComponent_OnRep_PostChangeCraftingAmmo, OldContainer) == 0x000000, "Member 'StashComponent_OnRep_PostChangeCraftingAmmo::OldContainer' has a wrong offset!");

// Function Flame.StashComponent.OnRep_PostChangeCraftingConsumables
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_OnRep_PostChangeCraftingConsumables final
{
public:
	class UConsumablesCraftingList*               OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_OnRep_PostChangeCraftingConsumables) == 0x000008, "Wrong alignment on StashComponent_OnRep_PostChangeCraftingConsumables");
static_assert(sizeof(StashComponent_OnRep_PostChangeCraftingConsumables) == 0x000008, "Wrong size on StashComponent_OnRep_PostChangeCraftingConsumables");
static_assert(offsetof(StashComponent_OnRep_PostChangeCraftingConsumables, OldContainer) == 0x000000, "Member 'StashComponent_OnRep_PostChangeCraftingConsumables::OldContainer' has a wrong offset!");

// Function Flame.StashComponent.OnRep_PostChangeCraftingShelter
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_OnRep_PostChangeCraftingShelter final
{
public:
	class UShelterCraftingList*                   OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_OnRep_PostChangeCraftingShelter) == 0x000008, "Wrong alignment on StashComponent_OnRep_PostChangeCraftingShelter");
static_assert(sizeof(StashComponent_OnRep_PostChangeCraftingShelter) == 0x000008, "Wrong size on StashComponent_OnRep_PostChangeCraftingShelter");
static_assert(offsetof(StashComponent_OnRep_PostChangeCraftingShelter, OldContainer) == 0x000000, "Member 'StashComponent_OnRep_PostChangeCraftingShelter::OldContainer' has a wrong offset!");

// Function Flame.StashComponent.OnRep_PostChangeCraftingWeapons
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_OnRep_PostChangeCraftingWeapons final
{
public:
	class UWeaponsCraftingList*                   OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_OnRep_PostChangeCraftingWeapons) == 0x000008, "Wrong alignment on StashComponent_OnRep_PostChangeCraftingWeapons");
static_assert(sizeof(StashComponent_OnRep_PostChangeCraftingWeapons) == 0x000008, "Wrong size on StashComponent_OnRep_PostChangeCraftingWeapons");
static_assert(offsetof(StashComponent_OnRep_PostChangeCraftingWeapons, OldContainer) == 0x000000, "Member 'StashComponent_OnRep_PostChangeCraftingWeapons::OldContainer' has a wrong offset!");

// Function Flame.StashComponent.OnRep_PostChangeTokens
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_OnRep_PostChangeTokens final
{
public:
	class UTokensList*                            OldContainer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_OnRep_PostChangeTokens) == 0x000008, "Wrong alignment on StashComponent_OnRep_PostChangeTokens");
static_assert(sizeof(StashComponent_OnRep_PostChangeTokens) == 0x000008, "Wrong size on StashComponent_OnRep_PostChangeTokens");
static_assert(offsetof(StashComponent_OnRep_PostChangeTokens, OldContainer) == 0x000000, "Member 'StashComponent_OnRep_PostChangeTokens::OldContainer' has a wrong offset!");

// Function Flame.StashComponent.GetBoosterTicketCount
// 0x0018 (0x0018 - 0x0000)
struct StashComponent_GetBoosterTicketCount final
{
public:
	class FString                                 TypeKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StashComponent_GetBoosterTicketCount) == 0x000008, "Wrong alignment on StashComponent_GetBoosterTicketCount");
static_assert(sizeof(StashComponent_GetBoosterTicketCount) == 0x000018, "Wrong size on StashComponent_GetBoosterTicketCount");
static_assert(offsetof(StashComponent_GetBoosterTicketCount, TypeKey) == 0x000000, "Member 'StashComponent_GetBoosterTicketCount::TypeKey' has a wrong offset!");
static_assert(offsetof(StashComponent_GetBoosterTicketCount, ReturnValue) == 0x000010, "Member 'StashComponent_GetBoosterTicketCount::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetBoosterTicketDetails
// 0x0040 (0x0040 - 0x0000)
struct StashComponent_GetBoosterTicketDetails final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoosterDetails                        BoosterDetails;                                    // 0x0018(0x0020)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StashComponent_GetBoosterTicketDetails) == 0x000008, "Wrong alignment on StashComponent_GetBoosterTicketDetails");
static_assert(sizeof(StashComponent_GetBoosterTicketDetails) == 0x000040, "Wrong size on StashComponent_GetBoosterTicketDetails");
static_assert(offsetof(StashComponent_GetBoosterTicketDetails, Type) == 0x000000, "Member 'StashComponent_GetBoosterTicketDetails::Type' has a wrong offset!");
static_assert(offsetof(StashComponent_GetBoosterTicketDetails, Index_0) == 0x000010, "Member 'StashComponent_GetBoosterTicketDetails::Index_0' has a wrong offset!");
static_assert(offsetof(StashComponent_GetBoosterTicketDetails, BoosterDetails) == 0x000018, "Member 'StashComponent_GetBoosterTicketDetails::BoosterDetails' has a wrong offset!");
static_assert(offsetof(StashComponent_GetBoosterTicketDetails, ReturnValue) == 0x000038, "Member 'StashComponent_GetBoosterTicketDetails::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetCraftingAmmo
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_GetCraftingAmmo final
{
public:
	class UAmmoCraftingList*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetCraftingAmmo) == 0x000008, "Wrong alignment on StashComponent_GetCraftingAmmo");
static_assert(sizeof(StashComponent_GetCraftingAmmo) == 0x000008, "Wrong size on StashComponent_GetCraftingAmmo");
static_assert(offsetof(StashComponent_GetCraftingAmmo, ReturnValue) == 0x000000, "Member 'StashComponent_GetCraftingAmmo::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetCraftingConsumables
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_GetCraftingConsumables final
{
public:
	class UConsumablesCraftingList*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetCraftingConsumables) == 0x000008, "Wrong alignment on StashComponent_GetCraftingConsumables");
static_assert(sizeof(StashComponent_GetCraftingConsumables) == 0x000008, "Wrong size on StashComponent_GetCraftingConsumables");
static_assert(offsetof(StashComponent_GetCraftingConsumables, ReturnValue) == 0x000000, "Member 'StashComponent_GetCraftingConsumables::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetCraftingShelter
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_GetCraftingShelter final
{
public:
	class UShelterCraftingList*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetCraftingShelter) == 0x000008, "Wrong alignment on StashComponent_GetCraftingShelter");
static_assert(sizeof(StashComponent_GetCraftingShelter) == 0x000008, "Wrong size on StashComponent_GetCraftingShelter");
static_assert(offsetof(StashComponent_GetCraftingShelter, ReturnValue) == 0x000000, "Member 'StashComponent_GetCraftingShelter::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetCraftingWeapons
// 0x0008 (0x0008 - 0x0000)
struct StashComponent_GetCraftingWeapons final
{
public:
	class UWeaponsCraftingList*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetCraftingWeapons) == 0x000008, "Wrong alignment on StashComponent_GetCraftingWeapons");
static_assert(sizeof(StashComponent_GetCraftingWeapons) == 0x000008, "Wrong size on StashComponent_GetCraftingWeapons");
static_assert(offsetof(StashComponent_GetCraftingWeapons, ReturnValue) == 0x000000, "Member 'StashComponent_GetCraftingWeapons::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetCurrencyCount
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetCurrencyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetCurrencyCount) == 0x000004, "Wrong alignment on StashComponent_GetCurrencyCount");
static_assert(sizeof(StashComponent_GetCurrencyCount) == 0x000004, "Wrong size on StashComponent_GetCurrencyCount");
static_assert(offsetof(StashComponent_GetCurrencyCount, ReturnValue) == 0x000000, "Member 'StashComponent_GetCurrencyCount::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetFoodCapacity
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetFoodCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetFoodCapacity) == 0x000004, "Wrong alignment on StashComponent_GetFoodCapacity");
static_assert(sizeof(StashComponent_GetFoodCapacity) == 0x000004, "Wrong size on StashComponent_GetFoodCapacity");
static_assert(offsetof(StashComponent_GetFoodCapacity, ReturnValue) == 0x000000, "Member 'StashComponent_GetFoodCapacity::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetFoodCount
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetFoodCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetFoodCount) == 0x000004, "Wrong alignment on StashComponent_GetFoodCount");
static_assert(sizeof(StashComponent_GetFoodCount) == 0x000004, "Wrong size on StashComponent_GetFoodCount");
static_assert(offsetof(StashComponent_GetFoodCount, ReturnValue) == 0x000000, "Member 'StashComponent_GetFoodCount::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetMaterialCapacity
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetMaterialCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetMaterialCapacity) == 0x000004, "Wrong alignment on StashComponent_GetMaterialCapacity");
static_assert(sizeof(StashComponent_GetMaterialCapacity) == 0x000004, "Wrong size on StashComponent_GetMaterialCapacity");
static_assert(offsetof(StashComponent_GetMaterialCapacity, ReturnValue) == 0x000000, "Member 'StashComponent_GetMaterialCapacity::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetMaterialCount
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetMaterialCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetMaterialCount) == 0x000004, "Wrong alignment on StashComponent_GetMaterialCount");
static_assert(sizeof(StashComponent_GetMaterialCount) == 0x000004, "Wrong size on StashComponent_GetMaterialCount");
static_assert(offsetof(StashComponent_GetMaterialCount, ReturnValue) == 0x000000, "Member 'StashComponent_GetMaterialCount::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.GetShelterLevel
// 0x0004 (0x0004 - 0x0000)
struct StashComponent_GetShelterLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_GetShelterLevel) == 0x000004, "Wrong alignment on StashComponent_GetShelterLevel");
static_assert(sizeof(StashComponent_GetShelterLevel) == 0x000004, "Wrong size on StashComponent_GetShelterLevel");
static_assert(offsetof(StashComponent_GetShelterLevel, ReturnValue) == 0x000000, "Member 'StashComponent_GetShelterLevel::ReturnValue' has a wrong offset!");

// Function Flame.StashComponent.IsInitiliazed
// 0x0001 (0x0001 - 0x0000)
struct StashComponent_IsInitiliazed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StashComponent_IsInitiliazed) == 0x000001, "Wrong alignment on StashComponent_IsInitiliazed");
static_assert(sizeof(StashComponent_IsInitiliazed) == 0x000001, "Wrong size on StashComponent_IsInitiliazed");
static_assert(offsetof(StashComponent_IsInitiliazed, ReturnValue) == 0x000000, "Member 'StashComponent_IsInitiliazed::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineComponent.MulticastReceivedStateEndFromServer
// 0x0028 (0x0028 - 0x0000)
struct StateMachineComponent_MulticastReceivedStateEndFromServer final
{
public:
	struct FServerStateInfo                       Info;                                              // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_MulticastReceivedStateEndFromServer) == 0x000008, "Wrong alignment on StateMachineComponent_MulticastReceivedStateEndFromServer");
static_assert(sizeof(StateMachineComponent_MulticastReceivedStateEndFromServer) == 0x000028, "Wrong size on StateMachineComponent_MulticastReceivedStateEndFromServer");
static_assert(offsetof(StateMachineComponent_MulticastReceivedStateEndFromServer, Info) == 0x000000, "Member 'StateMachineComponent_MulticastReceivedStateEndFromServer::Info' has a wrong offset!");

// Function Flame.StateMachineComponent.MulticastReceivedStateStartFromServer
// 0x0028 (0x0028 - 0x0000)
struct StateMachineComponent_MulticastReceivedStateStartFromServer final
{
public:
	struct FServerStateInfo                       Info;                                              // 0x0000(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_MulticastReceivedStateStartFromServer) == 0x000008, "Wrong alignment on StateMachineComponent_MulticastReceivedStateStartFromServer");
static_assert(sizeof(StateMachineComponent_MulticastReceivedStateStartFromServer) == 0x000028, "Wrong size on StateMachineComponent_MulticastReceivedStateStartFromServer");
static_assert(offsetof(StateMachineComponent_MulticastReceivedStateStartFromServer, Info) == 0x000000, "Member 'StateMachineComponent_MulticastReceivedStateStartFromServer::Info' has a wrong offset!");

// Function Flame.StateMachineComponent.OnRepHistory
// 0x0010 (0x0010 - 0x0000)
struct StateMachineComponent_OnRepHistory final
{
public:
	TArray<struct FItemStateHistoryInfo>          OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_OnRepHistory) == 0x000008, "Wrong alignment on StateMachineComponent_OnRepHistory");
static_assert(sizeof(StateMachineComponent_OnRepHistory) == 0x000010, "Wrong size on StateMachineComponent_OnRepHistory");
static_assert(offsetof(StateMachineComponent_OnRepHistory, OldArray) == 0x000000, "Member 'StateMachineComponent_OnRepHistory::OldArray' has a wrong offset!");

// Function Flame.StateMachineComponent.OnRepStates
// 0x0010 (0x0010 - 0x0000)
struct StateMachineComponent_OnRepStates final
{
public:
	TArray<struct FItemStatePair>                 OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_OnRepStates) == 0x000008, "Wrong alignment on StateMachineComponent_OnRepStates");
static_assert(sizeof(StateMachineComponent_OnRepStates) == 0x000010, "Wrong size on StateMachineComponent_OnRepStates");
static_assert(offsetof(StateMachineComponent_OnRepStates, OldArray) == 0x000000, "Member 'StateMachineComponent_OnRepStates::OldArray' has a wrong offset!");

// Function Flame.StateMachineComponent.GetCurrentStateInfo
// 0x0010 (0x0010 - 0x0000)
struct StateMachineComponent_GetCurrentStateInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_GetCurrentStateInfo) == 0x000008, "Wrong alignment on StateMachineComponent_GetCurrentStateInfo");
static_assert(sizeof(StateMachineComponent_GetCurrentStateInfo) == 0x000010, "Wrong size on StateMachineComponent_GetCurrentStateInfo");
static_assert(offsetof(StateMachineComponent_GetCurrentStateInfo, ReturnValue) == 0x000000, "Member 'StateMachineComponent_GetCurrentStateInfo::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineComponent.GetCurrentStateInfoServer
// 0x0010 (0x0010 - 0x0000)
struct StateMachineComponent_GetCurrentStateInfoServer final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_GetCurrentStateInfoServer) == 0x000008, "Wrong alignment on StateMachineComponent_GetCurrentStateInfoServer");
static_assert(sizeof(StateMachineComponent_GetCurrentStateInfoServer) == 0x000010, "Wrong size on StateMachineComponent_GetCurrentStateInfoServer");
static_assert(offsetof(StateMachineComponent_GetCurrentStateInfoServer, ReturnValue) == 0x000000, "Member 'StateMachineComponent_GetCurrentStateInfoServer::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineComponent.GetCurrentStateInMachine
// 0x0008 (0x0008 - 0x0000)
struct StateMachineComponent_GetCurrentStateInMachine final
{
public:
	class UItemState*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_GetCurrentStateInMachine) == 0x000008, "Wrong alignment on StateMachineComponent_GetCurrentStateInMachine");
static_assert(sizeof(StateMachineComponent_GetCurrentStateInMachine) == 0x000008, "Wrong size on StateMachineComponent_GetCurrentStateInMachine");
static_assert(offsetof(StateMachineComponent_GetCurrentStateInMachine, ReturnValue) == 0x000000, "Member 'StateMachineComponent_GetCurrentStateInMachine::ReturnValue' has a wrong offset!");

// Function Flame.StateMachineComponent.IsMachineEmpty
// 0x0001 (0x0001 - 0x0000)
struct StateMachineComponent_IsMachineEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachineComponent_IsMachineEmpty) == 0x000001, "Wrong alignment on StateMachineComponent_IsMachineEmpty");
static_assert(sizeof(StateMachineComponent_IsMachineEmpty) == 0x000001, "Wrong size on StateMachineComponent_IsMachineEmpty");
static_assert(offsetof(StateMachineComponent_IsMachineEmpty, ReturnValue) == 0x000000, "Member 'StateMachineComponent_IsMachineEmpty::ReturnValue' has a wrong offset!");

// Function Flame.SteamGameStorePurchaseHandler.SetSimulateOverlaySteam
// 0x0001 (0x0001 - 0x0000)
struct SteamGameStorePurchaseHandler_SetSimulateOverlaySteam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamGameStorePurchaseHandler_SetSimulateOverlaySteam) == 0x000001, "Wrong alignment on SteamGameStorePurchaseHandler_SetSimulateOverlaySteam");
static_assert(sizeof(SteamGameStorePurchaseHandler_SetSimulateOverlaySteam) == 0x000001, "Wrong size on SteamGameStorePurchaseHandler_SetSimulateOverlaySteam");
static_assert(offsetof(SteamGameStorePurchaseHandler_SetSimulateOverlaySteam, bEnable) == 0x000000, "Member 'SteamGameStorePurchaseHandler_SetSimulateOverlaySteam::bEnable' has a wrong offset!");

// Function Flame.SteamMicrotransactionGameStorePurchaseHandler.SetSimulateOverlaySteam
// 0x0001 (0x0001 - 0x0000)
struct SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam) == 0x000001, "Wrong alignment on SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam");
static_assert(sizeof(SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam) == 0x000001, "Wrong size on SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam");
static_assert(offsetof(SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam, bEnable) == 0x000000, "Member 'SteamMicrotransactionGameStorePurchaseHandler_SetSimulateOverlaySteam::bEnable' has a wrong offset!");

// Function Flame.SubtitleWidget.OnSetSubtitleText
// 0x0018 (0x0018 - 0x0000)
struct SubtitleWidget_OnSetSubtitleText final
{
public:
	class FText                                   InSubtitleText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitleWidget_OnSetSubtitleText) == 0x000008, "Wrong alignment on SubtitleWidget_OnSetSubtitleText");
static_assert(sizeof(SubtitleWidget_OnSetSubtitleText) == 0x000018, "Wrong size on SubtitleWidget_OnSetSubtitleText");
static_assert(offsetof(SubtitleWidget_OnSetSubtitleText, InSubtitleText) == 0x000000, "Member 'SubtitleWidget_OnSetSubtitleText::InSubtitleText' has a wrong offset!");

// Function Flame.SwapWeaponsWidget.OnSelectedWeaponA
// 0x0008 (0x0008 - 0x0000)
struct SwapWeaponsWidget_OnSelectedWeaponA final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwapWeaponsWidget_OnSelectedWeaponA) == 0x000008, "Wrong alignment on SwapWeaponsWidget_OnSelectedWeaponA");
static_assert(sizeof(SwapWeaponsWidget_OnSelectedWeaponA) == 0x000008, "Wrong size on SwapWeaponsWidget_OnSelectedWeaponA");
static_assert(offsetof(SwapWeaponsWidget_OnSelectedWeaponA, Sender) == 0x000000, "Member 'SwapWeaponsWidget_OnSelectedWeaponA::Sender' has a wrong offset!");

// Function Flame.SwapWeaponsWidget.OnSelectedWeaponB
// 0x0008 (0x0008 - 0x0000)
struct SwapWeaponsWidget_OnSelectedWeaponB final
{
public:
	class UButton*                                Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwapWeaponsWidget_OnSelectedWeaponB) == 0x000008, "Wrong alignment on SwapWeaponsWidget_OnSelectedWeaponB");
static_assert(sizeof(SwapWeaponsWidget_OnSelectedWeaponB) == 0x000008, "Wrong size on SwapWeaponsWidget_OnSelectedWeaponB");
static_assert(offsetof(SwapWeaponsWidget_OnSelectedWeaponB, Sender) == 0x000000, "Member 'SwapWeaponsWidget_OnSelectedWeaponB::Sender' has a wrong offset!");

// Function Flame.SwapWeaponsWidget.SelectWeaponOnMouseClick
// 0x0008 (0x0008 - 0x0000)
struct SwapWeaponsWidget_SelectWeaponOnMouseClick final
{
public:
	class UFlameSlot*                             WeaponSlot;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SwapWeaponsWidget_SelectWeaponOnMouseClick) == 0x000008, "Wrong alignment on SwapWeaponsWidget_SelectWeaponOnMouseClick");
static_assert(sizeof(SwapWeaponsWidget_SelectWeaponOnMouseClick) == 0x000008, "Wrong size on SwapWeaponsWidget_SelectWeaponOnMouseClick");
static_assert(offsetof(SwapWeaponsWidget_SelectWeaponOnMouseClick, WeaponSlot) == 0x000000, "Member 'SwapWeaponsWidget_SelectWeaponOnMouseClick::WeaponSlot' has a wrong offset!");

// Function Flame.TabWidget.GetTabContent
// 0x0008 (0x0008 - 0x0000)
struct TabWidget_GetTabContent final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TabWidget_GetTabContent) == 0x000008, "Wrong alignment on TabWidget_GetTabContent");
static_assert(sizeof(TabWidget_GetTabContent) == 0x000008, "Wrong size on TabWidget_GetTabContent");
static_assert(offsetof(TabWidget_GetTabContent, ReturnValue) == 0x000000, "Member 'TabWidget_GetTabContent::ReturnValue' has a wrong offset!");

// Function Flame.Task.ChangeTaskState
// 0x0001 (0x0001 - 0x0000)
struct Task_ChangeTaskState final
{
public:
	ETaskState                                    NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Task_ChangeTaskState) == 0x000001, "Wrong alignment on Task_ChangeTaskState");
static_assert(sizeof(Task_ChangeTaskState) == 0x000001, "Wrong size on Task_ChangeTaskState");
static_assert(offsetof(Task_ChangeTaskState, NewState) == 0x000000, "Member 'Task_ChangeTaskState::NewState' has a wrong offset!");

// Function Flame.TaskSystemComponent.AddTask
// 0x0008 (0x0008 - 0x0000)
struct TaskSystemComponent_AddTask final
{
public:
	TSubclassOf<class UTask>                      TaskToAdd;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSystemComponent_AddTask) == 0x000008, "Wrong alignment on TaskSystemComponent_AddTask");
static_assert(sizeof(TaskSystemComponent_AddTask) == 0x000008, "Wrong size on TaskSystemComponent_AddTask");
static_assert(offsetof(TaskSystemComponent_AddTask, TaskToAdd) == 0x000000, "Member 'TaskSystemComponent_AddTask::TaskToAdd' has a wrong offset!");

// Function Flame.TaskSystemComponent.CompleteTask
// 0x0004 (0x0004 - 0x0000)
struct TaskSystemComponent_CompleteTask final
{
public:
	int32                                         TaskID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSystemComponent_CompleteTask) == 0x000004, "Wrong alignment on TaskSystemComponent_CompleteTask");
static_assert(sizeof(TaskSystemComponent_CompleteTask) == 0x000004, "Wrong size on TaskSystemComponent_CompleteTask");
static_assert(offsetof(TaskSystemComponent_CompleteTask, TaskID) == 0x000000, "Member 'TaskSystemComponent_CompleteTask::TaskID' has a wrong offset!");

// Function Flame.TaskSystemComponent.GetReadyTasks
// 0x0010 (0x0010 - 0x0000)
struct TaskSystemComponent_GetReadyTasks final
{
public:
	TArray<TSubclassOf<class UTask>>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSystemComponent_GetReadyTasks) == 0x000008, "Wrong alignment on TaskSystemComponent_GetReadyTasks");
static_assert(sizeof(TaskSystemComponent_GetReadyTasks) == 0x000010, "Wrong size on TaskSystemComponent_GetReadyTasks");
static_assert(offsetof(TaskSystemComponent_GetReadyTasks, ReturnValue) == 0x000000, "Member 'TaskSystemComponent_GetReadyTasks::ReturnValue' has a wrong offset!");

// Function Flame.TaskSystemComponent.GetTask
// 0x0010 (0x0010 - 0x0000)
struct TaskSystemComponent_GetTask final
{
public:
	int32                                         TaskID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTask*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TaskSystemComponent_GetTask) == 0x000008, "Wrong alignment on TaskSystemComponent_GetTask");
static_assert(sizeof(TaskSystemComponent_GetTask) == 0x000010, "Wrong size on TaskSystemComponent_GetTask");
static_assert(offsetof(TaskSystemComponent_GetTask, TaskID) == 0x000000, "Member 'TaskSystemComponent_GetTask::TaskID' has a wrong offset!");
static_assert(offsetof(TaskSystemComponent_GetTask, ReturnValue) == 0x000008, "Member 'TaskSystemComponent_GetTask::ReturnValue' has a wrong offset!");

// Function Flame.TaskSystemComponent.GetTaskState
// 0x0008 (0x0008 - 0x0000)
struct TaskSystemComponent_GetTaskState final
{
public:
	int32                                         TaskID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETaskState                                    ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskSystemComponent_GetTaskState) == 0x000004, "Wrong alignment on TaskSystemComponent_GetTaskState");
static_assert(sizeof(TaskSystemComponent_GetTaskState) == 0x000008, "Wrong size on TaskSystemComponent_GetTaskState");
static_assert(offsetof(TaskSystemComponent_GetTaskState, TaskID) == 0x000000, "Member 'TaskSystemComponent_GetTaskState::TaskID' has a wrong offset!");
static_assert(offsetof(TaskSystemComponent_GetTaskState, ReturnValue) == 0x000004, "Member 'TaskSystemComponent_GetTaskState::ReturnValue' has a wrong offset!");

// Function Flame.TaskSystemComponent.HasTask
// 0x0008 (0x0008 - 0x0000)
struct TaskSystemComponent_HasTask final
{
public:
	int32                                         TaskID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TaskSystemComponent_HasTask) == 0x000004, "Wrong alignment on TaskSystemComponent_HasTask");
static_assert(sizeof(TaskSystemComponent_HasTask) == 0x000008, "Wrong size on TaskSystemComponent_HasTask");
static_assert(offsetof(TaskSystemComponent_HasTask, TaskID) == 0x000000, "Member 'TaskSystemComponent_HasTask::TaskID' has a wrong offset!");
static_assert(offsetof(TaskSystemComponent_HasTask, ReturnValue) == 0x000004, "Member 'TaskSystemComponent_HasTask::ReturnValue' has a wrong offset!");

// Function Flame.TextNotification.SetMessage
// 0x0018 (0x0018 - 0x0000)
struct TextNotification_SetMessage final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextNotification_SetMessage) == 0x000008, "Wrong alignment on TextNotification_SetMessage");
static_assert(sizeof(TextNotification_SetMessage) == 0x000018, "Wrong size on TextNotification_SetMessage");
static_assert(offsetof(TextNotification_SetMessage, InText) == 0x000000, "Member 'TextNotification_SetMessage::InText' has a wrong offset!");

// Function Flame.TextNotification.SetType
// 0x0001 (0x0001 - 0x0000)
struct TextNotification_SetType final
{
public:
	ETextNotificationType                         InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextNotification_SetType) == 0x000001, "Wrong alignment on TextNotification_SetType");
static_assert(sizeof(TextNotification_SetType) == 0x000001, "Wrong size on TextNotification_SetType");
static_assert(offsetof(TextNotification_SetType, InType) == 0x000000, "Member 'TextNotification_SetType::InType' has a wrong offset!");

// Function Flame.Throwable.ReceiveOnThrow
// 0x0008 (0x0008 - 0x0000)
struct Throwable_ReceiveOnThrow final
{
public:
	class AThrowableConsumable*                   ProjectileFired;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Throwable_ReceiveOnThrow) == 0x000008, "Wrong alignment on Throwable_ReceiveOnThrow");
static_assert(sizeof(Throwable_ReceiveOnThrow) == 0x000008, "Wrong size on Throwable_ReceiveOnThrow");
static_assert(offsetof(Throwable_ReceiveOnThrow, ProjectileFired) == 0x000000, "Member 'Throwable_ReceiveOnThrow::ProjectileFired' has a wrong offset!");

// Function Flame.UICoreObject.GetItemRarity
// 0x0030 (0x0030 - 0x0000)
struct UICoreObject_GetItemRarity final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemRarity                            ReturnValue;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoreObject_GetItemRarity) == 0x000008, "Wrong alignment on UICoreObject_GetItemRarity");
static_assert(sizeof(UICoreObject_GetItemRarity) == 0x000030, "Wrong size on UICoreObject_GetItemRarity");
static_assert(offsetof(UICoreObject_GetItemRarity, InIndex) == 0x000000, "Member 'UICoreObject_GetItemRarity::InIndex' has a wrong offset!");
static_assert(offsetof(UICoreObject_GetItemRarity, ReturnValue) == 0x000008, "Member 'UICoreObject_GetItemRarity::ReturnValue' has a wrong offset!");

// Function Flame.UICoreObject.GetLevelDescription
// 0x0058 (0x0058 - 0x0000)
struct UICoreObject_GetLevelDescription final
{
public:
	class FName                                   InLevelName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelDescriptionTableRow              ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoreObject_GetLevelDescription) == 0x000008, "Wrong alignment on UICoreObject_GetLevelDescription");
static_assert(sizeof(UICoreObject_GetLevelDescription) == 0x000058, "Wrong size on UICoreObject_GetLevelDescription");
static_assert(offsetof(UICoreObject_GetLevelDescription, InLevelName) == 0x000000, "Member 'UICoreObject_GetLevelDescription::InLevelName' has a wrong offset!");
static_assert(offsetof(UICoreObject_GetLevelDescription, ReturnValue) == 0x000008, "Member 'UICoreObject_GetLevelDescription::ReturnValue' has a wrong offset!");

// Function Flame.UICoreObject.GetModalWidget
// 0x0008 (0x0008 - 0x0000)
struct UICoreObject_GetModalWidget final
{
public:
	class UModalWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoreObject_GetModalWidget) == 0x000008, "Wrong alignment on UICoreObject_GetModalWidget");
static_assert(sizeof(UICoreObject_GetModalWidget) == 0x000008, "Wrong size on UICoreObject_GetModalWidget");
static_assert(offsetof(UICoreObject_GetModalWidget, ReturnValue) == 0x000000, "Member 'UICoreObject_GetModalWidget::ReturnValue' has a wrong offset!");

// Function Flame.UICoreObject.GetZOrder
// 0x0008 (0x0008 - 0x0000)
struct UICoreObject_GetZOrder final
{
public:
	EUILayer                                      InLayer;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICoreObject_GetZOrder) == 0x000004, "Wrong alignment on UICoreObject_GetZOrder");
static_assert(sizeof(UICoreObject_GetZOrder) == 0x000008, "Wrong size on UICoreObject_GetZOrder");
static_assert(offsetof(UICoreObject_GetZOrder, InLayer) == 0x000000, "Member 'UICoreObject_GetZOrder::InLayer' has a wrong offset!");
static_assert(offsetof(UICoreObject_GetZOrder, ReturnValue) == 0x000004, "Member 'UICoreObject_GetZOrder::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.CloseGameMenu
// 0x0008 (0x0008 - 0x0000)
struct UserInterfaceFunctionLibrary_CloseGameMenu final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_CloseGameMenu) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_CloseGameMenu");
static_assert(sizeof(UserInterfaceFunctionLibrary_CloseGameMenu) == 0x000008, "Wrong size on UserInterfaceFunctionLibrary_CloseGameMenu");
static_assert(offsetof(UserInterfaceFunctionLibrary_CloseGameMenu, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_CloseGameMenu::InPlayerController' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.CloseModalWidget
// 0x0008 (0x0008 - 0x0000)
struct UserInterfaceFunctionLibrary_CloseModalWidget final
{
public:
	const class APlayerController*                InOwningPlayer;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_CloseModalWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_CloseModalWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_CloseModalWidget) == 0x000008, "Wrong size on UserInterfaceFunctionLibrary_CloseModalWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_CloseModalWidget, InOwningPlayer) == 0x000000, "Member 'UserInterfaceFunctionLibrary_CloseModalWidget::InOwningPlayer' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.CloseShelterUI
// 0x0008 (0x0008 - 0x0000)
struct UserInterfaceFunctionLibrary_CloseShelterUI final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_CloseShelterUI) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_CloseShelterUI");
static_assert(sizeof(UserInterfaceFunctionLibrary_CloseShelterUI) == 0x000008, "Wrong size on UserInterfaceFunctionLibrary_CloseShelterUI");
static_assert(offsetof(UserInterfaceFunctionLibrary_CloseShelterUI, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_CloseShelterUI::InPlayerController' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.Conv_NetIdToString
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_Conv_NetIdToString final
{
public:
	struct FUniqueNetIdRepl                       InNetId;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_Conv_NetIdToString) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_Conv_NetIdToString");
static_assert(sizeof(UserInterfaceFunctionLibrary_Conv_NetIdToString) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_Conv_NetIdToString");
static_assert(offsetof(UserInterfaceFunctionLibrary_Conv_NetIdToString, InNetId) == 0x000000, "Member 'UserInterfaceFunctionLibrary_Conv_NetIdToString::InNetId' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_Conv_NetIdToString, ReturnValue) == 0x000028, "Member 'UserInterfaceFunctionLibrary_Conv_NetIdToString::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.EqualEqual_NetIdNetId
// 0x0058 (0x0058 - 0x0000)
struct UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId final
{
public:
	struct FUniqueNetIdRepl                       A;                                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       B;                                                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId");
static_assert(sizeof(UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId) == 0x000058, "Wrong size on UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId");
static_assert(offsetof(UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId, A) == 0x000000, "Member 'UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId::A' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId, B) == 0x000028, "Member 'UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId::B' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId, ReturnValue) == 0x000050, "Member 'UserInterfaceFunctionLibrary_EqualEqual_NetIdNetId::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.ExistsModalWidget
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_ExistsModalWidget final
{
public:
	const class APlayerController*                InOwningPlayer;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_ExistsModalWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_ExistsModalWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_ExistsModalWidget) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_ExistsModalWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_ExistsModalWidget, InOwningPlayer) == 0x000000, "Member 'UserInterfaceFunctionLibrary_ExistsModalWidget::InOwningPlayer' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ExistsModalWidget, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_ExistsModalWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.FindFocusedWidget
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_FindFocusedWidget final
{
public:
	const class AHumanPlayerController*           HumanController;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_FindFocusedWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_FindFocusedWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_FindFocusedWidget) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_FindFocusedWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_FindFocusedWidget, HumanController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_FindFocusedWidget::HumanController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_FindFocusedWidget, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_FindFocusedWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetActiveMenuWidget
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetActiveMenuWidget final
{
public:
	const class AHumanPlayerController*           HumanController;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMenuWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetActiveMenuWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetActiveMenuWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetActiveMenuWidget) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetActiveMenuWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetActiveMenuWidget, HumanController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetActiveMenuWidget::HumanController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetActiveMenuWidget, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetActiveMenuWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetAllNestedUserWidgets
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_GetAllNestedUserWidgets final
{
public:
	const class UUserWidget*                      InUserWidget;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetAllNestedUserWidgets) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetAllNestedUserWidgets");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetAllNestedUserWidgets) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_GetAllNestedUserWidgets");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetAllNestedUserWidgets, InUserWidget) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetAllNestedUserWidgets::InUserWidget' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetAllNestedUserWidgets, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetAllNestedUserWidgets::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetAllOpenedWidgets
// 0x0020 (0x0020 - 0x0000)
struct UserInterfaceFunctionLibrary_GetAllOpenedWidgets final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UFlameWidget*>                   OutWidgets;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UFlameWidget>               InWidgetClass;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetAllOpenedWidgets) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetAllOpenedWidgets");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetAllOpenedWidgets) == 0x000020, "Wrong size on UserInterfaceFunctionLibrary_GetAllOpenedWidgets");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetAllOpenedWidgets, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetAllOpenedWidgets::InPlayerController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetAllOpenedWidgets, OutWidgets) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetAllOpenedWidgets::OutWidgets' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetAllOpenedWidgets, InWidgetClass) == 0x000018, "Member 'UserInterfaceFunctionLibrary_GetAllOpenedWidgets::InWidgetClass' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetGameMenu
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetGameMenu final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMenuWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetGameMenu) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetGameMenu");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetGameMenu) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetGameMenu");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetGameMenu, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetGameMenu::InPlayerController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetGameMenu, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetGameMenu::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetGrandParentUserWidget
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_GetGrandParentUserWidget final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumOfGenerations;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetGrandParentUserWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetGrandParentUserWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetGrandParentUserWidget) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_GetGrandParentUserWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetGrandParentUserWidget, InWidget) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetGrandParentUserWidget::InWidget' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetGrandParentUserWidget, InNumOfGenerations) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetGrandParentUserWidget::InNumOfGenerations' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetGrandParentUserWidget, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_GetGrandParentUserWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetHighestInputPriority
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_GetHighestInputPriority final
{
public:
	TArray<class UUserWidget*>                    InUserWidgets;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetHighestInputPriority) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetHighestInputPriority");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetHighestInputPriority) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_GetHighestInputPriority");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetHighestInputPriority, InUserWidgets) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetHighestInputPriority::InUserWidgets' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetHighestInputPriority, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_GetHighestInputPriority::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetInputsFromText
// 0x0028 (0x0028 - 0x0000)
struct UserInterfaceFunctionLibrary_GetInputsFromText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetInputsFromText) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetInputsFromText");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetInputsFromText) == 0x000028, "Wrong size on UserInterfaceFunctionLibrary_GetInputsFromText");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetInputsFromText, Text) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetInputsFromText::Text' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetInputsFromText, ReturnValue) == 0x000018, "Member 'UserInterfaceFunctionLibrary_GetInputsFromText::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetItemRarity
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_GetItemRarity final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AItem*                                  InItem;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemRarity                            ReturnValue;                                       // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetItemRarity) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetItemRarity");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetItemRarity) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_GetItemRarity");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetItemRarity, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetItemRarity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetItemRarity, InItem) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetItemRarity::InItem' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetItemRarity, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_GetItemRarity::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetLevelDescription
// 0x0060 (0x0060 - 0x0000)
struct UserInterfaceFunctionLibrary_GetLevelDescription final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InLevelName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLevelDescriptionTableRow              ReturnValue;                                       // 0x0010(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetLevelDescription) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetLevelDescription");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetLevelDescription) == 0x000060, "Wrong size on UserInterfaceFunctionLibrary_GetLevelDescription");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetLevelDescription, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetLevelDescription::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetLevelDescription, InLevelName) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetLevelDescription::InLevelName' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetLevelDescription, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_GetLevelDescription::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetMapMarkerColor
// 0x0020 (0x0020 - 0x0000)
struct UserInterfaceFunctionLibrary_GetMapMarkerColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMapMarkerType                                InMarkerType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x000C(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetMapMarkerColor) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetMapMarkerColor");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetMapMarkerColor) == 0x000020, "Wrong size on UserInterfaceFunctionLibrary_GetMapMarkerColor");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetMapMarkerColor, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetMapMarkerColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetMapMarkerColor, InMarkerType) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetMapMarkerColor::InMarkerType' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetMapMarkerColor, ReturnValue) == 0x00000C, "Member 'UserInterfaceFunctionLibrary_GetMapMarkerColor::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetNotificationSystem
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetNotificationSystem final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNotificationSystem*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetNotificationSystem) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetNotificationSystem");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetNotificationSystem) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetNotificationSystem");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetNotificationSystem, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetNotificationSystem::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetNotificationSystem, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetNotificationSystem::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetParentUserWidget
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetParentUserWidget final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetParentUserWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetParentUserWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetParentUserWidget) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetParentUserWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetParentUserWidget, InWidget) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetParentUserWidget::InWidget' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetParentUserWidget, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetParentUserWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetPlatformGroup
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetPlatformGroup final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetPlatformGroup) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetPlatformGroup");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetPlatformGroup) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetPlatformGroup");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetPlatformGroup, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetPlatformGroup::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetProfilePictureCache
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetProfilePictureCache final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProfilePictureCache*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetProfilePictureCache) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetProfilePictureCache");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetProfilePictureCache) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetProfilePictureCache");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetProfilePictureCache, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetProfilePictureCache::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetProfilePictureCache, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetProfilePictureCache::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetRichPlayerNickname
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_GetRichPlayerNickname final
{
public:
	class FText                                   InPlayerNickname;                                  // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	EFlamePlatform                                InPlayerPlatform;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetRichPlayerNickname) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetRichPlayerNickname");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetRichPlayerNickname) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_GetRichPlayerNickname");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetRichPlayerNickname, InPlayerNickname) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetRichPlayerNickname::InPlayerNickname' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetRichPlayerNickname, InPlayerPlatform) == 0x000018, "Member 'UserInterfaceFunctionLibrary_GetRichPlayerNickname::InPlayerPlatform' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetRichPlayerNickname, ReturnValue) == 0x000020, "Member 'UserInterfaceFunctionLibrary_GetRichPlayerNickname::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetRichPlayerNicknameWidget
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetRichPlayerNicknameWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetShelterUI
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetShelterUI final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UShelterMainTabControl*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetShelterUI) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetShelterUI");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetShelterUI) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetShelterUI");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetShelterUI, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetShelterUI::InPlayerController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetShelterUI, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetShelterUI::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetUICoreObject
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetUICoreObject final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUICoreObject*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetUICoreObject) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetUICoreObject");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetUICoreObject) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetUICoreObject");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetUICoreObject, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetUICoreObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetUICoreObject, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetUICoreObject::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.GetZOrder
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_GetZOrder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUILayer                                      Layer;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_GetZOrder) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_GetZOrder");
static_assert(sizeof(UserInterfaceFunctionLibrary_GetZOrder) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_GetZOrder");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetZOrder, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_GetZOrder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetZOrder, Layer) == 0x000008, "Member 'UserInterfaceFunctionLibrary_GetZOrder::Layer' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_GetZOrder, ReturnValue) == 0x00000C, "Member 'UserInterfaceFunctionLibrary_GetZOrder::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.HasFocus
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_HasFocus final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_HasFocus) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_HasFocus");
static_assert(sizeof(UserInterfaceFunctionLibrary_HasFocus) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_HasFocus");
static_assert(offsetof(UserInterfaceFunctionLibrary_HasFocus, InWidget) == 0x000000, "Member 'UserInterfaceFunctionLibrary_HasFocus::InWidget' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_HasFocus, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_HasFocus::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsAnyMenuOpen
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_IsAnyMenuOpen final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsAnyMenuOpen) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_IsAnyMenuOpen");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsAnyMenuOpen) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_IsAnyMenuOpen");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsAnyMenuOpen, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsAnyMenuOpen::InPlayerController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsAnyMenuOpen, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_IsAnyMenuOpen::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsExhibitionPlayer
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_IsExhibitionPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsExhibitionPlayer) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_IsExhibitionPlayer");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsExhibitionPlayer) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_IsExhibitionPlayer");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsExhibitionPlayer, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsExhibitionPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsExhibitionPlayer, UniqueNetId) == 0x000008, "Member 'UserInterfaceFunctionLibrary_IsExhibitionPlayer::UniqueNetId' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsExhibitionPlayer, ReturnValue) == 0x000030, "Member 'UserInterfaceFunctionLibrary_IsExhibitionPlayer::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsLocalPlayer
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_IsLocalPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsLocalPlayer) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_IsLocalPlayer");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsLocalPlayer) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_IsLocalPlayer");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsLocalPlayer, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsLocalPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsLocalPlayer, UniqueNetId) == 0x000008, "Member 'UserInterfaceFunctionLibrary_IsLocalPlayer::UniqueNetId' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsLocalPlayer, ReturnValue) == 0x000030, "Member 'UserInterfaceFunctionLibrary_IsLocalPlayer::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsPlatformGroupConsole
// 0x0001 (0x0001 - 0x0000)
struct UserInterfaceFunctionLibrary_IsPlatformGroupConsole final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsPlatformGroupConsole) == 0x000001, "Wrong alignment on UserInterfaceFunctionLibrary_IsPlatformGroupConsole");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsPlatformGroupConsole) == 0x000001, "Wrong size on UserInterfaceFunctionLibrary_IsPlatformGroupConsole");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsPlatformGroupConsole, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsPlatformGroupConsole::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsPlatformGroupDesktop
// 0x0001 (0x0001 - 0x0000)
struct UserInterfaceFunctionLibrary_IsPlatformGroupDesktop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsPlatformGroupDesktop) == 0x000001, "Wrong alignment on UserInterfaceFunctionLibrary_IsPlatformGroupDesktop");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsPlatformGroupDesktop) == 0x000001, "Wrong size on UserInterfaceFunctionLibrary_IsPlatformGroupDesktop");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsPlatformGroupDesktop, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsPlatformGroupDesktop::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsPlatformGroupMobile
// 0x0001 (0x0001 - 0x0000)
struct UserInterfaceFunctionLibrary_IsPlatformGroupMobile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsPlatformGroupMobile) == 0x000001, "Wrong alignment on UserInterfaceFunctionLibrary_IsPlatformGroupMobile");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsPlatformGroupMobile) == 0x000001, "Wrong size on UserInterfaceFunctionLibrary_IsPlatformGroupMobile");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsPlatformGroupMobile, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsPlatformGroupMobile::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsReallyVisible
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_IsReallyVisible final
{
public:
	const class UWidget*                          InWidget;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsReallyVisible) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_IsReallyVisible");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsReallyVisible) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_IsReallyVisible");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsReallyVisible, InWidget) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsReallyVisible::InWidget' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsReallyVisible, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_IsReallyVisible::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.IsValidPlayer
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_IsValidPlayer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       UniqueNetId;                                       // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_IsValidPlayer) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_IsValidPlayer");
static_assert(sizeof(UserInterfaceFunctionLibrary_IsValidPlayer) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_IsValidPlayer");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsValidPlayer, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_IsValidPlayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsValidPlayer, UniqueNetId) == 0x000008, "Member 'UserInterfaceFunctionLibrary_IsValidPlayer::UniqueNetId' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_IsValidPlayer, ReturnValue) == 0x000030, "Member 'UserInterfaceFunctionLibrary_IsValidPlayer::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.KeepCurrentFocus
// 0x0008 (0x0008 - 0x0000)
struct UserInterfaceFunctionLibrary_KeepCurrentFocus final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_KeepCurrentFocus) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_KeepCurrentFocus");
static_assert(sizeof(UserInterfaceFunctionLibrary_KeepCurrentFocus) == 0x000008, "Wrong size on UserInterfaceFunctionLibrary_KeepCurrentFocus");
static_assert(offsetof(UserInterfaceFunctionLibrary_KeepCurrentFocus, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_KeepCurrentFocus::InPlayerController' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.LinearColorFromHexString
// 0x0020 (0x0020 - 0x0000)
struct UserInterfaceFunctionLibrary_LinearColorFromHexString final
{
public:
	class FString                                 InHexString;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_LinearColorFromHexString) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_LinearColorFromHexString");
static_assert(sizeof(UserInterfaceFunctionLibrary_LinearColorFromHexString) == 0x000020, "Wrong size on UserInterfaceFunctionLibrary_LinearColorFromHexString");
static_assert(offsetof(UserInterfaceFunctionLibrary_LinearColorFromHexString, InHexString) == 0x000000, "Member 'UserInterfaceFunctionLibrary_LinearColorFromHexString::InHexString' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_LinearColorFromHexString, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_LinearColorFromHexString::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.NotEqual_NetIdNetId
// 0x0058 (0x0058 - 0x0000)
struct UserInterfaceFunctionLibrary_NotEqual_NetIdNetId final
{
public:
	struct FUniqueNetIdRepl                       A;                                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUniqueNetIdRepl                       B;                                                 // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_NotEqual_NetIdNetId) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_NotEqual_NetIdNetId");
static_assert(sizeof(UserInterfaceFunctionLibrary_NotEqual_NetIdNetId) == 0x000058, "Wrong size on UserInterfaceFunctionLibrary_NotEqual_NetIdNetId");
static_assert(offsetof(UserInterfaceFunctionLibrary_NotEqual_NetIdNetId, A) == 0x000000, "Member 'UserInterfaceFunctionLibrary_NotEqual_NetIdNetId::A' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_NotEqual_NetIdNetId, B) == 0x000028, "Member 'UserInterfaceFunctionLibrary_NotEqual_NetIdNetId::B' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_NotEqual_NetIdNetId, ReturnValue) == 0x000050, "Member 'UserInterfaceFunctionLibrary_NotEqual_NetIdNetId::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.OpenGameMenu
// 0x0008 (0x0008 - 0x0000)
struct UserInterfaceFunctionLibrary_OpenGameMenu final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_OpenGameMenu) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_OpenGameMenu");
static_assert(sizeof(UserInterfaceFunctionLibrary_OpenGameMenu) == 0x000008, "Wrong size on UserInterfaceFunctionLibrary_OpenGameMenu");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenGameMenu, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_OpenGameMenu::InPlayerController' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.OpenIdleWidget
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_OpenIdleWidget final
{
public:
	class APlayerController*                      InOwningPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModalWidget*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_OpenIdleWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_OpenIdleWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_OpenIdleWidget) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_OpenIdleWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenIdleWidget, InOwningPlayer) == 0x000000, "Member 'UserInterfaceFunctionLibrary_OpenIdleWidget::InOwningPlayer' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenIdleWidget, ReturnValue) == 0x000008, "Member 'UserInterfaceFunctionLibrary_OpenIdleWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.OpenModalWidget
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_OpenModalWidget final
{
public:
	class APlayerController*                      InOwningPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModalWidget>               InWidgetClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModalWidget*                           ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_OpenModalWidget) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_OpenModalWidget");
static_assert(sizeof(UserInterfaceFunctionLibrary_OpenModalWidget) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_OpenModalWidget");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenModalWidget, InOwningPlayer) == 0x000000, "Member 'UserInterfaceFunctionLibrary_OpenModalWidget::InOwningPlayer' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenModalWidget, InWidgetClass) == 0x000008, "Member 'UserInterfaceFunctionLibrary_OpenModalWidget::InWidgetClass' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenModalWidget, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_OpenModalWidget::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.OpenShelterUI
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_OpenShelterUI final
{
public:
	const class APlayerController*                InPlayerController;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShelterMainTab                               InTab;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_OpenShelterUI) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_OpenShelterUI");
static_assert(sizeof(UserInterfaceFunctionLibrary_OpenShelterUI) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_OpenShelterUI");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenShelterUI, InPlayerController) == 0x000000, "Member 'UserInterfaceFunctionLibrary_OpenShelterUI::InPlayerController' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_OpenShelterUI, InTab) == 0x000008, "Member 'UserInterfaceFunctionLibrary_OpenShelterUI::InTab' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.ReplaceTextWithControls
// 0x0040 (0x0040 - 0x0000)
struct UserInterfaceFunctionLibrary_ReplaceTextWithControls final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	TArray<class FText>                           Inputs;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_ReplaceTextWithControls) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_ReplaceTextWithControls");
static_assert(sizeof(UserInterfaceFunctionLibrary_ReplaceTextWithControls) == 0x000040, "Wrong size on UserInterfaceFunctionLibrary_ReplaceTextWithControls");
static_assert(offsetof(UserInterfaceFunctionLibrary_ReplaceTextWithControls, Text) == 0x000000, "Member 'UserInterfaceFunctionLibrary_ReplaceTextWithControls::Text' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ReplaceTextWithControls, Inputs) == 0x000018, "Member 'UserInterfaceFunctionLibrary_ReplaceTextWithControls::Inputs' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ReplaceTextWithControls, ReturnValue) == 0x000028, "Member 'UserInterfaceFunctionLibrary_ReplaceTextWithControls::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.SetDefaultLanguage
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_SetDefaultLanguage final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_SetDefaultLanguage) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_SetDefaultLanguage");
static_assert(sizeof(UserInterfaceFunctionLibrary_SetDefaultLanguage) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_SetDefaultLanguage");
static_assert(offsetof(UserInterfaceFunctionLibrary_SetDefaultLanguage, ReturnValue) == 0x000000, "Member 'UserInterfaceFunctionLibrary_SetDefaultLanguage::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.SetLanguage
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_SetLanguage final
{
public:
	class FString                                 InCultureName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_SetLanguage) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_SetLanguage");
static_assert(sizeof(UserInterfaceFunctionLibrary_SetLanguage) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_SetLanguage");
static_assert(offsetof(UserInterfaceFunctionLibrary_SetLanguage, InCultureName) == 0x000000, "Member 'UserInterfaceFunctionLibrary_SetLanguage::InCultureName' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_SetLanguage, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_SetLanguage::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.ShowMessageBox
// 0x0058 (0x0058 - 0x0000)
struct UserInterfaceFunctionLibrary_ShowMessageBox final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InTitle;                                           // 0x0008(0x0018)(Parm, NativeAccessSpecifierPublic)
	class FText                                   InMessage;                                         // 0x0020(0x0018)(Parm, NativeAccessSpecifierPublic)
	EMessageBoxType                               InType;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EMessageBoxAction Result)>     OnMessageBoxClosed;                                // 0x003C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMessageBoxWidget*                      ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_ShowMessageBox) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_ShowMessageBox");
static_assert(sizeof(UserInterfaceFunctionLibrary_ShowMessageBox) == 0x000058, "Wrong size on UserInterfaceFunctionLibrary_ShowMessageBox");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, InTitle) == 0x000008, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::InTitle' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, InMessage) == 0x000020, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::InMessage' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, InType) == 0x000038, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::InType' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, OnMessageBoxClosed) == 0x00003C, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::OnMessageBoxClosed' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowMessageBox, ReturnValue) == 0x000050, "Member 'UserInterfaceFunctionLibrary_ShowMessageBox::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.ShowTextNotification
// 0x0038 (0x0038 - 0x0000)
struct UserInterfaceFunctionLibrary_ShowTextNotification final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextNotificationType                         InType;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDuration;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InMessage;                                         // 0x0010(0x0018)(Parm, NativeAccessSpecifierPublic)
	struct FNotificationParams                    InParameters;                                      // 0x0028(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_ShowTextNotification) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_ShowTextNotification");
static_assert(sizeof(UserInterfaceFunctionLibrary_ShowTextNotification) == 0x000038, "Wrong size on UserInterfaceFunctionLibrary_ShowTextNotification");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowTextNotification, WorldContextObject) == 0x000000, "Member 'UserInterfaceFunctionLibrary_ShowTextNotification::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowTextNotification, InType) == 0x000008, "Member 'UserInterfaceFunctionLibrary_ShowTextNotification::InType' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowTextNotification, InDuration) == 0x00000C, "Member 'UserInterfaceFunctionLibrary_ShowTextNotification::InDuration' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowTextNotification, InMessage) == 0x000010, "Member 'UserInterfaceFunctionLibrary_ShowTextNotification::InMessage' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_ShowTextNotification, InParameters) == 0x000028, "Member 'UserInterfaceFunctionLibrary_ShowTextNotification::InParameters' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.StringIsEmpty
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_StringIsEmpty final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_StringIsEmpty) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_StringIsEmpty");
static_assert(sizeof(UserInterfaceFunctionLibrary_StringIsEmpty) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_StringIsEmpty");
static_assert(offsetof(UserInterfaceFunctionLibrary_StringIsEmpty, String) == 0x000000, "Member 'UserInterfaceFunctionLibrary_StringIsEmpty::String' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_StringIsEmpty, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_StringIsEmpty::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.StringNotEmpty
// 0x0018 (0x0018 - 0x0000)
struct UserInterfaceFunctionLibrary_StringNotEmpty final
{
public:
	class FString                                 String;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInterfaceFunctionLibrary_StringNotEmpty) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_StringNotEmpty");
static_assert(sizeof(UserInterfaceFunctionLibrary_StringNotEmpty) == 0x000018, "Wrong size on UserInterfaceFunctionLibrary_StringNotEmpty");
static_assert(offsetof(UserInterfaceFunctionLibrary_StringNotEmpty, String) == 0x000000, "Member 'UserInterfaceFunctionLibrary_StringNotEmpty::String' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_StringNotEmpty, ReturnValue) == 0x000010, "Member 'UserInterfaceFunctionLibrary_StringNotEmpty::ReturnValue' has a wrong offset!");

// Function Flame.UserInterfaceFunctionLibrary.TimerWithString
// 0x0028 (0x0028 - 0x0000)
struct UserInterfaceFunctionLibrary_TimerWithString final
{
public:
	TDelegate<void(const class FString& Value)>   Event;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Value;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_TimerWithString) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_TimerWithString");
static_assert(sizeof(UserInterfaceFunctionLibrary_TimerWithString) == 0x000028, "Wrong size on UserInterfaceFunctionLibrary_TimerWithString");
static_assert(offsetof(UserInterfaceFunctionLibrary_TimerWithString, Event) == 0x000000, "Member 'UserInterfaceFunctionLibrary_TimerWithString::Event' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_TimerWithString, Time) == 0x000010, "Member 'UserInterfaceFunctionLibrary_TimerWithString::Time' has a wrong offset!");
static_assert(offsetof(UserInterfaceFunctionLibrary_TimerWithString, Value) == 0x000018, "Member 'UserInterfaceFunctionLibrary_TimerWithString::Value' has a wrong offset!");

// DelegateFunction Flame.UserInterfaceFunctionLibrary.TimerDynamicDelegateS__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature) == 0x000008, "Wrong alignment on UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature");
static_assert(sizeof(UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature) == 0x000010, "Wrong size on UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature");
static_assert(offsetof(UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature, Value) == 0x000000, "Member 'UserInterfaceFunctionLibrary_TimerDynamicDelegateS__DelegateSignature::Value' has a wrong offset!");

// Function Flame.UsableComponent.CanBeUsed
// 0x0001 (0x0001 - 0x0000)
struct UsableComponent_CanBeUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UsableComponent_CanBeUsed) == 0x000001, "Wrong alignment on UsableComponent_CanBeUsed");
static_assert(sizeof(UsableComponent_CanBeUsed) == 0x000001, "Wrong size on UsableComponent_CanBeUsed");
static_assert(offsetof(UsableComponent_CanBeUsed, ReturnValue) == 0x000000, "Member 'UsableComponent_CanBeUsed::ReturnValue' has a wrong offset!");

// Function Flame.OnlineUserCountersComponent.GetUserCounter
// 0x0018 (0x0018 - 0x0000)
struct OnlineUserCountersComponent_GetUserCounter final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CounterName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserCountersComponent_GetUserCounter) == 0x000008, "Wrong alignment on OnlineUserCountersComponent_GetUserCounter");
static_assert(sizeof(OnlineUserCountersComponent_GetUserCounter) == 0x000018, "Wrong size on OnlineUserCountersComponent_GetUserCounter");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounter, Player) == 0x000000, "Member 'OnlineUserCountersComponent_GetUserCounter::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounter, CounterName) == 0x000008, "Member 'OnlineUserCountersComponent_GetUserCounter::CounterName' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounter, ReturnValue) == 0x000010, "Member 'OnlineUserCountersComponent_GetUserCounter::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineUserCountersComponent.GetUserCounterDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHumanPlayerController*                 Player;                                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudUserCounterValue                 CounterValue;                                      // 0x0060(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature");
static_assert(sizeof(OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature) == 0x000070, "Wrong size on OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature, Player) == 0x000058, "Member 'OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature, CounterValue) == 0x000060, "Member 'OnlineUserCountersComponent_GetUserCounterDelegate__DelegateSignature::CounterValue' has a wrong offset!");

// Function Flame.OnlineUserCountersComponent.UpdateUserCounter
// 0x0020 (0x0020 - 0x0000)
struct OnlineUserCountersComponent_UpdateUserCounter final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CounterName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudUserCounterUpdate                UpdateData;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnlineUserCountersComponent_UpdateUserCounter) == 0x000008, "Wrong alignment on OnlineUserCountersComponent_UpdateUserCounter");
static_assert(sizeof(OnlineUserCountersComponent_UpdateUserCounter) == 0x000020, "Wrong size on OnlineUserCountersComponent_UpdateUserCounter");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounter, Player) == 0x000000, "Member 'OnlineUserCountersComponent_UpdateUserCounter::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounter, CounterName) == 0x000008, "Member 'OnlineUserCountersComponent_UpdateUserCounter::CounterName' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounter, UpdateData) == 0x000010, "Member 'OnlineUserCountersComponent_UpdateUserCounter::UpdateData' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounter, ReturnValue) == 0x000018, "Member 'OnlineUserCountersComponent_UpdateUserCounter::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.OnlineUserCountersComponent.UpdateUserCounterDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AHumanPlayerController*                 Player;                                            // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudUserCounterOperation                    Operation;                                         // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudUserCounterValue                 CounterValue;                                      // 0x0064(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature) == 0x000008, "Wrong alignment on OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature");
static_assert(sizeof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature) == 0x000070, "Wrong size on OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature, Player) == 0x000058, "Member 'OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature::Player' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature, Operation) == 0x000060, "Member 'OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature::Operation' has a wrong offset!");
static_assert(offsetof(OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature, CounterValue) == 0x000064, "Member 'OnlineUserCountersComponent_UpdateUserCounterDelegate__DelegateSignature::CounterValue' has a wrong offset!");

// Function Flame.UserInfoComponent.BanPlayer
// 0x0020 (0x0020 - 0x0000)
struct UserInfoComponent_BanPlayer final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerCloudId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInfoComponent_BanPlayer) == 0x000008, "Wrong alignment on UserInfoComponent_BanPlayer");
static_assert(sizeof(UserInfoComponent_BanPlayer) == 0x000020, "Wrong size on UserInfoComponent_BanPlayer");
static_assert(offsetof(UserInfoComponent_BanPlayer, Player) == 0x000000, "Member 'UserInfoComponent_BanPlayer::Player' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_BanPlayer, PlayerCloudId) == 0x000008, "Member 'UserInfoComponent_BanPlayer::PlayerCloudId' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_BanPlayer, ReturnValue) == 0x000018, "Member 'UserInfoComponent_BanPlayer::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.BanPlayerDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct UserInfoComponent_BanPlayerDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Userid;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudBannedPlayersResult              Result;                                            // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_BanPlayerDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_BanPlayerDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_BanPlayerDelegate__DelegateSignature) == 0x000080, "Wrong size on UserInfoComponent_BanPlayerDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_BanPlayerDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_BanPlayerDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_BanPlayerDelegate__DelegateSignature, Userid) == 0x000058, "Member 'UserInfoComponent_BanPlayerDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_BanPlayerDelegate__DelegateSignature, Result) == 0x000068, "Member 'UserInfoComponent_BanPlayerDelegate__DelegateSignature::Result' has a wrong offset!");

// Function Flame.UserInfoComponent.GetMatchInfo
// 0x0018 (0x0018 - 0x0000)
struct UserInfoComponent_GetMatchInfo final
{
public:
	class FString                                 MatchCloudId;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInfoComponent_GetMatchInfo) == 0x000008, "Wrong alignment on UserInfoComponent_GetMatchInfo");
static_assert(sizeof(UserInfoComponent_GetMatchInfo) == 0x000018, "Wrong size on UserInfoComponent_GetMatchInfo");
static_assert(offsetof(UserInfoComponent_GetMatchInfo, MatchCloudId) == 0x000000, "Member 'UserInfoComponent_GetMatchInfo::MatchCloudId' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetMatchInfo, ReturnValue) == 0x000010, "Member 'UserInfoComponent_GetMatchInfo::ReturnValue' has a wrong offset!");

// Function Flame.UserInfoComponent.GetPlayerBans
// 0x0010 (0x0010 - 0x0000)
struct UserInfoComponent_GetPlayerBans final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInfoComponent_GetPlayerBans) == 0x000008, "Wrong alignment on UserInfoComponent_GetPlayerBans");
static_assert(sizeof(UserInfoComponent_GetPlayerBans) == 0x000010, "Wrong size on UserInfoComponent_GetPlayerBans");
static_assert(offsetof(UserInfoComponent_GetPlayerBans, Player) == 0x000000, "Member 'UserInfoComponent_GetPlayerBans::Player' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetPlayerBans, ReturnValue) == 0x000008, "Member 'UserInfoComponent_GetPlayerBans::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.GetPlayerBansDelegate__DelegateSignature
// 0x0070 (0x0070 - 0x0000)
struct UserInfoComponent_GetPlayerBansDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FCloudBannedPlayersResult              Result;                                            // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_GetPlayerBansDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_GetPlayerBansDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_GetPlayerBansDelegate__DelegateSignature) == 0x000070, "Wrong size on UserInfoComponent_GetPlayerBansDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_GetPlayerBansDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_GetPlayerBansDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetPlayerBansDelegate__DelegateSignature, Result) == 0x000058, "Member 'UserInfoComponent_GetPlayerBansDelegate__DelegateSignature::Result' has a wrong offset!");

// Function Flame.UserInfoComponent.GetUserCloudInfo
// 0x0008 (0x0008 - 0x0000)
struct UserInfoComponent_GetUserCloudInfo final
{
public:
	bool                                          bForceUpdate;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_GetUserCloudInfo) == 0x000004, "Wrong alignment on UserInfoComponent_GetUserCloudInfo");
static_assert(sizeof(UserInfoComponent_GetUserCloudInfo) == 0x000008, "Wrong size on UserInfoComponent_GetUserCloudInfo");
static_assert(offsetof(UserInfoComponent_GetUserCloudInfo, bForceUpdate) == 0x000000, "Member 'UserInfoComponent_GetUserCloudInfo::bForceUpdate' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserCloudInfo, ReturnValue) == 0x000004, "Member 'UserInfoComponent_GetUserCloudInfo::ReturnValue' has a wrong offset!");

// Function Flame.UserInfoComponent.GetUserCloudInfoForController
// 0x0010 (0x0010 - 0x0000)
struct UserInfoComponent_GetUserCloudInfoForController final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInfoComponent_GetUserCloudInfoForController) == 0x000008, "Wrong alignment on UserInfoComponent_GetUserCloudInfoForController");
static_assert(sizeof(UserInfoComponent_GetUserCloudInfoForController) == 0x000010, "Wrong size on UserInfoComponent_GetUserCloudInfoForController");
static_assert(offsetof(UserInfoComponent_GetUserCloudInfoForController, Player) == 0x000000, "Member 'UserInfoComponent_GetUserCloudInfoForController::Player' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserCloudInfoForController, ReturnValue) == 0x000008, "Member 'UserInfoComponent_GetUserCloudInfoForController::ReturnValue' has a wrong offset!");

// Function Flame.UserInfoComponent.GetUserMatchesStatistic
// 0x0010 (0x0010 - 0x0000)
struct UserInfoComponent_GetUserMatchesStatistic final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECloudUserMatchStatisticsPeriod               TimePeriod;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_GetUserMatchesStatistic) == 0x000008, "Wrong alignment on UserInfoComponent_GetUserMatchesStatistic");
static_assert(sizeof(UserInfoComponent_GetUserMatchesStatistic) == 0x000010, "Wrong size on UserInfoComponent_GetUserMatchesStatistic");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatistic, Player) == 0x000000, "Member 'UserInfoComponent_GetUserMatchesStatistic::Player' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatistic, TimePeriod) == 0x000008, "Member 'UserInfoComponent_GetUserMatchesStatistic::TimePeriod' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatistic, ReturnValue) == 0x00000C, "Member 'UserInfoComponent_GetUserMatchesStatistic::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.GetUserMatchesStatisticDelegate__DelegateSignature
// 0x0068 (0x0068 - 0x0000)
struct UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ECloudUserMatchStatisticsPeriod               TimePeriod;                                        // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudUserMatchesStatistic             Data;                                              // 0x005C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature) == 0x000068, "Wrong size on UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, TimePeriod) == 0x000058, "Member 'UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::TimePeriod' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature, Data) == 0x00005C, "Member 'UserInfoComponent_GetUserMatchesStatisticDelegate__DelegateSignature::Data' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.MatchInfoDelegate__DelegateSignature
// 0x05F0 (0x05F0 - 0x0000)
struct UserInfoComponent_MatchInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MatchCloudId;                                      // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUserMatchResult                       MatchResult;                                       // 0x0068(0x0588)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_MatchInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_MatchInfoDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_MatchInfoDelegate__DelegateSignature) == 0x0005F0, "Wrong size on UserInfoComponent_MatchInfoDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_MatchInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_MatchInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_MatchInfoDelegate__DelegateSignature, MatchCloudId) == 0x000058, "Member 'UserInfoComponent_MatchInfoDelegate__DelegateSignature::MatchCloudId' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_MatchInfoDelegate__DelegateSignature, MatchResult) == 0x000068, "Member 'UserInfoComponent_MatchInfoDelegate__DelegateSignature::MatchResult' has a wrong offset!");

// Function Flame.UserInfoComponent.RequestUserCloudInfo
// 0x0001 (0x0001 - 0x0000)
struct UserInfoComponent_RequestUserCloudInfo final
{
public:
	bool                                          bForceUpdate;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_RequestUserCloudInfo) == 0x000001, "Wrong alignment on UserInfoComponent_RequestUserCloudInfo");
static_assert(sizeof(UserInfoComponent_RequestUserCloudInfo) == 0x000001, "Wrong size on UserInfoComponent_RequestUserCloudInfo");
static_assert(offsetof(UserInfoComponent_RequestUserCloudInfo, bForceUpdate) == 0x000000, "Member 'UserInfoComponent_RequestUserCloudInfo::bForceUpdate' has a wrong offset!");

// Function Flame.UserInfoComponent.UnbanPlayer
// 0x0020 (0x0020 - 0x0000)
struct UserInfoComponent_UnbanPlayer final
{
public:
	class AHumanPlayerController*                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerCloudId;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UserInfoComponent_UnbanPlayer) == 0x000008, "Wrong alignment on UserInfoComponent_UnbanPlayer");
static_assert(sizeof(UserInfoComponent_UnbanPlayer) == 0x000020, "Wrong size on UserInfoComponent_UnbanPlayer");
static_assert(offsetof(UserInfoComponent_UnbanPlayer, Player) == 0x000000, "Member 'UserInfoComponent_UnbanPlayer::Player' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_UnbanPlayer, PlayerCloudId) == 0x000008, "Member 'UserInfoComponent_UnbanPlayer::PlayerCloudId' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_UnbanPlayer, ReturnValue) == 0x000018, "Member 'UserInfoComponent_UnbanPlayer::ReturnValue' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.UnbanPlayerDelegate__DelegateSignature
// 0x0080 (0x0080 - 0x0000)
struct UserInfoComponent_UnbanPlayerDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Userid;                                            // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCloudBannedPlayersResult              Result;                                            // 0x0068(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_UnbanPlayerDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_UnbanPlayerDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_UnbanPlayerDelegate__DelegateSignature) == 0x000080, "Wrong size on UserInfoComponent_UnbanPlayerDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_UnbanPlayerDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_UnbanPlayerDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_UnbanPlayerDelegate__DelegateSignature, Userid) == 0x000058, "Member 'UserInfoComponent_UnbanPlayerDelegate__DelegateSignature::Userid' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_UnbanPlayerDelegate__DelegateSignature, Result) == 0x000068, "Member 'UserInfoComponent_UnbanPlayerDelegate__DelegateSignature::Result' has a wrong offset!");

// DelegateFunction Flame.UserInfoComponent.UserCloudInfoDelegate__DelegateSignature
// 0x0208 (0x0208 - 0x0000)
struct UserInfoComponent_UserCloudInfoDelegate__DelegateSignature final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FUserCloudInfo                         UserInfo;                                          // 0x0058(0x01B0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UserInfoComponent_UserCloudInfoDelegate__DelegateSignature) == 0x000008, "Wrong alignment on UserInfoComponent_UserCloudInfoDelegate__DelegateSignature");
static_assert(sizeof(UserInfoComponent_UserCloudInfoDelegate__DelegateSignature) == 0x000208, "Wrong size on UserInfoComponent_UserCloudInfoDelegate__DelegateSignature");
static_assert(offsetof(UserInfoComponent_UserCloudInfoDelegate__DelegateSignature, RequestResult) == 0x000000, "Member 'UserInfoComponent_UserCloudInfoDelegate__DelegateSignature::RequestResult' has a wrong offset!");
static_assert(offsetof(UserInfoComponent_UserCloudInfoDelegate__DelegateSignature, UserInfo) == 0x000058, "Member 'UserInfoComponent_UserCloudInfoDelegate__DelegateSignature::UserInfo' has a wrong offset!");

// Function Flame.WaterVolume.SetupWaterBrushCollision
// 0x0008 (0x0008 - 0x0000)
struct WaterVolume_SetupWaterBrushCollision final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WaterVolume_SetupWaterBrushCollision) == 0x000008, "Wrong alignment on WaterVolume_SetupWaterBrushCollision");
static_assert(sizeof(WaterVolume_SetupWaterBrushCollision) == 0x000008, "Wrong size on WaterVolume_SetupWaterBrushCollision");
static_assert(offsetof(WaterVolume_SetupWaterBrushCollision, PrimitiveComponent) == 0x000000, "Member 'WaterVolume_SetupWaterBrushCollision::PrimitiveComponent' has a wrong offset!");

// Function Flame.WeaponContainerWidget.FillSlots
// 0x0008 (0x0008 - 0x0000)
struct WeaponContainerWidget_FillSlots final
{
public:
	const class ULinkedWeapons*                   WeaponsComponent;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponContainerWidget_FillSlots) == 0x000008, "Wrong alignment on WeaponContainerWidget_FillSlots");
static_assert(sizeof(WeaponContainerWidget_FillSlots) == 0x000008, "Wrong size on WeaponContainerWidget_FillSlots");
static_assert(offsetof(WeaponContainerWidget_FillSlots, WeaponsComponent) == 0x000000, "Member 'WeaponContainerWidget_FillSlots::WeaponsComponent' has a wrong offset!");

// Function Flame.WeaponContainerWidget.GetWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponContainerWidget_GetWeapon final
{
public:
	EWeaponSlotType                               SlotType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AWeapon*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponContainerWidget_GetWeapon) == 0x000008, "Wrong alignment on WeaponContainerWidget_GetWeapon");
static_assert(sizeof(WeaponContainerWidget_GetWeapon) == 0x000010, "Wrong size on WeaponContainerWidget_GetWeapon");
static_assert(offsetof(WeaponContainerWidget_GetWeapon, SlotType) == 0x000000, "Member 'WeaponContainerWidget_GetWeapon::SlotType' has a wrong offset!");
static_assert(offsetof(WeaponContainerWidget_GetWeapon, ReturnValue) == 0x000008, "Member 'WeaponContainerWidget_GetWeapon::ReturnValue' has a wrong offset!");

// Function Flame.WeaponContainerWidget.GetWeaponSlot
// 0x0010 (0x0010 - 0x0000)
struct WeaponContainerWidget_GetWeaponSlot final
{
public:
	EWeaponSlotType                               SlotType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameSlot*                             ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponContainerWidget_GetWeaponSlot) == 0x000008, "Wrong alignment on WeaponContainerWidget_GetWeaponSlot");
static_assert(sizeof(WeaponContainerWidget_GetWeaponSlot) == 0x000010, "Wrong size on WeaponContainerWidget_GetWeaponSlot");
static_assert(offsetof(WeaponContainerWidget_GetWeaponSlot, SlotType) == 0x000000, "Member 'WeaponContainerWidget_GetWeaponSlot::SlotType' has a wrong offset!");
static_assert(offsetof(WeaponContainerWidget_GetWeaponSlot, ReturnValue) == 0x000008, "Member 'WeaponContainerWidget_GetWeaponSlot::ReturnValue' has a wrong offset!");

// Function Flame.Muzzle.GetOuterAWeapon
// 0x0008 (0x0008 - 0x0000)
struct Muzzle_GetOuterAWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Muzzle_GetOuterAWeapon) == 0x000008, "Wrong alignment on Muzzle_GetOuterAWeapon");
static_assert(sizeof(Muzzle_GetOuterAWeapon) == 0x000008, "Wrong size on Muzzle_GetOuterAWeapon");
static_assert(offsetof(Muzzle_GetOuterAWeapon, ReturnValue) == 0x000000, "Member 'Muzzle_GetOuterAWeapon::ReturnValue' has a wrong offset!");

// Function Flame.Muzzle.GetMuzzleType
// 0x0001 (0x0001 - 0x0000)
struct Muzzle_GetMuzzleType final
{
public:
	EMuzzleType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Muzzle_GetMuzzleType) == 0x000001, "Wrong alignment on Muzzle_GetMuzzleType");
static_assert(sizeof(Muzzle_GetMuzzleType) == 0x000001, "Wrong size on Muzzle_GetMuzzleType");
static_assert(offsetof(Muzzle_GetMuzzleType, ReturnValue) == 0x000000, "Member 'Muzzle_GetMuzzleType::ReturnValue' has a wrong offset!");

// Function Flame.Muzzle.GetWeaponData
// 0x0418 (0x0418 - 0x0000)
struct Muzzle_GetWeaponData final
{
public:
	struct FFirearmWeaponConfiguration            ReturnValue;                                       // 0x0000(0x0418)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Muzzle_GetWeaponData) == 0x000008, "Wrong alignment on Muzzle_GetWeaponData");
static_assert(sizeof(Muzzle_GetWeaponData) == 0x000418, "Wrong size on Muzzle_GetWeaponData");
static_assert(offsetof(Muzzle_GetWeaponData, ReturnValue) == 0x000000, "Member 'Muzzle_GetWeaponData::ReturnValue' has a wrong offset!");

// Function Flame.WeaponMuzzle.OnRep_AmmoCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_OnRep_AmmoCount final
{
public:
	int32                                         PreviousCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_OnRep_AmmoCount) == 0x000004, "Wrong alignment on WeaponMuzzle_OnRep_AmmoCount");
static_assert(sizeof(WeaponMuzzle_OnRep_AmmoCount) == 0x000004, "Wrong size on WeaponMuzzle_OnRep_AmmoCount");
static_assert(offsetof(WeaponMuzzle_OnRep_AmmoCount, PreviousCount) == 0x000000, "Member 'WeaponMuzzle_OnRep_AmmoCount::PreviousCount' has a wrong offset!");

// Function Flame.WeaponMuzzle.OnRep_ChamberLoadedAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_OnRep_ChamberLoadedAmmoCount final
{
public:
	int32                                         PreviousCount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_OnRep_ChamberLoadedAmmoCount) == 0x000004, "Wrong alignment on WeaponMuzzle_OnRep_ChamberLoadedAmmoCount");
static_assert(sizeof(WeaponMuzzle_OnRep_ChamberLoadedAmmoCount) == 0x000004, "Wrong size on WeaponMuzzle_OnRep_ChamberLoadedAmmoCount");
static_assert(offsetof(WeaponMuzzle_OnRep_ChamberLoadedAmmoCount, PreviousCount) == 0x000000, "Member 'WeaponMuzzle_OnRep_ChamberLoadedAmmoCount::PreviousCount' has a wrong offset!");

// Function Flame.WeaponMuzzle.GetChamberLoadedAmmo
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_GetChamberLoadedAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_GetChamberLoadedAmmo) == 0x000004, "Wrong alignment on WeaponMuzzle_GetChamberLoadedAmmo");
static_assert(sizeof(WeaponMuzzle_GetChamberLoadedAmmo) == 0x000004, "Wrong size on WeaponMuzzle_GetChamberLoadedAmmo");
static_assert(offsetof(WeaponMuzzle_GetChamberLoadedAmmo, ReturnValue) == 0x000000, "Member 'WeaponMuzzle_GetChamberLoadedAmmo::ReturnValue' has a wrong offset!");

// Function Flame.WeaponMuzzle.GetCurrentAmmoCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_GetCurrentAmmoCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_GetCurrentAmmoCount) == 0x000004, "Wrong alignment on WeaponMuzzle_GetCurrentAmmoCount");
static_assert(sizeof(WeaponMuzzle_GetCurrentAmmoCount) == 0x000004, "Wrong size on WeaponMuzzle_GetCurrentAmmoCount");
static_assert(offsetof(WeaponMuzzle_GetCurrentAmmoCount, ReturnValue) == 0x000000, "Member 'WeaponMuzzle_GetCurrentAmmoCount::ReturnValue' has a wrong offset!");

// Function Flame.WeaponMuzzle.GetCurrentAmmoRatio
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_GetCurrentAmmoRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_GetCurrentAmmoRatio) == 0x000004, "Wrong alignment on WeaponMuzzle_GetCurrentAmmoRatio");
static_assert(sizeof(WeaponMuzzle_GetCurrentAmmoRatio) == 0x000004, "Wrong size on WeaponMuzzle_GetCurrentAmmoRatio");
static_assert(offsetof(WeaponMuzzle_GetCurrentAmmoRatio, ReturnValue) == 0x000000, "Member 'WeaponMuzzle_GetCurrentAmmoRatio::ReturnValue' has a wrong offset!");

// Function Flame.WeaponMuzzle.GetCurrentChamberCount
// 0x0004 (0x0004 - 0x0000)
struct WeaponMuzzle_GetCurrentChamberCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponMuzzle_GetCurrentChamberCount) == 0x000004, "Wrong alignment on WeaponMuzzle_GetCurrentChamberCount");
static_assert(sizeof(WeaponMuzzle_GetCurrentChamberCount) == 0x000004, "Wrong size on WeaponMuzzle_GetCurrentChamberCount");
static_assert(offsetof(WeaponMuzzle_GetCurrentChamberCount, ReturnValue) == 0x000000, "Member 'WeaponMuzzle_GetCurrentChamberCount::ReturnValue' has a wrong offset!");

// Function Flame.WeaponSegment.SetWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponSegment_SetWeapon final
{
public:
	class AWeapon*                                InWeapon;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSegment_SetWeapon) == 0x000008, "Wrong alignment on WeaponSegment_SetWeapon");
static_assert(sizeof(WeaponSegment_SetWeapon) == 0x000008, "Wrong size on WeaponSegment_SetWeapon");
static_assert(offsetof(WeaponSegment_SetWeapon, InWeapon) == 0x000000, "Member 'WeaponSegment_SetWeapon::InWeapon' has a wrong offset!");

// Function Flame.WeaponSegment.SetWeaponIndex
// 0x0004 (0x0004 - 0x0000)
struct WeaponSegment_SetWeaponIndex final
{
public:
	int32                                         InWeaponIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSegment_SetWeaponIndex) == 0x000004, "Wrong alignment on WeaponSegment_SetWeaponIndex");
static_assert(sizeof(WeaponSegment_SetWeaponIndex) == 0x000004, "Wrong size on WeaponSegment_SetWeaponIndex");
static_assert(offsetof(WeaponSegment_SetWeaponIndex, InWeaponIndex) == 0x000000, "Member 'WeaponSegment_SetWeaponIndex::InWeaponIndex' has a wrong offset!");

// Function Flame.WeaponSegment.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct WeaponSegment_GetWeapon final
{
public:
	class AWeapon*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponSegment_GetWeapon) == 0x000008, "Wrong alignment on WeaponSegment_GetWeapon");
static_assert(sizeof(WeaponSegment_GetWeapon) == 0x000008, "Wrong size on WeaponSegment_GetWeapon");
static_assert(offsetof(WeaponSegment_GetWeapon, ReturnValue) == 0x000000, "Member 'WeaponSegment_GetWeapon::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.AreWeaponAndAmmoCompatible
// 0x0020 (0x0020 - 0x0000)
struct WeaponsFunctions_AreWeaponAndAmmoCompatible final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AAmmoItem>                  AmmoClass;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_AreWeaponAndAmmoCompatible) == 0x000008, "Wrong alignment on WeaponsFunctions_AreWeaponAndAmmoCompatible");
static_assert(sizeof(WeaponsFunctions_AreWeaponAndAmmoCompatible) == 0x000020, "Wrong size on WeaponsFunctions_AreWeaponAndAmmoCompatible");
static_assert(offsetof(WeaponsFunctions_AreWeaponAndAmmoCompatible, WorldContextObject) == 0x000000, "Member 'WeaponsFunctions_AreWeaponAndAmmoCompatible::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_AreWeaponAndAmmoCompatible, WeaponClass) == 0x000008, "Member 'WeaponsFunctions_AreWeaponAndAmmoCompatible::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_AreWeaponAndAmmoCompatible, AmmoClass) == 0x000010, "Member 'WeaponsFunctions_AreWeaponAndAmmoCompatible::AmmoClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_AreWeaponAndAmmoCompatible, ReturnValue) == 0x000018, "Member 'WeaponsFunctions_AreWeaponAndAmmoCompatible::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.ConvertIndexToSlot
// 0x0008 (0x0008 - 0x0000)
struct WeaponsFunctions_ConvertIndexToSlot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponSlotType                               ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_ConvertIndexToSlot) == 0x000004, "Wrong alignment on WeaponsFunctions_ConvertIndexToSlot");
static_assert(sizeof(WeaponsFunctions_ConvertIndexToSlot) == 0x000008, "Wrong size on WeaponsFunctions_ConvertIndexToSlot");
static_assert(offsetof(WeaponsFunctions_ConvertIndexToSlot, Index_0) == 0x000000, "Member 'WeaponsFunctions_ConvertIndexToSlot::Index_0' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_ConvertIndexToSlot, ReturnValue) == 0x000004, "Member 'WeaponsFunctions_ConvertIndexToSlot::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.ConvertSlotToIndex
// 0x0008 (0x0008 - 0x0000)
struct WeaponsFunctions_ConvertSlotToIndex final
{
public:
	EWeaponSlotType                               Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponsFunctions_ConvertSlotToIndex) == 0x000004, "Wrong alignment on WeaponsFunctions_ConvertSlotToIndex");
static_assert(sizeof(WeaponsFunctions_ConvertSlotToIndex) == 0x000008, "Wrong size on WeaponsFunctions_ConvertSlotToIndex");
static_assert(offsetof(WeaponsFunctions_ConvertSlotToIndex, Slot) == 0x000000, "Member 'WeaponsFunctions_ConvertSlotToIndex::Slot' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_ConvertSlotToIndex, ReturnValue) == 0x000004, "Member 'WeaponsFunctions_ConvertSlotToIndex::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.CreateWeaponDescriptor
// 0x0028 (0x0028 - 0x0000)
struct WeaponsFunctions_CreateWeaponDescriptor final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponDescriptor                      ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponsFunctions_CreateWeaponDescriptor) == 0x000008, "Wrong alignment on WeaponsFunctions_CreateWeaponDescriptor");
static_assert(sizeof(WeaponsFunctions_CreateWeaponDescriptor) == 0x000028, "Wrong size on WeaponsFunctions_CreateWeaponDescriptor");
static_assert(offsetof(WeaponsFunctions_CreateWeaponDescriptor, Weapon) == 0x000000, "Member 'WeaponsFunctions_CreateWeaponDescriptor::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_CreateWeaponDescriptor, ReturnValue) == 0x000008, "Member 'WeaponsFunctions_CreateWeaponDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.CreateWeaponFromDescriptor
// 0x0038 (0x0038 - 0x0000)
struct WeaponsFunctions_CreateWeaponFromDescriptor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponDescriptor                      Info;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        Owner;                                             // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWeapon*                                ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponsFunctions_CreateWeaponFromDescriptor) == 0x000008, "Wrong alignment on WeaponsFunctions_CreateWeaponFromDescriptor");
static_assert(sizeof(WeaponsFunctions_CreateWeaponFromDescriptor) == 0x000038, "Wrong size on WeaponsFunctions_CreateWeaponFromDescriptor");
static_assert(offsetof(WeaponsFunctions_CreateWeaponFromDescriptor, WorldContextObject) == 0x000000, "Member 'WeaponsFunctions_CreateWeaponFromDescriptor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_CreateWeaponFromDescriptor, Info) == 0x000008, "Member 'WeaponsFunctions_CreateWeaponFromDescriptor::Info' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_CreateWeaponFromDescriptor, Owner) == 0x000028, "Member 'WeaponsFunctions_CreateWeaponFromDescriptor::Owner' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_CreateWeaponFromDescriptor, ReturnValue) == 0x000030, "Member 'WeaponsFunctions_CreateWeaponFromDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.GetCompatibleAmmoTypes
// 0x0020 (0x0020 - 0x0000)
struct WeaponsFunctions_GetCompatibleAmmoTypes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AAmmoItem>>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(WeaponsFunctions_GetCompatibleAmmoTypes) == 0x000008, "Wrong alignment on WeaponsFunctions_GetCompatibleAmmoTypes");
static_assert(sizeof(WeaponsFunctions_GetCompatibleAmmoTypes) == 0x000020, "Wrong size on WeaponsFunctions_GetCompatibleAmmoTypes");
static_assert(offsetof(WeaponsFunctions_GetCompatibleAmmoTypes, WorldContextObject) == 0x000000, "Member 'WeaponsFunctions_GetCompatibleAmmoTypes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetCompatibleAmmoTypes, WeaponClass) == 0x000008, "Member 'WeaponsFunctions_GetCompatibleAmmoTypes::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetCompatibleAmmoTypes, ReturnValue) == 0x000010, "Member 'WeaponsFunctions_GetCompatibleAmmoTypes::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.GetCountOfAvailableAmmoInBagForWeapon
// 0x0018 (0x0018 - 0x0000)
struct WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon final
{
public:
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AHumanCharacter*                  Owner;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon) == 0x000008, "Wrong alignment on WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon");
static_assert(sizeof(WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon) == 0x000018, "Wrong size on WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon");
static_assert(offsetof(WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon, WeaponClass) == 0x000000, "Member 'WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon, Owner) == 0x000008, "Member 'WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon::Owner' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon, ReturnValue) == 0x000010, "Member 'WeaponsFunctions_GetCountOfAvailableAmmoInBagForWeapon::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.GetCurrentAmmoCount
// 0x0010 (0x0010 - 0x0000)
struct WeaponsFunctions_GetCurrentAmmoCount final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_GetCurrentAmmoCount) == 0x000008, "Wrong alignment on WeaponsFunctions_GetCurrentAmmoCount");
static_assert(sizeof(WeaponsFunctions_GetCurrentAmmoCount) == 0x000010, "Wrong size on WeaponsFunctions_GetCurrentAmmoCount");
static_assert(offsetof(WeaponsFunctions_GetCurrentAmmoCount, Weapon) == 0x000000, "Member 'WeaponsFunctions_GetCurrentAmmoCount::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetCurrentAmmoCount, ReturnValue) == 0x000008, "Member 'WeaponsFunctions_GetCurrentAmmoCount::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.GetWeaponCapacity
// 0x0018 (0x0018 - 0x0000)
struct WeaponsFunctions_GetWeaponCapacity final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_GetWeaponCapacity) == 0x000008, "Wrong alignment on WeaponsFunctions_GetWeaponCapacity");
static_assert(sizeof(WeaponsFunctions_GetWeaponCapacity) == 0x000018, "Wrong size on WeaponsFunctions_GetWeaponCapacity");
static_assert(offsetof(WeaponsFunctions_GetWeaponCapacity, WorldContextObject) == 0x000000, "Member 'WeaponsFunctions_GetWeaponCapacity::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponCapacity, WeaponClass) == 0x000008, "Member 'WeaponsFunctions_GetWeaponCapacity::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponCapacity, ReturnValue) == 0x000010, "Member 'WeaponsFunctions_GetWeaponCapacity::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.GetWeaponMagazineAndChamberCapacities
// 0x0020 (0x0020 - 0x0000)
struct WeaponsFunctions_GetWeaponMagazineAndChamberCapacities final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AWeapon>                    WeaponClass;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineCount;                                     // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChamberCount;                                      // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities) == 0x000008, "Wrong alignment on WeaponsFunctions_GetWeaponMagazineAndChamberCapacities");
static_assert(sizeof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities) == 0x000020, "Wrong size on WeaponsFunctions_GetWeaponMagazineAndChamberCapacities");
static_assert(offsetof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities, WorldContextObject) == 0x000000, "Member 'WeaponsFunctions_GetWeaponMagazineAndChamberCapacities::WorldContextObject' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities, WeaponClass) == 0x000008, "Member 'WeaponsFunctions_GetWeaponMagazineAndChamberCapacities::WeaponClass' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities, MagazineCount) == 0x000010, "Member 'WeaponsFunctions_GetWeaponMagazineAndChamberCapacities::MagazineCount' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities, ChamberCount) == 0x000014, "Member 'WeaponsFunctions_GetWeaponMagazineAndChamberCapacities::ChamberCount' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_GetWeaponMagazineAndChamberCapacities, ReturnValue) == 0x000018, "Member 'WeaponsFunctions_GetWeaponMagazineAndChamberCapacities::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.IsSecondaryWeapon
// 0x0010 (0x0010 - 0x0000)
struct WeaponsFunctions_IsSecondaryWeapon final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_IsSecondaryWeapon) == 0x000008, "Wrong alignment on WeaponsFunctions_IsSecondaryWeapon");
static_assert(sizeof(WeaponsFunctions_IsSecondaryWeapon) == 0x000010, "Wrong size on WeaponsFunctions_IsSecondaryWeapon");
static_assert(offsetof(WeaponsFunctions_IsSecondaryWeapon, Weapon) == 0x000000, "Member 'WeaponsFunctions_IsSecondaryWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_IsSecondaryWeapon, ReturnValue) == 0x000008, "Member 'WeaponsFunctions_IsSecondaryWeapon::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.IsShotgun
// 0x0010 (0x0010 - 0x0000)
struct WeaponsFunctions_IsShotgun final
{
public:
	const class AWeapon*                          Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_IsShotgun) == 0x000008, "Wrong alignment on WeaponsFunctions_IsShotgun");
static_assert(sizeof(WeaponsFunctions_IsShotgun) == 0x000010, "Wrong size on WeaponsFunctions_IsShotgun");
static_assert(offsetof(WeaponsFunctions_IsShotgun, Weapon) == 0x000000, "Member 'WeaponsFunctions_IsShotgun::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_IsShotgun, ReturnValue) == 0x000008, "Member 'WeaponsFunctions_IsShotgun::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.IsValidWeaponDescriptor
// 0x0028 (0x0028 - 0x0000)
struct WeaponsFunctions_IsValidWeaponDescriptor final
{
public:
	struct FWeaponDescriptor                      Info;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_IsValidWeaponDescriptor) == 0x000008, "Wrong alignment on WeaponsFunctions_IsValidWeaponDescriptor");
static_assert(sizeof(WeaponsFunctions_IsValidWeaponDescriptor) == 0x000028, "Wrong size on WeaponsFunctions_IsValidWeaponDescriptor");
static_assert(offsetof(WeaponsFunctions_IsValidWeaponDescriptor, Info) == 0x000000, "Member 'WeaponsFunctions_IsValidWeaponDescriptor::Info' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_IsValidWeaponDescriptor, ReturnValue) == 0x000020, "Member 'WeaponsFunctions_IsValidWeaponDescriptor::ReturnValue' has a wrong offset!");

// Function Flame.WeaponsFunctions.UnloadWeaponToInventory
// 0x0018 (0x0018 - 0x0000)
struct WeaponsFunctions_UnloadWeaponToInventory final
{
public:
	class AWeapon*                                Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHumanCharacter*                        Owner;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponsFunctions_UnloadWeaponToInventory) == 0x000008, "Wrong alignment on WeaponsFunctions_UnloadWeaponToInventory");
static_assert(sizeof(WeaponsFunctions_UnloadWeaponToInventory) == 0x000018, "Wrong size on WeaponsFunctions_UnloadWeaponToInventory");
static_assert(offsetof(WeaponsFunctions_UnloadWeaponToInventory, Weapon) == 0x000000, "Member 'WeaponsFunctions_UnloadWeaponToInventory::Weapon' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_UnloadWeaponToInventory, Owner) == 0x000008, "Member 'WeaponsFunctions_UnloadWeaponToInventory::Owner' has a wrong offset!");
static_assert(offsetof(WeaponsFunctions_UnloadWeaponToInventory, ReturnValue) == 0x000010, "Member 'WeaponsFunctions_UnloadWeaponToInventory::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetCanRenderExtraGeometryStatic
// 0x0001 (0x0001 - 0x0000)
struct ItemSkin_GetCanRenderExtraGeometryStatic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetCanRenderExtraGeometryStatic) == 0x000001, "Wrong alignment on ItemSkin_GetCanRenderExtraGeometryStatic");
static_assert(sizeof(ItemSkin_GetCanRenderExtraGeometryStatic) == 0x000001, "Wrong size on ItemSkin_GetCanRenderExtraGeometryStatic");
static_assert(offsetof(ItemSkin_GetCanRenderExtraGeometryStatic, ReturnValue) == 0x000000, "Member 'ItemSkin_GetCanRenderExtraGeometryStatic::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetExtraGeometryMaterials
// 0x0050 (0x0050 - 0x0000)
struct ItemSkin_GetExtraGeometryMaterials final
{
public:
	TMap<class FName, TSoftObjectPtr<class UMaterialInstance>> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetExtraGeometryMaterials) == 0x000008, "Wrong alignment on ItemSkin_GetExtraGeometryMaterials");
static_assert(sizeof(ItemSkin_GetExtraGeometryMaterials) == 0x000050, "Wrong size on ItemSkin_GetExtraGeometryMaterials");
static_assert(offsetof(ItemSkin_GetExtraGeometryMaterials, ReturnValue) == 0x000000, "Member 'ItemSkin_GetExtraGeometryMaterials::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetItemClass
// 0x0008 (0x0008 - 0x0000)
struct ItemSkin_GetItemClass final
{
public:
	TSubclassOf<class AItem>                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetItemClass) == 0x000008, "Wrong alignment on ItemSkin_GetItemClass");
static_assert(sizeof(ItemSkin_GetItemClass) == 0x000008, "Wrong size on ItemSkin_GetItemClass");
static_assert(offsetof(ItemSkin_GetItemClass, ReturnValue) == 0x000000, "Member 'ItemSkin_GetItemClass::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetMaterials
// 0x0050 (0x0050 - 0x0000)
struct ItemSkin_GetMaterials final
{
public:
	TMap<class FName, TSoftObjectPtr<class UMaterialInstance>> ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetMaterials) == 0x000008, "Wrong alignment on ItemSkin_GetMaterials");
static_assert(sizeof(ItemSkin_GetMaterials) == 0x000050, "Wrong size on ItemSkin_GetMaterials");
static_assert(offsetof(ItemSkin_GetMaterials, ReturnValue) == 0x000000, "Member 'ItemSkin_GetMaterials::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetSkinParticleConfigHandle
// 0x0010 (0x0010 - 0x0000)
struct ItemSkin_GetSkinParticleConfigHandle final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetSkinParticleConfigHandle) == 0x000008, "Wrong alignment on ItemSkin_GetSkinParticleConfigHandle");
static_assert(sizeof(ItemSkin_GetSkinParticleConfigHandle) == 0x000010, "Wrong size on ItemSkin_GetSkinParticleConfigHandle");
static_assert(offsetof(ItemSkin_GetSkinParticleConfigHandle, ReturnValue) == 0x000000, "Member 'ItemSkin_GetSkinParticleConfigHandle::ReturnValue' has a wrong offset!");

// Function Flame.ItemSkin.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct ItemSkin_GetTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemSkin_GetTexture) == 0x000008, "Wrong alignment on ItemSkin_GetTexture");
static_assert(sizeof(ItemSkin_GetTexture) == 0x000008, "Wrong size on ItemSkin_GetTexture");
static_assert(offsetof(ItemSkin_GetTexture, ReturnValue) == 0x000000, "Member 'ItemSkin_GetTexture::ReturnValue' has a wrong offset!");

// Function Flame.WeaponStateReload.RoundLoaded
// 0x0018 (0x0018 - 0x0000)
struct WeaponStateReload_RoundLoaded final
{
public:
	class USkeletalMeshComponent*                 Skeleton;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAuthority;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WeaponStateReload_RoundLoaded) == 0x000008, "Wrong alignment on WeaponStateReload_RoundLoaded");
static_assert(sizeof(WeaponStateReload_RoundLoaded) == 0x000018, "Wrong size on WeaponStateReload_RoundLoaded");
static_assert(offsetof(WeaponStateReload_RoundLoaded, Skeleton) == 0x000000, "Member 'WeaponStateReload_RoundLoaded::Skeleton' has a wrong offset!");
static_assert(offsetof(WeaponStateReload_RoundLoaded, Animation) == 0x000008, "Member 'WeaponStateReload_RoundLoaded::Animation' has a wrong offset!");
static_assert(offsetof(WeaponStateReload_RoundLoaded, bAuthority) == 0x000010, "Member 'WeaponStateReload_RoundLoaded::bAuthority' has a wrong offset!");

// Function Flame.WidgetDecorator.GetUserWidgetByName
// 0x0018 (0x0018 - 0x0000)
struct WidgetDecorator_GetUserWidgetByName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WidgetDecorator_GetUserWidgetByName) == 0x000008, "Wrong alignment on WidgetDecorator_GetUserWidgetByName");
static_assert(sizeof(WidgetDecorator_GetUserWidgetByName) == 0x000018, "Wrong size on WidgetDecorator_GetUserWidgetByName");
static_assert(offsetof(WidgetDecorator_GetUserWidgetByName, InName) == 0x000000, "Member 'WidgetDecorator_GetUserWidgetByName::InName' has a wrong offset!");
static_assert(offsetof(WidgetDecorator_GetUserWidgetByName, ReturnValue) == 0x000010, "Member 'WidgetDecorator_GetUserWidgetByName::ReturnValue' has a wrong offset!");

// Function Flame.Window.TriggerOpen
// 0x0002 (0x0002 - 0x0000)
struct Window_TriggerOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_TriggerOpen) == 0x000001, "Wrong alignment on Window_TriggerOpen");
static_assert(sizeof(Window_TriggerOpen) == 0x000002, "Wrong size on Window_TriggerOpen");
static_assert(offsetof(Window_TriggerOpen, bOpen) == 0x000000, "Member 'Window_TriggerOpen::bOpen' has a wrong offset!");
static_assert(offsetof(Window_TriggerOpen, bInstant) == 0x000001, "Member 'Window_TriggerOpen::bInstant' has a wrong offset!");

// Function Flame.Window.GetSashSet
// 0x0010 (0x0010 - 0x0000)
struct Window_GetSashSet final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AWindowSashSet*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_GetSashSet) == 0x000008, "Wrong alignment on Window_GetSashSet");
static_assert(sizeof(Window_GetSashSet) == 0x000010, "Wrong size on Window_GetSashSet");
static_assert(offsetof(Window_GetSashSet, Idx) == 0x000000, "Member 'Window_GetSashSet::Idx' has a wrong offset!");
static_assert(offsetof(Window_GetSashSet, ReturnValue) == 0x000008, "Member 'Window_GetSashSet::ReturnValue' has a wrong offset!");

// Function Flame.Window.GetSashSetIndex
// 0x0010 (0x0010 - 0x0000)
struct Window_GetSashSetIndex final
{
public:
	class AWindowSashSet*                         SashSet;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Window_GetSashSetIndex) == 0x000008, "Wrong alignment on Window_GetSashSetIndex");
static_assert(sizeof(Window_GetSashSetIndex) == 0x000010, "Wrong size on Window_GetSashSetIndex");
static_assert(offsetof(Window_GetSashSetIndex, SashSet) == 0x000000, "Member 'Window_GetSashSetIndex::SashSet' has a wrong offset!");
static_assert(offsetof(Window_GetSashSetIndex, ID) == 0x000008, "Member 'Window_GetSashSetIndex::ID' has a wrong offset!");
static_assert(offsetof(Window_GetSashSetIndex, ReturnValue) == 0x00000C, "Member 'Window_GetSashSetIndex::ReturnValue' has a wrong offset!");

// Function Flame.WindowSashSet.ShouldSpawnBoarded
// 0x0002 (0x0002 - 0x0000)
struct WindowSashSet_ShouldSpawnBoarded final
{
public:
	EWindowBoardBehavior                          BoardBehavior;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_ShouldSpawnBoarded) == 0x000001, "Wrong alignment on WindowSashSet_ShouldSpawnBoarded");
static_assert(sizeof(WindowSashSet_ShouldSpawnBoarded) == 0x000002, "Wrong size on WindowSashSet_ShouldSpawnBoarded");
static_assert(offsetof(WindowSashSet_ShouldSpawnBoarded, BoardBehavior) == 0x000000, "Member 'WindowSashSet_ShouldSpawnBoarded::BoardBehavior' has a wrong offset!");
static_assert(offsetof(WindowSashSet_ShouldSpawnBoarded, ReturnValue) == 0x000001, "Member 'WindowSashSet_ShouldSpawnBoarded::ReturnValue' has a wrong offset!");

// Function Flame.WindowSashSet.MulticastOnPaneShot
// 0x0010 (0x0010 - 0x0000)
struct WindowSashSet_MulticastOnPaneShot final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_MulticastOnPaneShot) == 0x000004, "Wrong alignment on WindowSashSet_MulticastOnPaneShot");
static_assert(sizeof(WindowSashSet_MulticastOnPaneShot) == 0x000010, "Wrong size on WindowSashSet_MulticastOnPaneShot");
static_assert(offsetof(WindowSashSet_MulticastOnPaneShot, Idx) == 0x000000, "Member 'WindowSashSet_MulticastOnPaneShot::Idx' has a wrong offset!");
static_assert(offsetof(WindowSashSet_MulticastOnPaneShot, HitLocation) == 0x000004, "Member 'WindowSashSet_MulticastOnPaneShot::HitLocation' has a wrong offset!");

// Function Flame.WindowSashSet.MulticastPlayOpenAnimation
// 0x0001 (0x0001 - 0x0000)
struct WindowSashSet_MulticastPlayOpenAnimation final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_MulticastPlayOpenAnimation) == 0x000001, "Wrong alignment on WindowSashSet_MulticastPlayOpenAnimation");
static_assert(sizeof(WindowSashSet_MulticastPlayOpenAnimation) == 0x000001, "Wrong size on WindowSashSet_MulticastPlayOpenAnimation");
static_assert(offsetof(WindowSashSet_MulticastPlayOpenAnimation, bOpen) == 0x000000, "Member 'WindowSashSet_MulticastPlayOpenAnimation::bOpen' has a wrong offset!");

// Function Flame.WindowSashSet.OnDamage
// 0x0058 (0x0058 - 0x0000)
struct WindowSashSet_OnDamage final
{
public:
	class AActor*                                 SomeActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatedBy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitLocation;                                       // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    FHitComponent;                                     // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ShotFromDirection;                                 // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UDamageType*                      DamageType;                                        // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCounter;                                     // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_OnDamage) == 0x000008, "Wrong alignment on WindowSashSet_OnDamage");
static_assert(sizeof(WindowSashSet_OnDamage) == 0x000058, "Wrong size on WindowSashSet_OnDamage");
static_assert(offsetof(WindowSashSet_OnDamage, SomeActor) == 0x000000, "Member 'WindowSashSet_OnDamage::SomeActor' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, Damage) == 0x000008, "Member 'WindowSashSet_OnDamage::Damage' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, InstigatedBy) == 0x000010, "Member 'WindowSashSet_OnDamage::InstigatedBy' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, HitLocation) == 0x000018, "Member 'WindowSashSet_OnDamage::HitLocation' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, FHitComponent) == 0x000028, "Member 'WindowSashSet_OnDamage::FHitComponent' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, BoneName) == 0x000030, "Member 'WindowSashSet_OnDamage::BoneName' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, ShotFromDirection) == 0x000038, "Member 'WindowSashSet_OnDamage::ShotFromDirection' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, DamageType) == 0x000048, "Member 'WindowSashSet_OnDamage::DamageType' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnDamage, DamageCounter) == 0x000050, "Member 'WindowSashSet_OnDamage::DamageCounter' has a wrong offset!");

// Function Flame.WindowSashSet.OnInteract
// 0x0010 (0x0010 - 0x0000)
struct WindowSashSet_OnInteract final
{
public:
	class UInteractionItemComponent*              Sender;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InteractingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_OnInteract) == 0x000008, "Wrong alignment on WindowSashSet_OnInteract");
static_assert(sizeof(WindowSashSet_OnInteract) == 0x000010, "Wrong size on WindowSashSet_OnInteract");
static_assert(offsetof(WindowSashSet_OnInteract, Sender) == 0x000000, "Member 'WindowSashSet_OnInteract::Sender' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnInteract, InteractingActor) == 0x000008, "Member 'WindowSashSet_OnInteract::InteractingActor' has a wrong offset!");

// Function Flame.WindowSashSet.OnPaneShot
// 0x0050 (0x0050 - 0x0000)
struct WindowSashSet_OnPaneShot final
{
public:
	struct FVector                                HitLocation;                                       // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             PaneTransform;                                     // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            PaneMesh;                                          // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WindowSashSet_OnPaneShot) == 0x000010, "Wrong alignment on WindowSashSet_OnPaneShot");
static_assert(sizeof(WindowSashSet_OnPaneShot) == 0x000050, "Wrong size on WindowSashSet_OnPaneShot");
static_assert(offsetof(WindowSashSet_OnPaneShot, HitLocation) == 0x000000, "Member 'WindowSashSet_OnPaneShot::HitLocation' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnPaneShot, PaneTransform) == 0x000010, "Member 'WindowSashSet_OnPaneShot::PaneTransform' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnPaneShot, PaneMesh) == 0x000040, "Member 'WindowSashSet_OnPaneShot::PaneMesh' has a wrong offset!");

// Function Flame.WindowSashSet.OnPlayOpenAnimation
// 0x0002 (0x0002 - 0x0000)
struct WindowSashSet_OnPlayOpenAnimation final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_OnPlayOpenAnimation) == 0x000001, "Wrong alignment on WindowSashSet_OnPlayOpenAnimation");
static_assert(sizeof(WindowSashSet_OnPlayOpenAnimation) == 0x000002, "Wrong size on WindowSashSet_OnPlayOpenAnimation");
static_assert(offsetof(WindowSashSet_OnPlayOpenAnimation, bOpen) == 0x000000, "Member 'WindowSashSet_OnPlayOpenAnimation::bOpen' has a wrong offset!");
static_assert(offsetof(WindowSashSet_OnPlayOpenAnimation, bInstant) == 0x000001, "Member 'WindowSashSet_OnPlayOpenAnimation::bInstant' has a wrong offset!");

// Function Flame.WindowSashSet.OpenAnimationUpdate
// 0x0004 (0x0004 - 0x0000)
struct WindowSashSet_OpenAnimationUpdate final
{
public:
	float                                         T;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_OpenAnimationUpdate) == 0x000004, "Wrong alignment on WindowSashSet_OpenAnimationUpdate");
static_assert(sizeof(WindowSashSet_OpenAnimationUpdate) == 0x000004, "Wrong size on WindowSashSet_OpenAnimationUpdate");
static_assert(offsetof(WindowSashSet_OpenAnimationUpdate, T) == 0x000000, "Member 'WindowSashSet_OpenAnimationUpdate::T' has a wrong offset!");

// Function Flame.WindowSashSet.RegisterPane
// 0x0008 (0x0008 - 0x0000)
struct WindowSashSet_RegisterPane final
{
public:
	class UStaticMeshComponent*                   PaneComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_RegisterPane) == 0x000008, "Wrong alignment on WindowSashSet_RegisterPane");
static_assert(sizeof(WindowSashSet_RegisterPane) == 0x000008, "Wrong size on WindowSashSet_RegisterPane");
static_assert(offsetof(WindowSashSet_RegisterPane, PaneComponent) == 0x000000, "Member 'WindowSashSet_RegisterPane::PaneComponent' has a wrong offset!");

// Function Flame.WindowSashSet.UnlockWindow
// 0x0001 (0x0001 - 0x0000)
struct WindowSashSet_UnlockWindow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_UnlockWindow) == 0x000001, "Wrong alignment on WindowSashSet_UnlockWindow");
static_assert(sizeof(WindowSashSet_UnlockWindow) == 0x000001, "Wrong size on WindowSashSet_UnlockWindow");
static_assert(offsetof(WindowSashSet_UnlockWindow, ReturnValue) == 0x000000, "Member 'WindowSashSet_UnlockWindow::ReturnValue' has a wrong offset!");

// Function Flame.WindowSashSet.GetPaneByIdx
// 0x0010 (0x0010 - 0x0000)
struct WindowSashSet_GetPaneByIdx final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_GetPaneByIdx) == 0x000008, "Wrong alignment on WindowSashSet_GetPaneByIdx");
static_assert(sizeof(WindowSashSet_GetPaneByIdx) == 0x000010, "Wrong size on WindowSashSet_GetPaneByIdx");
static_assert(offsetof(WindowSashSet_GetPaneByIdx, Idx) == 0x000000, "Member 'WindowSashSet_GetPaneByIdx::Idx' has a wrong offset!");
static_assert(offsetof(WindowSashSet_GetPaneByIdx, ReturnValue) == 0x000008, "Member 'WindowSashSet_GetPaneByIdx::ReturnValue' has a wrong offset!");

// Function Flame.WindowSashSet.IsWindowOpen
// 0x0001 (0x0001 - 0x0000)
struct WindowSashSet_IsWindowOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WindowSashSet_IsWindowOpen) == 0x000001, "Wrong alignment on WindowSashSet_IsWindowOpen");
static_assert(sizeof(WindowSashSet_IsWindowOpen) == 0x000001, "Wrong size on WindowSashSet_IsWindowOpen");
static_assert(offsetof(WindowSashSet_IsWindowOpen, ReturnValue) == 0x000000, "Member 'WindowSashSet_IsWindowOpen::ReturnValue' has a wrong offset!");

// Function Flame.WoundsManagerComponent.AddMesh
// 0x0008 (0x0008 - 0x0000)
struct WoundsManagerComponent_AddMesh final
{
public:
	class UMeshComponent*                         Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WoundsManagerComponent_AddMesh) == 0x000008, "Wrong alignment on WoundsManagerComponent_AddMesh");
static_assert(sizeof(WoundsManagerComponent_AddMesh) == 0x000008, "Wrong size on WoundsManagerComponent_AddMesh");
static_assert(offsetof(WoundsManagerComponent_AddMesh, Component) == 0x000000, "Member 'WoundsManagerComponent_AddMesh::Component' has a wrong offset!");

// Function Flame.WoundsManagerComponent.AddWound
// 0x0028 (0x0028 - 0x0000)
struct WoundsManagerComponent_AddWound final
{
public:
	struct FVector                                HitWorldPosition;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WoundsManagerComponent_AddWound) == 0x000008, "Wrong alignment on WoundsManagerComponent_AddWound");
static_assert(sizeof(WoundsManagerComponent_AddWound) == 0x000028, "Wrong size on WoundsManagerComponent_AddWound");
static_assert(offsetof(WoundsManagerComponent_AddWound, HitWorldPosition) == 0x000000, "Member 'WoundsManagerComponent_AddWound::HitWorldPosition' has a wrong offset!");
static_assert(offsetof(WoundsManagerComponent_AddWound, HitComponent) == 0x000010, "Member 'WoundsManagerComponent_AddWound::HitComponent' has a wrong offset!");
static_assert(offsetof(WoundsManagerComponent_AddWound, HitBoneName) == 0x000018, "Member 'WoundsManagerComponent_AddWound::HitBoneName' has a wrong offset!");
static_assert(offsetof(WoundsManagerComponent_AddWound, Radius) == 0x000020, "Member 'WoundsManagerComponent_AddWound::Radius' has a wrong offset!");

// Function Flame.WoundsManagerComponent.Init
// 0x0008 (0x0008 - 0x0000)
struct WoundsManagerComponent_Init final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WoundsManagerComponent_Init) == 0x000008, "Wrong alignment on WoundsManagerComponent_Init");
static_assert(sizeof(WoundsManagerComponent_Init) == 0x000008, "Wrong size on WoundsManagerComponent_Init");
static_assert(offsetof(WoundsManagerComponent_Init, Actor) == 0x000000, "Member 'WoundsManagerComponent_Init::Actor' has a wrong offset!");

// Function Flame.WoundsManagerComponent.SetMaterialParameterNames
// 0x0010 (0x0010 - 0x0000)
struct WoundsManagerComponent_SetMaterialParameterNames final
{
public:
	TArray<class FName>                           Names;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(WoundsManagerComponent_SetMaterialParameterNames) == 0x000008, "Wrong alignment on WoundsManagerComponent_SetMaterialParameterNames");
static_assert(sizeof(WoundsManagerComponent_SetMaterialParameterNames) == 0x000010, "Wrong size on WoundsManagerComponent_SetMaterialParameterNames");
static_assert(offsetof(WoundsManagerComponent_SetMaterialParameterNames, Names) == 0x000000, "Member 'WoundsManagerComponent_SetMaterialParameterNames::Names' has a wrong offset!");

}

