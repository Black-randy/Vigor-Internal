#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameMode_Raid

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Struct_RaidStatistics_structs.hpp"
#include "BP_GameMode_Teams_classes.hpp"
#include "ERaidWinReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameMode_Raid.BP_GameMode_Raid_C
// 0x0110 (0x05E8 - 0x04D8)
class ABP_GameMode_Raid_C final : public ABP_GameMode_Teams_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameMode_Raid_C;                 // 0x04D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_Raid_ObjectiveSpawnPosition_C*> Objective_Spawn_Positions;                         // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_RaidObjective_C*                    Objective;                                         // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Round_Timer;                                       // 0x04F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Round_Time;                                        // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Round_Active;                                      // 0x0504(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_505[0x3];                                      // 0x0505(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ABP_PlayerController_Raid_C*, struct FStruct_RaidStatistics> Raid_Player_Controllers;                           // 0x0508(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerController_Raid_C*>    Spawned_Players;                                   // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         PreMinusRound_Spawn_Time;                          // 0x0568(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ABP_PlayerController_Raid_C*, struct FTimerHandle> Deserter_Timers;                                   // 0x0570(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Desertion_Time;                                    // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Match_In_Progress;                              // 0x05C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5C5[0x3];                                      // 0x05C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerController_Raid_C*>    Players_Waitng_To_Start_Match;                     // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Players_Respawned_This_Round;                      // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DC[0x4];                                      // 0x05DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           PreRound_Timer;                                    // 0x05E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameMode_Raid(int32 EntryPoint);
	void Increment_Rounds_and_assign_sides_to_teams();
	void ReceiveTick(float DeltaSeconds);
	void Second_On_Server_Passed();
	void ReceiveBeginPlay();
	void Player_Connected_To_Match(class ABP_PlayerController_Raid_C* Player_Controller);
	void Deserter_Timer_Elapsed();
	void Player_Left_Defender_Area(class ABP_PlayerController_Raid_C* Player_Controller);
	void Player_Entered_Defender_Area(class ABP_PlayerController_Raid_C* Player_Controller);
	void Objective_Spotted();
	void Attackers_Won(ERaidWinReason Win_Reason);
	void Defenders_Won(ERaidWinReason Win_Reason);
	void Player_Died(class ABP_Character_Raid_C* Victim_Character, class AHumanCharacter* Killer_Character);
	void Move_To_Next_Phase();
	void Match_Finish();
	void Match_Cleanup();
	void Match_Initialization();
	void Start_the_Round();
	void Initialize_New_Round();
	void Round_Timer_Expired();
	void Round_In_Progress();
	void Round_Start();
	void Round_Finish();
	void Round_Cleanup();
	void Round_Initialization();
	void Find_Objective_Spawn_Positions();
	void Spawn_Objective_On_Server();
	void Destroy_Objective_On_Server();
	void Check_for_Winner(bool* Winner_Found);
	void Get_Attacking_Team(class UBP_GSC_Team_Raid_C** Attacking_Team);
	void Get_Defending_Team(class UBP_GSC_Team_Raid_C** Defending_Team);
	void Spawn_All_Players();
	void Get_Round_Winner_by_Player_Elimination(class ABP_PlayerController_Raid_C* Killed_Player_Controller, bool* Attackers_Won, bool* Defenders_Won);
	void Get_All_Players(TArray<class ABP_PlayerController_Raid_C*>* All_Players, bool* Refreshed);
	void Spawn_Player(class ABP_PlayerController_C* Player_Controller, class AActor* Player_Start);
	void Get_Player_Spawn_Position(class ABP_PlayerController_Raid_C* Player_Controller, class AActor** Spawn_Position);
	void Set_Player_Selected_Spawn_Position(class ABP_PlayerController_Raid_C* Player_Controller, class ABP_PlayerStart_Raid_C* Selected_Start);
	void Show_Objective_Location_To_Team(bool To_Attackers);
	void Show_Objective_Spawn_Locations_To_Attackers();
	void Remove_Objective_Markers();
	void Clean_Map_Of_Dead_Bodies();
	void Clear_Deserters();
	void Increase_Player_Kill_Count(class ABP_PlayerController_Raid_C* Player_Controller, bool Headshot);
	void Increase_Player_Objective_Time(class ABP_PlayerController_Raid_C* Player_Controller, float Objective_Time);
	void Get_Player_Statistics(class ABP_PlayerController_Raid_C* Player_Controller, bool* Found, struct FStruct_RaidStatistics* Statistic);
	void Increase_Player_Death_Count(class ABP_PlayerController_Raid_C* Player_Controller);
	void Teleport_All_Players_To_Random_Spawn();
	void Get_Random_Spawn_Position(class AActor** Spawn_Position);
	void Set_All_Players_Invicibility(bool Set_Invincible);
	void Are_Teams_Full(bool* Teams_Full);
	bool PlayerCanRestart(class APlayerController* Player);
	void Player_Died_Update_Statistic(class AHumanCharacter* Victim_Character, class AHumanCharacter* Killer_Character);
	bool OnPlayerDied(class AHumanCharacter* Player, class AHumanCharacter* Killer);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameMode_Raid_C">();
	}
	static class ABP_GameMode_Raid_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameMode_Raid_C>();
	}
};
static_assert(alignof(ABP_GameMode_Raid_C) == 0x000008, "Wrong alignment on ABP_GameMode_Raid_C");
static_assert(sizeof(ABP_GameMode_Raid_C) == 0x0005E8, "Wrong size on ABP_GameMode_Raid_C");
static_assert(offsetof(ABP_GameMode_Raid_C, UberGraphFrame_BP_GameMode_Raid_C) == 0x0004D8, "Member 'ABP_GameMode_Raid_C::UberGraphFrame_BP_GameMode_Raid_C' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Objective_Spawn_Positions) == 0x0004E0, "Member 'ABP_GameMode_Raid_C::Objective_Spawn_Positions' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Objective) == 0x0004F0, "Member 'ABP_GameMode_Raid_C::Objective' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Round_Timer) == 0x0004F8, "Member 'ABP_GameMode_Raid_C::Round_Timer' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Round_Time) == 0x000500, "Member 'ABP_GameMode_Raid_C::Round_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Round_Active) == 0x000504, "Member 'ABP_GameMode_Raid_C::Round_Active' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Raid_Player_Controllers) == 0x000508, "Member 'ABP_GameMode_Raid_C::Raid_Player_Controllers' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Spawned_Players) == 0x000558, "Member 'ABP_GameMode_Raid_C::Spawned_Players' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, PreMinusRound_Spawn_Time) == 0x000568, "Member 'ABP_GameMode_Raid_C::PreMinusRound_Spawn_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Deserter_Timers) == 0x000570, "Member 'ABP_GameMode_Raid_C::Deserter_Timers' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Desertion_Time) == 0x0005C0, "Member 'ABP_GameMode_Raid_C::Desertion_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Is_Match_In_Progress) == 0x0005C4, "Member 'ABP_GameMode_Raid_C::Is_Match_In_Progress' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Players_Waitng_To_Start_Match) == 0x0005C8, "Member 'ABP_GameMode_Raid_C::Players_Waitng_To_Start_Match' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, Players_Respawned_This_Round) == 0x0005D8, "Member 'ABP_GameMode_Raid_C::Players_Respawned_This_Round' has a wrong offset!");
static_assert(offsetof(ABP_GameMode_Raid_C, PreRound_Timer) == 0x0005E0, "Member 'ABP_GameMode_Raid_C::PreRound_Timer' has a wrong offset!");

}

