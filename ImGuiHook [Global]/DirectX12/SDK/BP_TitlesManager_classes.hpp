#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TitlesManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TitlesManager.BP_TitlesManager_C
// 0x0200 (0x0420 - 0x0220)
class ABP_TitlesManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Class_Loadings_in_Progress;                        // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftClassPtr<class UClass>, class UClass*> Loaded_Title_Classes;                              // 0x0238(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Class_Loading_Finished;                            // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          All_Class_Loadings_Started;                        // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Finished_Loading_Classes;                          // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, class ABP_TitleLogic_Base_C*> Name_to_Title_Object_Shortcuts;                    // 0x02A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UClass*, class ABP_TitleLogic_Base_C*> Loaded_Title_Objects;                              // 0x02F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<int32, class FName>                      Title_ID_to_Name_Shortcuts;                        // 0x0340(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           Valid_Titles;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             Title_Pool_Ready;                                  // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Title_Objects_Initialized;                         // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerState_C*                      Owning_Player_State;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_OwnedTitles_SaveGame_C*             OwnedTitlesSaveGame;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      NewTitles;                                         // 0x03C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ForceResave;                                       // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Finished_Loading_Classes__DelegateSignature();
	void Title_Pool_Ready__DelegateSignature();
	void ExecuteUbergraph_BP_TitlesManager(int32 EntryPoint);
	void UpdateOwnedTitlesNotification();
	void OnImprovementUpgradeFinished(const class UShelterCraftingList* ParentShelter, TSubclassOf<class AShelterImprovement> FinishedImprovementClass, const struct FCloudImprovementInfo& AdditionalInfo);
	void OnClaimBattlePassRewardsFinished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassRewardsClaim& Data);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Create_Title_Objects();
	void ReceiveBeginPlay();
	void OnSaveSucceed_11D6EB484BEAB541DF45789686DEF195(const class FString& SlotName, const int32 UserIndex);
	void OnSaveFailed_11D6EB484BEAB541DF45789686DEF195(const class FString& SlotName, const int32 UserIndex);
	void OnLoadSucceed_C219B3C74773CC67852B9A9D7888BED7(class USaveGame* SaveGame);
	void OnLoadFailed_C219B3C74773CC67852B9A9D7888BED7(class USaveGame* SaveGame);
	void OnLoaded_B08996E843B69641864BC48B95DB3098(TSubclassOf<class UObject> Loaded);
	void Is_Title_Row_Setup_Correctly_for_Use(struct FF_TitleList& Title_Info, bool* Correct);
	void Is_Title_Pool_Ready(bool* Title_Pool_Loaded);
	void Check_Title_Object_Readiness();
	void Get_Row_Name_from_Title_ID(int32 Title_ID, class FName* Row_Name);
	void Get_Title_ID_from_Row_Name(class FName Row_Name, int32* Title_ID);
	void Get_Titles_Manager_Status_Log(class FString* Log);
	void Get_Titles_in_Pool(TMap<class FName, int32>* Owned_Titles, TArray<class FName>* Not_Owned_Titles, TMap<class FName, int32>* Selected_Titles);
	void Set_Title_to_Slot(class FName Title_Name, int32 RankIndex, bool* Success);
	void Get_Title_Info_from_Row_Name(class FName Row_Name, struct FF_TitleList* Title_Info, bool* Valid_Output);
	void Get_Title_Item_for_Title_Rank(class FName Title_Name, int32 Title_Rank, class UClass** Item, bool* Valid_Output);
	void Refresh_Current_Titles();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TitlesManager_C">();
	}
	static class ABP_TitlesManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TitlesManager_C>();
	}
};
static_assert(alignof(ABP_TitlesManager_C) == 0x000008, "Wrong alignment on ABP_TitlesManager_C");
static_assert(sizeof(ABP_TitlesManager_C) == 0x000420, "Wrong size on ABP_TitlesManager_C");
static_assert(offsetof(ABP_TitlesManager_C, UberGraphFrame) == 0x000220, "Member 'ABP_TitlesManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_TitlesManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Class_Loadings_in_Progress) == 0x000230, "Member 'ABP_TitlesManager_C::Class_Loadings_in_Progress' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Loaded_Title_Classes) == 0x000238, "Member 'ABP_TitlesManager_C::Loaded_Title_Classes' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Class_Loading_Finished) == 0x000288, "Member 'ABP_TitlesManager_C::Class_Loading_Finished' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, All_Class_Loadings_Started) == 0x000289, "Member 'ABP_TitlesManager_C::All_Class_Loadings_Started' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Finished_Loading_Classes) == 0x000290, "Member 'ABP_TitlesManager_C::Finished_Loading_Classes' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Name_to_Title_Object_Shortcuts) == 0x0002A0, "Member 'ABP_TitlesManager_C::Name_to_Title_Object_Shortcuts' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Loaded_Title_Objects) == 0x0002F0, "Member 'ABP_TitlesManager_C::Loaded_Title_Objects' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Title_ID_to_Name_Shortcuts) == 0x000340, "Member 'ABP_TitlesManager_C::Title_ID_to_Name_Shortcuts' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Valid_Titles) == 0x000390, "Member 'ABP_TitlesManager_C::Valid_Titles' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Title_Pool_Ready) == 0x0003A0, "Member 'ABP_TitlesManager_C::Title_Pool_Ready' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Title_Objects_Initialized) == 0x0003B0, "Member 'ABP_TitlesManager_C::Title_Objects_Initialized' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, Owning_Player_State) == 0x0003B8, "Member 'ABP_TitlesManager_C::Owning_Player_State' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, OwnedTitlesSaveGame) == 0x0003C0, "Member 'ABP_TitlesManager_C::OwnedTitlesSaveGame' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, NewTitles) == 0x0003C8, "Member 'ABP_TitlesManager_C::NewTitles' has a wrong offset!");
static_assert(offsetof(ABP_TitlesManager_C, ForceResave) == 0x000418, "Member 'ABP_TitlesManager_C::ForceResave' has a wrong offset!");

}

