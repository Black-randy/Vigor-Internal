#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character_Matches

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "BP_Character_Script_classes.hpp"
#include "Engine_structs.hpp"
#include "E_TimedSafe_OpenCombinations_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character_Matches.BP_Character_Matches_C
// 0x0030 (0x11F0 - 0x11C0)
class ABP_Character_Matches_C : public ABP_Character_Script_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Character_Matches_C;             // 0x11C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   RightHandSocketName;                               // 0x11C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AnyRadiationDamageTaken;                           // 0x11D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11D1[0x7];                                     // 0x11D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Airdrop_Looted;                                    // 0x11D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          HasLootedRedChest;                                 // 0x11E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Airdrop_Looted__DelegateSignature();
	void ExecuteUbergraph_BP_Character_Matches(int32 EntryPoint);
	void StoredWeaponClient(const class FString& WeaponObjectName, class UClass* WeaponClass);
	void BndEvt__Inventory_K2Node_ComponentBoundEvent_0_OnStoredWeapon__DelegateSignature(class AWeapon* Weapon);
	void OpenedTimedSafe(E_TimedSafe_OpenCombinations OpenType);
	void Looted_Item_Client(TArray<struct FLootSlot>& Looted_Items);
	void Item_Looted(int32 Amount, class UClass* Item);
	void Looted_Item_Server(const TArray<struct FLootSlot>& Looted_Items);
	void BndEvt__Inventory_K2Node_ComponentBoundEvent_1_LootTaken__DelegateSignature(const class AHumanCharacter* Sender, const class AGameplayStorage* SourceLootActor, TArray<struct FLootSlot>& LootedItems);
	void Turn_Character_to_Heading(bool Instantly, float Heading);
	void PlayKitchenTimerGesture();
	void PlayMapGesture();
	void Clear_Right_Hand();
	void Put_Kitchen_Timer_to_Right_Hand();
	void Put_Map_to_Right_Hand();
	void Process_Kill_Gameplay_Events(class ABP_PlayerController_Script_C* Killer, class ABP_PlayerController_Script_C* Victim, bool Headshot, bool Teamkill);
	void Scored_a_Kill(class ABP_PlayerController_Script_C* Killer, class ABP_PlayerController_Script_C* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill);
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void PutKitchenTimerToRightHand();
	void ClearRightHand();
	void PutMapToRightHand();

	void AreCharactersInSameTeam(class AHumanCharacter* OtherCharacter, bool* AreInSameTeam, bool* AreSameCharacter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_Matches_C">();
	}
	static class ABP_Character_Matches_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_Matches_C>();
	}
};
static_assert(alignof(ABP_Character_Matches_C) == 0x000010, "Wrong alignment on ABP_Character_Matches_C");
static_assert(sizeof(ABP_Character_Matches_C) == 0x0011F0, "Wrong size on ABP_Character_Matches_C");
static_assert(offsetof(ABP_Character_Matches_C, UberGraphFrame_BP_Character_Matches_C) == 0x0011C0, "Member 'ABP_Character_Matches_C::UberGraphFrame_BP_Character_Matches_C' has a wrong offset!");
static_assert(offsetof(ABP_Character_Matches_C, RightHandSocketName) == 0x0011C8, "Member 'ABP_Character_Matches_C::RightHandSocketName' has a wrong offset!");
static_assert(offsetof(ABP_Character_Matches_C, AnyRadiationDamageTaken) == 0x0011D0, "Member 'ABP_Character_Matches_C::AnyRadiationDamageTaken' has a wrong offset!");
static_assert(offsetof(ABP_Character_Matches_C, Airdrop_Looted) == 0x0011D8, "Member 'ABP_Character_Matches_C::Airdrop_Looted' has a wrong offset!");
static_assert(offsetof(ABP_Character_Matches_C, HasLootedRedChest) == 0x0011E8, "Member 'ABP_Character_Matches_C::HasLootedRedChest' has a wrong offset!");

}

