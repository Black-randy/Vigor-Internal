#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_Script

#include "Basic.hpp"

#include "BP_PlayerController_Script_classes.hpp"
#include "BP_PlayerController_Script_parameters.hpp"


namespace SDK
{

// Function BP_PlayerController_Script.BP_PlayerController_Script_C.BlocklistUpdated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Reason_For_Update                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::BlocklistUpdated__DelegateSignature(const class FString& Reason_For_Update)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "BlocklistUpdated__DelegateSignature");

	Params::BP_PlayerController_Script_C_BlocklistUpdated__DelegateSignature Parms{};

	Parms.Reason_For_Update = std::move(Reason_For_Update);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ExecuteUbergraph_BP_PlayerController_Script
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::ExecuteUbergraph_BP_PlayerController_Script(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ExecuteUbergraph_BP_PlayerController_Script");

	Params::BP_PlayerController_Script_C_ExecuteUbergraph_BP_PlayerController_Script Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnUnbanPlayerReceived
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FCloudBannedPlayersResult        Result                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PlayerController_Script_C::OnUnbanPlayerReceived(const struct FCloudRequestResult& RequestResult, const class FString& Userid, const struct FCloudBannedPlayersResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnUnbanPlayerReceived");

	Params::BP_PlayerController_Script_C_OnUnbanPlayerReceived Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Userid = std::move(Userid);
	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnBanPlayerReceived
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FCloudBannedPlayersResult        Result                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PlayerController_Script_C::OnBanPlayerReceived(const struct FCloudRequestResult& RequestResult, const class FString& Userid, const struct FCloudBannedPlayersResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnBanPlayerReceived");

	Params::BP_PlayerController_Script_C_OnBanPlayerReceived Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Userid = std::move(Userid);
	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.InitializeBlocklist
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::InitializeBlocklist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "InitializeBlocklist");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnGetPlayerBansReceived
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBannedPlayersResult        Result                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_PlayerController_Script_C::OnGetPlayerBansReceived(const struct FCloudRequestResult& RequestResult, const struct FCloudBannedPlayersResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnGetPlayerBansReceived");

	Params::BP_PlayerController_Script_C_OnGetPlayerBansReceived Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Result = std::move(Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Event OpenLevel
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           MatchCloudId                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FUserMatchResult                 MatchResult                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_PlayerController_Script_C::Event_OpenLevel(const struct FCloudRequestResult& RequestResult, const class FString& MatchCloudId, const struct FUserMatchResult& MatchResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Event OpenLevel");

	Params::BP_PlayerController_Script_C_Event_OpenLevel Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.MatchCloudId = std::move(MatchCloudId);
	Parms.MatchResult = std::move(MatchResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Replicate_Client_CarAlarmTriggered
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Replicate_Client_CarAlarmTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Replicate_Client_CarAlarmTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.AnalyticsLogHealedHP
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Healed                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::AnalyticsLogHealedHP(float Healed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "AnalyticsLogHealedHP");

	Params::BP_PlayerController_Script_C_AnalyticsLogHealedHP Parms{};

	Parms.Healed = Healed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RemoveCustomMapMarkerByTag_FromCompass
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::RemoveCustomMapMarkerByTag_FromCompass(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RemoveCustomMapMarkerByTag_FromCompass");

	Params::BP_PlayerController_Script_C_RemoveCustomMapMarkerByTag_FromCompass Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RemoveCustomMapMarkerByTag_FromMap
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::RemoveCustomMapMarkerByTag_FromMap(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RemoveCustomMapMarkerByTag_FromMap");

	Params::BP_PlayerController_Script_C_RemoveCustomMapMarkerByTag_FromMap Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ResetDistanceTraveledInfo
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::ResetDistanceTraveledInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ResetDistanceTraveledInfo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.IncrementUsedAmmo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::IncrementUsedAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "IncrementUsedAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.IncrementShotsFired
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::IncrementShotsFired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "IncrementShotsFired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.UpdateDistanceTraveled
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::UpdateDistanceTraveled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "UpdateDistanceTraveled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.AddOrModifyMapMarkerStatic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EnumStaticMapMarkers                    MapMarker                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Auto_Generate_Tag                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Add_To_Map                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Add_To_Compass                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector_NetQuantize              Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::AddOrModifyMapMarkerStatic(EnumStaticMapMarkers MapMarker, class FName Tag, bool Auto_Generate_Tag, bool Add_To_Map, bool Add_To_Compass, const struct FVector_NetQuantize& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "AddOrModifyMapMarkerStatic");

	Params::BP_PlayerController_Script_C_AddOrModifyMapMarkerStatic Parms{};

	Parms.MapMarker = MapMarker;
	Parms.Tag = Tag;
	Parms.Auto_Generate_Tag = Auto_Generate_Tag;
	Parms.Add_To_Map = Add_To_Map;
	Parms.Add_To_Compass = Add_To_Compass;
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Player To Shelter
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_Player_To_Shelter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Player To Shelter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Player To Shelter With Delay
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_Player_To_Shelter_With_Delay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Player To Shelter With Delay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ReceiveUnPossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            UnpossessedPawn                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::ReceiveUnPossess(class APawn* UnpossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ReceiveUnPossess");

	Params::BP_PlayerController_Script_C_ReceiveUnPossess Parms{};

	Parms.UnpossessedPawn = UnpossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CallMatchFinishedForPlayer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CallMatchFinishedForPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CallMatchFinishedForPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Try Send Spawned Anylitics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Try_Send_Spawned_Anylitics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Try Send Spawned Anylitics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Player Respawned
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Player_Respawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Player Respawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CloseUIForSpectator
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WidgetClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CloseUIForSpectator(class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CloseUIForSpectator");

	Params::BP_PlayerController_Script_C_CloseUIForSpectator Parms{};

	Parms.WidgetClass = WidgetClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ReceiveEndPlay");

	Params::BP_PlayerController_Script_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.AddFadedMarker
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CustomMapMarker_Fade          Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    AutoGenerateTag                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AddToMap                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AddToCompass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::AddFadedMarker(class FName Tag, const struct FS_CustomMapMarker_Fade& Marker, bool AutoGenerateTag, bool AddToMap, bool AddToCompass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "AddFadedMarker");

	Params::BP_PlayerController_Script_C_AddFadedMarker Parms{};

	Parms.Tag = Tag;
	Parms.Marker = std::move(Marker);
	Parms.AutoGenerateTag = AutoGenerateTag;
	Parms.AddToMap = AddToMap;
	Parms.AddToCompass = AddToCompass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Set Killer Info on Client
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_MatchPlayerInfo               Killer_Match_Player_Info                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Set_Killer_Info_on_Client(const struct FS_MatchPlayerInfo& Killer_Match_Player_Info)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Set Killer Info on Client");

	Params::BP_PlayerController_Script_C_Set_Killer_Info_on_Client Parms{};

	Parms.Killer_Match_Player_Info = std::move(Killer_Match_Player_Info);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Create UI Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Widget_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Create_UI_Widget(class UClass* Widget_Class, int32 ZOrder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Create UI Widget");

	Params::BP_PlayerController_Script_C_Create_UI_Widget Parms{};

	Parms.Widget_Class = Widget_Class;
	Parms.ZOrder = ZOrder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Close UI Widget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           WidgetClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Close_UI_Widget(class UClass* WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Close UI Widget");

	Params::BP_PlayerController_Script_C_Close_UI_Widget Parms{};

	Parms.WidgetClass = WidgetClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.LootNotification
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NumItems                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::LootNotification(class UClass* ItemClass, int32 NumItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "LootNotification");

	Params::BP_PlayerController_Script_C_LootNotification Parms{};

	Parms.ItemClass = ItemClass;
	Parms.NumItems = NumItems;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RemoveCustomMapMarkers
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::RemoveCustomMapMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RemoveCustomMapMarkers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.AddOrModifyMapMarkerDynamic
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CustomMapMarker_Optimized     Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    AutoGenerateTag                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AddToMap                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    AddToCompass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::AddOrModifyMapMarkerDynamic(class FName Tag, const struct FS_CustomMapMarker_Optimized& Marker, bool AutoGenerateTag, bool AddToMap, bool AddToCompass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "AddOrModifyMapMarkerDynamic");

	Params::BP_PlayerController_Script_C_AddOrModifyMapMarkerDynamic Parms{};

	Parms.Tag = Tag;
	Parms.Marker = std::move(Marker);
	Parms.AutoGenerateTag = AutoGenerateTag;
	Parms.AddToMap = AddToMap;
	Parms.AddToCompass = AddToCompass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RemoveCustomMapMarkerByTag
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::RemoveCustomMapMarkerByTag(class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RemoveCustomMapMarkerByTag");

	Params::BP_PlayerController_Script_C_RemoveCustomMapMarkerByTag Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_PlayerController_Script_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.ExitSessionOnClient
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OverrideReturnMap                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::ExitSessionOnClient(class FName OverrideReturnMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "ExitSessionOnClient");

	Params::BP_PlayerController_Script_C_ExitSessionOnClient Parms{};

	Parms.OverrideReturnMap = OverrideReturnMap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.LeaveSession
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MapToReturnTo_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::LeaveSession(class FName MapToReturnTo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "LeaveSession");

	Params::BP_PlayerController_Script_C_LeaveSession Parms{};

	Parms.MapToReturnTo_0 = MapToReturnTo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.DEBUG_OverrideClientAnalyticsTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PeriodTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::DEBUG_OverrideClientAnalyticsTime(int32 PeriodTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "DEBUG_OverrideClientAnalyticsTime");

	Params::BP_PlayerController_Script_C_DEBUG_OverrideClientAnalyticsTime Parms{};

	Parms.PeriodTime = PeriodTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.DEBUG_Server_SetClientAnalyticsTime
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PeriodTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::DEBUG_Server_SetClientAnalyticsTime(int32 PeriodTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "DEBUG_Server_SetClientAnalyticsTime");

	Params::BP_PlayerController_Script_C_DEBUG_Server_SetClientAnalyticsTime Parms{};

	Parms.PeriodTime = PeriodTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.DEBUG_SetClientAnalyticsTime
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PeriodTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::DEBUG_SetClientAnalyticsTime(int32 PeriodTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "DEBUG_SetClientAnalyticsTime");

	Params::BP_PlayerController_Script_C_DEBUG_SetClientAnalyticsTime Parms{};

	Parms.PeriodTime = PeriodTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.SetClientSidePeriodicStatsTimer
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   StatsInterval                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::SetClientSidePeriodicStatsTimer(int32 StatsInterval)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "SetClientSidePeriodicStatsTimer");

	Params::BP_PlayerController_Script_C_SetClientSidePeriodicStatsTimer Parms{};

	Parms.StatsInterval = StatsInterval;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Server-Side Network Stability Analytics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_ServerMinusSide_Network_Stability_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Server-Side Network Stability Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Server-Side Hit Registration Analytics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_ServerMinusSide_Hit_Registration_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Server-Side Hit Registration Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Server-Side Connection Analytics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_ServerMinusSide_Connection_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Server-Side Connection Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Finish Server-Side Periodic Stats
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Finish_ServerMinusSide_Periodic_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Finish Server-Side Periodic Stats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Check Player Readiness for Analytics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Check_Player_Readiness_for_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Check Player Readiness for Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Collect Server-Side Stats
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Collect_ServerMinusSide_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Collect Server-Side Stats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Initialize Server-Side Analytics
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Initialize_ServerMinusSide_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Initialize Server-Side Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Player Results Event
// (Net, NetReliable, HasOutParams, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Character_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Player_Escaped                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Player_Won                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           Exit_Name                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Exit_Prevented_Radiation_Kill_0                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FString>                   Rewards                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Accuracy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FCloudBattlePassMatchEventInfo>Events                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Distance_Traveled_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Meaningful_Distance_Traveled_0                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalTeamScore                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Average_Ping                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Send_Player_Results_Event(class AHumanCharacter* Character_0, bool Player_Escaped, bool Player_Won, const class FString& Exit_Name, bool Exit_Prevented_Radiation_Kill_0, TArray<class FString>& Rewards, int32 Accuracy, const TArray<struct FCloudBattlePassMatchEventInfo>& Events, int32 Distance_Traveled_0, int32 Meaningful_Distance_Traveled_0, int32 TotalTeamScore, float Average_Ping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Player Results Event");

	Params::BP_PlayerController_Script_C_Send_Player_Results_Event Parms{};

	Parms.Character_0 = Character_0;
	Parms.Player_Escaped = Player_Escaped;
	Parms.Player_Won = Player_Won;
	Parms.Exit_Name = std::move(Exit_Name);
	Parms.Exit_Prevented_Radiation_Kill_0 = Exit_Prevented_Radiation_Kill_0;
	Parms.Rewards = std::move(Rewards);
	Parms.Accuracy = Accuracy;
	Parms.Events = std::move(Events);
	Parms.Distance_Traveled_0 = Distance_Traveled_0;
	Parms.Meaningful_Distance_Traveled_0 = Meaningful_Distance_Traveled_0;
	Parms.TotalTeamScore = TotalTeamScore;
	Parms.Average_Ping = Average_Ping;

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Death Event
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECloudDeathCauseType                    Cause_of_Death                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Send_Death_Event(class AHumanCharacter* Victim, class AHumanCharacter* Killer, ECloudDeathCauseType Cause_of_Death, class UClass* Instigating_Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Death Event");

	Params::BP_PlayerController_Script_C_Send_Death_Event Parms{};

	Parms.Victim = Victim;
	Parms.Killer = Killer;
	Parms.Cause_of_Death = Cause_of_Death;
	Parms.Instigating_Item = Instigating_Item;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Kill Scored Event
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AHumanCharacter*                  Victim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Instigating_Item                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Headshot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Teamkill                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Kill Scored Event");

	Params::BP_PlayerController_Script_C_Send_Kill_Scored_Event Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;
	Parms.Instigating_Item = Instigating_Item;
	Parms.Headshot = Headshot;
	Parms.Teamkill = Teamkill;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Set Ladder Used for Analytics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Set_Ladder_Used_for_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Set Ladder Used for Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Finish Client-Side Periodic Stats
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Finish_ClientMinusSide_Periodic_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Finish Client-Side Periodic Stats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Collect Client-Side Periodic Stats
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Collect_ClientMinusSide_Periodic_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Collect Client-Side Periodic Stats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Set Weapon Fired for Analytics
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Set_Weapon_Fired_for_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Set Weapon Fired for Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Send Client-Side Periodic Stats
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Send_ClientMinusSide_Periodic_Stats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Send Client-Side Periodic Stats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Initialize Client-Side Analytics
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Initialize_ClientMinusSide_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Initialize Client-Side Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatToggleDebugCamera
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::CheatToggleDebugCamera(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatToggleDebugCamera");

	Params::BP_PlayerController_Script_C_CheatToggleDebugCamera Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatHideUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hide                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::CheatHideUI(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatHideUI");

	Params::BP_PlayerController_Script_C_CheatHideUI Parms{};

	Parms.Hide = Hide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Toggle Onboarding UI Locks
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_UI_Locked                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Toggle_Onboarding_UI_Locks(bool Is_UI_Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Toggle Onboarding UI Locks");

	Params::BP_PlayerController_Script_C_Cheat_Toggle_Onboarding_UI_Locks Parms{};

	Parms.Is_UI_Locked = Is_UI_Locked;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat toggle machine mode
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Toggle_machine_mode                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_toggle_machine_mode(bool Toggle_machine_mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat toggle machine mode");

	Params::BP_PlayerController_Script_C_Cheat_toggle_machine_mode Parms{};

	Parms.Toggle_machine_mode = Toggle_machine_mode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat execute command line
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Command                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_execute_command_line(const class FString& Command)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat execute command line");

	Params::BP_PlayerController_Script_C_Cheat_execute_command_line Parms{};

	Parms.Command = std::move(Command);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OpenAllExits
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::OpenAllExits()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OpenAllExits");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Set Camping Detection Active
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Set_Camping_Detection_Active(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Set Camping Detection Active");

	Params::BP_PlayerController_Script_C_Set_Camping_Detection_Active Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatSpawnAllMementos
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatSpawnAllMementos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatSpawnAllMementos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatShowSpawnedMementosMarkers
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatShowSpawnedMementosMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatShowSpawnedMementosMarkers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatShowSpawnedMementos
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatShowSpawnedMementos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatShowSpawnedMementos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatShowMementoSpawnPointMarkers
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatShowMementoSpawnPointMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatShowMementoSpawnPointMarkers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatShowMementoSpawnPoints
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatShowMementoSpawnPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatShowMementoSpawnPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Switch Fog of War
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Switch_Fog_of_War()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Switch Fog of War");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Free Camera Switch Visible UI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Free_Camera_Switch_Visible_UI(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Free Camera Switch Visible UI");

	Params::BP_PlayerController_Script_C_Cheat_Free_Camera_Switch_Visible_UI Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Switch Player Free Look Camera
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Switch_Player_Free_Look_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Switch Player Free Look Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatStartSpectating
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatStartSpectating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatStartSpectating");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OpenCheatWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CheatWidget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::OpenCheatWidget(class UClass* CheatWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OpenCheatWidget");

	Params::BP_PlayerController_Script_C_OpenCheatWidget Parms{};

	Parms.CheatWidget = CheatWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CanCheat_PC
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CheatWidget                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CanCheat_PC(const class UClass* CheatWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CanCheat_PC");

	Params::BP_PlayerController_Script_C_CanCheat_PC Parms{};

	Parms.CheatWidget = CheatWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatSkipTutorial
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatSkipTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatSkipTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatBigJumps
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewJumpZVelocity                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CheatBigJumps(float NewJumpZVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatBigJumps");

	Params::BP_PlayerController_Script_C_CheatBigJumps Parms{};

	Parms.NewJumpZVelocity = NewJumpZVelocity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatSetDevMode
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatSetDevMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatSetDevMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatFastMovement
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MaxWalkSpeed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CheatFastMovement(float MaxWalkSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatFastMovement");

	Params::BP_PlayerController_Script_C_CheatFastMovement Parms{};

	Parms.MaxWalkSpeed = MaxWalkSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatInfiniteSprint
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatInfiniteSprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatInfiniteSprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatMarkPlayer
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            MarkedCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Specified_Color                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CheatMarkPlayer(class APawn* MarkedCharacter, const struct FLinearColor& Specified_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatMarkPlayer");

	Params::BP_PlayerController_Script_C_CheatMarkPlayer Parms{};

	Parms.MarkedCharacter = MarkedCharacter;
	Parms.Specified_Color = std::move(Specified_Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatMarkSelfAsTester
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::CheatMarkSelfAsTester()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatMarkSelfAsTester");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatSkipLobby
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TimeToEncounter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TimeToLock                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::CheatSkipLobby(int32 TimeToEncounter, int32 TimeToLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatSkipLobby");

	Params::BP_PlayerController_Script_C_CheatSkipLobby Parms{};

	Parms.TimeToEncounter = TimeToEncounter;
	Parms.TimeToLock = TimeToLock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Change Weather
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Change_Weather()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Change Weather");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Create Testing Pawns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Create_Testing_Pawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Create Testing Pawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Toggle Bullet Impact Material
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleBulletMaterialImpact                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Toggle_Bullet_Impact_Material(bool ToggleBulletMaterialImpact)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Toggle Bullet Impact Material");

	Params::BP_PlayerController_Script_C_Cheat_Toggle_Bullet_Impact_Material Parms{};

	Parms.ToggleBulletMaterialImpact = ToggleBulletMaterialImpact;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Show Player Count
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Draw_Player_Count_Widget                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Show_Player_Count(bool Draw_Player_Count_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Show Player Count");

	Params::BP_PlayerController_Script_C_Cheat_Show_Player_Count Parms{};

	Parms.Draw_Player_Count_Widget = Draw_Player_Count_Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Show Traced Actor Display Name
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show_Traced_Actor_Display_Name                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Show_Traced_Actor_Display_Name(bool Show_Traced_Actor_Display_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Show Traced Actor Display Name");

	Params::BP_PlayerController_Script_C_Cheat_Show_Traced_Actor_Display_Name Parms{};

	Parms.Show_Traced_Actor_Display_Name = Show_Traced_Actor_Display_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Infinite Bullets
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewInfiniteBulletState                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Infinite_Bullets(bool NewInfiniteBulletState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Infinite Bullets");

	Params::BP_PlayerController_Script_C_Cheat_Infinite_Bullets Parms{};

	Parms.NewInfiniteBulletState = NewInfiniteBulletState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Blocking Volumes
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Threed_Debug_Blocking_Volumes                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Blocking_Volumes(bool Threed_Debug_Blocking_Volumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Blocking Volumes");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Blocking_Volumes Parms{};

	Parms.Threed_Debug_Blocking_Volumes = Threed_Debug_Blocking_Volumes;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Victory Add Lootbox
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   InInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Victory_Add_Lootbox(class UClass* Class_0, int32 InInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Victory Add Lootbox");

	Params::BP_PlayerController_Script_C_Cheat_Victory_Add_Lootbox Parms{};

	Parms.Class_0 = Class_0;
	Parms.InInt = InInt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Retreat Add Resources
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Resource                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Retreat_Add_Resources(class UClass* Resource, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Retreat Add Resources");

	Params::BP_PlayerController_Script_C_Cheat_Retreat_Add_Resources Parms{};

	Parms.Resource = Resource;
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Trade In Resources
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Trade_In_Resources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Trade In Resources");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.CheatToggleHitInfo
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleHitInfo_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::CheatToggleHitInfo(bool ToggleHitInfo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "CheatToggleHitInfo");

	Params::BP_PlayerController_Script_C_CheatToggleHitInfo Parms{};

	Parms.ToggleHitInfo_0 = ToggleHitInfo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Player
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugPlayer                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Player(bool ThreedDebugPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Player");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Player Parms{};

	Parms.ThreedDebugPlayer = ThreedDebugPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Player Starts
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugPlayerStarts                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Player_Starts(bool ThreedDebugPlayerStarts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Player Starts");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Player_Starts Parms{};

	Parms.ThreedDebugPlayerStarts = ThreedDebugPlayerStarts;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Objective Item Spawns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugLootSpawns                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Objective_Item_Spawns(bool ThreedDebugLootSpawns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Objective Item Spawns");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Objective_Item_Spawns Parms{};

	Parms.ThreedDebugLootSpawns = ThreedDebugLootSpawns;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Spawned Objective Items
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugSpawnedLoot                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Spawned_Objective_Items(bool ThreedDebugSpawnedLoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Spawned Objective Items");

	Params::BP_PlayerController_Script_C_Cheat_3D_Spawned_Objective_Items Parms{};

	Parms.ThreedDebugSpawnedLoot = ThreedDebugSpawnedLoot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Objective Spawns
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugObjectiveSpawnsState                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Objective_Spawns(bool ThreedDebugObjectiveSpawnsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Objective Spawns");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Objective_Spawns Parms{};

	Parms.ThreedDebugObjectiveSpawnsState = ThreedDebugObjectiveSpawnsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Active Objectives
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugObjectiveItemsState                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Active_Objectives(bool ThreedDebugObjectiveItemsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Active Objectives");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Active_Objectives Parms{};

	Parms.ThreedDebugObjectiveItemsState = ThreedDebugObjectiveItemsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug Resource Items
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugResourceItemsState                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug_Resource_Items(bool ThreedDebugResourceItemsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug Resource Items");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug_Resource_Items Parms{};

	Parms.ThreedDebugResourceItemsState = ThreedDebugResourceItemsState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Machine Hud
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Machine_Hud_State                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Machine_Hud(bool Machine_Hud_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Machine Hud");

	Params::BP_PlayerController_Script_C_Cheat_Machine_Hud Parms{};

	Parms.Machine_Hud_State = Machine_Hud_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Consumable Hud
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Consumable_Hud_State                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Consumable_Hud(bool Consumable_Hud_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Consumable Hud");

	Params::BP_PlayerController_Script_C_Cheat_Consumable_Hud Parms{};

	Parms.Consumable_Hud_State = Consumable_Hud_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat 3D Debug
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ThreedDebugState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_3D_Debug(bool ThreedDebugState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat 3D Debug");

	Params::BP_PlayerController_Script_C_Cheat_3D_Debug Parms{};

	Parms.ThreedDebugState = ThreedDebugState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Game Mode Debug
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Game_Mode_Debug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Game Mode Debug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Add Shelter Resource Elapsed Time
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TimeToElapse                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Add_Shelter_Resource_Elapsed_Time(int32 TimeToElapse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Add Shelter Resource Elapsed Time");

	Params::BP_PlayerController_Script_C_Cheat_Add_Shelter_Resource_Elapsed_Time Parms{};

	Parms.TimeToElapse = TimeToElapse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Teleport To Start
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Teleport_To_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Teleport To Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Show Players In Session
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DrawPlayersInSessionWidget                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Show_Players_In_Session(bool DrawPlayersInSessionWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Show Players In Session");

	Params::BP_PlayerController_Script_C_Cheat_Show_Players_In_Session Parms{};

	Parms.DrawPlayersInSessionWidget = DrawPlayersInSessionWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Show Player Location
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DrawPlayerLocationState                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Show_Player_Location(bool DrawPlayerLocationState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Show Player Location");

	Params::BP_PlayerController_Script_C_Cheat_Show_Player_Location Parms{};

	Parms.DrawPlayerLocationState = DrawPlayerLocationState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Set Player Transform
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Set_Player_Transform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Set Player Transform");

	Params::BP_PlayerController_Script_C_Cheat_Set_Player_Transform Parms{};

	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Set FOV
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Set_FOV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Set FOV");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Definable Damage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Definable_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Definable Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Toggle Health Debug
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Draw_Health_Debug_Widget                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Toggle_Health_Debug(bool Draw_Health_Debug_Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Toggle Health Debug");

	Params::BP_PlayerController_Script_C_Cheat_Toggle_Health_Debug Parms{};

	Parms.Draw_Health_Debug_Widget = Draw_Health_Debug_Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Infinite Ammo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New_Infinite_Ammo_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Infinite_Ammo(bool New_Infinite_Ammo_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Infinite Ammo");

	Params::BP_PlayerController_Script_C_Cheat_Infinite_Ammo Parms{};

	Parms.New_Infinite_Ammo_State = New_Infinite_Ammo_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Damage Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage_Amount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Damage_Character(float Damage_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Damage Character");

	Params::BP_PlayerController_Script_C_Cheat_Damage_Character Parms{};

	Parms.Damage_Amount = Damage_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Heal Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Heal_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Heal_Character(float Heal_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Heal Character");

	Params::BP_PlayerController_Script_C_Cheat_Heal_Character Parms{};

	Parms.Heal_Amount = Heal_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Set Invincibility
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    New_Invincibility_State                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Set_Invincibility(bool New_Invincibility_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Set Invincibility");

	Params::BP_PlayerController_Script_C_Cheat_Set_Invincibility Parms{};

	Parms.New_Invincibility_State = New_Invincibility_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Set Max Health
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   New_Max_Health                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Set_Max_Health(float New_Max_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Set Max Health");

	Params::BP_PlayerController_Script_C_Cheat_Set_Max_Health Parms{};

	Parms.New_Max_Health = New_Max_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Set Health
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   New_Health                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Set_Health(float New_Health)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Set Health");

	Params::BP_PlayerController_Script_C_Cheat_Set_Health Parms{};

	Parms.New_Health = New_Health;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Kill Character
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Kill_Character()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Kill Character");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Clear Objective Items From Backpack
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Clear_Objective_Items_From_Backpack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Clear Objective Items From Backpack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Clear Backpack
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Cheat_Clear_Backpack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Clear Backpack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Add Weapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Weapon_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Add_Weapon(class UClass* Weapon_Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Add Weapon");

	Params::BP_PlayerController_Script_C_Cheat_Add_Weapon Parms{};

	Parms.Weapon_Type = Weapon_Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Add Item For Backpack
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Item_Type                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Item_Amount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Cheat_Add_Item_For_Backpack(class UClass* Item_Type, int32 Item_Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Add Item For Backpack");

	Params::BP_PlayerController_Script_C_Cheat_Add_Item_For_Backpack Parms{};

	Parms.Item_Type = Item_Type;
	Parms.Item_Amount = Item_Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.SpawnControlledPawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Spawn_Transform_Location                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::SpawnControlledPawn(const struct FVector& Spawn_Transform_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "SpawnControlledPawn");

	Params::BP_PlayerController_Script_C_SpawnControlledPawn Parms{};

	Parms.Spawn_Transform_Location = std::move(Spawn_Transform_Location);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Cheat Equip Consumable
// (Net, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Consumable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Cheat_Equip_Consumable(class UClass* Consumable, bool UnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Cheat Equip Consumable");

	Params::BP_PlayerController_Script_C_Cheat_Equip_Consumable Parms{};

	Parms.Consumable = Consumable;
	Parms.UnEquip = UnEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Add Consumable To Hand
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Consumable                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Add_Consumable_To_Hand(class UClass* Consumable, bool UnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Add Consumable To Hand");

	Params::BP_PlayerController_Script_C_Add_Consumable_To_Hand Parms{};

	Parms.Consumable = Consumable;
	Parms.UnEquip = UnEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Forward Whether I Can Cheat to Local Cheat UI
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_Cheat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Forward_Whether_I_Can_Cheat_to_Local_Cheat_UI(bool Can_Cheat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Forward Whether I Can Cheat to Local Cheat UI");

	Params::BP_PlayerController_Script_C_Forward_Whether_I_Can_Cheat_to_Local_Cheat_UI Parms{};

	Parms.Can_Cheat = Can_Cheat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Check Whether I Can Cheat
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Check_Whether_I_Can_Cheat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Check Whether I Can Cheat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Broadcast Cheating
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Broadcast_Cheating(const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Broadcast Cheating");

	Params::BP_PlayerController_Script_C_Broadcast_Cheating Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Initialize Cheat Manager
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Initialize_Cheat_Manager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Initialize Cheat Manager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Spawn SM Asset on All Machines
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Object_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UStaticMesh*                      Class_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Spawn_SM_Asset_on_All_Machines(const class FString& Object_Name, class UStaticMesh* Class_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Spawn SM Asset on All Machines");

	Params::BP_PlayerController_Script_C_Spawn_SM_Asset_on_All_Machines Parms{};

	Parms.Object_Name = std::move(Object_Name);
	Parms.Class_Name = Class_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnSpawnSMActorFromConsole
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UStaticMesh*                      StaticMeshObject                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::OnSpawnSMActorFromConsole(const class FString& ObjectName, const class UStaticMesh* StaticMeshObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnSpawnSMActorFromConsole");

	Params::BP_PlayerController_Script_C_OnSpawnSMActorFromConsole Parms{};

	Parms.ObjectName = std::move(ObjectName);
	Parms.StaticMeshObject = StaticMeshObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnSpawnBPActorFromConsole
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           ObjectName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           ObjectClass                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::OnSpawnBPActorFromConsole(const class FString& ObjectName, const class UClass* ObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnSpawnBPActorFromConsole");

	Params::BP_PlayerController_Script_C_OnSpawnBPActorFromConsole Parms{};

	Parms.ObjectName = std::move(ObjectName);
	Parms.ObjectClass = ObjectClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Spawn BP Asset on All Machines
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Object_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UClass*                           Class_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Spawn_BP_Asset_on_All_Machines(const class FString& Object_Name, class UClass* Class_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Spawn BP Asset on All Machines");

	Params::BP_PlayerController_Script_C_Spawn_BP_Asset_on_All_Machines Parms{};

	Parms.Object_Name = std::move(Object_Name);
	Parms.Class_Name = Class_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Player destroyed trap
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Destroyed_trap                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Player_destroyed_trap(class UClass* Destroyed_trap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Player destroyed trap");

	Params::BP_PlayerController_Script_C_Player_destroyed_trap Parms{};

	Parms.Destroyed_trap = Destroyed_trap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Player stayed in radiation
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Radiation_cloud                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Radiation_wave                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Radioactive_airdrop                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Time_stayed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Player_stayed_in_radiation(bool Radiation_cloud, bool Radiation_wave, bool Radioactive_airdrop, float Time_stayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Player stayed in radiation");

	Params::BP_PlayerController_Script_C_Player_stayed_in_radiation Parms{};

	Parms.Radiation_cloud = Radiation_cloud;
	Parms.Radiation_wave = Radiation_wave;
	Parms.Radioactive_airdrop = Radioactive_airdrop;
	Parms.Time_stayed = Time_stayed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.PlayerWonPhoneDuel
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::PlayerWonPhoneDuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "PlayerWonPhoneDuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.PlayerAnsweredPhoneDuel
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::PlayerAnsweredPhoneDuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "PlayerAnsweredPhoneDuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.PlayerInitiatedPhoneDuel
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::PlayerInitiatedPhoneDuel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "PlayerInitiatedPhoneDuel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Character stepped into alarm trap
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_Script_C*           Character_that_stepped_into_alarm_trap                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_TC_AlarmTrap_Object_C*        Triggered_alarm_trap                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Character_stepped_into_alarm_trap(class ABP_Character_Script_C* Character_that_stepped_into_alarm_trap, class ABP_TC_AlarmTrap_Object_C* Triggered_alarm_trap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Character stepped into alarm trap");

	Params::BP_PlayerController_Script_C_Character_stepped_into_alarm_trap Parms{};

	Parms.Character_that_stepped_into_alarm_trap = Character_that_stepped_into_alarm_trap;
	Parms.Triggered_alarm_trap = Triggered_alarm_trap;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Player jammed new uniquie non-friendly character
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_Script_C*           Jammed_character                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Player_jammed_new_uniquie_nonMinusfriendly_character(class ABP_Character_Script_C* Jammed_character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Player jammed new uniquie non-friendly character");

	Params::BP_PlayerController_Script_C_Player_jammed_new_uniquie_nonMinusfriendly_character Parms{};

	Parms.Jammed_character = Jammed_character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Jammer blocked non friendly Signal detection
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Jammer_blocked_non_friendly_Signal_detection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Jammer blocked non friendly Signal detection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Own transmitter got detected by other player
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Own_transmitter_got_detected_by_other_player()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Own transmitter got detected by other player");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Player detected non-friendly character signal
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Detected_actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Player_detected_nonMinusfriendly_character_signal(class AActor* Detected_actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Player detected non-friendly character signal");

	Params::BP_PlayerController_Script_C_Player_detected_nonMinusfriendly_character_signal Parms{};

	Parms.Detected_actor = Detected_actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Store Match ID to Game Instance
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Match_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::Store_Match_ID_to_Game_Instance(const class FString& Match_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Store Match ID to Game Instance");

	Params::BP_PlayerController_Script_C_Store_Match_ID_to_Game_Instance Parms{};

	Parms.Match_ID = std::move(Match_ID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.StoreMatchMakingMatchID
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MAtchMakingMatchID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::StoreMatchMakingMatchID(const class FString& MAtchMakingMatchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "StoreMatchMakingMatchID");

	Params::BP_PlayerController_Script_C_StoreMatchMakingMatchID Parms{};

	Parms.MAtchMakingMatchID = std::move(MAtchMakingMatchID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Reset Match ID in Game Instance
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Reset_Match_ID_in_Game_Instance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Reset Match ID in Game Instance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnSuccess_4BBAC5424C22E3B5DDE130AB889CA1C4
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::OnSuccess_4BBAC5424C22E3B5DDE130AB889CA1C4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnSuccess_4BBAC5424C22E3B5DDE130AB889CA1C4");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.OnFailure_4BBAC5424C22E3B5DDE130AB889CA1C4
// (BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::OnFailure_4BBAC5424C22E3B5DDE130AB889CA1C4()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "OnFailure_4BBAC5424C22E3B5DDE130AB889CA1C4");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.InpActEvt_ChangeFireMode_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::InpActEvt_ChangeFireMode_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "InpActEvt_ChangeFireMode_K2Node_InputActionEvent_0");

	Params::BP_PlayerController_Script_C_InpActEvt_ChangeFireMode_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.InpActEvt_ADS_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::InpActEvt_ADS_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "InpActEvt_ADS_K2Node_InputActionEvent_1");

	Params::BP_PlayerController_Script_C_InpActEvt_ADS_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.InpActEvt_G_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::InpActEvt_G_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "InpActEvt_G_K2Node_InputKeyEvent_0");

	Params::BP_PlayerController_Script_C_InpActEvt_G_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Reset Periodic Stats Variables
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Reset_Periodic_Stats_Variables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Reset Periodic Stats Variables");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.AttachConsumableToHand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UnEquip                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::AttachConsumableToHand(class UClass* InputPin, bool UnEquip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "AttachConsumableToHand");

	Params::BP_PlayerController_Script_C_AttachConsumableToHand Parms{};

	Parms.InputPin = InputPin;
	Parms.UnEquip = UnEquip;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RemoveObjectiveItems
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::RemoveObjectiveItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RemoveObjectiveItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.GetNewRandomUnusedMapMarkerTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             UnusedTag                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::GetNewRandomUnusedMapMarkerTag(class FName* UnusedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "GetNewRandomUnusedMapMarkerTag");

	Params::BP_PlayerController_Script_C_GetNewRandomUnusedMapMarkerTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UnusedTag != nullptr)
		*UnusedTag = Parms.UnusedTag;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.RegisterMapMarkedActor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             UsedTag                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, class FName* UsedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "RegisterMapMarkedActor");

	Params::BP_PlayerController_Script_C_RegisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (UsedTag != nullptr)
		*UsedTag = Parms.UsedTag;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.UnregisterMapMarkedActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::UnregisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "UnregisterMapMarkedActor");

	Params::BP_PlayerController_Script_C_UnregisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Is Player Ready for Analytics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Is_Client_Ready                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Is_Player_Ready_for_Analytics(bool* Is_Client_Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Is Player Ready for Analytics");

	Params::BP_PlayerController_Script_C_Is_Player_Ready_for_Analytics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Client_Ready != nullptr)
		*Is_Client_Ready = Parms.Is_Client_Ready;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.EarlyClientTravel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeToTravel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::EarlyClientTravel(float TimeToTravel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "EarlyClientTravel");

	Params::BP_PlayerController_Script_C_EarlyClientTravel Parms{};

	Parms.TimeToTravel = TimeToTravel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.MarkPlayerAsTester
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CharacterToMark                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Specified_Color                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::MarkPlayerAsTester(class AActor* CharacterToMark, const struct FLinearColor& Specified_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "MarkPlayerAsTester");

	Params::BP_PlayerController_Script_C_MarkPlayerAsTester Parms{};

	Parms.CharacterToMark = CharacterToMark;
	Parms.Specified_Color = std::move(Specified_Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.VisualizeLoot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FF_Cheat_VisualizeLoot>   Struct                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ShowPillars                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ChangeMaterials                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::VisualizeLoot(const struct FLinearColor& Color, float Duration, TArray<struct FF_Cheat_VisualizeLoot>& Struct, bool ShowPillars, bool ChangeMaterials)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "VisualizeLoot");

	Params::BP_PlayerController_Script_C_VisualizeLoot Parms{};

	Parms.Color = std::move(Color);
	Parms.Duration = Duration;
	Parms.Struct = std::move(Struct);
	Parms.ShowPillars = ShowPillars;
	Parms.ChangeMaterials = ChangeMaterials;

	UObject::ProcessEvent(Func, &Parms);

	Struct = std::move(Parms.Struct);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.GetLootData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      CheatingController                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Range                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShowPillars                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ChangeMaterials                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShowWeapons                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ShowItems                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ListContents                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    IgnoreEmptyStorages                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           FilterByItemClass                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor_out                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration_out                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FF_Cheat_VisualizeLoot>   Structs_out                                            (Parm, OutParm)
// bool                                    ShowPillars_out                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ChangeMaterials_out                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::GetLootData(class AController* CheatingController, float Range, const struct FLinearColor& Color, float Duration, bool ShowPillars, bool ChangeMaterials, bool ShowWeapons, bool ShowItems, bool ListContents, bool IgnoreEmptyStorages, class UClass* FilterByItemClass, struct FLinearColor* LineColor_out, float* Duration_out, TArray<struct FF_Cheat_VisualizeLoot>* Structs_out, bool* ShowPillars_out, bool* ChangeMaterials_out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "GetLootData");

	Params::BP_PlayerController_Script_C_GetLootData Parms{};

	Parms.CheatingController = CheatingController;
	Parms.Range = Range;
	Parms.Color = std::move(Color);
	Parms.Duration = Duration;
	Parms.ShowPillars = ShowPillars;
	Parms.ChangeMaterials = ChangeMaterials;
	Parms.ShowWeapons = ShowWeapons;
	Parms.ShowItems = ShowItems;
	Parms.ListContents = ListContents;
	Parms.IgnoreEmptyStorages = IgnoreEmptyStorages;
	Parms.FilterByItemClass = FilterByItemClass;

	UObject::ProcessEvent(Func, &Parms);

	if (LineColor_out != nullptr)
		*LineColor_out = std::move(Parms.LineColor_out);

	if (Duration_out != nullptr)
		*Duration_out = Parms.Duration_out;

	if (Structs_out != nullptr)
		*Structs_out = std::move(Parms.Structs_out);

	if (ShowPillars_out != nullptr)
		*ShowPillars_out = Parms.ShowPillars_out;

	if (ChangeMaterials_out != nullptr)
		*ChangeMaterials_out = Parms.ChangeMaterials_out;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Save Analytics ID to Player State
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_PlayerController_Script_C::Save_Analytics_ID_to_Player_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Save Analytics ID to Player State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.EncodeMapMarker
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CustomMapMarker               Map_Marker                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FS_CustomMapMarker_Optimized     Map_Marker_Optimized                                   (Parm, OutParm, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::EncodeMapMarker(const struct FS_CustomMapMarker& Map_Marker, struct FS_CustomMapMarker_Optimized* Map_Marker_Optimized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "EncodeMapMarker");

	Params::BP_PlayerController_Script_C_EncodeMapMarker Parms{};

	Parms.Map_Marker = std::move(Map_Marker);

	UObject::ProcessEvent(Func, &Parms);

	if (Map_Marker_Optimized != nullptr)
		*Map_Marker_Optimized = std::move(Parms.Map_Marker_Optimized);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.BPI_RegisterMapMarkedActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             UsedTag                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::BPI_RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* bValid, class FName* UsedTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "BPI_RegisterMapMarkedActor");

	Params::BP_PlayerController_Script_C_BPI_RegisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (UsedTag != nullptr)
		*UsedTag = Parms.UsedTag;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.BPI_UnRegisterMapMarkedActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarkerComponent_C*         MarkerComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::BPI_UnRegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "BPI_UnRegisterMapMarkedActor");

	Params::BP_PlayerController_Script_C_BPI_UnRegisterMapMarkedActor Parms{};

	Parms.MarkerComponent = MarkerComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.StoreMarkerWithDisplayCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Tag                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CustomMapMarker_ContextStorageMarkerContext                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Should_Remove_Map_Marker                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Should_Remove_Compass_Marker                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::StoreMarkerWithDisplayCheck(const class FName& Tag, const struct FS_CustomMapMarker_ContextStorage& MarkerContext, bool* Should_Remove_Map_Marker, bool* Should_Remove_Compass_Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "StoreMarkerWithDisplayCheck");

	Params::BP_PlayerController_Script_C_StoreMarkerWithDisplayCheck Parms{};

	Parms.Tag = Tag;
	Parms.MarkerContext = std::move(MarkerContext);

	UObject::ProcessEvent(Func, &Parms);

	if (Should_Remove_Map_Marker != nullptr)
		*Should_Remove_Map_Marker = Parms.Should_Remove_Map_Marker;

	if (Should_Remove_Compass_Marker != nullptr)
		*Should_Remove_Compass_Marker = Parms.Should_Remove_Compass_Marker;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.GetLastRespawnTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FDateTime                        LastRespawnTime                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::GetLastRespawnTime(bool* Valid, struct FDateTime* LastRespawnTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "GetLastRespawnTime");

	Params::BP_PlayerController_Script_C_GetLastRespawnTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (LastRespawnTime != nullptr)
		*LastRespawnTime = std::move(Parms.LastRespawnTime);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.GetLastMatchID_Info
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LastMatchIDReset                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           MatchID_ToSave                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::GetLastMatchID_Info(bool* Valid, bool* LastMatchIDReset, class FString* MatchID_ToSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "GetLastMatchID_Info");

	Params::BP_PlayerController_Script_C_GetLastMatchID_Info Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;

	if (LastMatchIDReset != nullptr)
		*LastMatchIDReset = Parms.LastMatchIDReset;

	if (MatchID_ToSave != nullptr)
		*MatchID_ToSave = std::move(Parms.MatchID_ToSave);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Get BP_UserInfoComponent
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_UserInfoComponent_C*          UserInfoComponent                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Get_BP_UserInfoComponent(class UBP_UserInfoComponent_C** UserInfoComponent, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Get BP_UserInfoComponent");

	Params::BP_PlayerController_Script_C_Get_BP_UserInfoComponent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UserInfoComponent != nullptr)
		*UserInfoComponent = Parms.UserInfoComponent;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Is Player Blocked
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           Player_Tracking_ID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Is_blocked                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Is_Player_Blocked(const class FString& Player_Tracking_ID, bool* Is_blocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Is Player Blocked");

	Params::BP_PlayerController_Script_C_Is_Player_Blocked Parms{};

	Parms.Player_Tracking_ID = std::move(Player_Tracking_ID);

	UObject::ProcessEvent(Func, &Parms);

	if (Is_blocked != nullptr)
		*Is_blocked = Parms.Is_blocked;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.Is Blocklist full
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Is_Full                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_PlayerController_Script_C::Is_Blocklist_full(bool* Is_Full)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "Is Blocklist full");

	Params::BP_PlayerController_Script_C_Is_Blocklist_full Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Full != nullptr)
		*Is_Full = Parms.Is_Full;
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.BlockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           BlockedPlayerTrackingID                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::BlockPlayer(const class FString& BlockedPlayerTrackingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "BlockPlayer");

	Params::BP_PlayerController_Script_C_BlockPlayer Parms{};

	Parms.BlockedPlayerTrackingID = std::move(BlockedPlayerTrackingID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_PlayerController_Script.BP_PlayerController_Script_C.UnblockPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Unblocked_Player_Tracking_ID                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_PlayerController_Script_C::UnblockPlayer(const class FString& Unblocked_Player_Tracking_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PlayerController_Script_C", "UnblockPlayer");

	Params::BP_PlayerController_Script_C_UnblockPlayer Parms{};

	Parms.Unblocked_Player_Tracking_ID = std::move(Unblocked_Player_Tracking_ID);

	UObject::ProcessEvent(Func, &Parms);
}

}

