#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TutorialHint_10

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_TutorialHint_10.BP_TutorialHint_10_C.ExecuteUbergraph_BP_TutorialHint_10
// 0x0010 (0x0010 - 0x0000)
struct BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameWidget*                           K2Node_CustomEvent_FlameWidget;                    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10) == 0x000008, "Wrong alignment on BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10");
static_assert(sizeof(BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10) == 0x000010, "Wrong size on BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10");
static_assert(offsetof(BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10, EntryPoint) == 0x000000, "Member 'BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10, K2Node_CustomEvent_FlameWidget) == 0x000008, "Member 'BP_TutorialHint_10_C_ExecuteUbergraph_BP_TutorialHint_10::K2Node_CustomEvent_FlameWidget' has a wrong offset!");

// Function BP_TutorialHint_10.BP_TutorialHint_10_C.OnHintWidgetClosed
// 0x0008 (0x0008 - 0x0000)
struct BP_TutorialHint_10_C_OnHintWidgetClosed final
{
public:
	class UFlameWidget*                           FlameWidget;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialHint_10_C_OnHintWidgetClosed) == 0x000008, "Wrong alignment on BP_TutorialHint_10_C_OnHintWidgetClosed");
static_assert(sizeof(BP_TutorialHint_10_C_OnHintWidgetClosed) == 0x000008, "Wrong size on BP_TutorialHint_10_C_OnHintWidgetClosed");
static_assert(offsetof(BP_TutorialHint_10_C_OnHintWidgetClosed, FlameWidget) == 0x000000, "Member 'BP_TutorialHint_10_C_OnHintWidgetClosed::FlameWidget' has a wrong offset!");

// Function BP_TutorialHint_10.BP_TutorialHint_10_C.ShowHint
// 0x0030 (0x0030 - 0x0000)
struct BP_TutorialHint_10_C_ShowHint final
{
public:
	class UUI_TutorialHint_10_C*                  CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UFlameWidget* FlameWidget)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0020(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TutorialHint_10_C_ShowHint) == 0x000008, "Wrong alignment on BP_TutorialHint_10_C_ShowHint");
static_assert(sizeof(BP_TutorialHint_10_C_ShowHint) == 0x000030, "Wrong size on BP_TutorialHint_10_C_ShowHint");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_Create_ReturnValue) == 0x000000, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_TutorialHint_10_C_ShowHint::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_Less_IntInt_ReturnValue) == 0x000018, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_K2_SetTimer_ReturnValue) == 0x000020, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TutorialHint_10_C_ShowHint, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_TutorialHint_10_C_ShowHint::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_TutorialHint_10.BP_TutorialHint_10_C.CloseHint
// 0x0001 (0x0001 - 0x0000)
struct BP_TutorialHint_10_C_CloseHint final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_TutorialHint_10_C_CloseHint) == 0x000001, "Wrong alignment on BP_TutorialHint_10_C_CloseHint");
static_assert(sizeof(BP_TutorialHint_10_C_CloseHint) == 0x000001, "Wrong size on BP_TutorialHint_10_C_CloseHint");
static_assert(offsetof(BP_TutorialHint_10_C_CloseHint, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_TutorialHint_10_C_CloseHint::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

