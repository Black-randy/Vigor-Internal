#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattlePassSystem

#include "Basic.hpp"

#include "BP_BattlePassSystem_classes.hpp"
#include "BP_BattlePassSystem_parameters.hpp"


namespace SDK
{

// Function BP_BattlePassSystem.BP_BattlePassSystem_C.State Changed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BattlePassSystem_State                New_State                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::State_Changed__DelegateSignature(E_BattlePassSystem_State New_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "State Changed__DelegateSignature");

	Params::BP_BattlePassSystem_C_State_Changed__DelegateSignature Parms{};

	Parms.New_State = New_State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Level Purchase Result__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Level_Purchase_Result__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Level Purchase Result__DelegateSignature");

	Params::BP_BattlePassSystem_C_Level_Purchase_Result__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Rewards Claim Result__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Rewards_Claim_Result__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Rewards Claim Result__DelegateSignature");

	Params::BP_BattlePassSystem_C_Rewards_Claim_Result__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.System Ready__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::System_Ready__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "System Ready__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Premium Purchase Result__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Premium_Purchase_Result__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Premium Purchase Result__DelegateSignature");

	Params::BP_BattlePassSystem_C_Premium_Purchase_Result__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Player Stats Changed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Player_Stats_Changed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Player Stats Changed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.LegacySeasonSelected__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::LegacySeasonSelected__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "LegacySeasonSelected__DelegateSignature");

	Params::BP_BattlePassSystem_C_LegacySeasonSelected__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.ExecuteUbergraph_BP_BattlePassSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::ExecuteUbergraph_BP_BattlePassSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "ExecuteUbergraph_BP_BattlePassSystem");

	Params::BP_BattlePassSystem_C_ExecuteUbergraph_BP_BattlePassSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.EventSelectLegacySeasonFinished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_BattlePassSystem_C::EventSelectLegacySeasonFinished(const struct FCloudRequestResult& RequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "EventSelectLegacySeasonFinished");

	Params::BP_BattlePassSystem_C_EventSelectLegacySeasonFinished Parms{};

	Parms.RequestResult = std::move(RequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.RequestLegacySeasonSelection
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::RequestLegacySeasonSelection(class FName Season)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "RequestLegacySeasonSelection");

	Params::BP_BattlePassSystem_C_RequestLegacySeasonSelection Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Level Entered
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Level_Entered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Level Entered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Ready to End Season
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Ready_to_End_Season()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Ready to End Season");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Ready to Start Season
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Ready_to_Start_Season()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Ready to Start Season");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.OnGameStorePurchase
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameStorePurchaseType                  PurchaseType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUniqueNetIdRepl                 InUserId                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// int32                                   PurchaseRequestId                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameStoreProductId              RequestedProductId                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudRequestResult              Result                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameStorePurchaseResult         PurchaseResult                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    PurchaseListRefreshed                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::OnGameStorePurchase(EGameStorePurchaseType PurchaseType, const struct FUniqueNetIdRepl& InUserId, const int32 PurchaseRequestId, const struct FGameStoreProductId& RequestedProductId, const struct FCloudRequestResult& Result, const struct FGameStorePurchaseResult& PurchaseResult, const bool PurchaseListRefreshed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "OnGameStorePurchase");

	Params::BP_BattlePassSystem_C_OnGameStorePurchase Parms{};

	Parms.PurchaseType = PurchaseType;
	Parms.InUserId = std::move(InUserId);
	Parms.PurchaseRequestId = PurchaseRequestId;
	Parms.RequestedProductId = std::move(RequestedProductId);
	Parms.Result = std::move(Result);
	Parms.PurchaseResult = std::move(PurchaseResult);
	Parms.PurchaseListRefreshed = PurchaseListRefreshed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Experience Awarded
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudBattlePassExperienceEvent  Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_BattlePassSystem_C::Experience_Awarded(class AHumanPlayerController* Player, const struct FCloudBattlePassExperienceEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Experience Awarded");

	Params::BP_BattlePassSystem_C_Experience_Awarded Parms{};

	Parms.Player = Player;
	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Request Premium Battle Pass Purchase
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PremiumBattlePassProductID                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Request_Premium_Battle_Pass_Purchase(class FName Season, const class FString& PremiumBattlePassProductID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Request Premium Battle Pass Purchase");

	Params::BP_BattlePassSystem_C_Request_Premium_Battle_Pass_Purchase Parms{};

	Parms.Season = Season;
	Parms.PremiumBattlePassProductID = std::move(PremiumBattlePassProductID);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Request Rewards Claim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLegacy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Request_Rewards_Claim(bool IsLegacy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Request Rewards Claim");

	Params::BP_BattlePassSystem_C_Request_Rewards_Claim Parms{};

	Parms.IsLegacy = IsLegacy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Current Season Ended
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Current_Season_Ended()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Current Season Ended");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.New Season Started
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::New_Season_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "New Season Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Request Level Purchase
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Request_Level_Purchase(class FName SeasonName, int32 Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Request Level Purchase");

	Params::BP_BattlePassSystem_C_Request_Level_Purchase Parms{};

	Parms.SeasonName = SeasonName;
	Parms.Levels = Levels;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Tick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Tick");

	Params::BP_BattlePassSystem_C_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Reload Local Cache
// (BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Reload_Local_Cache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Reload Local Cache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.All Battle Pass Seasons State Finished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBattlePassSeasonsState     Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_BattlePassSystem_C::All_Battle_Pass_Seasons_State_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassSeasonsState& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "All Battle Pass Seasons State Finished");

	Params::BP_BattlePassSystem_C_All_Battle_Pass_Seasons_State_Finished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Purchase Battle Pass Level Finished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBattlePassLevelPurchase    Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_BattlePassSystem_C::Purchase_Battle_Pass_Level_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassLevelPurchase& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Purchase Battle Pass Level Finished");

	Params::BP_BattlePassSystem_C_Purchase_Battle_Pass_Level_Finished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Claim Battle Pass Rewards Finished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBattlePassRewardsClaim     Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_BattlePassSystem_C::Claim_Battle_Pass_Rewards_Finished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassRewardsClaim& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Claim Battle Pass Rewards Finished");

	Params::BP_BattlePassSystem_C_Claim_Battle_Pass_Rewards_Finished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.BlueprintDeInit
// (Event, Public, BlueprintEvent)

void UBP_BattlePassSystem_C::BlueprintDeInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "BlueprintDeInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.BlueprintInit
// (Event, Public, BlueprintEvent)

void UBP_BattlePassSystem_C::BlueprintInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "BlueprintInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Name
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BattlePassSeasonType                  SeasonType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Active_Season_Name                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Season_Name(E_BattlePassSeasonType SeasonType, class FName* Active_Season_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Name");

	Params::BP_BattlePassSystem_C_Get_Season_Name Parms{};

	Parms.SeasonType = SeasonType;

	UObject::ProcessEvent(Func, &Parms);

	if (Active_Season_Name != nullptr)
		*Active_Season_Name = Parms.Active_Season_Name;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Is Season Active
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_BattlePassSystem_C::Is_Season_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Is Season Active");

	Params::BP_BattlePassSystem_C_Is_Season_Active Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Process Seasons Data
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudBattlePassSeasonsState     CloudBattlePassSeasonsState                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Process_Seasons_Data(const struct FCloudBattlePassSeasonsState& CloudBattlePassSeasonsState, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Process Seasons Data");

	Params::BP_BattlePassSystem_C_Process_Seasons_Data Parms{};

	Parms.CloudBattlePassSeasonsState = std::move(CloudBattlePassSeasonsState);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Level
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Level(int32* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Level");

	Params::BP_BattlePassSystem_C_Get_Level Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Level != nullptr)
		*Level = Parms.Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Convert Total XP to Level
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Total_XP                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XP_within_Level                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   XP_for_Next_Level                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Convert_Total_XP_to_Level(class FName Season, int32 Total_XP, int32* Level, int32* XP_within_Level, int32* XP_for_Next_Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Convert Total XP to Level");

	Params::BP_BattlePassSystem_C_Convert_Total_XP_to_Level Parms{};

	Parms.Season = Season;
	Parms.Total_XP = Total_XP;

	UObject::ProcessEvent(Func, &Parms);

	if (Level != nullptr)
		*Level = Parms.Level;

	if (XP_within_Level != nullptr)
		*XP_within_Level = Parms.XP_within_Level;

	if (XP_for_Next_Level != nullptr)
		*XP_for_Next_Level = Parms.XP_for_Next_Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Unclaimed Rewards
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLegacy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class FName>                     Seasons                                                (Parm, OutParm)
// TArray<struct FS_BattlePassLevelRewardFull>Free_Rewards                                           (Parm, OutParm)
// TArray<struct FS_BattlePassLevelRewardFull>Premium_Rewards                                        (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Unclaimed_Rewards(bool IsLegacy, TArray<class FName>* Seasons, TArray<struct FS_BattlePassLevelRewardFull>* Free_Rewards, TArray<struct FS_BattlePassLevelRewardFull>* Premium_Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Unclaimed Rewards");

	Params::BP_BattlePassSystem_C_Get_Unclaimed_Rewards Parms{};

	Parms.IsLegacy = IsLegacy;

	UObject::ProcessEvent(Func, &Parms);

	if (Seasons != nullptr)
		*Seasons = std::move(Parms.Seasons);

	if (Free_Rewards != nullptr)
		*Free_Rewards = std::move(Parms.Free_Rewards);

	if (Premium_Rewards != nullptr)
		*Premium_Rewards = std::move(Parms.Premium_Rewards);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.IsLegacySeasonInProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_BattlePassSystem_C::IsLegacySeasonInProgress(class FName Season)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "IsLegacySeasonInProgress");

	Params::BP_BattlePassSystem_C_IsLegacySeasonInProgress Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Compile Rewards in Level Range
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Min_Level                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Level                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Premium                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FS_BattlePassLevelRewardFull>Rewards                                                (Parm, OutParm)

void UBP_BattlePassSystem_C::Compile_Rewards_in_Level_Range(class FName Season_Name, int32 Min_Level, int32 Max_Level, bool Premium, TArray<struct FS_BattlePassLevelRewardFull>* Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Compile Rewards in Level Range");

	Params::BP_BattlePassSystem_C_Compile_Rewards_in_Level_Range Parms{};

	Parms.Season_Name = Season_Name;
	Parms.Min_Level = Min_Level;
	Parms.Max_Level = Max_Level;
	Parms.Premium = Premium;

	UObject::ProcessEvent(Func, &Parms);

	if (Rewards != nullptr)
		*Rewards = std::move(Parms.Rewards);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Number
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Number                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Number(int32* Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Number");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Number Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Number != nullptr)
		*Number = Parms.Number;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Title
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Title                                                  (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Season_Title(class FName Season, class FText* Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Title");

	Params::BP_BattlePassSystem_C_Get_Season_Title Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Title != nullptr)
		*Title = std::move(Parms.Title);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Description
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Description                                            (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Current_Season_Description(class FText* Description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Description");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Description Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Description != nullptr)
		*Description = std::move(Parms.Description);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Image
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UTexture2D*                       Image                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Image(class UTexture2D** Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Image");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Image Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Image != nullptr)
		*Image = Parms.Image;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Start Timestamp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Season_Start_Time                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Start_Timestamp(struct FDateTime* Season_Start_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Start Timestamp");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Start_Timestamp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Season_Start_Time != nullptr)
		*Season_Start_Time = std::move(Parms.Season_Start_Time);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season End Timestamp
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Season_End_Time                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_End_Timestamp(struct FDateTime* Season_End_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season End Timestamp");

	Params::BP_BattlePassSystem_C_Get_Current_Season_End_Timestamp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Season_End_Time != nullptr)
		*Season_End_Time = std::move(Parms.Season_End_Time);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Tier1 Premium Product ID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           Premium_Battle_Pass_Product_ID                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Season_Tier1_Premium_Product_ID(class FName Season, class FString* Premium_Battle_Pass_Product_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Tier1 Premium Product ID");

	Params::BP_BattlePassSystem_C_Get_Season_Tier1_Premium_Product_ID Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Premium_Battle_Pass_Product_ID != nullptr)
		*Premium_Battle_Pass_Product_ID = std::move(Parms.Premium_Battle_Pass_Product_ID);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Premium Status
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Premium_Active                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Get_Premium_Status(class FName SeasonName, bool* Premium_Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Premium Status");

	Params::BP_BattlePassSystem_C_Get_Premium_Status Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	if (Premium_Active != nullptr)
		*Premium_Active = Parms.Premium_Active;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get State
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_BattlePassSystem_State                State_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_State(E_BattlePassSystem_State* State_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get State");

	Params::BP_BattlePassSystem_C_Get_State Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State_0 != nullptr)
		*State_0 = Parms.State_0;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Level Purchase Price
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level_Purchase_Price                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Level_Purchase_Price(class FName SeasonName, int32* Level_Purchase_Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Level Purchase Price");

	Params::BP_BattlePassSystem_C_Get_Level_Purchase_Price Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	if (Level_Purchase_Price != nullptr)
		*Level_Purchase_Price = Parms.Level_Purchase_Price;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Process Level Purchase
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudBattlePassLevelPurchase    CloudBattlePassLevelPurchase                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Process_Level_Purchase(const struct FCloudBattlePassLevelPurchase& CloudBattlePassLevelPurchase, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Process Level Purchase");

	Params::BP_BattlePassSystem_C_Process_Level_Purchase Parms{};

	Parms.CloudBattlePassLevelPurchase = std::move(CloudBattlePassLevelPurchase);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Process Rewards Claim
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudBattlePassRewardsClaim     CloudBattlePassRewardsClaim                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Process_Rewards_Claim(const struct FCloudBattlePassRewardsClaim& CloudBattlePassRewardsClaim, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Process Rewards Claim");

	Params::BP_BattlePassSystem_C_Process_Rewards_Claim Parms{};

	Parms.CloudBattlePassRewardsClaim = std::move(CloudBattlePassRewardsClaim);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Previous Season
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Previous_Season_Name                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Previous_Season_Order                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Previous_Season(class FName* Previous_Season_Name, int32* Previous_Season_Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Previous Season");

	Params::BP_BattlePassSystem_C_Get_Previous_Season Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Previous_Season_Name != nullptr)
		*Previous_Season_Name = Parms.Previous_Season_Name;

	if (Previous_Season_Order != nullptr)
		*Previous_Season_Order = Parms.Previous_Season_Order;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetLevelsPurchasePrice
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level_Purchase_Price                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::GetLevelsPurchasePrice(class FName Season, int32 Levels, int32* Level_Purchase_Price)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetLevelsPurchasePrice");

	Params::BP_BattlePassSystem_C_GetLevelsPurchasePrice Parms{};

	Parms.Season = Season;
	Parms.Levels = Levels;

	UObject::ProcessEvent(Func, &Parms);

	if (Level_Purchase_Price != nullptr)
		*Level_Purchase_Price = Parms.Level_Purchase_Price;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetUpdatedLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Levels                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShouldSubtractPlayerLevel_                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   UpdatedLevel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::GetUpdatedLevel(class FName Season, int32 Levels, bool ShouldSubtractPlayerLevel_, int32* UpdatedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetUpdatedLevel");

	Params::BP_BattlePassSystem_C_GetUpdatedLevel Parms{};

	Parms.Season = Season;
	Parms.Levels = Levels;
	Parms.ShouldSubtractPlayerLevel_ = ShouldSubtractPlayerLevel_;

	UObject::ProcessEvent(Func, &Parms);

	if (UpdatedLevel != nullptr)
		*UpdatedLevel = Parms.UpdatedLevel;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Level in Season
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Level_in_Season(class FName Season, int32* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Level in Season");

	Params::BP_BattlePassSystem_C_Get_Level_in_Season Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Level != nullptr)
		*Level = Parms.Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Print Status
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::Print_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Print Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Number
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Number                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Season_Number(class FName Season, int32* Number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Number");

	Params::BP_BattlePassSystem_C_Get_Season_Number Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Number != nullptr)
		*Number = Parms.Number;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get XP Within Level
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_XP_Within_Level(class FName Season, int32* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get XP Within Level");

	Params::BP_BattlePassSystem_C_Get_XP_Within_Level Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Level != nullptr)
		*Level = Parms.Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get XP For Next Level
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_XP_For_Next_Level(class FName Season, int32* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get XP For Next Level");

	Params::BP_BattlePassSystem_C_Get_XP_For_Next_Level Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Level != nullptr)
		*Level = Parms.Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Process Experience Awarded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudBattlePassExperienceEvent  Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Player_Stats_Changed_0                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Process_Experience_Awarded(const struct FCloudBattlePassExperienceEvent& Event, bool* Success, bool* Player_Stats_Changed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Process Experience Awarded");

	Params::BP_BattlePassSystem_C_Process_Experience_Awarded Parms{};

	Parms.Event = std::move(Event);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Player_Stats_Changed_0 != nullptr)
		*Player_Stats_Changed_0 = Parms.Player_Stats_Changed_0;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Order
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Order                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Order(int32* Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Order");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Order Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Order != nullptr)
		*Order = Parms.Order;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Find Levels to Claim
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Seasons                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FCloudBattlePassSeasonClaim>Claims                                                 (ConstParm, Parm, OutParm)

void UBP_BattlePassSystem_C::Find_Levels_to_Claim(TArray<class FName>& Seasons, const TArray<struct FCloudBattlePassSeasonClaim>* Claims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Find Levels to Claim");

	Params::BP_BattlePassSystem_C_Find_Levels_to_Claim Parms{};

	Parms.Seasons = std::move(Seasons);

	UObject::ProcessEvent(Func, &Parms);

	Seasons = std::move(Parms.Seasons);

	if (Claims != nullptr)
		*Claims = std::move(Parms.Claims);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Max Level
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Max_Level                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Season_Max_Level(class FName SeasonName, int32* Max_Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Max Level");

	Params::BP_BattlePassSystem_C_Get_Season_Max_Level Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	if (Max_Level != nullptr)
		*Max_Level = Parms.Max_Level;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Process Premium Purchase
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PremiumBattlePassProductID                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::Process_Premium_Purchase(const class FString& PremiumBattlePassProductID, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Process Premium Purchase");

	Params::BP_BattlePassSystem_C_Process_Premium_Purchase Parms{};

	Parms.PremiumBattlePassProductID = std::move(PremiumBattlePassProductID);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get XP Booster
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   XP_Booster                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_XP_Booster(int32* XP_Booster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get XP Booster");

	Params::BP_BattlePassSystem_C_Get_XP_Booster Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (XP_Booster != nullptr)
		*XP_Booster = Parms.XP_Booster;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Premium Product with Lowest Price
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGameStoreProductInfo            PremiumProduct                                         (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Season_Premium_Product_with_Lowest_Price(class FName Season, struct FGameStoreProductInfo* PremiumProduct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Premium Product with Lowest Price");

	Params::BP_BattlePassSystem_C_Get_Season_Premium_Product_with_Lowest_Price Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (PremiumProduct != nullptr)
		*PremiumProduct = std::move(Parms.PremiumProduct);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Locked Rewards
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_BattlePassLevelRewardFull>Locked_Rewards                                         (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Locked_Rewards(TArray<struct FS_BattlePassLevelRewardFull>* Locked_Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Locked Rewards");

	Params::BP_BattlePassSystem_C_Get_Locked_Rewards Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Locked_Rewards != nullptr)
		*Locked_Rewards = std::move(Parms.Locked_Rewards);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Total XP
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TotalXP                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Total_XP(class FName SeasonName, int32* TotalXP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Total XP");

	Params::BP_BattlePassSystem_C_Get_Total_XP Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	if (TotalXP != nullptr)
		*TotalXP = Parms.TotalXP;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Unclaimed Levels in Season
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Free_Levels                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Premium_Levels                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Unclaimed_Levels_in_Season(class FName Season, int32* Free_Levels, int32* Premium_Levels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Unclaimed Levels in Season");

	Params::BP_BattlePassSystem_C_Get_Unclaimed_Levels_in_Season Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (Free_Levels != nullptr)
		*Free_Levels = Parms.Free_Levels;

	if (Premium_Levels != nullptr)
		*Premium_Levels = Parms.Premium_Levels;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.ShelterOnboardingSequenceFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattlePassSystem_C::ShelterOnboardingSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "ShelterOnboardingSequenceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get newest legacy season
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Newest_legacy_season                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Newest_legacy_season_number                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_newest_legacy_season(class FName* Newest_legacy_season, int32* Newest_legacy_season_number)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get newest legacy season");

	Params::BP_BattlePassSystem_C_Get_newest_legacy_season Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Newest_legacy_season != nullptr)
		*Newest_legacy_season = Parms.Newest_legacy_season;

	if (Newest_legacy_season_number != nullptr)
		*Newest_legacy_season_number = Parms.Newest_legacy_season_number;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetSeasonName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattlePassSeasonType                   SeasonType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName UBP_BattlePassSystem_C::GetSeasonName(EBattlePassSeasonType SeasonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetSeasonName");

	Params::BP_BattlePassSystem_C_GetSeasonName Parms{};

	Parms.SeasonType = SeasonType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetLevelInSeason
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_BattlePassSystem_C::GetLevelInSeason(class FName SeasonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetLevelInSeason");

	Params::BP_BattlePassSystem_C_GetLevelInSeason Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetPremiumStatus
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_BattlePassSystem_C::GetPremiumStatus(class FName SeasonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetPremiumStatus");

	Params::BP_BattlePassSystem_C_GetPremiumStatus Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetTotalXP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_BattlePassSystem_C::GetTotalXP(class FName SeasonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetTotalXP");

	Params::BP_BattlePassSystem_C_GetTotalXP Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetXPBooster
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_BattlePassSystem_C::GetXPBooster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetXPBooster");

	Params::BP_BattlePassSystem_C_GetXPBooster Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetXPWithinLevel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SeasonName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_BattlePassSystem_C::GetXPWithinLevel(class FName SeasonName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetXPWithinLevel");

	Params::BP_BattlePassSystem_C_GetXPWithinLevel Parms{};

	Parms.SeasonName = SeasonName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.ParseCodeReward_BP_Structure
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_BattlePassLevelRewardFull>In_BP_structure                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<struct FBattlePassLevelRewardFull>OutCodeStructure                                       (Parm, OutParm)

void UBP_BattlePassSystem_C::ParseCodeReward_BP_Structure(TArray<struct FS_BattlePassLevelRewardFull>& In_BP_structure, TArray<struct FBattlePassLevelRewardFull>* OutCodeStructure)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "ParseCodeReward_BP_Structure");

	Params::BP_BattlePassSystem_C_ParseCodeReward_BP_Structure Parms{};

	Parms.In_BP_structure = std::move(In_BP_structure);

	UObject::ProcessEvent(Func, &Parms);

	In_BP_structure = std::move(Parms.In_BP_structure);

	if (OutCodeStructure != nullptr)
		*OutCodeStructure = std::move(Parms.OutCodeStructure);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetUnclaimedRewardsCode
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLegacy                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FBattlePassLevelRewardFull>FreeRewards                                            (Parm, OutParm)
// TArray<struct FBattlePassLevelRewardFull>PremiumRewards                                         (Parm, OutParm)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class FName> UBP_BattlePassSystem_C::GetUnclaimedRewardsCode(bool IsLegacy, TArray<struct FBattlePassLevelRewardFull>* FreeRewards, TArray<struct FBattlePassLevelRewardFull>* PremiumRewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetUnclaimedRewardsCode");

	Params::BP_BattlePassSystem_C_GetUnclaimedRewardsCode Parms{};

	Parms.IsLegacy = IsLegacy;

	UObject::ProcessEvent(Func, &Parms);

	if (FreeRewards != nullptr)
		*FreeRewards = std::move(Parms.FreeRewards);

	if (PremiumRewards != nullptr)
		*PremiumRewards = std::move(Parms.PremiumRewards);

	return Parms.ReturnValue;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.IsLegacySeason
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsLegacy                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::IsLegacySeason(class FName Season, bool* IsLegacy) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "IsLegacySeason");

	Params::BP_BattlePassSystem_C_IsLegacySeason Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (IsLegacy != nullptr)
		*IsLegacy = Parms.IsLegacy;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Season Premium Products
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             Season                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AreProductsValid                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FBattlePassSeasonProducts>PremiumBattlePassProducts                              (Parm, OutParm)

void UBP_BattlePassSystem_C::Get_Season_Premium_Products(class FName Season, bool* AreProductsValid, TArray<struct FBattlePassSeasonProducts>* PremiumBattlePassProducts) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Season Premium Products");

	Params::BP_BattlePassSystem_C_Get_Season_Premium_Products Parms{};

	Parms.Season = Season;

	UObject::ProcessEvent(Func, &Parms);

	if (AreProductsValid != nullptr)
		*AreProductsValid = Parms.AreProductsValid;

	if (PremiumBattlePassProducts != nullptr)
		*PremiumBattlePassProducts = std::move(Parms.PremiumBattlePassProducts);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Level Token
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UClass*                           LevelToken                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Level_Token(class UClass** LevelToken) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Level Token");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Level_Token Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelToken != nullptr)
		*LevelToken = Parms.LevelToken;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.Get Current Season Premium Token
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UClass*                           PremiumToken                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::Get_Current_Season_Premium_Token(class UClass** PremiumToken) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "Get Current Season Premium Token");

	Params::BP_BattlePassSystem_C_Get_Current_Season_Premium_Token Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PremiumToken != nullptr)
		*PremiumToken = Parms.PremiumToken;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetFinalPremiumPrice
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   Price                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DiscountPercent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FinalPrice                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattlePassSystem_C::GetFinalPremiumPrice(float Price, float DiscountPercent, int32* FinalPrice) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetFinalPremiumPrice");

	Params::BP_BattlePassSystem_C_GetFinalPremiumPrice Parms{};

	Parms.Price = Price;
	Parms.DiscountPercent = DiscountPercent;

	UObject::ProcessEvent(Func, &Parms);

	if (FinalPrice != nullptr)
		*FinalPrice = Parms.FinalPrice;
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.GetAvailableLegacySeasons
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     AvailableLegacySeasons                                 (Parm, OutParm)

void UBP_BattlePassSystem_C::GetAvailableLegacySeasons(TArray<class FName>* AvailableLegacySeasons) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "GetAvailableLegacySeasons");

	Params::BP_BattlePassSystem_C_GetAvailableLegacySeasons Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AvailableLegacySeasons != nullptr)
		*AvailableLegacySeasons = std::move(Parms.AvailableLegacySeasons);
}


// Function BP_BattlePassSystem.BP_BattlePassSystem_C.IsDoubleXpWeekendActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    IsDoubleXpWeekendActive_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BattlePassSystem_C::IsDoubleXpWeekendActive(bool* IsDoubleXpWeekendActive_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattlePassSystem_C", "IsDoubleXpWeekendActive");

	Params::BP_BattlePassSystem_C_IsDoubleXpWeekendActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDoubleXpWeekendActive_0 != nullptr)
		*IsDoubleXpWeekendActive_0 = Parms.IsDoubleXpWeekendActive_0;
}

}

