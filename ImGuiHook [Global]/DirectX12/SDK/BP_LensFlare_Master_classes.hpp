#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LensFlare_Master

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LensFlare_Master.BP_LensFlare_Master_C
// 0x0088 (0x02A8 - 0x0220)
class ABP_LensFlare_Master_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   LensFlare;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   FlareCone;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LightSource;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           BaseColor;                                         // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VAlpha;                                            // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VScaleTop;                                         // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VScaleBottomOut;                                   // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         VScaleBottomIn;                                    // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightSourceIntensity;                              // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareIntensity;                                    // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FlareTexture;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareScreenSize;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFlareCone;                                      // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlareFadeOutTime;                                  // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFadeInTime;                                   // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFlareIntensityScale;                        // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareVisibilityDelay;                              // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FlareMaterial;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFadeOutTimeInv;                               // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FlareFadeInTimeInv;                                // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDrawDistance;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LensFlare_Master(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void SetupLightSource();
	void SetupFlare();
	void SetupFlareCone();
	void SetupMaxDrawDistance();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LensFlare_Master_C">();
	}
	static class ABP_LensFlare_Master_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LensFlare_Master_C>();
	}
};
static_assert(alignof(ABP_LensFlare_Master_C) == 0x000008, "Wrong alignment on ABP_LensFlare_Master_C");
static_assert(sizeof(ABP_LensFlare_Master_C) == 0x0002A8, "Wrong size on ABP_LensFlare_Master_C");
static_assert(offsetof(ABP_LensFlare_Master_C, UberGraphFrame) == 0x000220, "Member 'ABP_LensFlare_Master_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, LensFlare) == 0x000228, "Member 'ABP_LensFlare_Master_C::LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareCone) == 0x000230, "Member 'ABP_LensFlare_Master_C::FlareCone' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, LightSource) == 0x000238, "Member 'ABP_LensFlare_Master_C::LightSource' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, Scene) == 0x000240, "Member 'ABP_LensFlare_Master_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, BaseColor) == 0x000248, "Member 'ABP_LensFlare_Master_C::BaseColor' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, VAlpha) == 0x000258, "Member 'ABP_LensFlare_Master_C::VAlpha' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, VScaleTop) == 0x00025C, "Member 'ABP_LensFlare_Master_C::VScaleTop' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, VScaleBottomOut) == 0x000260, "Member 'ABP_LensFlare_Master_C::VScaleBottomOut' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, VScaleBottomIn) == 0x000264, "Member 'ABP_LensFlare_Master_C::VScaleBottomIn' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, LightSourceIntensity) == 0x000268, "Member 'ABP_LensFlare_Master_C::LightSourceIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareIntensity) == 0x00026C, "Member 'ABP_LensFlare_Master_C::FlareIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareTexture) == 0x000270, "Member 'ABP_LensFlare_Master_C::FlareTexture' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareScreenSize) == 0x000278, "Member 'ABP_LensFlare_Master_C::FlareScreenSize' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, UseFlareCone) == 0x00027C, "Member 'ABP_LensFlare_Master_C::UseFlareCone' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareFadeOutTime) == 0x000280, "Member 'ABP_LensFlare_Master_C::FlareFadeOutTime' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareFadeInTime) == 0x000284, "Member 'ABP_LensFlare_Master_C::FlareFadeInTime' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, CurrentFlareIntensityScale) == 0x000288, "Member 'ABP_LensFlare_Master_C::CurrentFlareIntensityScale' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareVisibilityDelay) == 0x00028C, "Member 'ABP_LensFlare_Master_C::FlareVisibilityDelay' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareMaterial) == 0x000290, "Member 'ABP_LensFlare_Master_C::FlareMaterial' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareFadeOutTimeInv) == 0x000298, "Member 'ABP_LensFlare_Master_C::FlareFadeOutTimeInv' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, FlareFadeInTimeInv) == 0x00029C, "Member 'ABP_LensFlare_Master_C::FlareFadeInTimeInv' has a wrong offset!");
static_assert(offsetof(ABP_LensFlare_Master_C, MaxDrawDistance) == 0x0002A0, "Member 'ABP_LensFlare_Master_C::MaxDrawDistance' has a wrong offset!");

}

