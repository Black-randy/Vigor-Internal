#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShootingChallenges_GMComponent

#include "Basic.hpp"

#include "E_ShootingChallengeResult_structs.hpp"
#include "S_ShootingChallenge_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Flame_structs.hpp"
#include "S_SRChallenge_Properties_structs.hpp"


namespace SDK::Params
{

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengesLoaded__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature final
{
public:
	class AHumanPlayerController*                 CurrentPlayer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature) == 0x000010, "Wrong size on BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature, CurrentPlayer) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature, Success) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_ChallengesLoaded__DelegateSignature::Success' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ChallengesSaved__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OpenResultUI_0;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevHighScore;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature) == 0x000004, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature, Success) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature::Success' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature, OpenResultUI_0) == 0x000001, "Member 'BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature::OpenResultUI_0' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature, PrevHighScore) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_ChallengesSaved__DelegateSignature::PrevHighScore' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ExecuteUbergraph_BP_ShootingChallenges_GMComponent
// 0x0738 (0x0738 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetFlameController_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const class FString& SlotName, int32 UserIndex)> K2Node_CreateDelegate_OutputDelegate;              // 0x0014(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_SlotName_1;                     // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_UserIndex_1;                    // 0x0038(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_CustomEvent_SlotName;                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_UserIndex;                      // 0x0050(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const class FString& SlotName, int32 UserIndex)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0054(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class USaveGame*                              K2Node_CustomEvent_SaveGame_1;                     // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USaveGame* SaveGame)>    K2Node_CreateDelegate_OutputDelegate_2;            // 0x0080(0x0010)(ZeroConstructor, NoDestructor)
	class USaveGame*                              K2Node_CustomEvent_SaveGame;                       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USaveGame* SaveGame)>    K2Node_CreateDelegate_OutputDelegate_3;            // 0x0098(0x0010)(ZeroConstructor, NoDestructor)
	class USaveGame*                              Temp_object_Variable;                              // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_HighScore_Save_Challenges_C*        K2Node_DynamicCast_AsBP_High_Score_Save_Challenges; // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ShootingChallenge                   K2Node_CustomEvent_ActiveChallenge;                // 0x00D8(0x0090)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Restart;                        // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16B[0x5];                                      // 0x016B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Fade_C*                             CallFunc_Create_ReturnValue;                       // 0x0170(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AWeapon*                                K2Node_DynamicCast_AsWeapon;                       // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_182[0x6];                                      // 0x0182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0188(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01D8(0x0018)()
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Fade_C*                             CallFunc_Create_ReturnValue_1;                     // 0x01F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0202(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_203[0x1];                                      // 0x0203(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0204(0x0010)(ZeroConstructor, NoDestructor)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_5;            // 0x0214(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0228(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0230(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SRChallenge_HUD_C*                  CallFunc_Create_ReturnValue_2;                     // 0x0250(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_Countdown_C*            CallFunc_Create_ReturnValue_3;                     // 0x0258(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHumanPlayerController*                 K2Node_CustomEvent_CurrentPlayer_1;                // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0268(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0278(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_SRChallenge_Properties              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0288(0x00D8)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x0361(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_362[0x6];                                      // 0x0362(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetWeaponName_ReturnValue;                // 0x0368(0x0018)()
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0380(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0388(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftClassReference_ReturnValue;    // 0x03C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x03D0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0410(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetZOrder_ReturnValue;                    // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0428(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0440(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0444(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0445(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_ShootingChallenge>           CallFunc_Map_Values_Values;                        // 0x0448(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_ShootingChallenge                   CallFunc_Array_Get_Item_1;                         // 0x0458(0x0090)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x04EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x04ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x04EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EF[0x1];                                      // 0x04EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x04F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F4[0x4];                                      // 0x04F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x04F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_Shelter_C*                K2Node_DynamicCast_AsBP_Character_Shelter;         // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             CallFunc_GetAllUsedChildClassTypes_ReturnValue;    // 0x0510(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0520(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0524(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_1;        // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 K2Node_CustomEvent_CurrentPlayer;                  // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Success_1;                      // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1; // 0x0540(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_UnlockedWeapons_C*      CallFunc_Create_ReturnValue_4;                     // 0x0548(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x0550(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SRChallenge_Menu_C*                 CallFunc_Create_ReturnValue_5;                     // 0x0558(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAllActorsWithInterface_OutActors;      // 0x0568(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_PlayerStart_ShootingChallenges_C*> CallFunc_GetAllActorsOfClass_OutActors;            // 0x0580(0x0010)(ReferenceParm)
	TArray<class ABP_SRResetButton_C*>            CallFunc_GetAllActorsOfClass_OutActors_1;          // 0x0590(0x0010)(ReferenceParm)
	class ABP_PlayerStart_ShootingChallenges_C*   CallFunc_Array_Get_Item_2;                         // 0x05A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_SRResetButton_C*                    CallFunc_Array_Get_Item_3;                         // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ShootingChallenge>           CallFunc_Map_Values_Values_1;                      // 0x05B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TDelegate<void(class AHumanPlayerController* CurrentPlayer, bool Success)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x05C0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          K2Node_CustomEvent_OpenResultUI_1;                 // 0x05D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_PrevHighScore_1;                // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_7;            // 0x05D8(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x05E8(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UBP_HighScore_Save_Challenges_C*        CallFunc_CreateSaveGameObject_ReturnValue;         // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_2;        // 0x05F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue_3;        // 0x05FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Success;                        // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_OpenResultUI;                   // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_602[0x2];                                      // 0x0602(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_PrevHighScore;                  // 0x0604(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0608(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0609(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_60A[0x2];                                      // 0x060A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x060C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0610(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0611(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_612[0x2];                                      // 0x0612(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0614(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_8;            // 0x0618(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0628(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x0630(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0638(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_9;            // 0x063C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_4;        // 0x0650(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue;         // 0x0658(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameInstance*                     CallFunc_GetFlameGameInstance_ReturnValue_1;       // 0x0660(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameSave*                         CallFunc_SaveGameToSlotByPlatform_ReturnValue;     // 0x0668(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UFlameGameLoad*                         CallFunc_LoadGameFromSlotByPlatform_ReturnValue;   // 0x0670(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0678(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0679(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_67A[0x6];                                      // 0x067A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UFlameAssetManager*                     CallFunc_GetAssetManagerSystem_ReturnValue;        // 0x0680(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_LoadSoftClassReference_ReturnValue;       // 0x0688(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlatformGroupDesktop_ReturnValue;       // 0x0690(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsActor;                   // 0x0698(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x06A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ShootingChallenge                   K2Node_MakeStruct_S_ShootingChallenge;             // 0x06A8(0x0090)(ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent) == 0x000738, "Wrong size on BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, EntryPoint) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetFlameController_ReturnValue) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetFlameController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_SlotName_1) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_SlotName_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_UserIndex_1) == 0x000038, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_UserIndex_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_SlotName) == 0x000040, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_SlotName' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_UserIndex) == 0x000050, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_UserIndex' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_1) == 0x000054, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_int_Variable) == 0x000064, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_string_Variable) == 0x000068, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_SaveGame_1) == 0x000078, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_SaveGame_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_2) == 0x000080, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_SaveGame) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_SaveGame' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_3) == 0x000098, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_object_Variable) == 0x0000A8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_int_Loop_Counter_Variable) == 0x0000B0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Add_IntInt_ReturnValue) == 0x0000B4, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_AsBP_High_Score_Save_Challenges) == 0x0000B8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_AsBP_High_Score_Save_Challenges' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_bSuccess) == 0x0000C0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_1) == 0x0000C1, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_int_Array_Index_Variable) == 0x0000C4, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_int_Array_Index_Variable_1) == 0x0000C8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x0000CC, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000D0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_ActiveChallenge) == 0x0000D8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_ActiveChallenge' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_Restart) == 0x000168, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_Restart' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_2) == 0x000169, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_3) == 0x00016A, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue) == 0x000170, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_AsWeapon) == 0x000178, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_AsWeapon' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_bSuccess_1) == 0x000180, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000181, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeStruct_FormatArgumentData) == 0x000188, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeArray_Array) == 0x0001C8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Format_ReturnValue) == 0x0001D8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_4) == 0x0001F0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue_1) == 0x0001F8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_5) == 0x000200, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_bool_Has_Been_Initd_Variable) == 0x000201, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_bool_IsClosed_Variable) == 0x000202, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_4) == 0x000204, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_5) == 0x000214, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000228, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000230, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetUserControllerId_ReturnValue) == 0x000238, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000240, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_Event_EndPlayReason) == 0x000248, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue_2) == 0x000250, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue_3) == 0x000258, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_CurrentPlayer_1) == 0x000260, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_CurrentPlayer_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000268, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Get_Item) == 0x000278, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Length_ReturnValue) == 0x000280, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetDataTableRowFromName_OutRow) == 0x000288, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000360, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_6) == 0x000361, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetWeaponName_ReturnValue) == 0x000368, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetWeaponName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Add_IntInt_ReturnValue_1) == 0x000380, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeStruct_FormatArgumentData_1) == 0x000388, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValidSoftClassReference_ReturnValue) == 0x0003C8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValidSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeStruct_FormatArgumentData_2) == 0x0003D0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeArray_Array_1) == 0x000410, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetZOrder_ReturnValue) == 0x000420, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetZOrder_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Format_ReturnValue_1) == 0x000428, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Length_ReturnValue_1) == 0x000440, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Greater_IntInt_ReturnValue) == 0x000444, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000445, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Map_Values_Values) == 0x000448, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Get_Item_1) == 0x000458, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Length_ReturnValue_2) == 0x0004E8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Less_IntInt_ReturnValue) == 0x0004EC, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Contains_ReturnValue) == 0x0004ED, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Not_PreBool_ReturnValue_1) == 0x0004EE, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_AddUnique_ReturnValue) == 0x0004F0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_GetPawn_ReturnValue) == 0x0004F8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_AsBP_Character_Shelter) == 0x000500, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_AsBP_Character_Shelter' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_DynamicCast_bSuccess_2) == 0x000508, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetAllUsedChildClassTypes_ReturnValue) == 0x000510, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetAllUsedChildClassTypes_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Contains_ReturnValue_1) == 0x000520, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000524, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetUserControllerId_ReturnValue_1) == 0x000528, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetUserControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_CurrentPlayer) == 0x000530, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_CurrentPlayer' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_Success_1) == 0x000538, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_Success_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1) == 0x000540, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue_4) == 0x000548, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_7) == 0x000550, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Create_ReturnValue_5) == 0x000558, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Create_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Length_ReturnValue_3) == 0x000560, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000564, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetAllActorsWithInterface_OutActors) == 0x000568, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetAllActorsWithInterface_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Not_PreBool_ReturnValue_2) == 0x000578, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetAllActorsOfClass_OutActors) == 0x000580, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetAllActorsOfClass_OutActors_1) == 0x000590, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetAllActorsOfClass_OutActors_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Get_Item_2) == 0x0005A0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Array_Get_Item_3) == 0x0005A8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Map_Values_Values_1) == 0x0005B0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Map_Values_Values_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_6) == 0x0005C0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_OpenResultUI_1) == 0x0005D0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_OpenResultUI_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_PrevHighScore_1) == 0x0005D4, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_PrevHighScore_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_7) == 0x0005D8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x0005E8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_CreateSaveGameObject_ReturnValue) == 0x0005F0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_CreateSaveGameObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetUserControllerId_ReturnValue_2) == 0x0005F8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetUserControllerId_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetUserControllerId_ReturnValue_3) == 0x0005FC, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetUserControllerId_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_Success) == 0x000600, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_Success' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_OpenResultUI) == 0x000601, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_OpenResultUI' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CustomEvent_PrevHighScore) == 0x000604, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CustomEvent_PrevHighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_8) == 0x000608, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_9) == 0x000609, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_int_Loop_Counter_Variable_1) == 0x00060C, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, Temp_bool_Variable) == 0x000610, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Less_IntInt_ReturnValue_1) == 0x000611, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_Add_IntInt_ReturnValue_2) == 0x000614, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_8) == 0x000618, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_10) == 0x000628, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x000630, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000638, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_CreateDelegate_OutputDelegate_9) == 0x00063C, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_CreateDelegate_OutputDelegate_9' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_K2_SetTimerDelegate_ReturnValue_4) == 0x000650, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_K2_SetTimerDelegate_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetFlameGameInstance_ReturnValue) == 0x000658, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetFlameGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetFlameGameInstance_ReturnValue_1) == 0x000660, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetFlameGameInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_SaveGameToSlotByPlatform_ReturnValue) == 0x000668, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_SaveGameToSlotByPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_LoadGameFromSlotByPlatform_ReturnValue) == 0x000670, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_LoadGameFromSlotByPlatform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_11) == 0x000678, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsValid_ReturnValue_12) == 0x000679, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_GetAssetManagerSystem_ReturnValue) == 0x000680, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_GetAssetManagerSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_LoadSoftClassReference_ReturnValue) == 0x000688, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_LoadSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, CallFunc_IsPlatformGroupDesktop_ReturnValue) == 0x000690, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::CallFunc_IsPlatformGroupDesktop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_ClassDynamicCast_AsActor) == 0x000698, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_ClassDynamicCast_AsActor' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_ClassDynamicCast_bSuccess) == 0x0006A0, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent, K2Node_MakeStruct_S_ShootingChallenge) == 0x0006A8, "Member 'BP_ShootingChallenges_GMComponent_C_ExecuteUbergraph_BP_ShootingChallenges_GMComponent::K2Node_MakeStruct_S_ShootingChallenge' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesSavingFinished
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          OpenResultUI_0;                                    // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevHighScore;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished) == 0x000004, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished, Success) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished::Success' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished, OpenResultUI_0) == 0x000001, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished::OpenResultUI_0' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished, PrevHighScore) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesSavingFinished::PrevHighScore' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesSaveGame
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame final
{
public:
	bool                                          OpenResultUI_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PrevHighScore;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame) == 0x000004, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame, OpenResultUI_0) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame::OpenResultUI_0' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame, PrevHighScore) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesSaveGame::PrevHighScore' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventChallengesLoadingFinished
// 0x0010 (0x0010 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished final
{
public:
	class AHumanPlayerController*                 CurrentPlayer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished) == 0x000010, "Wrong size on BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished, CurrentPlayer) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished, Success) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_EventChallengesLoadingFinished::Success' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.EventLoadChallenges
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_EventLoadChallenges final
{
public:
	class AHumanPlayerController*                 CurrentPlayer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_EventLoadChallenges) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_EventLoadChallenges");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_EventLoadChallenges) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_EventLoadChallenges");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_EventLoadChallenges, CurrentPlayer) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_EventLoadChallenges::CurrentPlayer' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Start Challenge
// 0x0098 (0x0098 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_Start_Challenge final
{
public:
	struct FS_ShootingChallenge                   ActiveChallenge_0;                                 // 0x0000(0x0090)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Restart;                                           // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_Start_Challenge) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_Start_Challenge");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_Start_Challenge) == 0x000098, "Wrong size on BP_ShootingChallenges_GMComponent_C_Start_Challenge");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Start_Challenge, ActiveChallenge_0) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_Start_Challenge::ActiveChallenge_0' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Start_Challenge, Restart) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_Start_Challenge::Restart' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9 final
{
public:
	class USaveGame*                              SaveGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9, SaveGame) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OnLoadSucceed_3C54EAD94E7C6DC679F3EEB70F632FD9::SaveGame' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9
// 0x0008 (0x0008 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9 final
{
public:
	class USaveGame*                              SaveGame;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9) == 0x000008, "Wrong size on BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9, SaveGame) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OnLoadFailed_3C54EAD94E7C6DC679F3EEB70F632FD9::SaveGame' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527
// 0x0018 (0x0018 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527 final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527) == 0x000018, "Wrong size on BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527, SlotName) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527::SlotName' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527, UserIndex) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_OnSaveSucceed_8394D6FA4870C41A77AF78BB64CF4527::UserIndex' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527
// 0x0018 (0x0018 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527 final
{
public:
	class FString                                 SlotName;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         UserIndex;                                         // 0x0010(0x0004)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527) == 0x000018, "Wrong size on BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527, SlotName) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527::SlotName' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527, UserIndex) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_OnSaveFailed_8394D6FA4870C41A77AF78BB64CF4527::UserIndex' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.Check Achievements Progress
// 0x0178 (0x0178 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress final
{
public:
	int32                                         Gold_Ranks;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Any_Ranks;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Increase_Achievement_Progress_Result_Code; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_2;                            // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Increase_Achievement_Progress_Result_Code_1; // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_3;                            // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 K2Node_Select_Default;                             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_4;                            // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable_5;                            // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default_1;                           // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<struct FS_ShootingChallenge>           CallFunc_Map_Values_Values;                        // 0x00C0(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_ShootingChallenge                   CallFunc_Array_Get_Item;                           // 0x00D0(0x0090)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     CallFunc_GetChallengeHighScore_Rank;               // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetChallengeHighScore_HighScore;          // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16E[0x2];                                      // 0x016E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress) == 0x000178, "Wrong size on BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Gold_Ranks) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Gold_Ranks' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Any_Ranks) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Any_Ranks' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable_1) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Increase_Achievement_Progress_Result_Code) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Increase_Achievement_Progress_Result_Code' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002C, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable_2) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Variable) == 0x000040, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Increase_Achievement_Progress_Result_Code_1) == 0x000044, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Increase_Achievement_Progress_Result_Code_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Greater_IntInt_ReturnValue) == 0x000048, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable_3) == 0x000050, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Variable_1) == 0x000060, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Loop_Counter_Variable) == 0x000064, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, K2Node_Select_Default) == 0x000068, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable_4) == 0x000080, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Variable_2) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_string_Variable_5) == 0x000098, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_string_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, Temp_int_Variable_3) == 0x0000A8, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, K2Node_Select_Default_1) == 0x0000B0, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Map_Values_Values) == 0x0000C0, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Array_Get_Item) == 0x0000D0, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_GetChallengeHighScore_Rank) == 0x000164, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_GetChallengeHighScore_Rank' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_GetChallengeHighScore_HighScore) == 0x000168, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_GetChallengeHighScore_HighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, K2Node_SwitchEnum_CmpSuccess) == 0x00016D, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Add_IntInt_ReturnValue_1) == 0x000170, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress, CallFunc_Add_IntInt_ReturnValue_2) == 0x000174, "Member 'BP_ShootingChallenges_GMComponent_C_Check_Achievements_Progress::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OpenChallengesMenu
// 0x0020 (0x0020 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu final
{
public:
	class AHumanPlayerController*                 CurrentPlayer;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class AHumanPlayerController* CurrentPlayer, bool Success)> K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu) == 0x000020, "Wrong size on BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu, CurrentPlayer) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu::CurrentPlayer' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_ShootingChallenges_GMComponent_C_OpenChallengesMenu::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ScoreHit
// 0x0034 (0x0034 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ScoreHit final
{
public:
	float                                         PrevHighScore;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool Success, bool OpenResultUI, float PrevHighScore)> K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	E_ShootingChallengeResult                     CallFunc_GetChallengeHighScore_Rank;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetChallengeHighScore_HighScore;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FlooredTime_Floored_Time;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FlooredTime_Floored_Time_1;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     CallFunc_GetChallengeHighScore_Rank_1;             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetChallengeHighScore_HighScore_1;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ScoreHit) == 0x000004, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ScoreHit");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ScoreHit) == 0x000034, "Wrong size on BP_ShootingChallenges_GMComponent_C_ScoreHit");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, PrevHighScore) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::PrevHighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_GetChallengeHighScore_Rank) == 0x000014, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_GetChallengeHighScore_Rank' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_GetChallengeHighScore_HighScore) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_GetChallengeHighScore_HighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_FlooredTime_Floored_Time) == 0x00001C, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_FlooredTime_Floored_Time' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_FlooredTime_Floored_Time_1) == 0x000020, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_FlooredTime_Floored_Time_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_GetChallengeHighScore_Rank_1) == 0x000024, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_GetChallengeHighScore_Rank_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_GetChallengeHighScore_HighScore_1) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_GetChallengeHighScore_HighScore_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00002C, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002D, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00002E, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ScoreHit, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_ScoreHit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.GetChallengeRank
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_GetChallengeRank final
{
public:
	struct FS_ShootingChallenge                   ShootingChallenge;                                 // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	float                                         ActualTime;                                        // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     ReturnValue;                                       // 0x0094(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     Temp_byte_Variable;                                // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_1;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue_2;       // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     Temp_byte_Variable_1;                              // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     Temp_byte_Variable_2;                              // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     Temp_byte_Variable_3;                              // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     K2Node_Select_Default;                             // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     K2Node_Select_Default_1;                           // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     K2Node_Select_Default_2;                           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_GetChallengeRank");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank) == 0x0000A8, "Wrong size on BP_ShootingChallenges_GMComponent_C_GetChallengeRank");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, ShootingChallenge) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::ShootingChallenge' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, ActualTime) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::ActualTime' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, ReturnValue) == 0x000094, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_bool_Variable) == 0x000095, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_byte_Variable) == 0x000096, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000097, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, CallFunc_LessEqual_FloatFloat_ReturnValue_1) == 0x000098, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::CallFunc_LessEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, CallFunc_LessEqual_FloatFloat_ReturnValue_2) == 0x000099, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::CallFunc_LessEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_byte_Variable_1) == 0x00009A, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_bool_Variable_1) == 0x00009B, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_byte_Variable_2) == 0x00009C, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_byte_Variable_3) == 0x00009D, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, Temp_bool_Variable_2) == 0x00009E, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, K2Node_Select_Default) == 0x00009F, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeRank, K2Node_Select_Default_2) == 0x0000A1, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeRank::K2Node_Select_Default_2' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.PrepareRangeForChallenge
// 0x02B0 (0x02B0 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge final
{
public:
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHumanAnimInstace*                      CallFunc_GetAnimInstance_ReturnValue;              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLoadoutInfo                           CallFunc_GetCurrentLoadout_OutLoadout;             // 0x0030(0x0028)()
	bool                                          CallFunc_GetCurrentLoadout_ReturnValue;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocation_SweepHitResult;       // 0x005C(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocation_ReturnValue;          // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ApplyLoadoutInfo_ReturnValue;             // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x2];                                       // 0x00EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ShootingRangeTarget_C> K2Node_DynamicCast_AsI_Shooting_Range_Target;      // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0118(0x0040)(HasGetValueTypeHash)
	TArray<class AActor*>                         CallFunc_GetAllActorsWithTag_OutActors;            // 0x0158(0x0010)(ReferenceParm)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0168(0x0040)(HasGetValueTypeHash)
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x01A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B4[0xC];                                      // 0x01B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x01C0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_FinishSpawningActor_ReturnValue;          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class II_ShootingRangeTarget_C> K2Node_DynamicCast_AsI_Shooting_Range_Target_1;    // 0x0210(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0228(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0268(0x0010)(ReferenceParm)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0278(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0280(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0298(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge) == 0x000010, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge) == 0x0002B0, "Wrong size on BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_MakeRotator_ReturnValue) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_K2_GetActorLocation_ReturnValue) == 0x00001C, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_GetAnimInstance_ReturnValue) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_GetCurrentLoadout_OutLoadout) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_GetCurrentLoadout_OutLoadout' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_GetCurrentLoadout_ReturnValue) == 0x000058, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_GetCurrentLoadout_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_K2_SetActorLocation_SweepHitResult) == 0x00005C, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_K2_SetActorLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_K2_SetActorLocation_ReturnValue) == 0x0000E8, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_K2_SetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_ApplyLoadoutInfo_ReturnValue) == 0x0000E9, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_ApplyLoadoutInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, Temp_int_Loop_Counter_Variable_1) == 0x0000EC, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Get_Item) == 0x0000F0, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Length_ReturnValue) == 0x0000F8, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_DynamicCast_AsI_Shooting_Range_Target) == 0x000100, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_DynamicCast_AsI_Shooting_Range_Target' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_DynamicCast_bSuccess) == 0x000110, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Less_IntInt_ReturnValue) == 0x000111, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Add_IntInt_ReturnValue_1) == 0x000114, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_MakeStruct_FormatArgumentData) == 0x000118, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_GetAllActorsWithTag_OutActors) == 0x000158, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_GetAllActorsWithTag_OutActors' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_MakeStruct_FormatArgumentData_1) == 0x000168, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Get_Item_1) == 0x0001A8, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Length_ReturnValue_1) == 0x0001B0, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_GetTransform_ReturnValue) == 0x0001C0, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001F0, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0001F8, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_FinishSpawningActor_ReturnValue) == 0x000200, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Length_ReturnValue_2) == 0x000208, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_DynamicCast_AsI_Shooting_Range_Target_1) == 0x000210, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_DynamicCast_AsI_Shooting_Range_Target_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_DynamicCast_bSuccess_1) == 0x000220, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_MakeStruct_FormatArgumentData_2) == 0x000228, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, K2Node_MakeArray_Array) == 0x000268, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000278, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Format_ReturnValue) == 0x000280, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Conv_TextToString_ReturnValue) == 0x000298, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge, CallFunc_Array_Add_ReturnValue) == 0x0002A8, "Member 'BP_ShootingChallenges_GMComponent_C_PrepareRangeForChallenge::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.ClearRangeAfterChallenge
// 0x0058 (0x0058 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ApplyLoadoutInfo_ReturnValue;             // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item_1;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class II_ShootingRangeTarget_C> K2Node_DynamicCast_AsI_Shooting_Range_Target;      // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge) == 0x000058, "Wrong size on BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, Temp_int_Array_Index_Variable_1) == 0x00000C, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, Temp_int_Loop_Counter_Variable_1) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Add_IntInt_ReturnValue_1) == 0x000014, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_ApplyLoadoutInfo_ReturnValue) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_ApplyLoadoutInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_IsValid_ReturnValue) == 0x00002C, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Array_Get_Item_1) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, K2Node_DynamicCast_AsI_Shooting_Range_Target) == 0x000038, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::K2Node_DynamicCast_AsI_Shooting_Range_Target' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge, CallFunc_Less_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_ShootingChallenges_GMComponent_C_ClearRangeAfterChallenge::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.GetChallengeHighScore
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore final
{
public:
	struct FS_ShootingChallenge                   ShootingChallenge;                                 // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	E_ShootingChallengeResult                     Rank;                                              // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HighScore;                                         // 0x0094(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Map_Find_Value;                           // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     CallFunc_GetChallengeRank_ReturnValue;             // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore) == 0x0000A8, "Wrong size on BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, ShootingChallenge) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::ShootingChallenge' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, Rank) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::Rank' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, HighScore) == 0x000094, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::HighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, CallFunc_IsValid_ReturnValue) == 0x000098, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, CallFunc_Map_Find_Value) == 0x00009C, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, CallFunc_Map_Find_ReturnValue) == 0x0000A0, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore, CallFunc_GetChallengeRank_ReturnValue) == 0x0000A1, "Member 'BP_ShootingChallenges_GMComponent_C_GetChallengeHighScore::CallFunc_GetChallengeRank_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.IsWeaponUnlocked
// 0x0010 (0x0010 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked final
{
public:
	const class UClass*                           Weapon;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked) == 0x000010, "Wrong size on BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked, Weapon) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked::Weapon' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked, ReturnValue) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked, CallFunc_Array_Contains_ReturnValue) == 0x000009, "Member 'BP_ShootingChallenges_GMComponent_C_IsWeaponUnlocked::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.FailActiveChallenge
// 0x0100 (0x0100 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_FailActiveChallenge final
{
public:
	class FText                                   FailingReason;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	E_ShootingChallengeResult                     Result;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool RetryChallenge)>          K2Node_CreateDelegate_OutputDelegate;              // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	float                                         CallFunc_FlooredTime_Floored_Time;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UEventSystem*                           CallFunc_GetEventSystem_ReturnValue;               // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventSystem_C*                      K2Node_DynamicCast_AsBP_Event_System;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_ShootingChallengeResult                     Temp_byte_Variable;                                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetZOrder_ReturnValue;                    // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUI_SRChallenge_ResultScreen_Failed_C*  CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, int32>                    K2Node_MakeMap_Map;                                // 0x0098(0x0050)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue; // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_FailActiveChallenge");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge) == 0x000100, "Wrong size on BP_ShootingChallenges_GMComponent_C_FailActiveChallenge");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, FailingReason) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::FailingReason' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Result) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Result' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable) == 0x000020, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable_1) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable_2) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, K2Node_CreateDelegate_OutputDelegate) == 0x000038, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_FlooredTime_Floored_Time) == 0x000048, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_FlooredTime_Floored_Time' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable_3) == 0x000050, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable_4) == 0x000058, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_object_Variable_5) == 0x000060, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_GetEventSystem_ReturnValue) == 0x000068, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_GetEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, K2Node_DynamicCast_AsBP_Event_System) == 0x000070, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::K2Node_DynamicCast_AsBP_Event_System' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, Temp_byte_Variable) == 0x000079, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_GetZOrder_ReturnValue) == 0x00007C, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_GetZOrder_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, K2Node_Select_Default) == 0x000080, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_Create_ReturnValue) == 0x000088, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, K2Node_MakeMap_Map) == 0x000098, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_Conv_TextToString_ReturnValue) == 0x0000E8, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FailActiveChallenge, CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue) == 0x0000F8, "Member 'BP_ShootingChallenges_GMComponent_C_FailActiveChallenge::CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.FlooredTime
// 0x0018 (0x0018 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_FlooredTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Floored_Time;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_FlooredTime) == 0x000004, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_FlooredTime");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_FlooredTime) == 0x000018, "Wrong size on BP_ShootingChallenges_GMComponent_C_FlooredTime");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, Time) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::Time' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, Floored_Time) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::Floored_Time' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, CallFunc_FFloor_ReturnValue) == 0x00000C, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_FlooredTime, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_ShootingChallenges_GMComponent_C_FlooredTime::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.HandleResultScreenClosed
// 0x0001 (0x0001 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed final
{
public:
	bool                                          RetryChallenge;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed) == 0x000001, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed) == 0x000001, "Wrong size on BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed, RetryChallenge) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_HandleResultScreenClosed::RetryChallenge' has a wrong offset!");

// Function BP_ShootingChallenges_GMComponent.BP_ShootingChallenges_GMComponent_C.OpenResultUI
// 0x0100 (0x0100 - 0x0000)
struct BP_ShootingChallenges_GMComponent_C_OpenResultUI final
{
public:
	float                                         PrevHighScore;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetZOrder_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_FlooredTime_Floored_Time;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FlooredTime_Floored_Time_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FlooredTime_Floored_Time_2;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     CallFunc_GetChallengeRank_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ShootingChallengeResult                     Temp_byte_Variable;                                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventSystem*                           CallFunc_GetEventSystem_ReturnValue;               // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventSystem_C*                      K2Node_DynamicCast_AsBP_Event_System;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UClass*, int32>                    K2Node_MakeMap_Map;                                // 0x0090(0x0050)()
	TDelegate<void(bool RetryChallenge)>          K2Node_CreateDelegate_OutputDelegate;              // 0x00E0(0x0010)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue; // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_SRChallenge_ResultScreen_Success_C* CallFunc_Create_ReturnValue;                       // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ShootingChallenges_GMComponent_C_OpenResultUI) == 0x000008, "Wrong alignment on BP_ShootingChallenges_GMComponent_C_OpenResultUI");
static_assert(sizeof(BP_ShootingChallenges_GMComponent_C_OpenResultUI) == 0x000100, "Wrong size on BP_ShootingChallenges_GMComponent_C_OpenResultUI");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, PrevHighScore) == 0x000000, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::PrevHighScore' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, PrevTime) == 0x000004, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::PrevTime' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable) == 0x000008, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable_1) == 0x000010, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable_2) == 0x000018, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable_3) == 0x000020, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000028, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable_4) == 0x000030, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_GetZOrder_ReturnValue) == 0x000038, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_GetZOrder_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_Conv_TextToString_ReturnValue) == 0x000040, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_FlooredTime_Floored_Time) == 0x000050, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_FlooredTime_Floored_Time' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_FlooredTime_Floored_Time_1) == 0x000054, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_FlooredTime_Floored_Time_1' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_FlooredTime_Floored_Time_2) == 0x000058, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_FlooredTime_Floored_Time_2' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_object_Variable_5) == 0x000060, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_GetChallengeRank_ReturnValue) == 0x000068, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_GetChallengeRank_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, Temp_byte_Variable) == 0x000069, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_GetEventSystem_ReturnValue) == 0x000070, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_GetEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, K2Node_Select_Default) == 0x000078, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, K2Node_DynamicCast_AsBP_Event_System) == 0x000080, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::K2Node_DynamicCast_AsBP_Event_System' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, K2Node_MakeMap_Map) == 0x000090, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, K2Node_CreateDelegate_OutputDelegate) == 0x0000E0, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue) == 0x0000F0, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_Send_Shooting_Challenge_Finished_Event_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShootingChallenges_GMComponent_C_OpenResultUI, CallFunc_Create_ReturnValue) == 0x0000F8, "Member 'BP_ShootingChallenges_GMComponent_C_OpenResultUI::CallFunc_Create_ReturnValue' has a wrong offset!");

}

