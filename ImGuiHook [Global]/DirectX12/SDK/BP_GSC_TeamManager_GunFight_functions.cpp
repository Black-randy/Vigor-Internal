#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GSC_TeamManager_GunFight

#include "Basic.hpp"

#include "BP_GSC_TeamManager_GunFight_classes.hpp"
#include "BP_GSC_TeamManager_GunFight_parameters.hpp"


namespace SDK
{

// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.ExecuteUbergraph_BP_GSC_TeamManager_GunFight
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::ExecuteUbergraph_BP_GSC_TeamManager_GunFight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "ExecuteUbergraph_BP_GSC_TeamManager_GunFight");

	Params::BP_GSC_TeamManager_GunFight_C_ExecuteUbergraph_BP_GSC_TeamManager_GunFight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.SetupTeams_Server
// (BlueprintCallable, BlueprintEvent)

void UBP_GSC_TeamManager_GunFight_C::SetupTeams_Server()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "SetupTeams_Server");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Assign Sides to Teams
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Round                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Assign_Sides_to_Teams(int32 Round)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Assign Sides to Teams");

	Params::BP_GSC_TeamManager_GunFight_C_Assign_Sides_to_Teams Parms{};

	Parms.Round = Round;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_GSC_TeamManager_GunFight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Find Team for Player
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_Teams_C*     Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GSC_Team_C*                   Team                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Find_Team_for_Player(class ABP_PlayerController_Teams_C* Player, class UBP_GSC_Team_C** Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Find Team for Player");

	Params::BP_GSC_TeamManager_GunFight_C_Find_Team_for_Player Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Assign Groups To Sides
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GSC_TeamManager_GunFight_C::Assign_Groups_To_Sides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Assign Groups To Sides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Get Player Count In Groups
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UPlayerGroupInfo*>         Groups                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Player_Count                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Get_Player_Count_In_Groups(TArray<class UPlayerGroupInfo*>& Groups, int32* Player_Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Get Player Count In Groups");

	Params::BP_GSC_TeamManager_GunFight_C_Get_Player_Count_In_Groups Parms{};

	Parms.Groups = std::move(Groups);

	UObject::ProcessEvent(Func, &Parms);

	Groups = std::move(Parms.Groups);

	if (Player_Count != nullptr)
		*Player_Count = Parms.Player_Count;
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Get Attacker Team
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_C*                   Team                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Get_Attacker_Team(class UBP_GSC_Team_C** Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Get Attacker Team");

	Params::BP_GSC_TeamManager_GunFight_C_Get_Attacker_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Get Defender Team
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_GSC_Team_C*                   Team                                                   (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Get_Defender_Team(class UBP_GSC_Team_C** Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Get Defender Team");

	Params::BP_GSC_TeamManager_GunFight_C_Get_Defender_Team Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Team != nullptr)
		*Team = Parms.Team;
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Get Number Of Slots Left In Side
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPlayerGroupInfo*                 Player_Group                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Attackers                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Defenders                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Get_Number_Of_Slots_Left_In_Side(class UPlayerGroupInfo* Player_Group, int32* Attackers, int32* Defenders)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Get Number Of Slots Left In Side");

	Params::BP_GSC_TeamManager_GunFight_C_Get_Number_Of_Slots_Left_In_Side Parms{};

	Parms.Player_Group = Player_Group;

	UObject::ProcessEvent(Func, &Parms);

	if (Attackers != nullptr)
		*Attackers = Parms.Attackers;

	if (Defenders != nullptr)
		*Defenders = Parms.Defenders;
}


// Function BP_GSC_TeamManager_GunFight.BP_GSC_TeamManager_GunFight_C.Remove One Slot From Group
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UPlayerGroupInfo*>         Groups                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UPlayerGroupInfo*                 Player_Slot                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GSC_TeamManager_GunFight_C::Remove_One_Slot_From_Group(TArray<class UPlayerGroupInfo*>& Groups, class UPlayerGroupInfo* Player_Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GSC_TeamManager_GunFight_C", "Remove One Slot From Group");

	Params::BP_GSC_TeamManager_GunFight_C_Remove_One_Slot_From_Group Parms{};

	Parms.Groups = std::move(Groups);
	Parms.Player_Slot = Player_Slot;

	UObject::ProcessEvent(Func, &Parms);

	Groups = std::move(Parms.Groups);
}

}

