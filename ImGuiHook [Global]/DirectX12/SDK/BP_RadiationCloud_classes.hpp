#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadiationCloud

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RadiationCloud.BP_RadiationCloud_C
// 0x0038 (0x0258 - 0x0220)
class ABP_RadiationCloud_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       RadiatedZone;                                      // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Initial_radiation_exposure_hit;                    // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radiation_hit_per_second_edge;                     // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radiation_hit_per_second_epicenter;                // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_prints;                                      // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radiation_hit_interval;                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Radiation_exposure_curve;                          // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_RadiationCloud(int32 EntryPoint);
	void Initialize_radiation_cloud(const struct FF_RadiationCloudConfig& Config);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RadiationCloud_C">();
	}
	static class ABP_RadiationCloud_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RadiationCloud_C>();
	}
};
static_assert(alignof(ABP_RadiationCloud_C) == 0x000008, "Wrong alignment on ABP_RadiationCloud_C");
static_assert(sizeof(ABP_RadiationCloud_C) == 0x000258, "Wrong size on ABP_RadiationCloud_C");
static_assert(offsetof(ABP_RadiationCloud_C, UberGraphFrame) == 0x000220, "Member 'ABP_RadiationCloud_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, RadiatedZone) == 0x000228, "Member 'ABP_RadiationCloud_C::RadiatedZone' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_RadiationCloud_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Initial_radiation_exposure_hit) == 0x000238, "Member 'ABP_RadiationCloud_C::Initial_radiation_exposure_hit' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Radiation_hit_per_second_edge) == 0x00023C, "Member 'ABP_RadiationCloud_C::Radiation_hit_per_second_edge' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Radiation_hit_per_second_epicenter) == 0x000240, "Member 'ABP_RadiationCloud_C::Radiation_hit_per_second_epicenter' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Debug_prints) == 0x000244, "Member 'ABP_RadiationCloud_C::Debug_prints' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Radiation_hit_interval) == 0x000248, "Member 'ABP_RadiationCloud_C::Radiation_hit_interval' has a wrong offset!");
static_assert(offsetof(ABP_RadiationCloud_C, Radiation_exposure_curve) == 0x000250, "Member 'ABP_RadiationCloud_C::Radiation_exposure_curve' has a wrong offset!");

}

