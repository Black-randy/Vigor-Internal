#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootObject_Memento_Vinyl_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_LootObject_Memento_Base_classes.hpp"
#include "E_Lootable_State_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LootObject_Memento_Vinyl_Base.BP_LootObject_Memento_Vinyl_Base_C
// 0x0040 (0x03F0 - 0x03B0)
class ABP_LootObject_Memento_Vinyl_Base_C : public ABP_LootObject_Memento_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LootObject_Memento_Vinyl_Base_C; // 0x03B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Album;                                             // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Record;                                            // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Arm;                                               // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Noise;                                             // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Disc;                                              // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Disc_Spin_Timeline_DiscSpin_668AA6964552C0758B9CECB2E50013F6; // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Disc_Spin_Timeline__Direction_668AA6964552C0758B9CECB2E50013F6; // 0x03E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E5[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Disc_Spin_Timeline;                                // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LootObject_Memento_Vinyl_Base(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Disc_Spin_Timeline__UpdateFunc();
	void Disc_Spin_Timeline__FinishedFunc();
	void Apply_Materials_from_State_Descriptor(const struct FF_Lootable_StateDescriptor& State_Descriptor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LootObject_Memento_Vinyl_Base_C">();
	}
	static class ABP_LootObject_Memento_Vinyl_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LootObject_Memento_Vinyl_Base_C>();
	}
};
static_assert(alignof(ABP_LootObject_Memento_Vinyl_Base_C) == 0x000008, "Wrong alignment on ABP_LootObject_Memento_Vinyl_Base_C");
static_assert(sizeof(ABP_LootObject_Memento_Vinyl_Base_C) == 0x0003F0, "Wrong size on ABP_LootObject_Memento_Vinyl_Base_C");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, UberGraphFrame_BP_LootObject_Memento_Vinyl_Base_C) == 0x0003B0, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::UberGraphFrame_BP_LootObject_Memento_Vinyl_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Album) == 0x0003B8, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Album' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Record) == 0x0003C0, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Record' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Arm) == 0x0003C8, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Arm' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Noise) == 0x0003D0, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Noise' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Disc) == 0x0003D8, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Disc' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Disc_Spin_Timeline_DiscSpin_668AA6964552C0758B9CECB2E50013F6) == 0x0003E0, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Disc_Spin_Timeline_DiscSpin_668AA6964552C0758B9CECB2E50013F6' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Disc_Spin_Timeline__Direction_668AA6964552C0758B9CECB2E50013F6) == 0x0003E4, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Disc_Spin_Timeline__Direction_668AA6964552C0758B9CECB2E50013F6' has a wrong offset!");
static_assert(offsetof(ABP_LootObject_Memento_Vinyl_Base_C, Disc_Spin_Timeline) == 0x0003E8, "Member 'ABP_LootObject_Memento_Vinyl_Base_C::Disc_Spin_Timeline' has a wrong offset!");

}

