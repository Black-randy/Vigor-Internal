#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_RedChest_GMComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GMComponent_ADM_Event_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ADM_RedChest_GMComponent.BP_ADM_RedChest_GMComponent_C
// 0x0020 (0x01F8 - 0x01D8)
class UBP_ADM_RedChest_GMComponent_C final : public UBP_GMComponent_ADM_Event_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ADM_RedChest_GMComponent_C;      // 0x01D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_ADM_RedChest_Location_C*            Currently_selected_location;                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_RedChest_LootManager_C*         Red_chest_loot_manager;                            // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_ADM_RedChest_Lootable_C*            Spawned_red_chest;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Spawn_red_chest(bool* Success);
	void Spawn_Loot_manager(class ABP_ADM_RedChest_LootManager_C** Loot_manager);
	void Initialize_Component();
	void Destroy_loot_manager(bool Result);
	void Start_spawning_loot_manager();
	void Red_chest_looted(class AActor* Character_that_looted_red_chest);
	void Match_Has_Started();
	void Mark_Red_chest_on_map(class ABP_PlayerController_Script_C* Player_Controller);
	void ExecuteUbergraph_BP_ADM_RedChest_GMComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ADM_RedChest_GMComponent_C">();
	}
	static class UBP_ADM_RedChest_GMComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ADM_RedChest_GMComponent_C>();
	}
};
static_assert(alignof(UBP_ADM_RedChest_GMComponent_C) == 0x000008, "Wrong alignment on UBP_ADM_RedChest_GMComponent_C");
static_assert(sizeof(UBP_ADM_RedChest_GMComponent_C) == 0x0001F8, "Wrong size on UBP_ADM_RedChest_GMComponent_C");
static_assert(offsetof(UBP_ADM_RedChest_GMComponent_C, UberGraphFrame_BP_ADM_RedChest_GMComponent_C) == 0x0001D8, "Member 'UBP_ADM_RedChest_GMComponent_C::UberGraphFrame_BP_ADM_RedChest_GMComponent_C' has a wrong offset!");
static_assert(offsetof(UBP_ADM_RedChest_GMComponent_C, Currently_selected_location) == 0x0001E0, "Member 'UBP_ADM_RedChest_GMComponent_C::Currently_selected_location' has a wrong offset!");
static_assert(offsetof(UBP_ADM_RedChest_GMComponent_C, Red_chest_loot_manager) == 0x0001E8, "Member 'UBP_ADM_RedChest_GMComponent_C::Red_chest_loot_manager' has a wrong offset!");
static_assert(offsetof(UBP_ADM_RedChest_GMComponent_C, Spawned_red_chest) == 0x0001F0, "Member 'UBP_ADM_RedChest_GMComponent_C::Spawned_red_chest' has a wrong offset!");

}

