#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapMarkerComponent

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_MapMarkerComponent.BP_MapMarkerComponent_C
// 0x0050 (0x0250 - 0x0200)
class UBP_MapMarkerComponent_C final : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0200(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTexture*                               Texture;                                           // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMapMarkerType                                Color;                                             // 0x0210(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ImageSize;                                         // 0x0214(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Tilt;                                              // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Tooltip;                                           // 0x0220(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          ImageSizeIsRealWorldSize;                          // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Tag;                                               // 0x023C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsMarkerActive;                                    // 0x0244(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ShowInMap;                                         // 0x0245(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShowInCompass;                                     // 0x0246(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_MapMarkerComponent(int32 EntryPoint);
	void Deactivate_Marker();
	void Change_Marker_Settings(const struct FS_CustomMapMarker& Marker_Settings);
	void Activate_Marker();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MapMarkerComponent_C">();
	}
	static class UBP_MapMarkerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MapMarkerComponent_C>();
	}
};
static_assert(alignof(UBP_MapMarkerComponent_C) == 0x000010, "Wrong alignment on UBP_MapMarkerComponent_C");
static_assert(sizeof(UBP_MapMarkerComponent_C) == 0x000250, "Wrong size on UBP_MapMarkerComponent_C");
static_assert(offsetof(UBP_MapMarkerComponent_C, UberGraphFrame) == 0x000200, "Member 'UBP_MapMarkerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, Texture) == 0x000208, "Member 'UBP_MapMarkerComponent_C::Texture' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, Color) == 0x000210, "Member 'UBP_MapMarkerComponent_C::Color' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, ImageSize) == 0x000214, "Member 'UBP_MapMarkerComponent_C::ImageSize' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, Tilt) == 0x00021C, "Member 'UBP_MapMarkerComponent_C::Tilt' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, Tooltip) == 0x000220, "Member 'UBP_MapMarkerComponent_C::Tooltip' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, ImageSizeIsRealWorldSize) == 0x000238, "Member 'UBP_MapMarkerComponent_C::ImageSizeIsRealWorldSize' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, Tag) == 0x00023C, "Member 'UBP_MapMarkerComponent_C::Tag' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, IsMarkerActive) == 0x000244, "Member 'UBP_MapMarkerComponent_C::IsMarkerActive' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, ShowInMap) == 0x000245, "Member 'UBP_MapMarkerComponent_C::ShowInMap' has a wrong offset!");
static_assert(offsetof(UBP_MapMarkerComponent_C, ShowInCompass) == 0x000246, "Member 'UBP_MapMarkerComponent_C::ShowInCompass' has a wrong offset!");

}

