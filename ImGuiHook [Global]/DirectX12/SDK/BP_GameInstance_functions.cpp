#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "BP_GameInstance_classes.hpp"
#include "BP_GameInstance_parameters.hpp"


namespace SDK
{

// Function BP_GameInstance.BP_GameInstance_C.ChallengeManagerCreated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ChallengeManagerCreated__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ChallengeManagerCreated__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ExecuteUbergraph_BP_GameInstance
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ExecuteUbergraph_BP_GameInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ExecuteUbergraph_BP_GameInstance");

	Params::BP_GameInstance_C_ExecuteUbergraph_BP_GameInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.PlatformStoreInitialized
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::PlatformStoreInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "PlatformStoreInitialized");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.EnableMinimizeAfterDuration
// (Event, Public, BlueprintEvent)

void UBP_GameInstance_C::EnableMinimizeAfterDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "EnableMinimizeAfterDuration");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.DelayMinimize
// (Event, Public, BlueprintEvent)

void UBP_GameInstance_C::DelayMinimize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "DelayMinimize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.CheckMotionBlur
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsMotionBlurEnabled                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::CheckMotionBlur(bool IsMotionBlurEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "CheckMotionBlur");

	Params::BP_GameInstance_C_CheckMotionBlur Parms{};

	Parms.IsMotionBlurEnabled = IsMotionBlurEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.CheckFPSEnabled
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ZOrder                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CreateNew                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::CheckFPSEnabled(int32 ZOrder, bool CreateNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "CheckFPSEnabled");

	Params::BP_GameInstance_C_CheckFPSEnabled Parms{};

	Parms.ZOrder = ZOrder;
	Parms.CreateNew = CreateNew;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyResolution
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ApplyResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyResolution");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnVideoSettingsChangeEventDelegate
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVideoSaveSettings               VideoSettings                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_GameInstance_C::OnVideoSettingsChangeEventDelegate(const struct FVideoSaveSettings& VideoSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnVideoSettingsChangeEventDelegate");

	Params::BP_GameInstance_C_OnVideoSettingsChangeEventDelegate Parms{};

	Parms.VideoSettings = std::move(VideoSettings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.BPI_StoreAchievementProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IncreaseProgressBy                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::BPI_StoreAchievementProgress(class FName AchievementName, float IncreaseProgressBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "BPI_StoreAchievementProgress");

	Params::BP_GameInstance_C_BPI_StoreAchievementProgress Parms{};

	Parms.AchievementName = AchievementName;
	Parms.IncreaseProgressBy = IncreaseProgressBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.BPI_AddToAchievementQueue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::BPI_AddToAchievementQueue(class APlayerController* PlayerController, class FName AchievementName, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "BPI_AddToAchievementQueue");

	Params::BP_GameInstance_C_BPI_AddToAchievementQueue Parms{};

	Parms.PlayerController = PlayerController;
	Parms.AchievementName = AchievementName;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.EventSystemStarted
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::EventSystemStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "EventSystemStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Clear last played array
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Clear_last_played_array()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Clear last played array");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Save player to last played array
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Player_name                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// class FString                           Analytics_User_ID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FUniqueNetIdRepl                 Player_unique_ID                                       (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// EFlamePlatform                          Player_platform                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Save_player_to_last_played_array(const class FString& Player_name, const class FString& Analytics_User_ID, const struct FUniqueNetIdRepl& Player_unique_ID, EFlamePlatform Player_platform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Save player to last played array");

	Params::BP_GameInstance_C_Save_player_to_last_played_array Parms{};

	Parms.Player_name = std::move(Player_name);
	Parms.Analytics_User_ID = std::move(Analytics_User_ID);
	Parms.Player_unique_ID = std::move(Player_unique_ID);
	Parms.Player_platform = Player_platform;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SafePlatformSavingByGameInstance
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SafePlatformSavingByGameInstance(class USaveGame* SaveGameObject, const class FString& SlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SafePlatformSavingByGameInstance");

	Params::BP_GameInstance_C_SafePlatformSavingByGameInstance Parms{};

	Parms.SaveGameObject = SaveGameObject;
	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.StoreAchievementProgressToSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   IncreaseProgressBy                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::StoreAchievementProgressToSave(class FName AchievementName, float IncreaseProgressBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "StoreAchievementProgressToSave");

	Params::BP_GameInstance_C_StoreAchievementProgressToSave Parms{};

	Parms.AchievementName = AchievementName;
	Parms.IncreaseProgressBy = IncreaseProgressBy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ReceiveShutdown
// (Event, Public, BlueprintEvent)

void UBP_GameInstance_C::ReceiveShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ReceiveShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Player Lost
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Player_Lost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Player Lost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Player Switched
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Player_Switched()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Player Switched");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.EncounterHint_ControllerInstantiated
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::EncounterHint_ControllerInstantiated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "EncounterHint_ControllerInstantiated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.EncounterHint_MatchLeft
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUserMatchResult                 Match_Result                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::EncounterHint_MatchLeft(const struct FUserMatchResult& Match_Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "EncounterHint_MatchLeft");

	Params::BP_GameInstance_C_EncounterHint_MatchLeft Parms{};

	Parms.Match_Result = std::move(Match_Result);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.EncounterHint_MatchPlayed
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::EncounterHint_MatchPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "EncounterHint_MatchPlayed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Start Challenge System
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Start_Challenge_System()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Start Challenge System");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Event System Started
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Event_System_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Event System Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Player Left Group
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUniqueNetIdRepl                 Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FString                           GroupId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Player_Left_Group(const struct FUniqueNetIdRepl& Userid, const class FString& GroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Player Left Group");

	Params::BP_GameInstance_C_Player_Left_Group Parms{};

	Parms.Userid = std::move(Userid);
	Parms.GroupId = std::move(GroupId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Player Joined Group
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FUniqueNetIdRepl                 Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FString                           GroupId                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Player_Joined_Group(const struct FUniqueNetIdRepl& Userid, const class FString& GroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Player Joined Group");

	Params::BP_GameInstance_C_Player_Joined_Group Parms{};

	Parms.Userid = std::move(Userid);
	Parms.GroupId = std::move(GroupId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Send Dedicated Server Analytics
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Send_Dedicated_Server_Analytics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Send Dedicated Server Analytics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UBP_GameInstance_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Init Achievement System
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Init_Achievement_System()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Init Achievement System");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Add to Achievement Queue
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Achievement_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Add_to_Achievement_Queue(class APlayerController* Player_Controller, class FName Achievement_Name, float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Add to Achievement Queue");

	Params::BP_GameInstance_C_Add_to_Achievement_Queue Parms{};

	Parms.Player_Controller = Player_Controller;
	Parms.Achievement_Name = Achievement_Name;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Send Achievement Progress to OSS
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Send_Achievement_Progress_to_OSS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Send Achievement Progress to OSS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Refresh Achievement Cache
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Refresh_Achievement_Cache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Refresh Achievement Cache");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnLoadSucceed_3309B7AC4A02DB98B2CE0AAC3D450199
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnLoadSucceed_3309B7AC4A02DB98B2CE0AAC3D450199(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnLoadSucceed_3309B7AC4A02DB98B2CE0AAC3D450199");

	Params::BP_GameInstance_C_OnLoadSucceed_3309B7AC4A02DB98B2CE0AAC3D450199 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnLoadFailed_3309B7AC4A02DB98B2CE0AAC3D450199
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnLoadFailed_3309B7AC4A02DB98B2CE0AAC3D450199(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnLoadFailed_3309B7AC4A02DB98B2CE0AAC3D450199");

	Params::BP_GameInstance_C_OnLoadFailed_3309B7AC4A02DB98B2CE0AAC3D450199 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveSucceed_E763D687473564307975C9AFA347244A
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveSucceed_E763D687473564307975C9AFA347244A(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveSucceed_E763D687473564307975C9AFA347244A");

	Params::BP_GameInstance_C_OnSaveSucceed_E763D687473564307975C9AFA347244A Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveFailed_E763D687473564307975C9AFA347244A
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveFailed_E763D687473564307975C9AFA347244A(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveFailed_E763D687473564307975C9AFA347244A");

	Params::BP_GameInstance_C_OnSaveFailed_E763D687473564307975C9AFA347244A Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveSucceed_3DF602D74A0437350F09C0A12379EF93
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveSucceed_3DF602D74A0437350F09C0A12379EF93(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveSucceed_3DF602D74A0437350F09C0A12379EF93");

	Params::BP_GameInstance_C_OnSaveSucceed_3DF602D74A0437350F09C0A12379EF93 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveFailed_3DF602D74A0437350F09C0A12379EF93
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveFailed_3DF602D74A0437350F09C0A12379EF93(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveFailed_3DF602D74A0437350F09C0A12379EF93");

	Params::BP_GameInstance_C_OnSaveFailed_3DF602D74A0437350F09C0A12379EF93 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveSucceed_5EDD165948E74565F7665282E9050FCF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveSucceed_5EDD165948E74565F7665282E9050FCF(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveSucceed_5EDD165948E74565F7665282E9050FCF");

	Params::BP_GameInstance_C_OnSaveSucceed_5EDD165948E74565F7665282E9050FCF Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSaveFailed_5EDD165948E74565F7665282E9050FCF
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSaveFailed_5EDD165948E74565F7665282E9050FCF(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSaveFailed_5EDD165948E74565F7665282E9050FCF");

	Params::BP_GameInstance_C_OnSaveFailed_5EDD165948E74565F7665282E9050FCF Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSuccess_FBE8EC8B4496D136CDCA5290A8D54912
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::OnSuccess_FBE8EC8B4496D136CDCA5290A8D54912()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSuccess_FBE8EC8B4496D136CDCA5290A8D54912");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnFailure_FBE8EC8B4496D136CDCA5290A8D54912
// (BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::OnFailure_FBE8EC8B4496D136CDCA5290A8D54912()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnFailure_FBE8EC8B4496D136CDCA5290A8D54912");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnSuccess_609E024B4C0B65F0717CA39E4FF2E5BD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WrittenAchievementName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WrittenProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WrittenUserTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnSuccess_609E024B4C0B65F0717CA39E4FF2E5BD(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnSuccess_609E024B4C0B65F0717CA39E4FF2E5BD");

	Params::BP_GameInstance_C_OnSuccess_609E024B4C0B65F0717CA39E4FF2E5BD Parms{};

	Parms.WrittenAchievementName = WrittenAchievementName;
	Parms.WrittenProgress = WrittenProgress;
	Parms.WrittenUserTag = WrittenUserTag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnFailure_609E024B4C0B65F0717CA39E4FF2E5BD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WrittenAchievementName                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   WrittenProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   WrittenUserTag                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OnFailure_609E024B4C0B65F0717CA39E4FF2E5BD(class FName WrittenAchievementName, float WrittenProgress, int32 WrittenUserTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnFailure_609E024B4C0B65F0717CA39E4FF2E5BD");

	Params::BP_GameInstance_C_OnFailure_609E024B4C0B65F0717CA39E4FF2E5BD Parms{};

	Parms.WrittenAchievementName = WrittenAchievementName;
	Parms.WrittenProgress = WrittenProgress;
	Parms.WrittenUserTag = WrittenUserTag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.GetLoadingSound
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   TimeToTravel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             LevelName                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeInTime                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeOutTime                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   FadeOutDelay                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class USoundBase* UBP_GameInstance_C::GetLoadingSound(float TimeToTravel, const class FName& LevelName, float* FadeInTime, float* FadeOutTime, float* FadeOutDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetLoadingSound");

	Params::BP_GameInstance_C_GetLoadingSound Parms{};

	Parms.TimeToTravel = TimeToTravel;
	Parms.LevelName = LevelName;

	UObject::ProcessEvent(Func, &Parms);

	if (FadeInTime != nullptr)
		*FadeInTime = Parms.FadeInTime;

	if (FadeOutTime != nullptr)
		*FadeOutTime = Parms.FadeOutTime;

	if (FadeOutDelay != nullptr)
		*FadeOutDelay = Parms.FadeOutDelay;

	return Parms.ReturnValue;
}


// Function BP_GameInstance.BP_GameInstance_C.Get Achievement Progress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Achievement_Name                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_Output                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Might_Be_Out_of_Date                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Achievement_Progress                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Get_Achievement_Progress(class APlayerController* PlayerController, class FName Achievement_Name, bool* Valid_Output, bool* Might_Be_Out_of_Date, float* Achievement_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Get Achievement Progress");

	Params::BP_GameInstance_C_Get_Achievement_Progress Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Achievement_Name = Achievement_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid_Output != nullptr)
		*Valid_Output = Parms.Valid_Output;

	if (Might_Be_Out_of_Date != nullptr)
		*Might_Be_Out_of_Date = Parms.Might_Be_Out_of_Date;

	if (Achievement_Progress != nullptr)
		*Achievement_Progress = Parms.Achievement_Progress;
}


// Function BP_GameInstance.BP_GameInstance_C.InvalidCloudRequest
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_GameInstance_C::InvalidCloudRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "InvalidCloudRequest");

	Params::BP_GameInstance_C_InvalidCloudRequest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameInstance.BP_GameInstance_C.GetCloudTime
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        CloudTime                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetCloudTime(struct FDateTime* CloudTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetCloudTime");

	Params::BP_GameInstance_C_GetCloudTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CloudTime != nullptr)
		*CloudTime = std::move(Parms.CloudTime);
}


// Function BP_GameInstance.BP_GameInstance_C.GetLocalController
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetLocalController(class APlayerController** PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetLocalController");

	Params::BP_GameInstance_C_GetLocalController Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerController != nullptr)
		*PlayerController = Parms.PlayerController;
}


// Function BP_GameInstance.BP_GameInstance_C.GetControllerId
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_GameInstance_C::GetControllerId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetControllerId");

	Params::BP_GameInstance_C_GetControllerId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameInstance.BP_GameInstance_C.GetGameMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AGameModeBase*                    GameMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetGameMode(class AGameModeBase** GameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetGameMode");

	Params::BP_GameInstance_C_GetGameMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GameMode != nullptr)
		*GameMode = Parms.GameMode;
}


// Function BP_GameInstance.BP_GameInstance_C.LoadOrCreateAchievementsSave
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_AchievementsSaveGame_C*       AchievementsSave                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::LoadOrCreateAchievementsSave(class UBP_AchievementsSaveGame_C** AchievementsSave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "LoadOrCreateAchievementsSave");

	Params::BP_GameInstance_C_LoadOrCreateAchievementsSave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AchievementsSave != nullptr)
		*AchievementsSave = Parms.AchievementsSave;
}


// Function BP_GameInstance.BP_GameInstance_C.Get Achievement ProgressFromSave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AchievementProgress                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Get_Achievement_ProgressFromSave(class FName AchievementName, float* AchievementProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Get Achievement ProgressFromSave");

	Params::BP_GameInstance_C_Get_Achievement_ProgressFromSave Parms{};

	Parms.AchievementName = AchievementName;

	UObject::ProcessEvent(Func, &Parms);

	if (AchievementProgress != nullptr)
		*AchievementProgress = Parms.AchievementProgress;
}


// Function BP_GameInstance.BP_GameInstance_C.ChallengesAddPartialProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ChallengesAddPartialProgress(const class FString& Key, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ChallengesAddPartialProgress");

	Params::BP_GameInstance_C_ChallengesAddPartialProgress Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ChallengesFindPartialProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WasFound_                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::ChallengesFindPartialProgress(const class FString& Key, int32* Value, bool* WasFound_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ChallengesFindPartialProgress");

	Params::BP_GameInstance_C_ChallengesFindPartialProgress Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;

	if (WasFound_ != nullptr)
		*WasFound_ = Parms.WasFound_;
}


// Function BP_GameInstance.BP_GameInstance_C.ChallengesRemovePartialProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Was_Removed_                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::ChallengesRemovePartialProgress(const class FString& Key, bool* Was_Removed_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ChallengesRemovePartialProgress");

	Params::BP_GameInstance_C_ChallengesRemovePartialProgress Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (Was_Removed_ != nullptr)
		*Was_Removed_ = Parms.Was_Removed_;
}


// Function BP_GameInstance.BP_GameInstance_C.SetPlatformStorePurchaseDelegate
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SetPlatformStorePurchaseDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetPlatformStorePurchaseDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnPlatformStorePurchaseFinished
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FGameStorePurchaseResult         GameStorePurchaseResult                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_GameInstance_C::OnPlatformStorePurchaseFinished(const struct FCloudRequestResult& CloudRequestResult, const struct FGameStorePurchaseResult& GameStorePurchaseResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnPlatformStorePurchaseFinished");

	Params::BP_GameInstance_C_OnPlatformStorePurchaseFinished Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);
	Parms.GameStorePurchaseResult = std::move(GameStorePurchaseResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OpenStore
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUI_ShelterShop_C*                AsUI_Shelter_Shop                                      (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::OpenStore(class UUI_ShelterShop_C** AsUI_Shelter_Shop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OpenStore");

	Params::BP_GameInstance_C_OpenStore Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsUI_Shelter_Shop != nullptr)
		*AsUI_Shelter_Shop = Parms.AsUI_Shelter_Shop;
}


// Function BP_GameInstance.BP_GameInstance_C.Check&CorrectConsoleSettings
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Check_CorrectConsoleSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Check&CorrectConsoleSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.IsHealingOthersActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::IsHealingOthersActive(bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "IsHealingOthersActive");

	Params::BP_GameInstance_C_IsHealingOthersActive Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BP_GameInstance.BP_GameInstance_C.BPI_GetAchievementProgressFromSave_Pure
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AchievementProgress                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::BPI_GetAchievementProgressFromSave_Pure(class FName AchievementName, bool* bValid, float* AchievementProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "BPI_GetAchievementProgressFromSave_Pure");

	Params::BP_GameInstance_C_BPI_GetAchievementProgressFromSave_Pure Parms{};

	Parms.AchievementName = AchievementName;

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;

	if (AchievementProgress != nullptr)
		*AchievementProgress = Parms.AchievementProgress;
}


// Function BP_GameInstance.BP_GameInstance_C.BPI_GetAchievementProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AchievementName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ValidOutput                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    MightBeOutOfDate                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AchievementProgress                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::BPI_GetAchievementProgress(class APlayerController* PlayerController, class FName AchievementName, bool* ValidOutput, bool* MightBeOutOfDate, float* AchievementProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "BPI_GetAchievementProgress");

	Params::BP_GameInstance_C_BPI_GetAchievementProgress Parms{};

	Parms.PlayerController = PlayerController;
	Parms.AchievementName = AchievementName;

	UObject::ProcessEvent(Func, &Parms);

	if (ValidOutput != nullptr)
		*ValidOutput = Parms.ValidOutput;

	if (MightBeOutOfDate != nullptr)
		*MightBeOutOfDate = Parms.MightBeOutOfDate;

	if (AchievementProgress != nullptr)
		*AchievementProgress = Parms.AchievementProgress;
}


// Function BP_GameInstance.BP_GameInstance_C.BPI_CheckForValidGameInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bValid                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_GameInstance_C::BPI_CheckForValidGameInstance(bool* bValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "BPI_CheckForValidGameInstance");

	Params::BP_GameInstance_C_BPI_CheckForValidGameInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bValid != nullptr)
		*bValid = Parms.bValid;
}

}

