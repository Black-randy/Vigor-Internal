#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapsManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MapsManager.BP_MapsManager_C.ExecuteUbergraph_BP_MapsManager
// 0x0098 (0x0098 - 0x0000)
struct BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudRequestResult                    K2Node_CustomEvent_RequestResult;                  // 0x0008(0x0058)(ConstParm)
	class FString                                 K2Node_CustomEvent_UserId;                         // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FCloudMapRotationsResponse             K2Node_CustomEvent_Data;                           // 0x0070(0x0010)(ConstParm)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameScenario                                 CallFunc_GetGameScenario_ReturnValue;              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager) == 0x000008, "Wrong alignment on BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager");
static_assert(sizeof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager) == 0x000098, "Wrong size on BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, EntryPoint) == 0x000000, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, K2Node_CustomEvent_RequestResult) == 0x000008, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::K2Node_CustomEvent_RequestResult' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, K2Node_CustomEvent_UserId) == 0x000060, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::K2Node_CustomEvent_UserId' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, K2Node_CustomEvent_Data) == 0x000070, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::K2Node_CustomEvent_Data' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, CallFunc_GetUserControllerId_ReturnValue) == 0x000080, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000088, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, CallFunc_GetGameScenario_ReturnValue) == 0x000090, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::CallFunc_GetGameScenario_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000091, "Member 'BP_MapsManager_C_ExecuteUbergraph_BP_MapsManager::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.OnGetMapsRotationFinished
// 0x0078 (0x0078 - 0x0000)
struct BP_MapsManager_C_OnGetMapsRotationFinished final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class FString                                 Userid;                                            // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	struct FCloudMapRotationsResponse             Data;                                              // 0x0068(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(BP_MapsManager_C_OnGetMapsRotationFinished) == 0x000008, "Wrong alignment on BP_MapsManager_C_OnGetMapsRotationFinished");
static_assert(sizeof(BP_MapsManager_C_OnGetMapsRotationFinished) == 0x000078, "Wrong size on BP_MapsManager_C_OnGetMapsRotationFinished");
static_assert(offsetof(BP_MapsManager_C_OnGetMapsRotationFinished, RequestResult) == 0x000000, "Member 'BP_MapsManager_C_OnGetMapsRotationFinished::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_OnGetMapsRotationFinished, Userid) == 0x000058, "Member 'BP_MapsManager_C_OnGetMapsRotationFinished::Userid' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_OnGetMapsRotationFinished, Data) == 0x000068, "Member 'BP_MapsManager_C_OnGetMapsRotationFinished::Data' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.BindDelegates
// 0x0038 (0x0038 - 0x0000)
struct BP_MapsManager_C_BindDelegates final
{
public:
	class UEventSystem*                           CallFunc_GetEventSystem_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_EventSystem_C*                      K2Node_DynamicCast_AsBP_Event_System;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FCloudRequestResult& RequestResult, const class FString& Userid, struct FCloudMapRotationsResponse& Data)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_BindDelegates) == 0x000008, "Wrong alignment on BP_MapsManager_C_BindDelegates");
static_assert(sizeof(BP_MapsManager_C_BindDelegates) == 0x000038, "Wrong size on BP_MapsManager_C_BindDelegates");
static_assert(offsetof(BP_MapsManager_C_BindDelegates, CallFunc_GetEventSystem_ReturnValue) == 0x000000, "Member 'BP_MapsManager_C_BindDelegates::CallFunc_GetEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_BindDelegates, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_MapsManager_C_BindDelegates::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_BindDelegates, K2Node_DynamicCast_AsBP_Event_System) == 0x000018, "Member 'BP_MapsManager_C_BindDelegates::K2Node_DynamicCast_AsBP_Event_System' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_BindDelegates, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MapsManager_C_BindDelegates::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_BindDelegates, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_MapsManager_C_BindDelegates::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.UnbindDelegates
// 0x0038 (0x0038 - 0x0000)
struct BP_MapsManager_C_UnbindDelegates final
{
public:
	class UEventSystem*                           CallFunc_GetEventSystem_ReturnValue;               // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	class UBP_EventSystem_C*                      K2Node_DynamicCast_AsBP_Event_System;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(struct FCloudRequestResult& RequestResult, const class FString& Userid, struct FCloudMapRotationsResponse& Data)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_UnbindDelegates) == 0x000008, "Wrong alignment on BP_MapsManager_C_UnbindDelegates");
static_assert(sizeof(BP_MapsManager_C_UnbindDelegates) == 0x000038, "Wrong size on BP_MapsManager_C_UnbindDelegates");
static_assert(offsetof(BP_MapsManager_C_UnbindDelegates, CallFunc_GetEventSystem_ReturnValue) == 0x000000, "Member 'BP_MapsManager_C_UnbindDelegates::CallFunc_GetEventSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UnbindDelegates, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_MapsManager_C_UnbindDelegates::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UnbindDelegates, K2Node_DynamicCast_AsBP_Event_System) == 0x000018, "Member 'BP_MapsManager_C_UnbindDelegates::K2Node_DynamicCast_AsBP_Event_System' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UnbindDelegates, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MapsManager_C_UnbindDelegates::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UnbindDelegates, K2Node_CreateDelegate_OutputDelegate_1) == 0x000024, "Member 'BP_MapsManager_C_UnbindDelegates::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.ProcessCloudResponse
// 0x00E8 (0x00E8 - 0x0000)
struct BP_MapsManager_C_ProcessCloudResponse final
{
public:
	struct FCloudRequestResult                    RequestResult;                                     // 0x0000(0x0058)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FCloudMapRotationsResponse             MapRotationsResponse;                              // 0x0058(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCloudMapRotationSlot                  CallFunc_GetDefaultMapRotationSlot_ReturnValue;    // 0x0070(0x0050)()
	TArray<struct FCloudMapRotationSlot>          K2Node_MakeArray_Array;                            // 0x00C0(0x0010)(ReferenceParm)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00D0(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00E0(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapsManager_C_ProcessCloudResponse) == 0x000008, "Wrong alignment on BP_MapsManager_C_ProcessCloudResponse");
static_assert(sizeof(BP_MapsManager_C_ProcessCloudResponse) == 0x0000E8, "Wrong size on BP_MapsManager_C_ProcessCloudResponse");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, RequestResult) == 0x000000, "Member 'BP_MapsManager_C_ProcessCloudResponse::RequestResult' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, MapRotationsResponse) == 0x000058, "Member 'BP_MapsManager_C_ProcessCloudResponse::MapRotationsResponse' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'BP_MapsManager_C_ProcessCloudResponse::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, CallFunc_GetDefaultMapRotationSlot_ReturnValue) == 0x000070, "Member 'BP_MapsManager_C_ProcessCloudResponse::CallFunc_GetDefaultMapRotationSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, K2Node_MakeArray_Array) == 0x0000C0, "Member 'BP_MapsManager_C_ProcessCloudResponse::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, K2Node_CreateDelegate_OutputDelegate) == 0x0000D0, "Member 'BP_MapsManager_C_ProcessCloudResponse::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ProcessCloudResponse, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000E0, "Member 'BP_MapsManager_C_ProcessCloudResponse::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.UpdateMapsRotation
// 0x0038 (0x0038 - 0x0000)
struct BP_MapsManager_C_UpdateMapsRotation final
{
public:
	bool                                          CallFunc_IsRequestInProgress_Result;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_InvalidCloudRequest_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetUserControllerId_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHumanPlayerController*                 CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue; // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetMapsRotation_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_UpdateMapsRotation) == 0x000008, "Wrong alignment on BP_MapsManager_C_UpdateMapsRotation");
static_assert(sizeof(BP_MapsManager_C_UpdateMapsRotation) == 0x000038, "Wrong size on BP_MapsManager_C_UpdateMapsRotation");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_IsRequestInProgress_Result) == 0x000000, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_IsRequestInProgress_Result' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_MapsManager_C_UpdateMapsRotation::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_InvalidCloudRequest_ReturnValue) == 0x000014, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_InvalidCloudRequest_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000018, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_GetUserControllerId_ReturnValue) == 0x000020, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_GetUserControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue) == 0x000028, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_GetHumanPlayerControllerByControllerId_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_GetMapsRotation_ReturnValue) == 0x000030, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_GetMapsRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_UpdateMapsRotation, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_MapsManager_C_UpdateMapsRotation::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.IsRequestInProgress
// 0x0002 (0x0002 - 0x0000)
struct BP_MapsManager_C_IsRequestInProgress final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_IsRequestInProgress) == 0x000001, "Wrong alignment on BP_MapsManager_C_IsRequestInProgress");
static_assert(sizeof(BP_MapsManager_C_IsRequestInProgress) == 0x000002, "Wrong size on BP_MapsManager_C_IsRequestInProgress");
static_assert(offsetof(BP_MapsManager_C_IsRequestInProgress, Result) == 0x000000, "Member 'BP_MapsManager_C_IsRequestInProgress::Result' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_IsRequestInProgress, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_MapsManager_C_IsRequestInProgress::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.HasMapsRotationAvailable
// 0x0002 (0x0002 - 0x0000)
struct BP_MapsManager_C_HasMapsRotationAvailable final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_HasMapsRotationAvailable) == 0x000001, "Wrong alignment on BP_MapsManager_C_HasMapsRotationAvailable");
static_assert(sizeof(BP_MapsManager_C_HasMapsRotationAvailable) == 0x000002, "Wrong size on BP_MapsManager_C_HasMapsRotationAvailable");
static_assert(offsetof(BP_MapsManager_C_HasMapsRotationAvailable, Result) == 0x000000, "Member 'BP_MapsManager_C_HasMapsRotationAvailable::Result' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_HasMapsRotationAvailable, K2Node_SwitchEnum_CmpSuccess) == 0x000001, "Member 'BP_MapsManager_C_HasMapsRotationAvailable::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.ScheduleNextRefresh
// 0x00F8 (0x00F8 - 0x0000)
struct BP_MapsManager_C_ScheduleNextRefresh final
{
public:
	float                                         SecondsToRefresh;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EarliestEndTime;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0038(0x0010)(ZeroConstructor, NoDestructor)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0058(0x0008)(NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_GetCloudTime_ReturnValue;                 // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_DateTimeMaxValue_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTotalSeconds_ReturnValue;              // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DateTimeDateTime_ReturnValue;    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_DateTimeMinValue_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_DateTimeMaxValue_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FCloudMapRotationSlot                  CallFunc_Array_Get_Item;                           // 0x00A0(0x0050)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_DateTimeDateTime_ReturnValue;        // 0x00F5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_DateTimeDateTime_ReturnValue_1;  // 0x00F6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00F7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MapsManager_C_ScheduleNextRefresh) == 0x000008, "Wrong alignment on BP_MapsManager_C_ScheduleNextRefresh");
static_assert(sizeof(BP_MapsManager_C_ScheduleNextRefresh) == 0x0000F8, "Wrong size on BP_MapsManager_C_ScheduleNextRefresh");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, SecondsToRefresh) == 0x000000, "Member 'BP_MapsManager_C_ScheduleNextRefresh::SecondsToRefresh' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, EarliestEndTime) == 0x000008, "Member 'BP_MapsManager_C_ScheduleNextRefresh::EarliestEndTime' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, Temp_float_Variable) == 0x000010, "Member 'BP_MapsManager_C_ScheduleNextRefresh::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_MapsManager_C_ScheduleNextRefresh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_MapsManager_C_ScheduleNextRefresh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Conv_FloatToString_ReturnValue) == 0x000028, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, K2Node_CreateDelegate_OutputDelegate) == 0x000038, "Member 'BP_MapsManager_C_ScheduleNextRefresh::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Concat_StrStr_ReturnValue) == 0x000048, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000058, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000060, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_GetCloudTime_ReturnValue) == 0x000070, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_GetCloudTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_DateTimeMaxValue_ReturnValue) == 0x000078, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_DateTimeMaxValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000080, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_GetTotalSeconds_ReturnValue) == 0x000088, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_GetTotalSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_NotEqual_DateTimeDateTime_ReturnValue) == 0x00008C, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_NotEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_DateTimeMinValue_ReturnValue) == 0x000090, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_DateTimeMinValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_DateTimeMaxValue_ReturnValue_1) == 0x000098, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_DateTimeMaxValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Array_Length_ReturnValue) == 0x0000F0, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_Less_DateTimeDateTime_ReturnValue) == 0x0000F5, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_Less_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_NotEqual_DateTimeDateTime_ReturnValue_1) == 0x0000F6, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_NotEqual_DateTimeDateTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MapsManager_C_ScheduleNextRefresh, CallFunc_BooleanAND_ReturnValue) == 0x0000F7, "Member 'BP_MapsManager_C_ScheduleNextRefresh::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MapsManager.BP_MapsManager_C.GetMapRotationSlots
// 0x0010 (0x0010 - 0x0000)
struct BP_MapsManager_C_GetMapRotationSlots final
{
public:
	TArray<struct FCloudMapRotationSlot>          Slots;                                             // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_MapsManager_C_GetMapRotationSlots) == 0x000008, "Wrong alignment on BP_MapsManager_C_GetMapRotationSlots");
static_assert(sizeof(BP_MapsManager_C_GetMapRotationSlots) == 0x000010, "Wrong size on BP_MapsManager_C_GetMapRotationSlots");
static_assert(offsetof(BP_MapsManager_C_GetMapRotationSlots, Slots) == 0x000000, "Member 'BP_MapsManager_C_GetMapRotationSlots::Slots' has a wrong offset!");

}

