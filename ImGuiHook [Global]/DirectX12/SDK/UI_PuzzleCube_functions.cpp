#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_PuzzleCube

#include "Basic.hpp"

#include "UI_PuzzleCube_classes.hpp"
#include "UI_PuzzleCube_parameters.hpp"


namespace SDK
{

// Function UI_PuzzleCube.UI_PuzzleCube_C.OnClose__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::OnClose__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "OnClose__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.ExecuteUbergraph_UI_PuzzleCube
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::ExecuteUbergraph_UI_PuzzleCube(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "ExecuteUbergraph_UI_PuzzleCube");

	Params::UI_PuzzleCube_C_ExecuteUbergraph_UI_PuzzleCube Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.InputModeChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputMode                              InputMode                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::InputModeChanged(int32 PlayerIndex, EInputMode InputMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "InputModeChanged");

	Params::UI_PuzzleCube_C_InputModeChanged Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.InputMode = InputMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__ActionSolve_K2Node_ComponentBoundEvent_3_OnActionHoldEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__ActionSolve_K2Node_ComponentBoundEvent_3_OnActionHoldEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__ActionSolve_K2Node_ComponentBoundEvent_3_OnActionHoldEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__ActionSolve_K2Node_ComponentBoundEvent_2_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__ActionSolve_K2Node_ComponentBoundEvent_2_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__ActionSolve_K2Node_ComponentBoundEvent_2_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_1_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_1_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_1_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.Destruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_PuzzleCube_C::Destruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "Destruct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_CFL_K2Node_ComponentBoundEvent_371_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_CFL_K2Node_ComponentBoundEvent_371_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_CFL_K2Node_ComponentBoundEvent_371_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_CFD_K2Node_ComponentBoundEvent_325_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_CFD_K2Node_ComponentBoundEvent_325_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_CFD_K2Node_ComponentBoundEvent_325_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_CFU_K2Node_ComponentBoundEvent_277_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_CFU_K2Node_ComponentBoundEvent_277_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_CFU_K2Node_ComponentBoundEvent_277_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_CFR_K2Node_ComponentBoundEvent_232_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_CFR_K2Node_ComponentBoundEvent_232_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_CFR_K2Node_ComponentBoundEvent_232_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_512_OnActionHoldEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_512_OnActionHoldEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_K2Node_ComponentBoundEvent_512_OnActionHoldEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_TurnCenter2_K2Node_ComponentBoundEvent_404_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_TurnCenter2_K2Node_ComponentBoundEvent_404_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_TurnCenter2_K2Node_ComponentBoundEvent_404_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_TurnCenter1_K2Node_ComponentBoundEvent_384_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_TurnCenter1_K2Node_ComponentBoundEvent_384_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_TurnCenter1_K2Node_ComponentBoundEvent_384_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.Tick
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// struct FGeometry                        MyGeometry                                             (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   InDeltaTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::Tick(const struct FGeometry& MyGeometry, float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "Tick");

	Params::UI_PuzzleCube_C_Tick Parms{};

	Parms.MyGeometry = std::move(MyGeometry);
	Parms.InDeltaTime = InDeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.RightStickLeftRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::RightStickLeftRight(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "RightStickLeftRight");

	Params::UI_PuzzleCube_C_RightStickLeftRight Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.RightStickUpDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::RightStickUpDown(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "RightStickUpDown");

	Params::UI_PuzzleCube_C_RightStickUpDown Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.LeftStickLeftRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::LeftStickLeftRight(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "LeftStickLeftRight");

	Params::UI_PuzzleCube_C_LeftStickLeftRight Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.LeftStickUpDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::LeftStickUpDown(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "LeftStickUpDown");

	Params::UI_PuzzleCube_C_LeftStickUpDown Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_Close_K2Node_ComponentBoundEvent_212_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_Close_K2Node_ComponentBoundEvent_212_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_Close_K2Node_ComponentBoundEvent_212_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_TurnFace2_K2Node_ComponentBoundEvent_157_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_TurnFace2_K2Node_ComponentBoundEvent_157_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_TurnFace2_K2Node_ComponentBoundEvent_157_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.BndEvt__UI_GamepadActionWidget_TurnFace1_K2Node_ComponentBoundEvent_140_OnActionPressedEvent__DelegateSignature
// (BlueprintEvent)

void UUI_PuzzleCube_C::BndEvt__UI_GamepadActionWidget_TurnFace1_K2Node_ComponentBoundEvent_140_OnActionPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "BndEvt__UI_GamepadActionWidget_TurnFace1_K2Node_ComponentBoundEvent_140_OnActionPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UUI_PuzzleCube_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.SpawnCube
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::SpawnCube()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "SpawnCube");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.Rotate3DCube
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         DeltaRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_PuzzleCube_C::Rotate3DCube(const struct FRotator& DeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "Rotate3DCube");

	Params::UI_PuzzleCube_C_Rotate3DCube Parms{};

	Parms.DeltaRotation = std::move(DeltaRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.FindActiveFace
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::FindActiveFace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "FindActiveFace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.DebugArrow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     LineColor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::DebugArrow(const struct FVector& A, const struct FLinearColor& LineColor, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "DebugArrow");

	Params::UI_PuzzleCube_C_DebugArrow Parms{};

	Parms.A = std::move(A);
	Parms.LineColor = std::move(LineColor);
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.FindClosestFaceToVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Forward                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Right                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Up                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PuzzleCube_SelectedSide               Side1                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NearestVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::FindClosestFaceToVector(const struct FVector& A, const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up, E_PuzzleCube_SelectedSide* Side1, struct FVector* NearestVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "FindClosestFaceToVector");

	Params::UI_PuzzleCube_C_FindClosestFaceToVector Parms{};

	Parms.A = std::move(A);
	Parms.Forward = std::move(Forward);
	Parms.Right = std::move(Right);
	Parms.Up = std::move(Up);

	UObject::ProcessEvent(Func, &Parms);

	if (Side1 != nullptr)
		*Side1 = Parms.Side1;

	if (NearestVector != nullptr)
		*NearestVector = std::move(Parms.NearestVector);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.ChangeActiveFace
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PuzzleCube_SelectedSide               Dir                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::ChangeActiveFace(E_PuzzleCube_SelectedSide Dir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "ChangeActiveFace");

	Params::UI_PuzzleCube_C_ChangeActiveFace Parms{};

	Parms.Dir = Dir;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.DrawDebugArrows
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::DrawDebugArrows(float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "DrawDebugArrows");

	Params::UI_PuzzleCube_C_DrawDebugArrows Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.TransformRotatorToCubeSpace
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InRot                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

struct FRotator UUI_PuzzleCube_C::TransformRotatorToCubeSpace(const struct FRotator& InRot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "TransformRotatorToCubeSpace");

	Params::UI_PuzzleCube_C_TransformRotatorToCubeSpace Parms{};

	Parms.InRot = std::move(InRot);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.VisualFocusButtons
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::VisualFocusButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "VisualFocusButtons");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.UpdateMeasurement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::UpdateMeasurement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "UpdateMeasurement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.ShowWinMsg
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Win                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUI_PuzzleCube_C::ShowWinMsg(bool Win)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "ShowWinMsg");

	Params::UI_PuzzleCube_C_ShowWinMsg Parms{};

	Parms.Win = Win;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.SetCameraBlur
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_PuzzleCube_C::SetCameraBlur()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "SetCameraBlur");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_PuzzleCube.UI_PuzzleCube_C.FindFocus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_PuzzleCube_SelectedSide               FocusedSide                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_PuzzleCube_C::FindFocus(E_PuzzleCube_SelectedSide* FocusedSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_PuzzleCube_C", "FindFocus");

	Params::UI_PuzzleCube_C_FindFocus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FocusedSide != nullptr)
		*FocusedSide = Parms.FocusedSide;
}

}

