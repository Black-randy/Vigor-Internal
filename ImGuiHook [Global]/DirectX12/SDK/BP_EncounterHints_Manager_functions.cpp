#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EncounterHints_Manager

#include "Basic.hpp"

#include "BP_EncounterHints_Manager_classes.hpp"
#include "BP_EncounterHints_Manager_parameters.hpp"


namespace SDK
{

// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.ExecuteUbergraph_BP_EncounterHints_Manager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::ExecuteUbergraph_BP_EncounterHints_Manager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "ExecuteUbergraph_BP_EncounterHints_Manager");

	Params::BP_EncounterHints_Manager_C_ExecuteUbergraph_BP_EncounterHints_Manager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetUserMatchesStatisticFinished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ECloudUserMatchStatisticsPeriod         TimePeriod                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudUserMatchesStatistic       Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_EncounterHints_Manager_C::GetUserMatchesStatisticFinished(const struct FCloudRequestResult& RequestResult, ECloudUserMatchStatisticsPeriod TimePeriod, const struct FCloudUserMatchesStatistic& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetUserMatchesStatisticFinished");

	Params::BP_EncounterHints_Manager_C_GetUserMatchesStatisticFinished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.TimePeriod = TimePeriod;
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.Init_DailyResetTimer
// (BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::Init_DailyResetTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "Init_DailyResetTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.DailyReset
// (BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::DailyReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "DailyReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.UserCounterUpdated
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ECloudUserCounterOperation              Operation                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudUserCounterValue           CounterValue                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_EncounterHints_Manager_C::UserCounterUpdated(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player, ECloudUserCounterOperation Operation, const struct FCloudUserCounterValue& CounterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "UserCounterUpdated");

	Params::BP_EncounterHints_Manager_C_UserCounterUpdated Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.Operation = Operation;
	Parms.CounterValue = std::move(CounterValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.UserCounterRecieved
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AHumanPlayerController*           Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FCloudUserCounterValue           CounterValue                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_EncounterHints_Manager_C::UserCounterRecieved(const struct FCloudRequestResult& RequestResult, class AHumanPlayerController* Player, const struct FCloudUserCounterValue& CounterValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "UserCounterRecieved");

	Params::BP_EncounterHints_Manager_C_UserCounterRecieved Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Player = Player;
	Parms.CounterValue = std::move(CounterValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.UpdatePlayerLevel
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_C*           PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::UpdatePlayerLevel(class ABP_PlayerController_C* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "UpdatePlayerLevel");

	Params::BP_EncounterHints_Manager_C_UpdatePlayerLevel Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.InterpretMatchEnd
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_C*           Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FUserMatchResult                 MatchResults                                           (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_EncounterHints_Manager_C::InterpretMatchEnd(class ABP_PlayerController_C* Player_Controller, const struct FUserMatchResult& MatchResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "InterpretMatchEnd");

	Params::BP_EncounterHints_Manager_C_InterpretMatchEnd Parms{};

	Parms.Player_Controller = Player_Controller;
	Parms.MatchResults = std::move(MatchResults);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.Init_EcounterHintsManager
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_C*           PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GameInstance_C*               GameInstance_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::Init_EcounterHintsManager(class ABP_PlayerController_C* PlayerController, class UBP_GameInstance_C* GameInstance_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "Init_EcounterHintsManager");

	Params::BP_EncounterHints_Manager_C_Init_EcounterHintsManager Parms{};

	Parms.PlayerController = PlayerController;
	Parms.GameInstance_0 = GameInstance_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.Increment_MatchesPlayed
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_PlayerController_C*           PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::Increment_MatchesPlayed(class ABP_PlayerController_C* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "Increment_MatchesPlayed");

	Params::BP_EncounterHints_Manager_C_Increment_MatchesPlayed Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_NearCommStation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_NearCommStation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_NearCommStation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_NearBarredHouse
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_NearBarredHouse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_NearBarredHouse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_CookieTimerRing
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_CookieTimerRing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_CookieTimerRing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_OtherPlayerBecomesThreat
// (Net, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AHumanCharacter*                  Killer                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::EncounterHint_OtherPlayerBecomesThreat(class AHumanCharacter* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_OtherPlayerBecomesThreat");

	Params::BP_EncounterHints_Manager_C_EncounterHint_OtherPlayerBecomesThreat Parms{};

	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_PlayerBecameThreat
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_PlayerBecameThreat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_PlayerBecameThreat");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_AirdropCarriedByOther
// (BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_AirdropCarriedByOther()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_AirdropCarriedByOther");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_PriorToAirdrop
// (BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_PriorToAirdrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_PriorToAirdrop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_NearSignalDetector
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_NearSignalDetector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_NearSignalDetector");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_NearAirdrop
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_NearAirdrop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_NearAirdrop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_NearExitArea
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_NearExitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_NearExitArea");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_AirdropLooted
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_AirdropLooted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_AirdropLooted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.EncounterHint_MatchStart
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::EncounterHint_MatchStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "EncounterHint_MatchStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.OnSaveSucceed_50C8C50448B6B802A787A1B0FE674C37
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::OnSaveSucceed_50C8C50448B6B802A787A1B0FE674C37(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "OnSaveSucceed_50C8C50448B6B802A787A1B0FE674C37");

	Params::BP_EncounterHints_Manager_C_OnSaveSucceed_50C8C50448B6B802A787A1B0FE674C37 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.OnSaveFailed_50C8C50448B6B802A787A1B0FE674C37
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::OnSaveFailed_50C8C50448B6B802A787A1B0FE674C37(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "OnSaveFailed_50C8C50448B6B802A787A1B0FE674C37");

	Params::BP_EncounterHints_Manager_C_OnSaveFailed_50C8C50448B6B802A787A1B0FE674C37 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.OnLoadSucceed_9162495749B5A79B830461B5A10ECD19
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::OnLoadSucceed_9162495749B5A79B830461B5A10ECD19(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "OnLoadSucceed_9162495749B5A79B830461B5A10ECD19");

	Params::BP_EncounterHints_Manager_C_OnLoadSucceed_9162495749B5A79B830461B5A10ECD19 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.OnLoadFailed_9162495749B5A79B830461B5A10ECD19
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::OnLoadFailed_9162495749B5A79B830461B5A10ECD19(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "OnLoadFailed_9162495749B5A79B830461B5A10ECD19");

	Params::BP_EncounterHints_Manager_C_OnLoadFailed_9162495749B5A79B830461B5A10ECD19 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetMatchesPlayedThisInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MatchesPlayedThisInstance_0                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::GetMatchesPlayedThisInstance(int32* MatchesPlayedThisInstance_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetMatchesPlayedThisInstance");

	Params::BP_EncounterHints_Manager_C_GetMatchesPlayedThisInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MatchesPlayedThisInstance_0 != nullptr)
		*MatchesPlayedThisInstance_0 = Parms.MatchesPlayedThisInstance_0;
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.InterpretPlayerLevel
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::InterpretPlayerLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "InterpretPlayerLevel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetNextResetTimestamp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Cloud_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        TimeOfNextReset                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::GetNextResetTimestamp(const struct FDateTime& Cloud_Time, struct FDateTime* TimeOfNextReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetNextResetTimestamp");

	Params::BP_EncounterHints_Manager_C_GetNextResetTimestamp Parms{};

	Parms.Cloud_Time = std::move(Cloud_Time);

	UObject::ProcessEvent(Func, &Parms);

	if (TimeOfNextReset != nullptr)
		*TimeOfNextReset = std::move(Parms.TimeOfNextReset);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetHintsFromTableByKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Substring                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class FName>                     RowNamesWithKey                                        (Parm, OutParm)

void UBP_EncounterHints_Manager_C::GetHintsFromTableByKey(const class FString& Substring, TArray<class FName>* RowNamesWithKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetHintsFromTableByKey");

	Params::BP_EncounterHints_Manager_C_GetHintsFromTableByKey Parms{};

	Parms.Substring = std::move(Substring);

	UObject::ProcessEvent(Func, &Parms);

	if (RowNamesWithKey != nullptr)
		*RowNamesWithKey = std::move(Parms.RowNamesWithKey);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetHintWithCorrespondingLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FName                             HintCorrespondingToLevel                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::GetHintWithCorrespondingLevel(TArray<class FName>& Array, class FName* HintCorrespondingToLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetHintWithCorrespondingLevel");

	Params::BP_EncounterHints_Manager_C_GetHintWithCorrespondingLevel Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (HintCorrespondingToLevel != nullptr)
		*HintCorrespondingToLevel = Parms.HintCorrespondingToLevel;
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.SetDefaultValuesToSaveGame
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    WasGameSaved                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EncounterHints_Manager_C::SetDefaultValuesToSaveGame(bool* WasGameSaved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "SetDefaultValuesToSaveGame");

	Params::BP_EncounterHints_Manager_C_SetDefaultValuesToSaveGame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WasGameSaved != nullptr)
		*WasGameSaved = Parms.WasGameSaved;
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.PlayVoiceLine
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class USoundWave>>Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    WasPlayed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_EncounterHints_Manager_C::PlayVoiceLine(TArray<TSoftObjectPtr<class USoundWave>>& Array, bool* WasPlayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "PlayVoiceLine");

	Params::BP_EncounterHints_Manager_C_PlayVoiceLine Parms{};

	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (WasPlayed != nullptr)
		*WasPlayed = Parms.WasPlayed;
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.ResetMatchSpecificBools
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_EncounterHints_Manager_C::ResetMatchSpecificBools()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "ResetMatchSpecificBools");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_EncounterHints_Manager.BP_EncounterHints_Manager_C.GetLastHypotheticalResetTimestamp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Cloud_Time                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        TimeOfLastReset                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_EncounterHints_Manager_C::GetLastHypotheticalResetTimestamp(const struct FDateTime& Cloud_Time, struct FDateTime* TimeOfLastReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_EncounterHints_Manager_C", "GetLastHypotheticalResetTimestamp");

	Params::BP_EncounterHints_Manager_C_GetLastHypotheticalResetTimestamp Parms{};

	Parms.Cloud_Time = std::move(Cloud_Time);

	UObject::ProcessEvent(Func, &Parms);

	if (TimeOfLastReset != nullptr)
		*TimeOfLastReset = std::move(Parms.TimeOfLastReset);
}

}

