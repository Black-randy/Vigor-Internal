#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Character

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Character.BP_Character_C
// 0x0120 (0x0EC0 - 0x0DA0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Character_C : public AHumanPlayerCharacter
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0DA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Challenge_GrenadeHitComponent_C*    BP_Challenge_GrenadeHitComponent1;                 // 0x0DA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HealingComponent_C*                 BP_HealingComponent;                               // 0x0DB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPhysicalAnimationComponent*            PhysicalAnimation;                                 // 0x0DB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionActorComponent_C*        BP_InteractionActorComponent;                      // 0x0DC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  HitPostProcess;                                    // 0x0DC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  WoundedPostProcess;                                // 0x0DD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  ExhaustedPostProcess;                              // 0x0DD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  StaminaPostProcess;                                // 0x0DE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       TargetNameWidget;                                  // 0x0DE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         EquippedItem;                                      // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PrevCameraPos;                                     // 0x0DF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicsHandleComponent*                Physics_Handle;                                    // 0x0E00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OnHitDuration;                                     // 0x0E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           OnHitColor;                                        // 0x0E0C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Input;                                             // 0x0E1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnTakenDamage;                                     // 0x0E28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnDied;                                            // 0x0E38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         DeathTime;                                         // 0x0E48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4C[0x4];                                      // 0x0E4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Character_Unpossesed;                              // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UClass*                                 HACK_FIX_MapToolClass;                             // 0x0E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            FC_AdrenalineSFX_Volume;                           // 0x0E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioComponent_AdrenalineSFX;                      // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              LastHitTimestamp;                                  // 0x0E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlayDeathHitSound;                              // 0x0E80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E81[0x7];                                      // 0x0E81(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundClass*>                    DEBUGONLY_SoundClassToPrintOnPlay;                 // 0x0E88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundCue*>                      DEBUGONLY_SoundQues;                               // 0x0E98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundAttenuation*>              DEBUGONLY_AttenuationSetting;                      // 0x0EA8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void OnTakenDamage__DelegateSignature(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, class UClass* InstigatingItemClass, const struct FHitResultSimplified& HitOptimised);
	void OnDied__DelegateSignature(class ABP_Character_C* DyingCharacter, float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, class UClass* InstigatingItem, const struct FHitResult& HitResult);
	void Character_Unpossesed__DelegateSignature();
	void ExecuteUbergraph_BP_Character(int32 EntryPoint);
	void AudioDebug();
	void OnTakeMeleeDamageOnClient(const class AHumanCharacter* PlayerInstigator, EItemCategory InstigatingItemCategory, const struct FHitResultSimplified& HitOptimised);
	void OnShowHitMarkerOfColor(float CrosshairScale, const struct FColor& Color);
	void InitiateTinnitusEffect(float EffectStrength);
	void UpdateConcussionEffect(float Strength, float Time);
	void UpdateFlashbangEffect(float Strength, float Time);
	void Debug_SOUND_Gender_Gasmask();
	void PlayStaggerSound(const bool bIsInstigator, const bool bIsVictim);
	void Adrenaline_Sound_Mix(float Strength);
	void Spawn_Adrenaline_Breakpoint_VO();
	void Stop_Adrenaline_SFX();
	void Start_Adrenaline_SFX();
	void Update_Adrenaline_SFX_Params(float Strength);
	void UpdateAdrenalineDeprivationEffect(float Strength, float RemainingTime);
	void ConsoleToggleCharacterImmortal(bool Invincible);
	void GesturePlayed();
	void UpdateStaggerEffect(float Strength, float RemainingTime);
	void ApplyTinnitusEffect(float Effect_Strength);
	void Remove_audio_mix_modifier();
	void Delayed_On_Landed();
	void ReceiveUnpossessed(class AController* OldController);
	void OnLanded(const struct FHitResult& Hit);
	void ResetTargetHitIndicationColor();
	void Die(float DamageAmount, EDamageType DamageType, class AHumanCharacter* InstigatingCharacter, TSubclassOf<class AItem> InstigatingItem, const struct FHitResult& HitResult);
	void ReceiveBeginPlay();
	void OnTakeDamage(float DamageAmount, EDamageType DamageType, const class AHumanCharacter* InstigatingActor, TSubclassOf<class AItem> InstigatingItemClass, const struct FHitResultSimplified& HitOptimised, const TArray<TSubclassOf<class AItem>>& AffectedItems);
	void OnOtherPlayerHit(float DamageAmount, EDamageType DamageType, class AHumanCharacter* Victim, TSubclassOf<class AItem> InstigatingItemClass, const struct FHitResult& HitResult, const TArray<TSubclassOf<class AItem>>& AffectedItems);
	void ShowBloodEvent(class AHumanCharacter* HitCharacter, class USceneComponent* HitComponent, const struct FVector& HitImpactPoint);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void SetupCameraMatConsts();
	void ShowBloodFunction(class AHumanCharacter* Hit_Character, class USceneComponent* Hit_Component, const struct FVector& Hit_Impact_Point);
	void SetStaminaHandlers();
	void PlayHitIndicationSound(float DamageAmount, class AHumanCharacter* Victim, const struct FHitResult& HitResult, EDamageType DamageType, class UClass* Instigating_ItemClass);
	void PlayWeightedCameraShake(class UClass* X, class UClass* Y, class UClass* Z, class UCurveVector* Weights, float T);
	void Is_Damage_Absorbed(TArray<class UClass*>& Affected_Items, bool* Damage_Absorbed);
	void AllowPlayDeathHitSound();
	void GetCrosshairUI(class UUI_Crosshair_C** AsUI_Crosshair);
	void ShowHitMarker(bool ModifiedDamage, float CrosshairScale);
	void HideHitMarker();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Character_C">();
	}
	static class ABP_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Character_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Character_C) == 0x000010, "Wrong alignment on ABP_Character_C");
static_assert(sizeof(ABP_Character_C) == 0x000EC0, "Wrong size on ABP_Character_C");
static_assert(offsetof(ABP_Character_C, UberGraphFrame) == 0x000DA0, "Member 'ABP_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BP_Challenge_GrenadeHitComponent1) == 0x000DA8, "Member 'ABP_Character_C::BP_Challenge_GrenadeHitComponent1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BP_HealingComponent) == 0x000DB0, "Member 'ABP_Character_C::BP_HealingComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PhysicalAnimation) == 0x000DB8, "Member 'ABP_Character_C::PhysicalAnimation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, BP_InteractionActorComponent) == 0x000DC0, "Member 'ABP_Character_C::BP_InteractionActorComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HitPostProcess) == 0x000DC8, "Member 'ABP_Character_C::HitPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, WoundedPostProcess) == 0x000DD0, "Member 'ABP_Character_C::WoundedPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, ExhaustedPostProcess) == 0x000DD8, "Member 'ABP_Character_C::ExhaustedPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, StaminaPostProcess) == 0x000DE0, "Member 'ABP_Character_C::StaminaPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, TargetNameWidget) == 0x000DE8, "Member 'ABP_Character_C::TargetNameWidget' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, EquippedItem) == 0x000DF0, "Member 'ABP_Character_C::EquippedItem' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, PrevCameraPos) == 0x000DF4, "Member 'ABP_Character_C::PrevCameraPos' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Physics_Handle) == 0x000E00, "Member 'ABP_Character_C::Physics_Handle' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnHitDuration) == 0x000E08, "Member 'ABP_Character_C::OnHitDuration' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnHitColor) == 0x000E0C, "Member 'ABP_Character_C::OnHitColor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Input) == 0x000E1C, "Member 'ABP_Character_C::Input' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnTakenDamage) == 0x000E28, "Member 'ABP_Character_C::OnTakenDamage' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, OnDied) == 0x000E38, "Member 'ABP_Character_C::OnDied' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DeathTime) == 0x000E48, "Member 'ABP_Character_C::DeathTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, Character_Unpossesed) == 0x000E50, "Member 'ABP_Character_C::Character_Unpossesed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, HACK_FIX_MapToolClass) == 0x000E60, "Member 'ABP_Character_C::HACK_FIX_MapToolClass' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, FC_AdrenalineSFX_Volume) == 0x000E68, "Member 'ABP_Character_C::FC_AdrenalineSFX_Volume' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, AudioComponent_AdrenalineSFX) == 0x000E70, "Member 'ABP_Character_C::AudioComponent_AdrenalineSFX' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, LastHitTimestamp) == 0x000E78, "Member 'ABP_Character_C::LastHitTimestamp' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, CanPlayDeathHitSound) == 0x000E80, "Member 'ABP_Character_C::CanPlayDeathHitSound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DEBUGONLY_SoundClassToPrintOnPlay) == 0x000E88, "Member 'ABP_Character_C::DEBUGONLY_SoundClassToPrintOnPlay' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DEBUGONLY_SoundQues) == 0x000E98, "Member 'ABP_Character_C::DEBUGONLY_SoundQues' has a wrong offset!");
static_assert(offsetof(ABP_Character_C, DEBUGONLY_AttenuationSetting) == 0x000EA8, "Member 'ABP_Character_C::DEBUGONLY_AttenuationSetting' has a wrong offset!");

}

