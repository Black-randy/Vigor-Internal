#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Car_Base

#include "Basic.hpp"

#include "BP_Car_Base_classes.hpp"
#include "BP_Car_Base_parameters.hpp"


namespace SDK
{

// Function BP_Car_Base.BP_Car_Base_C.ExecuteUbergraph_BP_Car_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::ExecuteUbergraph_BP_Car_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "ExecuteUbergraph_BP_Car_Base");

	Params::BP_Car_Base_C_ExecuteUbergraph_BP_Car_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.StopStuckMaterialCheck
// (BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::StopStuckMaterialCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "StopStuckMaterialCheck");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.MaterialCheckLoop
// (BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::MaterialCheckLoop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "MaterialCheckLoop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.StartStuckMaterialsFailsafe
// (BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::StartStuckMaterialsFailsafe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "StartStuckMaterialsFailsafe");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.StopAlarmDelegate
// (BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::StopAlarmDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "StopAlarmDelegate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.Access Loot
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_C*                  Looting_character                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::Access_Loot(class ABP_Character_C* Looting_character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "Access Loot");

	Params::BP_Car_Base_C_Access_Loot Parms{};

	Parms.Looting_character = Looting_character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.ReceiveAnyDamage
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      InstigatedBy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DamageCauser                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "ReceiveAnyDamage");

	Params::BP_Car_Base_C_ReceiveAnyDamage Parms{};

	Parms.Damage = Damage;
	Parms.DamageType = DamageType;
	Parms.InstigatedBy = InstigatedBy;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.Start Alarm
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      Instigating_Controller                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::Start_Alarm(class AController* Instigating_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "Start Alarm");

	Params::BP_Car_Base_C_Start_Alarm Parms{};

	Parms.Instigating_Controller = Instigating_Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.AdjustWeather
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentRainAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWindIntensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          CurrentWindDirection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWetnessAmount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::AdjustWeather(float CurrentRainAmount, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "AdjustWeather");

	Params::BP_Car_Base_C_AdjustWeather Parms{};

	Parms.CurrentRainAmount = CurrentRainAmount;
	Parms.CurrentWindIntensity = CurrentWindIntensity;
	Parms.CurrentWindDirection = std::move(CurrentWindDirection);
	Parms.CurrentWetnessAmount = CurrentWetnessAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.AdjustRainIntensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentRainAmount                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   CurrentWetnessAmount                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::AdjustRainIntensity(float CurrentRainAmount, float CurrentWetnessAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "AdjustRainIntensity");

	Params::BP_Car_Base_C_AdjustRainIntensity Parms{};

	Parms.CurrentRainAmount = CurrentRainAmount;
	Parms.CurrentWetnessAmount = CurrentWetnessAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.SetHeavyRain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HeavyRain                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Car_Base_C::SetHeavyRain(bool HeavyRain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "SetHeavyRain");

	Params::BP_Car_Base_C_SetHeavyRain Parms{};

	Parms.HeavyRain = HeavyRain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.AdjustWindDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          CurrentWindDirection                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::AdjustWindDirection(const struct FVector& CurrentWindDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "AdjustWindDirection");

	Params::BP_Car_Base_C_AdjustWindDirection Parms{};

	Parms.CurrentWindDirection = std::move(CurrentWindDirection);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.AdjustWindIntensity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CurrentWindIntensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::AdjustWindIntensity(float CurrentWindIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "AdjustWindIntensity");

	Params::BP_Car_Base_C_AdjustWindIntensity Parms{};

	Parms.CurrentWindIntensity = CurrentWindIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.SetColours
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::SetColours()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "SetColours");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.SetMeches
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::SetMeches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "SetMeches");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.SetWheels
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::SetWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "SetWheels");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Car_Base.BP_Car_Base_C.Set Lights Material
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               Material                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Car_Base_C::Set_Lights_Material(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "Set Lights Material");

	Params::BP_Car_Base_C_Set_Lights_Material Parms{};

	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Car_Base.BP_Car_Base_C.Backup Lights Material
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Car_Base_C::Backup_Lights_Material()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Car_Base_C", "Backup Lights Material");

	UObject::ProcessEvent(Func, nullptr);
}

}

