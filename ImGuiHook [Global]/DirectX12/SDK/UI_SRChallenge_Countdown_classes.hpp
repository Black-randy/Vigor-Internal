#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SRChallenge_Countdown

#include "Basic.hpp"

#include "Flame_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_SRChallenge_Countdown.UI_SRChallenge_Countdown_C
// 0x0028 (0x02E0 - 0x02B8)
class UUI_SRChallenge_Countdown_C final : public UFlameWidget
{
public:
	class UWidgetAnimation*                       CircularProgress;                                  // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UFlameTextBlock*                        CountdownText;                                     // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_3;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_CircularProgress_C*                 UI_CircularProgress;                               // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_FlameSafezone_C*                    UI_FlameSafezone;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void UpdateCountdownTime(float CountdownTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_SRChallenge_Countdown_C">();
	}
	static class UUI_SRChallenge_Countdown_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_SRChallenge_Countdown_C>();
	}
};
static_assert(alignof(UUI_SRChallenge_Countdown_C) == 0x000008, "Wrong alignment on UUI_SRChallenge_Countdown_C");
static_assert(sizeof(UUI_SRChallenge_Countdown_C) == 0x0002E0, "Wrong size on UUI_SRChallenge_Countdown_C");
static_assert(offsetof(UUI_SRChallenge_Countdown_C, CircularProgress) == 0x0002B8, "Member 'UUI_SRChallenge_Countdown_C::CircularProgress' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Countdown_C, CountdownText) == 0x0002C0, "Member 'UUI_SRChallenge_Countdown_C::CountdownText' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Countdown_C, Image_3) == 0x0002C8, "Member 'UUI_SRChallenge_Countdown_C::Image_3' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Countdown_C, UI_CircularProgress) == 0x0002D0, "Member 'UUI_SRChallenge_Countdown_C::UI_CircularProgress' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Countdown_C, UI_FlameSafezone) == 0x0002D8, "Member 'UUI_SRChallenge_Countdown_C::UI_FlameSafezone' has a wrong offset!");

}

