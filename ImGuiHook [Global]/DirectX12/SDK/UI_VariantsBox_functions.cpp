#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_VariantsBox

#include "Basic.hpp"

#include "UI_VariantsBox_classes.hpp"
#include "UI_VariantsBox_parameters.hpp"


namespace SDK
{

// Function UI_VariantsBox.UI_VariantsBox_C.FillContent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UClass*>                   VariantItems                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UClass*                           BaseItem_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           OrangeDotPrefix                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class UClass*>                   OwnedItems                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UClass*>                   VisibleVariants                                        (Parm, OutParm)

void UUI_VariantsBox_C::FillContent(TArray<class UClass*>& VariantItems, class UClass* BaseItem_0, const class FString& OrangeDotPrefix, TArray<class UClass*>& OwnedItems, TArray<class UClass*>* VisibleVariants)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_VariantsBox_C", "FillContent");

	Params::UI_VariantsBox_C_FillContent Parms{};

	Parms.VariantItems = std::move(VariantItems);
	Parms.BaseItem_0 = BaseItem_0;
	Parms.OrangeDotPrefix = std::move(OrangeDotPrefix);
	Parms.OwnedItems = std::move(OwnedItems);

	UObject::ProcessEvent(Func, &Parms);

	VariantItems = std::move(Parms.VariantItems);
	OwnedItems = std::move(Parms.OwnedItems);

	if (VisibleVariants != nullptr)
		*VisibleVariants = std::move(Parms.VisibleVariants);
}


// Function UI_VariantsBox.UI_VariantsBox_C.SetFocusByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OnPreview                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           OutFocusedVariant                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           OutFocusedBaseItem                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_VariantsBox_C::SetFocusByIndex(int32 SlotIndex, bool OnPreview, class UClass** OutFocusedVariant, class UClass** OutFocusedBaseItem, int32* OutSelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_VariantsBox_C", "SetFocusByIndex");

	Params::UI_VariantsBox_C_SetFocusByIndex Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.OnPreview = OnPreview;

	UObject::ProcessEvent(Func, &Parms);

	if (OutFocusedVariant != nullptr)
		*OutFocusedVariant = Parms.OutFocusedVariant;

	if (OutFocusedBaseItem != nullptr)
		*OutFocusedBaseItem = Parms.OutFocusedBaseItem;

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;
}


// Function UI_VariantsBox.UI_VariantsBox_C.UpdateTics
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TickedIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_VariantsBox_C::UpdateTics(int32 TickedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_VariantsBox_C", "UpdateTics");

	Params::UI_VariantsBox_C_UpdateTics Parms{};

	Parms.TickedIndex = TickedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UI_VariantsBox.UI_VariantsBox_C.ClearContent
// (Public, BlueprintCallable, BlueprintEvent)

void UUI_VariantsBox_C::ClearContent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_VariantsBox_C", "ClearContent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UI_VariantsBox.UI_VariantsBox_C.GetIndexOfVariant
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Variant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUI_VariantsBox_C::GetIndexOfVariant(class UClass* Variant, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI_VariantsBox_C", "GetIndexOfVariant");

	Params::UI_VariantsBox_C_GetIndexOfVariant Parms{};

	Parms.Variant = Variant;

	UObject::ProcessEvent(Func, &Parms);

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}

}

