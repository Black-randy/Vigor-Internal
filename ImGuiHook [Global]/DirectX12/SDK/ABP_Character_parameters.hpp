#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Character

#include "Basic.hpp"

#include "E_MeshSpecificJiggle_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_JiggleDefinition_structs.hpp"
#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "S_JiggleSettings_structs.hpp"
#include "S_WeaponRun_IK_Transform_structs.hpp"


namespace SDK::Params
{

// Function ABP_Character.ABP_Character_C.ExecuteUbergraph_ABP_Character
// 0x02A8 (0x02A8 - 0x0000)
struct ABP_Character_C_ExecuteUbergraph_ABP_Character final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetAnimInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class USkeleton*                        CallFunc_GetSkeleton_ReturnValue;                  // 0x0020(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue;          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class UDataTable*                             CallFunc_GetCorrectIKRunDataTable_DT;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 K2Node_CustomEvent_Gender;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_WeaponRun_IK_Transform              CallFunc_GetDataTableRowFromName_OutRow;           // 0x0058(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_IsMale;                         // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7F[0x1];                                       // 0x007F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationMirrorData*                   CallFunc_SpawnObject_ReturnValue;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ConsumableAnimInterface_C> K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          CallFunc_GetCustomGripAnimation_HandAnim;          // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCustomGripAnimation_Valid;             // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B2[0x2];                                       // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x00B4(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x00C8(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_1;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_2;             // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             CallFunc_GetCorrectIKRunDataTable_DT_1;            // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue_3;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetClassDisplayName_ReturnValue_1;        // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_WeaponRun_IK_Transform              CallFunc_GetDataTableRowFromName_OutRow_1;         // 0x011C(0x0024)(ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue_1;    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0143(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0145(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0146(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0147(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGender>                    CallFunc_GetGenderClass_ReturnValue;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UClass*                                 K2Node_ClassDynamicCast_AsBP_Female;               // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0164(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_1;        // 0x0178(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UHumanAnimCollection*                   CallFunc_GetAnimCollection_AsHuman_Anim_Collection; // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHumanAnimCollection*                   CallFunc_GetAnimCollection_AsHuman_Anim_Collection_1; // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHumanAnimCollection*                   CallFunc_GetAnimCollection_AsHuman_Anim_Collection_2; // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bIsaMale;                             // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_199[0x7];                                      // 0x0199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ConsumableAnimInterface_C> K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface_1; // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B1[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AnimActions_C>     K2Node_DynamicCast_AsBI_Anim_Actions;              // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x01D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AThrowableConsumable*                   K2Node_DynamicCast_AsThrowable_Consumable;         // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_GrenadeInterface_C> K2Node_DynamicCast_AsBPI_Grenade_Interface;        // 0x0200(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0214(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetThrowStrength_ReturnValue;             // 0x021C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetCorrectSectionForThrowPower_SectionName; // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0228(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_2;        // 0x0238(0x0008)(NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0240(0x0010)(ZeroConstructor, NoDestructor)
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue_3;        // 0x0250(0x0008)(NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      K2Node_Event_Anim;                                 // 0x0258(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess_3;                    // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_262[0x2];                                      // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x0264(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x026C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AnimActions_C>     K2Node_DynamicCast_AsBI_Anim_Actions_1;            // 0x0270(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0282(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0283(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0284(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0285(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0286(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_287[0x1];                                      // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBI_AnimActions_C>     K2Node_DynamicCast_AsBI_Anim_Actions_2;            // 0x0288(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x0298(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x0299(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x029A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x029B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Montage_Play_ReturnValue;                 // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Montage_Play_ReturnValue_1;               // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_Angle;                                // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_ExecuteUbergraph_ABP_Character) == 0x000008, "Wrong alignment on ABP_Character_C_ExecuteUbergraph_ABP_Character");
static_assert(sizeof(ABP_Character_C_ExecuteUbergraph_ABP_Character) == 0x0002A8, "Wrong size on ABP_Character_C_ExecuteUbergraph_ABP_Character");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, EntryPoint) == 0x000000, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_1) == 0x000005, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetAnimInstance_ReturnValue) == 0x000008, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetAnimInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_MakeLiteralName_ReturnValue) == 0x000010, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000018, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetSkeleton_ReturnValue) == 0x000020, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetSkeleton_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetObjectClass_ReturnValue) == 0x000028, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetClassDisplayName_ReturnValue) == 0x000030, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetClassDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetCorrectIKRunDataTable_DT) == 0x000040, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetCorrectIKRunDataTable_DT' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Conv_StringToName_ReturnValue) == 0x000048, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CustomEvent_Gender) == 0x000050, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CustomEvent_Gender' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetDataTableRowFromName_OutRow) == 0x000058, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x00007C, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, Temp_bool_Has_Been_Initd_Variable) == 0x00007D, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CustomEvent_IsMale) == 0x00007E, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CustomEvent_IsMale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_SpawnObject_ReturnValue) == 0x000080, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_2) == 0x000088, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface) == 0x000090, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetCustomGripAnimation_HandAnim) == 0x0000A8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetCustomGripAnimation_HandAnim' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetCustomGripAnimation_Valid) == 0x0000B0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetCustomGripAnimation_Valid' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_3) == 0x0000B1, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CreateDelegate_OutputDelegate) == 0x0000B4, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x0000C8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_SwitchEnum_CmpSuccess) == 0x0000D0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetObjectClass_ReturnValue_1) == 0x0000D8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetObjectClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetObjectClass_ReturnValue_2) == 0x0000E0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetObjectClass_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_SwitchEnum_CmpSuccess_1) == 0x0000E8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0000E9, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetCorrectIKRunDataTable_DT_1) == 0x0000F0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetCorrectIKRunDataTable_DT_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetObjectClass_ReturnValue_3) == 0x0000F8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetObjectClass_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetClassDisplayName_ReturnValue_1) == 0x000100, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetClassDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000110, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000118, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetDataTableRowFromName_OutRow_1) == 0x00011C, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetDataTableRowFromName_OutRow_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetDataTableRowFromName_ReturnValue_1) == 0x000140, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetDataTableRowFromName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000141, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000142, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BooleanAND_ReturnValue) == 0x000143, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, Temp_bool_IsClosed_Variable) == 0x000144, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Not_PreBool_ReturnValue) == 0x000145, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_4) == 0x000146, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_5) == 0x000147, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BooleanAND_ReturnValue_1) == 0x000148, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BooleanAND_ReturnValue_2) == 0x000149, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_6) == 0x00014A, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetGenderClass_ReturnValue) == 0x000150, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetGenderClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_ClassDynamicCast_AsBP_Female) == 0x000158, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_ClassDynamicCast_AsBP_Female' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_ClassDynamicCast_bSuccess) == 0x000160, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x000161, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Not_PreBool_ReturnValue_1) == 0x000162, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CreateDelegate_OutputDelegate_1) == 0x000164, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue_1) == 0x000178, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetAnimCollection_AsHuman_Anim_Collection) == 0x000180, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetAnimCollection_AsHuman_Anim_Collection' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetAnimCollection_AsHuman_Anim_Collection_1) == 0x000188, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetAnimCollection_AsHuman_Anim_Collection_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetAnimCollection_AsHuman_Anim_Collection_2) == 0x000190, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetAnimCollection_AsHuman_Anim_Collection_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_Event_bIsaMale) == 0x000198, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_Event_bIsaMale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface_1) == 0x0001A0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBPI_Consumable_Anim_Interface_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_1) == 0x0001B0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_Event_DeltaTimeX) == 0x0001B4, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_7) == 0x0001B8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBI_Anim_Actions) == 0x0001C0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBI_Anim_Actions' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_2) == 0x0001D0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetControlRotation_ReturnValue) == 0x0001D4, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BreakRotator_Roll) == 0x0001E0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BreakRotator_Pitch) == 0x0001E4, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BreakRotator_Yaw) == 0x0001E8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Add_FloatFloat_ReturnValue) == 0x0001EC, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsThrowable_Consumable) == 0x0001F0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsThrowable_Consumable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_3) == 0x0001F8, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, Temp_bool_Variable) == 0x0001F9, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBPI_Grenade_Interface) == 0x000200, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBPI_Grenade_Interface' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_4) == 0x000210, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_Select_Default) == 0x000214, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_8) == 0x000218, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetThrowStrength_ReturnValue) == 0x00021C, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetThrowStrength_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_GetCorrectSectionForThrowPower_SectionName) == 0x000220, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_GetCorrectSectionForThrowPower_SectionName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CreateDelegate_OutputDelegate_2) == 0x000228, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue_2) == 0x000238, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_CreateDelegate_OutputDelegate_3) == 0x000240, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_K2_SetTimerDelegate_ReturnValue_3) == 0x000250, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_K2_SetTimerDelegate_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_Event_Anim) == 0x000258, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_Event_Anim' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_SwitchEnum_CmpSuccess_2) == 0x000260, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_SwitchEnum_CmpSuccess_3) == 0x000261, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_SwitchEnum_CmpSuccess_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_MakeLiteralName_ReturnValue_1) == 0x000264, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00026C, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBI_Anim_Actions_1) == 0x000270, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBI_Anim_Actions_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_5) == 0x000280, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_9) == 0x000281, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000282, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Not_PreBool_ReturnValue_2) == 0x000283, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BooleanAND_ReturnValue_3) == 0x000284, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Not_PreBool_ReturnValue_3) == 0x000285, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_BooleanAND_ReturnValue_4) == 0x000286, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_AsBI_Anim_Actions_2) == 0x000288, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_AsBI_Anim_Actions_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_DynamicCast_bSuccess_6) == 0x000298, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_IsValid_ReturnValue_10) == 0x000299, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, Temp_bool_IsClosed_Variable_1) == 0x00029A, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, Temp_bool_Has_Been_Initd_Variable_1) == 0x00029B, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Montage_Play_ReturnValue) == 0x00029C, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Montage_Play_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, CallFunc_Montage_Play_ReturnValue_1) == 0x0002A0, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::CallFunc_Montage_Play_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_ExecuteUbergraph_ABP_Character, K2Node_Event_Angle) == 0x0002A4, "Member 'ABP_Character_C_ExecuteUbergraph_ABP_Character::K2Node_Event_Angle' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.CassettesRotationChanged
// 0x0004 (0x0004 - 0x0000)
struct ABP_Character_C_CassettesRotationChanged final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_CassettesRotationChanged) == 0x000004, "Wrong alignment on ABP_Character_C_CassettesRotationChanged");
static_assert(sizeof(ABP_Character_C_CassettesRotationChanged) == 0x000004, "Wrong size on ABP_Character_C_CassettesRotationChanged");
static_assert(offsetof(ABP_Character_C_CassettesRotationChanged, Angle) == 0x000000, "Member 'ABP_Character_C_CassettesRotationChanged::Angle' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetShelterPreviewIdleAnim
// 0x0008 (0x0008 - 0x0000)
struct ABP_Character_C_SetShelterPreviewIdleAnim final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong alignment on ABP_Character_C_SetShelterPreviewIdleAnim");
static_assert(sizeof(ABP_Character_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong size on ABP_Character_C_SetShelterPreviewIdleAnim");
static_assert(offsetof(ABP_Character_C_SetShelterPreviewIdleAnim, Anim) == 0x000000, "Member 'ABP_Character_C_SetShelterPreviewIdleAnim::Anim' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetAnimCollectionAfterGenderChange
// 0x0001 (0x0001 - 0x0000)
struct ABP_Character_C_SetAnimCollectionAfterGenderChange final
{
public:
	bool                                          IsMale;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetAnimCollectionAfterGenderChange) == 0x000001, "Wrong alignment on ABP_Character_C_SetAnimCollectionAfterGenderChange");
static_assert(sizeof(ABP_Character_C_SetAnimCollectionAfterGenderChange) == 0x000001, "Wrong size on ABP_Character_C_SetAnimCollectionAfterGenderChange");
static_assert(offsetof(ABP_Character_C_SetAnimCollectionAfterGenderChange, IsMale) == 0x000000, "Member 'ABP_Character_C_SetAnimCollectionAfterGenderChange::IsMale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GenderChanged
// 0x0008 (0x0008 - 0x0000)
struct ABP_Character_C_GenderChanged final
{
public:
	class UClass*                                 Gender;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_GenderChanged) == 0x000008, "Wrong alignment on ABP_Character_C_GenderChanged");
static_assert(sizeof(ABP_Character_C_GenderChanged) == 0x000008, "Wrong size on ABP_Character_C_GenderChanged");
static_assert(offsetof(ABP_Character_C_GenderChanged, Gender) == 0x000000, "Member 'ABP_Character_C_GenderChanged::Gender' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.ChangeGender
// 0x0001 (0x0001 - 0x0000)
struct ABP_Character_C_ChangeGender final
{
public:
	bool                                          bIsaMale;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_ChangeGender) == 0x000001, "Wrong alignment on ABP_Character_C_ChangeGender");
static_assert(sizeof(ABP_Character_C_ChangeGender) == 0x000001, "Wrong size on ABP_Character_C_ChangeGender");
static_assert(offsetof(ABP_Character_C_ChangeGender, bIsaMale) == 0x000000, "Member 'ABP_Character_C_ChangeGender::bIsaMale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Character_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Character_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Character_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Character_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Character_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Character_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.LerpLookAtAlpha
// 0x0154 (0x0154 - 0x0000)
struct ABP_Character_C_LerpLookAtAlpha final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Yaw;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pitch;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetAlpha;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetPitch;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RetYaw;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LocalDeltaTIme;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Lookable;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlphaValue;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawLook;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_6;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_8;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_10;                            // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_3;                      // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_3;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_3;                       // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_4;                      // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_4;                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_4;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Temp_float_Variable_11;                            // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_6;                              // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_5;                      // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_5;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_5;                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_6;                      // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_6;                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_6;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_3;         // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_3;                           // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_4;         // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_5;         // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0115(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_116[0x2];                                      // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue_2;                  // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_3;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_7;                      // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_7;                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_7;                       // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_4;                  // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_132[0x2];                                      // 0x0132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_4;                           // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_5;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_8;                      // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_8;                     // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_8;                       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_6;                           // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_6;                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_LerpLookAtAlpha) == 0x000004, "Wrong alignment on ABP_Character_C_LerpLookAtAlpha");
static_assert(sizeof(ABP_Character_C_LerpLookAtAlpha) == 0x000154, "Wrong size on ABP_Character_C_LerpLookAtAlpha");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, DeltaTimeX) == 0x000000, "Member 'ABP_Character_C_LerpLookAtAlpha::DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Yaw) == 0x000004, "Member 'ABP_Character_C_LerpLookAtAlpha::Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Pitch) == 0x000008, "Member 'ABP_Character_C_LerpLookAtAlpha::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Alpha) == 0x00000C, "Member 'ABP_Character_C_LerpLookAtAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, RetAlpha) == 0x000010, "Member 'ABP_Character_C_LerpLookAtAlpha::RetAlpha' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, RetPitch) == 0x000014, "Member 'ABP_Character_C_LerpLookAtAlpha::RetPitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, RetYaw) == 0x000018, "Member 'ABP_Character_C_LerpLookAtAlpha::RetYaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, LocalDeltaTIme) == 0x00001C, "Member 'ABP_Character_C_LerpLookAtAlpha::LocalDeltaTIme' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Lookable) == 0x000020, "Member 'ABP_Character_C_LerpLookAtAlpha::Lookable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, AlphaValue) == 0x000024, "Member 'ABP_Character_C_LerpLookAtAlpha::AlphaValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, YawLook) == 0x000028, "Member 'ABP_Character_C_LerpLookAtAlpha::YawLook' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable) == 0x00002C, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable) == 0x000030, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_1) == 0x000034, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_1) == 0x000038, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_2) == 0x00003C, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_3) == 0x000040, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_2) == 0x000044, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_4) == 0x000048, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_5) == 0x00004C, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_3) == 0x000050, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_6) == 0x000054, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_7) == 0x000058, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_4) == 0x00005C, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_8) == 0x000060, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_9) == 0x000064, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_5) == 0x000068, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_10) == 0x00006C, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_10' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll) == 0x000070, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch) == 0x000074, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw) == 0x000078, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_1) == 0x00007C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_1) == 0x000080, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_1) == 0x000084, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000088, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000089, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00008A, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue) == 0x00008B, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanOR_ReturnValue) == 0x00008C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_1) == 0x00008D, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_2) == 0x00008E, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_2) == 0x000090, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_2) == 0x000094, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_2) == 0x000098, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_3) == 0x00009C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_3) == 0x0000A0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_3) == 0x0000A4, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_3) == 0x0000A8, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue) == 0x0000AC, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanOR_ReturnValue_1) == 0x0000B0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_4) == 0x0000B4, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_4) == 0x0000B8, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_4) == 0x0000BC, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_4) == 0x0000C0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000C1, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_5) == 0x0000C2, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue) == 0x0000C3, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_float_Variable_11) == 0x0000C4, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_float_Variable_11' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0000C8, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_1) == 0x0000C9, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_2) == 0x0000CA, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_3) == 0x0000CB, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, Temp_bool_Variable_6) == 0x0000CC, "Member 'ABP_Character_C_LerpLookAtAlpha::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_5) == 0x0000D0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_5) == 0x0000D4, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_5) == 0x0000D8, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default) == 0x0000DC, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x0000E0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_1) == 0x0000E4, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_6) == 0x0000E8, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_6) == 0x0000EC, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_6) == 0x0000F0, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_1) == 0x0000F4, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_2) == 0x0000F8, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x0000FC, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000100, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue_3) == 0x000104, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_4) == 0x000105, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_3) == 0x000108, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue_4) == 0x00010C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000110, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Greater_FloatFloat_ReturnValue_5) == 0x000114, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Greater_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_5) == 0x000115, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_2) == 0x000118, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_3) == 0x00011C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_7) == 0x000120, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_7) == 0x000124, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_7) == 0x000128, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_4) == 0x00012C, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_Not_PreBool_ReturnValue_6) == 0x000130, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BooleanAND_ReturnValue_6) == 0x000131, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_4) == 0x000134, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_5) == 0x000138, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_5) == 0x00013C, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Roll_8) == 0x000140, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Roll_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Pitch_8) == 0x000144, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Pitch_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_BreakRotator_Yaw_8) == 0x000148, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_BreakRotator_Yaw_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, K2Node_Select_Default_6) == 0x00014C, "Member 'ABP_Character_C_LerpLookAtAlpha::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LerpLookAtAlpha, CallFunc_FInterpTo_ReturnValue_6) == 0x000150, "Member 'ABP_Character_C_LerpLookAtAlpha::CallFunc_FInterpTo_ReturnValue_6' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.BP_LegIK
// 0x000E (0x000E - 0x0000)
struct ABP_Character_C_BP_LegIK final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_BP_LegIK) == 0x000001, "Wrong alignment on ABP_Character_C_BP_LegIK");
static_assert(sizeof(ABP_Character_C_BP_LegIK) == 0x00000E, "Wrong size on ABP_Character_C_BP_LegIK");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_Character_C_BP_LegIK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'ABP_Character_C_BP_LegIK::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000002, "Member 'ABP_Character_C_BP_LegIK::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'ABP_Character_C_BP_LegIK::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_Character_C_BP_LegIK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_Character_C_BP_LegIK::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_Not_PreBool_ReturnValue_2) == 0x000007, "Member 'ABP_Character_C_BP_LegIK::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanAND_ReturnValue_1) == 0x000009, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x00000A, "Member 'ABP_Character_C_BP_LegIK::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanAND_ReturnValue_2) == 0x00000B, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanAND_ReturnValue_3) == 0x00000C, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_LegIK, CallFunc_BooleanAND_ReturnValue_4) == 0x00000D, "Member 'ABP_Character_C_BP_LegIK::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetBPVariables
// 0x0080 (0x0080 - 0x0000)
struct ABP_Character_C_SetBPVariables final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NewLocalVar_0;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPoseMirrored_ReturnValue;               // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue; // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_4;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_LerpLookAtAlpha_Yaw;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LerpLookAtAlpha_Pitch;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LerpLookAtAlpha_Alpha;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0056(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_57[0x1];                                       // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GetIdleLayer_IdleAction;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_3;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetBPVariables) == 0x000008, "Wrong alignment on ABP_Character_C_SetBPVariables");
static_assert(sizeof(ABP_Character_C_SetBPVariables) == 0x000080, "Wrong size on ABP_Character_C_SetBPVariables");
static_assert(offsetof(ABP_Character_C_SetBPVariables, DeltaTime) == 0x000000, "Member 'ABP_Character_C_SetBPVariables::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, NewLocalVar_0) == 0x000008, "Member 'ABP_Character_C_SetBPVariables::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_bool_Variable) == 0x000014, "Member 'ABP_Character_C_SetBPVariables::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable_1) == 0x000018, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable_2) == 0x00001C, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'ABP_Character_C_SetBPVariables::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_IsPoseMirrored_ReturnValue) == 0x000021, "Member 'ABP_Character_C_SetBPVariables::CallFunc_IsPoseMirrored_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_bool_Variable_1) == 0x000022, "Member 'ABP_Character_C_SetBPVariables::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000023, "Member 'ABP_Character_C_SetBPVariables::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Not_PreBool_ReturnValue) == 0x000024, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, K2Node_Select_Default) == 0x000028, "Member 'ABP_Character_C_SetBPVariables::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Not_PreBool_ReturnValue_1) == 0x00002C, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue) == 0x00002D, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_BooleanAND_ReturnValue) == 0x00002E, "Member 'ABP_Character_C_SetBPVariables::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable_3) == 0x000030, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_IsValid_ReturnValue_1) == 0x000034, "Member 'ABP_Character_C_SetBPVariables::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable_4) == 0x000038, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_MapRangeClamped_ReturnValue) == 0x00003C, "Member 'ABP_Character_C_SetBPVariables::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000040, "Member 'ABP_Character_C_SetBPVariables::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_LerpLookAtAlpha_Yaw) == 0x000044, "Member 'ABP_Character_C_SetBPVariables::CallFunc_LerpLookAtAlpha_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_LerpLookAtAlpha_Pitch) == 0x000048, "Member 'ABP_Character_C_SetBPVariables::CallFunc_LerpLookAtAlpha_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_LerpLookAtAlpha_Alpha) == 0x00004C, "Member 'ABP_Character_C_SetBPVariables::CallFunc_LerpLookAtAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000050, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_bool_Variable_2) == 0x000054, "Member 'ABP_Character_C_SetBPVariables::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_BooleanAND_ReturnValue_1) == 0x000055, "Member 'ABP_Character_C_SetBPVariables::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_BooleanAND_ReturnValue_2) == 0x000056, "Member 'ABP_Character_C_SetBPVariables::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, K2Node_Select_Default_1) == 0x000058, "Member 'ABP_Character_C_SetBPVariables::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_float_Variable_5) == 0x00005C, "Member 'ABP_Character_C_SetBPVariables::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, K2Node_Select_Default_2) == 0x000060, "Member 'ABP_Character_C_SetBPVariables::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, Temp_bool_Variable_3) == 0x000064, "Member 'ABP_Character_C_SetBPVariables::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_GetIdleLayer_IdleAction) == 0x000065, "Member 'ABP_Character_C_SetBPVariables::CallFunc_GetIdleLayer_IdleAction' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, K2Node_Select_Default_3) == 0x000068, "Member 'ABP_Character_C_SetBPVariables::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00006C, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000070, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000074, "Member 'ABP_Character_C_SetBPVariables::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_FInterpTo_ReturnValue) == 0x000078, "Member 'ABP_Character_C_SetBPVariables::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_BooleanAND_ReturnValue_3) == 0x00007C, "Member 'ABP_Character_C_SetBPVariables::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetBPVariables, CallFunc_BooleanAND_ReturnValue_4) == 0x00007D, "Member 'ABP_Character_C_SetBPVariables::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.BP_SetIKValues
// 0x0230 (0x0230 - 0x0000)
struct ABP_Character_C_BP_SetIKValues final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable;                              // 0x0004(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Temp_struct_Variable_1;                            // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               Temp_struct_Variable_2;                            // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0074(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x008C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_3;        // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_4;        // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_5;        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_6;        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_7;        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_8;        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_9;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_10;       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_11;       // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0128(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakVector_X_4;                          // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_12;       // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_4;                 // 0x0150(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_13;       // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_5;                 // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_16F[0x1];                                      // 0x016F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_3;                // 0x0170(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_3;                // 0x017C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_3;                   // 0x0188(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0194(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default;                             // 0x01A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x01AC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_4;                // 0x01B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_4;                // 0x01C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_4;                   // 0x01D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_5;                // 0x01DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_5;                // 0x01E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_5;                   // 0x01F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_6;                // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_6;                // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_6;                   // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_BP_SetIKValues) == 0x000004, "Wrong alignment on ABP_Character_C_BP_SetIKValues");
static_assert(sizeof(ABP_Character_C_BP_SetIKValues) == 0x000230, "Wrong size on ABP_Character_C_BP_SetIKValues");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, Temp_bool_Variable) == 0x000000, "Member 'ABP_Character_C_BP_SetIKValues::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, Temp_struct_Variable) == 0x000004, "Member 'ABP_Character_C_BP_SetIKValues::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, Temp_bool_Variable_1) == 0x000010, "Member 'ABP_Character_C_BP_SetIKValues::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, Temp_struct_Variable_1) == 0x000014, "Member 'ABP_Character_C_BP_SetIKValues::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, Temp_struct_Variable_2) == 0x000020, "Member 'ABP_Character_C_BP_SetIKValues::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X) == 0x00002C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y) == 0x000030, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z) == 0x000034, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000038, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00003C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000040, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location) == 0x000050, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation) == 0x00005C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale) == 0x000068, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_1) == 0x000074, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_1) == 0x000080, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_1) == 0x00008C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X_1) == 0x000098, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y_1) == 0x00009C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z_1) == 0x0000A0, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_3) == 0x0000A4, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_4) == 0x0000A8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_5) == 0x0000AC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X_2) == 0x0000B0, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y_2) == 0x0000B4, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z_2) == 0x0000B8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue_1) == 0x0000BC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_6) == 0x0000C8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_7) == 0x0000CC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_8) == 0x0000D0, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue_2) == 0x0000D4, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_2) == 0x0000E0, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_2) == 0x0000EC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_2) == 0x0000F8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X_3) == 0x000104, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y_3) == 0x000108, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z_3) == 0x00010C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_9) == 0x000110, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_10) == 0x000114, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_11) == 0x000118, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue_3) == 0x00011C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_ComposeRotators_ReturnValue) == 0x000128, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X_4) == 0x000134, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y_4) == 0x000138, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z_4) == 0x00013C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_12) == 0x000140, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_X_5) == 0x000144, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Y_5) == 0x000148, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakVector_Z_5) == 0x00014C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue_4) == 0x000150, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Subtract_FloatFloat_ReturnValue_13) == 0x00015C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Subtract_FloatFloat_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_MakeVector_ReturnValue_5) == 0x000160, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_MakeVector_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00016C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x00016D, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BooleanOR_ReturnValue) == 0x00016E, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_3) == 0x000170, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_3) == 0x00017C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_3) == 0x000188, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_Add_VectorVector_ReturnValue) == 0x000194, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, K2Node_Select_Default) == 0x0001A0, "Member 'ABP_Character_C_BP_SetIKValues::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_ComposeRotators_ReturnValue_1) == 0x0001AC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_4) == 0x0001B8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_4) == 0x0001C4, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_4) == 0x0001D0, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_5) == 0x0001DC, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_5) == 0x0001E8, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_5) == 0x0001F4, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Location_6) == 0x000200, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Location_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Rotation_6) == 0x00020C, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Rotation_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, CallFunc_BreakTransform_Scale_6) == 0x000218, "Member 'ABP_Character_C_BP_SetIKValues::CallFunc_BreakTransform_Scale_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BP_SetIKValues, K2Node_Select_Default_1) == 0x000224, "Member 'ABP_Character_C_BP_SetIKValues::K2Node_Select_Default_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.CanUseLeftHandIK_BP
// 0x000A (0x000A - 0x0000)
struct ABP_Character_C_CanUseLeftHandIK_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_CanUseLeftHandIK_BP) == 0x000001, "Wrong alignment on ABP_Character_C_CanUseLeftHandIK_BP");
static_assert(sizeof(ABP_Character_C_CanUseLeftHandIK_BP) == 0x00000A, "Wrong size on ABP_Character_C_CanUseLeftHandIK_BP");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, ReturnValue) == 0x000000, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_Not_PreBool_ReturnValue_1) == 0x000007, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CanUseLeftHandIK_BP, CallFunc_BooleanAND_ReturnValue_1) == 0x000009, "Member 'ABP_Character_C_CanUseLeftHandIK_BP::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetCorrectIKRunDataTable
// 0x0010 (0x0010 - 0x0000)
struct ABP_Character_C_GetCorrectIKRunDataTable final
{
public:
	class UDataTable*                             Dt;                                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue_1;      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GetCorrectIKRunDataTable) == 0x000008, "Wrong alignment on ABP_Character_C_GetCorrectIKRunDataTable");
static_assert(sizeof(ABP_Character_C_GetCorrectIKRunDataTable) == 0x000010, "Wrong size on ABP_Character_C_GetCorrectIKRunDataTable");
static_assert(offsetof(ABP_Character_C_GetCorrectIKRunDataTable, Dt) == 0x000000, "Member 'ABP_Character_C_GetCorrectIKRunDataTable::Dt' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectIKRunDataTable, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x000008, "Member 'ABP_Character_C_GetCorrectIKRunDataTable::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectIKRunDataTable, CallFunc_EqualEqual_ClassClass_ReturnValue_1) == 0x000009, "Member 'ABP_Character_C_GetCorrectIKRunDataTable::CallFunc_EqualEqual_ClassClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectIKRunDataTable, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'ABP_Character_C_GetCorrectIKRunDataTable::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetCorrectSectionForThrowPower
// 0x0034 (0x0034 - 0x0000)
struct ABP_Character_C_GetCorrectSectionForThrowPower final
{
public:
	float                                         Power;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasAiming;                                         // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GetCorrectSectionForThrowPower) == 0x000004, "Wrong alignment on ABP_Character_C_GetCorrectSectionForThrowPower");
static_assert(sizeof(ABP_Character_C_GetCorrectSectionForThrowPower) == 0x000034, "Wrong size on ABP_Character_C_GetCorrectSectionForThrowPower");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Power) == 0x000000, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Power' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, WasAiming) == 0x000004, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::WasAiming' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, SectionName) == 0x000008, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::SectionName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_float_Variable_1) == 0x000014, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_bool_Variable) == 0x000018, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_float_Variable_2) == 0x00001C, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_float_Variable_3) == 0x000020, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, Temp_bool_Variable_1) == 0x000024, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, K2Node_Select_Default) == 0x000028, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, K2Node_Select_Default_1) == 0x00002C, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, CallFunc_Less_FloatFloat_ReturnValue) == 0x000030, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetCorrectSectionForThrowPower, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000031, "Member 'ABP_Character_C_GetCorrectSectionForThrowPower::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.TraceDownwardsFromElbowToForearm
// 0x02E0 (0x02E0 - 0x0000)
struct ABP_Character_C_TraceDownwardsFromElbowToForearm final
{
public:
	float                                         DeltaX_0;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RightLocMultiplier;                                // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ForwardLocMultiplier;                              // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TempRot_Y;                                         // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0028(0x0010)(ConstParm, ReferenceParm)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0050(0x0030)(IsPlainOldData, NoDestructor)
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue_1;         // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x00A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Lerp_ReturnValue_1;                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00F8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0104(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0110(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_3;           // 0x011C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0128(0x008C)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B7[0x1];                                      // 0x01B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0200(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              CallFunc_BreakHitResult_ShapeSurfaceType;          // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x020C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0220(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x022C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_4;           // 0x0238(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0xC];                                      // 0x0244(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0250(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeRelativeTransform_ReturnValue;        // 0x0280(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x02B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x02BC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x02C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_TraceDownwardsFromElbowToForearm) == 0x000010, "Wrong alignment on ABP_Character_C_TraceDownwardsFromElbowToForearm");
static_assert(sizeof(ABP_Character_C_TraceDownwardsFromElbowToForearm) == 0x0002E0, "Wrong size on ABP_Character_C_TraceDownwardsFromElbowToForearm");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, DeltaX_0) == 0x000000, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::DeltaX_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, RightLocMultiplier) == 0x000004, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::RightLocMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, ForwardLocMultiplier) == 0x00000C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::ForwardLocMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, TempRot_Y) == 0x000014, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::TempRot_Y' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakVector2D_X) == 0x000018, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakVector2D_Y) == 0x00001C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakVector2D_X_1) == 0x000020, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakVector2D_Y_1) == 0x000024, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, Temp_object_Variable) == 0x000028, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetOwningComponent_ReturnValue) == 0x000038, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_MakeRotator_ReturnValue) == 0x000040, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetSocketTransform_ReturnValue) == 0x000050, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetOwningComponent_ReturnValue_1) == 0x000080, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetOwningComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetSocketLocation_ReturnValue) == 0x000088, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_VectorVector_ReturnValue) == 0x000094, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000A0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_MakeRotator_ReturnValue_1) == 0x0000A4, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_ComposeRotators_ReturnValue) == 0x0000B0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetForwardVector_ReturnValue) == 0x0000BC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakRotator_Roll) == 0x0000C8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakRotator_Pitch) == 0x0000CC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakRotator_Yaw) == 0x0000D0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetRightVector_ReturnValue) == 0x0000D4, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_GetCurveValue_ReturnValue) == 0x0000E0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Lerp_ReturnValue) == 0x0000E4, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Lerp_ReturnValue_1) == 0x0000E8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000EC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000F8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000104, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000110, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_VectorVector_ReturnValue_3) == 0x00011C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_VectorVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_LineTraceSingle_OutHit) == 0x000128, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_LineTraceSingle_ReturnValue) == 0x0001B4, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_bBlockingHit) == 0x0001B5, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001B6, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_Time) == 0x0001B8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_Distance) == 0x0001BC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_Location) == 0x0001C0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_ImpactPoint) == 0x0001CC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_Normal) == 0x0001D8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_ImpactNormal) == 0x0001E4, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_PhysMat) == 0x0001F0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_HitActor) == 0x0001F8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_HitComponent) == 0x000200, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_ShapeSurfaceType) == 0x000208, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_ShapeSurfaceType' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_HitBoneName) == 0x00020C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_HitItem) == 0x000214, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_ElementIndex) == 0x000218, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_FaceIndex) == 0x00021C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_TraceStart) == 0x000220, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakHitResult_TraceEnd) == 0x00022C, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_Add_VectorVector_ReturnValue_4) == 0x000238, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_Add_VectorVector_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_MakeTransform_ReturnValue) == 0x000250, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_MakeRelativeTransform_ReturnValue) == 0x000280, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_MakeRelativeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakTransform_Location) == 0x0002B0, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakTransform_Rotation) == 0x0002BC, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_TraceDownwardsFromElbowToForearm, CallFunc_BreakTransform_Scale) == 0x0002C8, "Member 'ABP_Character_C_TraceDownwardsFromElbowToForearm::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetRightHandLocationPerStance
// 0x0078 (0x0078 - 0x0000)
struct ABP_Character_C_GetRightHandLocationPerStance final
{
public:
	struct FVector                                RightHandLocation_0;                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TempVector;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_4;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x002C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_2;                           // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_3;                           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_4;                           // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default_5;                           // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_GetRightHandLocationPerStance) == 0x000004, "Wrong alignment on ABP_Character_C_GetRightHandLocationPerStance");
static_assert(sizeof(ABP_Character_C_GetRightHandLocationPerStance) == 0x000078, "Wrong size on ABP_Character_C_GetRightHandLocationPerStance");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, RightHandLocation_0) == 0x000000, "Member 'ABP_Character_C_GetRightHandLocationPerStance::RightHandLocation_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, TempVector) == 0x00000C, "Member 'ABP_Character_C_GetRightHandLocationPerStance::TempVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable) == 0x000018, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable_1) == 0x000019, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable_2) == 0x00001A, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable_3) == 0x00001B, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable_4) == 0x00001C, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, Temp_bool_Variable_5) == 0x00001D, "Member 'ABP_Character_C_GetRightHandLocationPerStance::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, CallFunc_Add_VectorVector_ReturnValue) == 0x000020, "Member 'ABP_Character_C_GetRightHandLocationPerStance::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default) == 0x00002C, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default_1) == 0x000038, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default_2) == 0x000044, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default_3) == 0x000050, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default_4) == 0x00005C, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_SwitchEnum_CmpSuccess) == 0x000068, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandLocationPerStance, K2Node_Select_Default_5) == 0x00006C, "Member 'ABP_Character_C_GetRightHandLocationPerStance::K2Node_Select_Default_5' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetRightHandRotationPerStance
// 0x0044 (0x0044 - 0x0000)
struct ABP_Character_C_GetRightHandRotationPerStance final
{
public:
	struct FRotator                               RightHandLocation_0;                               // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               TempVector;                                        // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default;                             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               K2Node_Select_Default_2;                           // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GetRightHandRotationPerStance) == 0x000004, "Wrong alignment on ABP_Character_C_GetRightHandRotationPerStance");
static_assert(sizeof(ABP_Character_C_GetRightHandRotationPerStance) == 0x000044, "Wrong size on ABP_Character_C_GetRightHandRotationPerStance");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, RightHandLocation_0) == 0x000000, "Member 'ABP_Character_C_GetRightHandRotationPerStance::RightHandLocation_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, TempVector) == 0x00000C, "Member 'ABP_Character_C_GetRightHandRotationPerStance::TempVector' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, Temp_bool_Variable) == 0x000018, "Member 'ABP_Character_C_GetRightHandRotationPerStance::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, Temp_bool_Variable_1) == 0x000019, "Member 'ABP_Character_C_GetRightHandRotationPerStance::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, Temp_bool_Variable_2) == 0x00001A, "Member 'ABP_Character_C_GetRightHandRotationPerStance::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, K2Node_Select_Default) == 0x00001C, "Member 'ABP_Character_C_GetRightHandRotationPerStance::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, K2Node_Select_Default_1) == 0x000028, "Member 'ABP_Character_C_GetRightHandRotationPerStance::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'ABP_Character_C_GetRightHandRotationPerStance::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRightHandRotationPerStance, K2Node_Select_Default_2) == 0x000038, "Member 'ABP_Character_C_GetRightHandRotationPerStance::K2Node_Select_Default_2' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.UpdateStockRestOffset
// 0x0070 (0x0070 - 0x0000)
struct ABP_Character_C_UpdateStockRestOffset final
{
public:
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0010(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_UpdateStockRestOffset) == 0x000010, "Wrong alignment on ABP_Character_C_UpdateStockRestOffset");
static_assert(sizeof(ABP_Character_C_UpdateStockRestOffset) == 0x000070, "Wrong size on ABP_Character_C_UpdateStockRestOffset");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_GetOwningComponent_ReturnValue) == 0x000000, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_GetSocketTransform_ReturnValue) == 0x000010, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_BreakTransform_Location) == 0x000044, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_BreakTransform_Rotation) == 0x000050, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_UpdateStockRestOffset, CallFunc_BreakTransform_Scale) == 0x00005C, "Member 'ABP_Character_C_UpdateStockRestOffset::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetRotationLimitsPerStance
// 0x0044 (0x0044 - 0x0000)
struct ABP_Character_C_GetRotationLimitsPerStance final
{
public:
	EStance                                       Stance;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeftMaxRotation;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RightMaxRotation;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStance                                       Temp_byte_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EStance                                       Temp_byte_Variable_1;                              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_5;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_6;                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_7;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_8;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_9;                             // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_GetRotationLimitsPerStance) == 0x000004, "Wrong alignment on ABP_Character_C_GetRotationLimitsPerStance");
static_assert(sizeof(ABP_Character_C_GetRotationLimitsPerStance) == 0x000044, "Wrong size on ABP_Character_C_GetRotationLimitsPerStance");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Stance) == 0x000000, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Stance' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, LeftMaxRotation) == 0x000004, "Member 'ABP_Character_C_GetRotationLimitsPerStance::LeftMaxRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, RightMaxRotation) == 0x000008, "Member 'ABP_Character_C_GetRotationLimitsPerStance::RightMaxRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_byte_Variable) == 0x00000C, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_1) == 0x000014, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_2) == 0x000018, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_3) == 0x00001C, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_4) == 0x000020, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_byte_Variable_1) == 0x000024, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, K2Node_Select_Default) == 0x000028, "Member 'ABP_Character_C_GetRotationLimitsPerStance::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_5) == 0x00002C, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_6) == 0x000030, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_7) == 0x000034, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_7' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_8) == 0x000038, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_8' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, Temp_float_Variable_9) == 0x00003C, "Member 'ABP_Character_C_GetRotationLimitsPerStance::Temp_float_Variable_9' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetRotationLimitsPerStance, K2Node_Select_Default_1) == 0x000040, "Member 'ABP_Character_C_GetRotationLimitsPerStance::K2Node_Select_Default_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_LeanRight
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_Character_C_Get_LeanRight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default;                             // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_LeanRight) == 0x000010, "Wrong alignment on ABP_Character_C_Get_LeanRight");
static_assert(sizeof(ABP_Character_C_Get_LeanRight) == 0x0000A0, "Wrong size on ABP_Character_C_Get_LeanRight");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_LeanRight::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000040, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_InverseTransformDirection_ReturnValue) == 0x00004C, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000058, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_Normal_ReturnValue) == 0x00005C, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_FInterpTo_ReturnValue) == 0x000068, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_Abs_ReturnValue) == 0x00006C, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000070, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00007C, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_BreakVector_X) == 0x000080, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_BreakVector_Y) == 0x000084, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_BreakVector_Z) == 0x000088, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, Temp_bool_Variable) == 0x00008C, "Member 'ABP_Character_C_Get_LeanRight::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_FInterpTo_ReturnValue_1) == 0x000090, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000094, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_BooleanAND_ReturnValue) == 0x000095, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_Not_PreBool_ReturnValue) == 0x000096, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, CallFunc_BooleanAND_ReturnValue_1) == 0x000097, "Member 'ABP_Character_C_Get_LeanRight::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanRight, K2Node_Select_Default) == 0x000098, "Member 'ABP_Character_C_Get_LeanRight::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_LeanForward
// 0x00A0 (0x00A0 - 0x0000)
struct ABP_Character_C_Get_LeanForward final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakVector_X;                            // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue_1;                  // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_LeanForward) == 0x000010, "Wrong alignment on ABP_Character_C_Get_LeanForward");
static_assert(sizeof(ABP_Character_C_Get_LeanForward) == 0x0000A0, "Wrong size on ABP_Character_C_Get_LeanForward");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_LeanForward::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_Abs_ReturnValue) == 0x000008, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000040, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_InverseTransformDirection_ReturnValue) == 0x00004C, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_Normal_ReturnValue) == 0x000058, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000064, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, Temp_bool_Variable) == 0x000070, "Member 'ABP_Character_C_Get_LeanForward::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_BreakVector_X) == 0x000074, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_BreakVector_Y) == 0x000078, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_BreakVector_Z) == 0x00007C, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000080, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000081, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_BooleanAND_ReturnValue) == 0x000082, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_Not_PreBool_ReturnValue) == 0x000083, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000084, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_BooleanAND_ReturnValue_1) == 0x000088, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_FInterpTo_ReturnValue) == 0x00008C, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, CallFunc_FInterpTo_ReturnValue_1) == 0x000090, "Member 'ABP_Character_C_Get_LeanForward::CallFunc_FInterpTo_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeanForward, K2Node_Select_Default) == 0x000094, "Member 'ABP_Character_C_Get_LeanForward::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_LowerBody_RootYaw
// 0x010C (0x010C - 0x0000)
struct ABP_Character_C_Get_LowerBody_RootYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Select_Default_1;                           // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRotationLimitsPerStance_LeftMaxRotation; // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetRotationLimitsPerStance_RightMaxRotation; // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x005C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue;         // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetGameTimeInSeconds_ReturnValue_1;       // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_4;                // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_5;                // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue_1;     // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue_1;     // 0x00E4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_2;                      // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_2;                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_2;                       // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_2;                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0107(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_LowerBody_RootYaw) == 0x000004, "Wrong alignment on ABP_Character_C_Get_LowerBody_RootYaw");
static_assert(sizeof(ABP_Character_C_Get_LowerBody_RootYaw) == 0x00010C, "Wrong size on ABP_Character_C_Get_LowerBody_RootYaw");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_bool_Variable) == 0x000004, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_float_Variable) == 0x000008, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_float_Variable_1) == 0x00000C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_bool_Variable_1) == 0x000010, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_bool_Variable_2) == 0x000011, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue) == 0x000014, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000020, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue_1) == 0x000024, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Abs_ReturnValue) == 0x000030, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000034, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, K2Node_Select_Default) == 0x000038, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue_2) == 0x00003C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, K2Node_Select_Default_1) == 0x000048, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, Temp_bool_Variable_3) == 0x00004C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00004D, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, K2Node_Select_Default_2) == 0x000050, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_GetRotationLimitsPerStance_LeftMaxRotation) == 0x000054, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_GetRotationLimitsPerStance_LeftMaxRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_GetRotationLimitsPerStance_RightMaxRotation) == 0x000058, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_GetRotationLimitsPerStance_RightMaxRotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue_3) == 0x00005C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000068, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Roll) == 0x000074, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Pitch) == 0x000078, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Yaw) == 0x00007C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000080, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Abs_ReturnValue_1) == 0x000084, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000088, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_GetGameTimeInSeconds_ReturnValue) == 0x00008C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_GetGameTimeInSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, K2Node_Select_Default_3) == 0x000090, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000094, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Add_FloatFloat_ReturnValue) == 0x000098, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_GetGameTimeInSeconds_ReturnValue_1) == 0x00009C, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_GetGameTimeInSeconds_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_FMax_ReturnValue) == 0x0000A0, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x0000A4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue_4) == 0x0000A8, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_RInterpTo_ReturnValue) == 0x0000B4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Not_PreBool_ReturnValue) == 0x0000C0, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Roll_1) == 0x0000C4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Pitch_1) == 0x0000C8, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Yaw_1) == 0x0000CC, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BooleanAND_ReturnValue) == 0x0000D0, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BooleanAND_ReturnValue_1) == 0x0000D1, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_MakeRotator_ReturnValue_5) == 0x0000D4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_MakeRotator_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_NearlyEqual_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_NearlyEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_NormalizedDeltaRotator_ReturnValue_1) == 0x0000E4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_NormalizedDeltaRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Roll_2) == 0x0000F0, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Roll_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Pitch_2) == 0x0000F4, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Pitch_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BreakRotator_Yaw_2) == 0x0000F8, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BreakRotator_Yaw_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Less_FloatFloat_ReturnValue) == 0x0000FC, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Abs_ReturnValue_2) == 0x000100, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000104, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000105, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BooleanOR_ReturnValue) == 0x000106, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BooleanOR_ReturnValue_1) == 0x000107, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LowerBody_RootYaw, CallFunc_BooleanOR_ReturnValue_2) == 0x000108, "Member 'ABP_Character_C_Get_LowerBody_RootYaw::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_IK_RunAdjustments_Alpha
// 0x0044 (0x0044 - 0x0000)
struct ABP_Character_C_Get_IK_RunAdjustments_Alpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_1;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_3;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_4;                             // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeClamped_ReturnValue;              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0036(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_37[0x1];                                       // 0x0037(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_2;                           // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_IK_RunAdjustments_Alpha) == 0x000004, "Wrong alignment on ABP_Character_C_Get_IK_RunAdjustments_Alpha");
static_assert(sizeof(ABP_Character_C_Get_IK_RunAdjustments_Alpha) == 0x000044, "Wrong size on ABP_Character_C_Get_IK_RunAdjustments_Alpha");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_float_Variable) == 0x000004, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_bool_Variable) == 0x000008, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_float_Variable_1) == 0x00000C, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_float_Variable_2) == 0x000010, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_bool_Variable_1) == 0x000014, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_float_Variable_3) == 0x000018, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_float_Variable_4) == 0x00001C, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_float_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, K2Node_Select_Default) == 0x000024, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, Temp_bool_Variable_2) == 0x000028, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_MapRangeClamped_ReturnValue) == 0x00002C, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, K2Node_Select_Default_1) == 0x000030, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000034, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_BooleanAND_ReturnValue) == 0x000035, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_BooleanAND_ReturnValue_1) == 0x000036, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, K2Node_Select_Default_2) == 0x000038, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RunAdjustments_Alpha, CallFunc_FInterpTo_ReturnValue) == 0x000040, "Member 'ABP_Character_C_Get_IK_RunAdjustments_Alpha::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_RightHandLocationBP
// 0x0070 (0x0070 - 0x0000)
struct ABP_Character_C_Get_RightHandLocationBP final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightHandLocationPerStance_RightHandLocation; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_RightHandLocationBP) == 0x000004, "Wrong alignment on ABP_Character_C_Get_RightHandLocationBP");
static_assert(sizeof(ABP_Character_C_Get_RightHandLocationBP) == 0x000070, "Wrong size on ABP_Character_C_Get_RightHandLocationBP");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_RightHandLocationBP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_RightHandLocationBP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_Get_RightHandLocationBP::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, Temp_float_Variable_1) == 0x000014, "Member 'ABP_Character_C_Get_RightHandLocationBP::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, Temp_bool_Variable_1) == 0x000018, "Member 'ABP_Character_C_Get_RightHandLocationBP::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, Temp_struct_Variable) == 0x00001C, "Member 'ABP_Character_C_Get_RightHandLocationBP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_GetRightHandLocationPerStance_RightHandLocation) == 0x000028, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_GetRightHandLocationPerStance_RightHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_VSize_ReturnValue) == 0x000034, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, K2Node_Select_Default) == 0x000038, "Member 'ABP_Character_C_Get_RightHandLocationBP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_Add_VectorVector_ReturnValue) == 0x00004C, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, K2Node_Select_Default_1) == 0x000058, "Member 'ABP_Character_C_Get_RightHandLocationBP::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandLocationBP, CallFunc_VInterpTo_ReturnValue) == 0x000064, "Member 'ABP_Character_C_Get_RightHandLocationBP::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_LeftHandLocationBP
// 0x0030 (0x0030 - 0x0000)
struct ABP_Character_C_Get_LeftHandLocationBP final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_Select_Default;                             // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_LeftHandLocationBP) == 0x000004, "Wrong alignment on ABP_Character_C_Get_LeftHandLocationBP");
static_assert(sizeof(ABP_Character_C_Get_LeftHandLocationBP) == 0x000030, "Wrong size on ABP_Character_C_Get_LeftHandLocationBP");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_LeftHandLocationBP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_LeftHandLocationBP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, Temp_struct_Variable) == 0x000010, "Member 'ABP_Character_C_Get_LeftHandLocationBP::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, CallFunc_VSize_ReturnValue) == 0x00001C, "Member 'ABP_Character_C_Get_LeftHandLocationBP::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'ABP_Character_C_Get_LeftHandLocationBP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftHandLocationBP, K2Node_Select_Default) == 0x000024, "Member 'ABP_Character_C_Get_LeftHandLocationBP::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_RightHandRotationBP
// 0x007C (0x007C - 0x0000)
struct ABP_Character_C_Get_RightHandRotationBP final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightHandLocationPerStance_RightHandLocation; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetRightHandRotationPerStance_RightHandLocation; // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_Multiply_RotatorFloat_ReturnValue;        // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default_1;                           // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_RInterpTo_ReturnValue;                    // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_RightHandRotationBP) == 0x000004, "Wrong alignment on ABP_Character_C_Get_RightHandRotationBP");
static_assert(sizeof(ABP_Character_C_Get_RightHandRotationBP) == 0x00007C, "Wrong size on ABP_Character_C_Get_RightHandRotationBP");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_RightHandRotationBP::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_RightHandRotationBP::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_Get_RightHandRotationBP::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, Temp_float_Variable_1) == 0x000014, "Member 'ABP_Character_C_Get_RightHandRotationBP::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, Temp_bool_Variable_1) == 0x000018, "Member 'ABP_Character_C_Get_RightHandRotationBP::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_MakeRotator_ReturnValue) == 0x00001C, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_GetRightHandLocationPerStance_RightHandLocation) == 0x000028, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_GetRightHandLocationPerStance_RightHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, K2Node_Select_Default) == 0x000034, "Member 'ABP_Character_C_Get_RightHandRotationBP::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_VSize_ReturnValue) == 0x000038, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_GetRightHandRotationPerStance_RightHandLocation) == 0x000040, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_GetRightHandRotationPerStance_RightHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_Multiply_RotatorFloat_ReturnValue) == 0x00004C, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_Multiply_RotatorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_ComposeRotators_ReturnValue) == 0x000058, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, K2Node_Select_Default_1) == 0x000064, "Member 'ABP_Character_C_Get_RightHandRotationBP::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightHandRotationBP, CallFunc_RInterpTo_ReturnValue) == 0x000070, "Member 'ABP_Character_C_Get_RightHandRotationBP::CallFunc_RInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_IK_RightHand_Joint_Offset
// 0x0064 (0x0064 - 0x0000)
struct ABP_Character_C_Get_IK_RightHand_Joint_Offset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetRightHandLocationPerStance_RightHandLocation; // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default_1;                           // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_IK_RightHand_Joint_Offset) == 0x000004, "Wrong alignment on ABP_Character_C_Get_IK_RightHand_Joint_Offset");
static_assert(sizeof(ABP_Character_C_Get_IK_RightHand_Joint_Offset) == 0x000064, "Wrong size on ABP_Character_C_Get_IK_RightHand_Joint_Offset");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, Temp_float_Variable) == 0x000010, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, Temp_float_Variable_1) == 0x000014, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, Temp_bool_Variable_1) == 0x000018, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, Temp_struct_Variable) == 0x00001C, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, CallFunc_GetRightHandLocationPerStance_RightHandLocation) == 0x000028, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::CallFunc_GetRightHandLocationPerStance_RightHandLocation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, CallFunc_VSize_ReturnValue) == 0x000034, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, K2Node_Select_Default) == 0x000038, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x00003C, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000040, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, K2Node_Select_Default_1) == 0x00004C, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_IK_RightHand_Joint_Offset, CallFunc_VInterpTo_ReturnValue) == 0x000058, "Member 'ABP_Character_C_Get_IK_RightHand_Joint_Offset::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_Prone_LeftHand_Location
// 0x0028 (0x0028 - 0x0000)
struct ABP_Character_C_Get_Prone_LeftHand_Location final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue; // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_Prone_LeftHand_Location) == 0x000004, "Wrong alignment on ABP_Character_C_Get_Prone_LeftHand_Location");
static_assert(sizeof(ABP_Character_C_Get_Prone_LeftHand_Location) == 0x000028, "Wrong size on ABP_Character_C_Get_Prone_LeftHand_Location");
static_assert(offsetof(ABP_Character_C_Get_Prone_LeftHand_Location, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_Prone_LeftHand_Location::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_LeftHand_Location, CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue) == 0x00000C, "Member 'ABP_Character_C_Get_Prone_LeftHand_Location::CallFunc_Get_ShouldAdjustPronePST_LeftHand_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_LeftHand_Location, Temp_bool_Variable) == 0x00000D, "Member 'ABP_Character_C_Get_Prone_LeftHand_Location::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_LeftHand_Location, CallFunc_VInterpTo_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_Prone_LeftHand_Location::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_LeftHand_Location, K2Node_Select_Default) == 0x00001C, "Member 'ABP_Character_C_Get_Prone_LeftHand_Location::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_LeftMovementAngle
// 0x000C (0x000C - 0x0000)
struct ABP_Character_C_Get_LeftMovementAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_LeftMovementAngle) == 0x000004, "Wrong alignment on ABP_Character_C_Get_LeftMovementAngle");
static_assert(sizeof(ABP_Character_C_Get_LeftMovementAngle) == 0x00000C, "Wrong size on ABP_Character_C_Get_LeftMovementAngle");
static_assert(offsetof(ABP_Character_C_Get_LeftMovementAngle, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_LeftMovementAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftMovementAngle, Temp_bool_Variable) == 0x000004, "Member 'ABP_Character_C_Get_LeftMovementAngle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_LeftMovementAngle, K2Node_Select_Default) == 0x000008, "Member 'ABP_Character_C_Get_LeftMovementAngle::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_RightMovementAngle
// 0x000C (0x000C - 0x0000)
struct ABP_Character_C_Get_RightMovementAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_RightMovementAngle) == 0x000004, "Wrong alignment on ABP_Character_C_Get_RightMovementAngle");
static_assert(sizeof(ABP_Character_C_Get_RightMovementAngle) == 0x00000C, "Wrong size on ABP_Character_C_Get_RightMovementAngle");
static_assert(offsetof(ABP_Character_C_Get_RightMovementAngle, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_RightMovementAngle::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightMovementAngle, Temp_bool_Variable) == 0x000004, "Member 'ABP_Character_C_Get_RightMovementAngle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightMovementAngle, K2Node_Select_Default) == 0x000008, "Member 'ABP_Character_C_Get_RightMovementAngle::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetAnimCollection
// 0x00D0 (0x00D0 - 0x0000)
struct ABP_Character_C_GetAnimCollection final
{
public:
	bool                                          Male;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHumanAnimCollection*                   AsHuman_Anim_Collection;                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 Temp_softobject_Variable;                          // 0x0018(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 Temp_softobject_Variable_1;                        // 0x0040(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 K2Node_Select_Default;                             // 0x0068(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UObject>                 CallFunc_GetSoftReference_ReturnValue;             // 0x0090(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftReference_ReturnValue;            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHumanAnimCollection*                   K2Node_DynamicCast_AsHuman_Anim_Collection;        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GetAnimCollection) == 0x000008, "Wrong alignment on ABP_Character_C_GetAnimCollection");
static_assert(sizeof(ABP_Character_C_GetAnimCollection) == 0x0000D0, "Wrong size on ABP_Character_C_GetAnimCollection");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, Male) == 0x000000, "Member 'ABP_Character_C_GetAnimCollection::Male' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, AsHuman_Anim_Collection) == 0x000008, "Member 'ABP_Character_C_GetAnimCollection::AsHuman_Anim_Collection' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, Temp_bool_Variable) == 0x000010, "Member 'ABP_Character_C_GetAnimCollection::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, Temp_softobject_Variable) == 0x000018, "Member 'ABP_Character_C_GetAnimCollection::Temp_softobject_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, Temp_softobject_Variable_1) == 0x000040, "Member 'ABP_Character_C_GetAnimCollection::Temp_softobject_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, K2Node_Select_Default) == 0x000068, "Member 'ABP_Character_C_GetAnimCollection::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, CallFunc_GetSoftReference_ReturnValue) == 0x000090, "Member 'ABP_Character_C_GetAnimCollection::CallFunc_GetSoftReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, CallFunc_LoadSoftReference_ReturnValue) == 0x0000B8, "Member 'ABP_Character_C_GetAnimCollection::CallFunc_LoadSoftReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, K2Node_DynamicCast_AsHuman_Anim_Collection) == 0x0000C0, "Member 'ABP_Character_C_GetAnimCollection::K2Node_DynamicCast_AsHuman_Anim_Collection' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetAnimCollection, K2Node_DynamicCast_bSuccess) == 0x0000C8, "Member 'ABP_Character_C_GetAnimCollection::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Character_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Character_C_AnimGraph");
static_assert(sizeof(ABP_Character_C_AnimGraph) == 0x000010, "Wrong size on ABP_Character_C_AnimGraph");
static_assert(offsetof(ABP_Character_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Character_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Melee
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_Melee final
{
public:
	struct FPoseLink                              Melee_Locomotion;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Melee_0;                                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Melee) == 0x000008, "Wrong alignment on ABP_Character_C_Melee");
static_assert(sizeof(ABP_Character_C_Melee) == 0x000020, "Wrong size on ABP_Character_C_Melee");
static_assert(offsetof(ABP_Character_C_Melee, Melee_Locomotion) == 0x000000, "Member 'ABP_Character_C_Melee::Melee_Locomotion' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Melee, Melee_0) == 0x000010, "Member 'ABP_Character_C_Melee::Melee_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.WeaponActions
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_WeaponActions final
{
public:
	struct FPoseLink                              Weapon_Locomotion;                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              WeaponActions_0;                                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_WeaponActions) == 0x000008, "Wrong alignment on ABP_Character_C_WeaponActions");
static_assert(sizeof(ABP_Character_C_WeaponActions) == 0x000020, "Wrong size on ABP_Character_C_WeaponActions");
static_assert(offsetof(ABP_Character_C_WeaponActions, Weapon_Locomotion) == 0x000000, "Member 'ABP_Character_C_WeaponActions::Weapon_Locomotion' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_WeaponActions, WeaponActions_0) == 0x000010, "Member 'ABP_Character_C_WeaponActions::WeaponActions_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.AimingLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_AimingLayer final
{
public:
	struct FPoseLink                              AimedLocomotion;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              AimingLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_AimingLayer) == 0x000008, "Wrong alignment on ABP_Character_C_AimingLayer");
static_assert(sizeof(ABP_Character_C_AimingLayer) == 0x000020, "Wrong size on ABP_Character_C_AimingLayer");
static_assert(offsetof(ABP_Character_C_AimingLayer, AimedLocomotion) == 0x000000, "Member 'ABP_Character_C_AimingLayer::AimedLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_AimingLayer, AimingLayer_0) == 0x000010, "Member 'ABP_Character_C_AimingLayer::AimingLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.HandFKLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_HandFKLayer final
{
public:
	struct FPoseLink                              HandFK_FullBody;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              HandFKLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_HandFKLayer) == 0x000008, "Wrong alignment on ABP_Character_C_HandFKLayer");
static_assert(sizeof(ABP_Character_C_HandFKLayer) == 0x000020, "Wrong size on ABP_Character_C_HandFKLayer");
static_assert(offsetof(ABP_Character_C_HandFKLayer, HandFK_FullBody) == 0x000000, "Member 'ABP_Character_C_HandFKLayer::HandFK_FullBody' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_HandFKLayer, HandFKLayer_0) == 0x000010, "Member 'ABP_Character_C_HandFKLayer::HandFKLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.LadderLayer
// 0x0010 (0x0010 - 0x0000)
struct ABP_Character_C_LadderLayer final
{
public:
	struct FPoseLink                              LadderLayer_0;                                     // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_LadderLayer) == 0x000008, "Wrong alignment on ABP_Character_C_LadderLayer");
static_assert(sizeof(ABP_Character_C_LadderLayer) == 0x000010, "Wrong size on ABP_Character_C_LadderLayer");
static_assert(offsetof(ABP_Character_C_LadderLayer, LadderLayer_0) == 0x000000, "Member 'ABP_Character_C_LadderLayer::LadderLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.FPVLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_FPVLayer final
{
public:
	struct FPoseLink                              InpuPose;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              FPVLayer_0;                                        // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_FPVLayer) == 0x000008, "Wrong alignment on ABP_Character_C_FPVLayer");
static_assert(sizeof(ABP_Character_C_FPVLayer) == 0x000020, "Wrong size on ABP_Character_C_FPVLayer");
static_assert(offsetof(ABP_Character_C_FPVLayer, InpuPose) == 0x000000, "Member 'ABP_Character_C_FPVLayer::InpuPose' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_FPVLayer, FPVLayer_0) == 0x000010, "Member 'ABP_Character_C_FPVLayer::FPVLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GestureLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_GestureLayer final
{
public:
	struct FPoseLink                              FinalLocomotion;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              GestureLayer_0;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GestureLayer) == 0x000008, "Wrong alignment on ABP_Character_C_GestureLayer");
static_assert(sizeof(ABP_Character_C_GestureLayer) == 0x000020, "Wrong size on ABP_Character_C_GestureLayer");
static_assert(offsetof(ABP_Character_C_GestureLayer, FinalLocomotion) == 0x000000, "Member 'ABP_Character_C_GestureLayer::FinalLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GestureLayer, GestureLayer_0) == 0x000010, "Member 'ABP_Character_C_GestureLayer::GestureLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.LayerInteraction
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_LayerInteraction final
{
public:
	struct FPoseLink                              Interaction_FullBody;                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LayerInteraction_0;                                // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_LayerInteraction) == 0x000008, "Wrong alignment on ABP_Character_C_LayerInteraction");
static_assert(sizeof(ABP_Character_C_LayerInteraction) == 0x000020, "Wrong size on ABP_Character_C_LayerInteraction");
static_assert(offsetof(ABP_Character_C_LayerInteraction, Interaction_FullBody) == 0x000000, "Member 'ABP_Character_C_LayerInteraction::Interaction_FullBody' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LayerInteraction, LayerInteraction_0) == 0x000010, "Member 'ABP_Character_C_LayerInteraction::LayerInteraction_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.BaseLocomotionMixer
// 0x0080 (0x0080 - 0x0000)
struct ABP_Character_C_BaseLocomotionMixer final
{
public:
	struct FPoseLink                              Standing;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Water;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Crouch;                                            // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Prone;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Down;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Aiming_Stand;                                      // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              Aiming_Crouch;                                     // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              BaseLocomotionMixer_0;                             // 0x0070(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_BaseLocomotionMixer) == 0x000008, "Wrong alignment on ABP_Character_C_BaseLocomotionMixer");
static_assert(sizeof(ABP_Character_C_BaseLocomotionMixer) == 0x000080, "Wrong size on ABP_Character_C_BaseLocomotionMixer");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Standing) == 0x000000, "Member 'ABP_Character_C_BaseLocomotionMixer::Standing' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Water) == 0x000010, "Member 'ABP_Character_C_BaseLocomotionMixer::Water' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Crouch) == 0x000020, "Member 'ABP_Character_C_BaseLocomotionMixer::Crouch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Prone) == 0x000030, "Member 'ABP_Character_C_BaseLocomotionMixer::Prone' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Down) == 0x000040, "Member 'ABP_Character_C_BaseLocomotionMixer::Down' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Aiming_Stand) == 0x000050, "Member 'ABP_Character_C_BaseLocomotionMixer::Aiming_Stand' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, Aiming_Crouch) == 0x000060, "Member 'ABP_Character_C_BaseLocomotionMixer::Aiming_Crouch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_BaseLocomotionMixer, BaseLocomotionMixer_0) == 0x000070, "Member 'ABP_Character_C_BaseLocomotionMixer::BaseLocomotionMixer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SkeletalControlLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_SkeletalControlLayer final
{
public:
	struct FPoseLink                              SkeletalLayer;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              SkeletalControlLayer_0;                            // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SkeletalControlLayer) == 0x000008, "Wrong alignment on ABP_Character_C_SkeletalControlLayer");
static_assert(sizeof(ABP_Character_C_SkeletalControlLayer) == 0x000020, "Wrong size on ABP_Character_C_SkeletalControlLayer");
static_assert(offsetof(ABP_Character_C_SkeletalControlLayer, SkeletalLayer) == 0x000000, "Member 'ABP_Character_C_SkeletalControlLayer::SkeletalLayer' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SkeletalControlLayer, SkeletalControlLayer_0) == 0x000010, "Member 'ABP_Character_C_SkeletalControlLayer::SkeletalControlLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.LocomotionSlotLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_LocomotionSlotLayer final
{
public:
	struct FPoseLink                              BaseLocomotion;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LocomotionSlotLayer_0;                             // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_LocomotionSlotLayer) == 0x000008, "Wrong alignment on ABP_Character_C_LocomotionSlotLayer");
static_assert(sizeof(ABP_Character_C_LocomotionSlotLayer) == 0x000020, "Wrong size on ABP_Character_C_LocomotionSlotLayer");
static_assert(offsetof(ABP_Character_C_LocomotionSlotLayer, BaseLocomotion) == 0x000000, "Member 'ABP_Character_C_LocomotionSlotLayer::BaseLocomotion' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LocomotionSlotLayer, LocomotionSlotLayer_0) == 0x000010, "Member 'ABP_Character_C_LocomotionSlotLayer::LocomotionSlotLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.MirrorLayer
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_MirrorLayer final
{
public:
	struct FPoseLink                              MirrorFullBody;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              MirrorLayer_0;                                     // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_MirrorLayer) == 0x000008, "Wrong alignment on ABP_Character_C_MirrorLayer");
static_assert(sizeof(ABP_Character_C_MirrorLayer) == 0x000020, "Wrong size on ABP_Character_C_MirrorLayer");
static_assert(offsetof(ABP_Character_C_MirrorLayer, MirrorFullBody) == 0x000000, "Member 'ABP_Character_C_MirrorLayer::MirrorFullBody' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_MirrorLayer, MirrorLayer_0) == 0x000010, "Member 'ABP_Character_C_MirrorLayer::MirrorLayer_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.PrimaryWPN_SocketLock
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_PrimaryWPN_SocketLock final
{
public:
	struct FPoseLink                              InPose;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              PrimaryWPN_SocketLock_0;                           // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_PrimaryWPN_SocketLock) == 0x000008, "Wrong alignment on ABP_Character_C_PrimaryWPN_SocketLock");
static_assert(sizeof(ABP_Character_C_PrimaryWPN_SocketLock) == 0x000020, "Wrong size on ABP_Character_C_PrimaryWPN_SocketLock");
static_assert(offsetof(ABP_Character_C_PrimaryWPN_SocketLock, InPose) == 0x000000, "Member 'ABP_Character_C_PrimaryWPN_SocketLock::InPose' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_PrimaryWPN_SocketLock, PrimaryWPN_SocketLock_0) == 0x000010, "Member 'ABP_Character_C_PrimaryWPN_SocketLock::PrimaryWPN_SocketLock_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.LeftHandOnGroundFor_PST_Prone
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_LeftHandOnGroundFor_PST_Prone final
{
public:
	struct FPoseLink                              In;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              LeftHandOnGroundFor_PST_Prone_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_LeftHandOnGroundFor_PST_Prone) == 0x000008, "Wrong alignment on ABP_Character_C_LeftHandOnGroundFor_PST_Prone");
static_assert(sizeof(ABP_Character_C_LeftHandOnGroundFor_PST_Prone) == 0x000020, "Wrong size on ABP_Character_C_LeftHandOnGroundFor_PST_Prone");
static_assert(offsetof(ABP_Character_C_LeftHandOnGroundFor_PST_Prone, In) == 0x000000, "Member 'ABP_Character_C_LeftHandOnGroundFor_PST_Prone::In' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_LeftHandOnGroundFor_PST_Prone, LeftHandOnGroundFor_PST_Prone_0) == 0x000010, "Member 'ABP_Character_C_LeftHandOnGroundFor_PST_Prone::LeftHandOnGroundFor_PST_Prone_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.AnimDynamicsJiggle
// 0x0028 (0x0028 - 0x0000)
struct ABP_Character_C_AnimDynamicsJiggle final
{
public:
	struct FPoseLink                              InPose_;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	E_MeshSpecificJiggle                          BackPackJiggleType_0;                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          UniformJiggleType_0;                               // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          BottomFaceWearJiggleType_0;                        // 0x0012(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPoseLink                              AnimDynamicsJiggle_0;                              // 0x0018(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_AnimDynamicsJiggle) == 0x000008, "Wrong alignment on ABP_Character_C_AnimDynamicsJiggle");
static_assert(sizeof(ABP_Character_C_AnimDynamicsJiggle) == 0x000028, "Wrong size on ABP_Character_C_AnimDynamicsJiggle");
static_assert(offsetof(ABP_Character_C_AnimDynamicsJiggle, InPose_) == 0x000000, "Member 'ABP_Character_C_AnimDynamicsJiggle::InPose_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_AnimDynamicsJiggle, BackPackJiggleType_0) == 0x000010, "Member 'ABP_Character_C_AnimDynamicsJiggle::BackPackJiggleType_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_AnimDynamicsJiggle, UniformJiggleType_0) == 0x000011, "Member 'ABP_Character_C_AnimDynamicsJiggle::UniformJiggleType_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_AnimDynamicsJiggle, BottomFaceWearJiggleType_0) == 0x000012, "Member 'ABP_Character_C_AnimDynamicsJiggle::BottomFaceWearJiggleType_0' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_AnimDynamicsJiggle, AnimDynamicsJiggle_0) == 0x000018, "Member 'ABP_Character_C_AnimDynamicsJiggle::AnimDynamicsJiggle_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.RootRotation&TurnInPlaceBlend
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_RootRotation_TurnInPlaceBlend final
{
public:
	struct FPoseLink                              InputPose;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	struct FPoseLink                              RootRotation_TurnInPlaceBlend_0;                   // 0x0010(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Character_C_RootRotation_TurnInPlaceBlend) == 0x000008, "Wrong alignment on ABP_Character_C_RootRotation_TurnInPlaceBlend");
static_assert(sizeof(ABP_Character_C_RootRotation_TurnInPlaceBlend) == 0x000020, "Wrong size on ABP_Character_C_RootRotation_TurnInPlaceBlend");
static_assert(offsetof(ABP_Character_C_RootRotation_TurnInPlaceBlend, InputPose) == 0x000000, "Member 'ABP_Character_C_RootRotation_TurnInPlaceBlend::InputPose' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_RootRotation_TurnInPlaceBlend, RootRotation_TurnInPlaceBlend_0) == 0x000010, "Member 'ABP_Character_C_RootRotation_TurnInPlaceBlend::RootRotation_TurnInPlaceBlend_0' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetJiggleTypes
// 0x01B0 (0x01B0 - 0x0000)
struct ABP_Character_C_SetJiggleTypes final
{
public:
	bool                                          bShouldSimJiggle;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      Uniform;                                           // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      Backpack;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      BottomHeadwear;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess_1;                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0090(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00CC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E4[0xC];                                       // 0x00E4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_1;                         // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0120(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x012C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchInteger_CmpSuccess_2;                 // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item_2;                         // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0190(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x019C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetJiggleTypes) == 0x000010, "Wrong alignment on ABP_Character_C_SetJiggleTypes");
static_assert(sizeof(ABP_Character_C_SetJiggleTypes) == 0x0001B0, "Wrong size on ABP_Character_C_SetJiggleTypes");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, bShouldSimJiggle) == 0x000000, "Member 'ABP_Character_C_SetJiggleTypes::bShouldSimJiggle' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Uniform) == 0x000008, "Member 'ABP_Character_C_SetJiggleTypes::Uniform' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Backpack) == 0x000020, "Member 'ABP_Character_C_SetJiggleTypes::Backpack' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, BottomHeadwear) == 0x000038, "Member 'ABP_Character_C_SetJiggleTypes::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, bSuccess) == 0x000050, "Member 'ABP_Character_C_SetJiggleTypes::bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable) == 0x000054, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue) == 0x000058, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Array_Index_Variable) == 0x00005C, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess) == 0x000060, "Member 'ABP_Character_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable_1) == 0x000064, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue_1) == 0x000068, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Array_Index_Variable_1) == 0x00006C, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess_1) == 0x000070, "Member 'ABP_Character_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000078, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Loop_Counter_Variable_2) == 0x00007C, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue) == 0x000080, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Add_IntInt_ReturnValue_2) == 0x000084, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, Temp_int_Array_Index_Variable_2) == 0x000088, "Member 'ABP_Character_C_SetJiggleTypes::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Get_Item) == 0x000090, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Location) == 0x0000C0, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation) == 0x0000CC, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Scale) == 0x0000D8, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Get_Item_1) == 0x0000F0, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Location_1) == 0x000120, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation_1) == 0x00012C, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Scale_1) == 0x000138, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue_1) == 0x000144, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000148, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue_1) == 0x000149, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, K2Node_SwitchInteger_CmpSuccess_2) == 0x00014A, "Member 'ABP_Character_C_SetJiggleTypes::K2Node_SwitchInteger_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Get_Item_2) == 0x000150, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Array_Length_ReturnValue_2) == 0x000180, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Location_2) == 0x000184, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Rotation_2) == 0x000190, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_BreakTransform_Scale_2) == 0x00019C, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_Less_IntInt_ReturnValue_2) == 0x0001A8, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetJiggleTypes, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0001A9, "Member 'ABP_Character_C_SetJiggleTypes::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetPrimaryHolsterLock
// 0x0003 (0x0003 - 0x0000)
struct ABP_Character_C_SetPrimaryHolsterLock final
{
public:
	bool                                          ShouldLock;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRightSide_;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetPrimaryHolsterLock) == 0x000001, "Wrong alignment on ABP_Character_C_SetPrimaryHolsterLock");
static_assert(sizeof(ABP_Character_C_SetPrimaryHolsterLock) == 0x000003, "Wrong size on ABP_Character_C_SetPrimaryHolsterLock");
static_assert(offsetof(ABP_Character_C_SetPrimaryHolsterLock, ShouldLock) == 0x000000, "Member 'ABP_Character_C_SetPrimaryHolsterLock::ShouldLock' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetPrimaryHolsterLock, bRightSide_) == 0x000001, "Member 'ABP_Character_C_SetPrimaryHolsterLock::bRightSide_' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetPrimaryHolsterLock, Success) == 0x000002, "Member 'ABP_Character_C_SetPrimaryHolsterLock::Success' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetDisableLeftHandIK
// 0x0002 (0x0002 - 0x0000)
struct ABP_Character_C_SetDisableLeftHandIK final
{
public:
	bool                                          ShouldDisable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetDisableLeftHandIK) == 0x000001, "Wrong alignment on ABP_Character_C_SetDisableLeftHandIK");
static_assert(sizeof(ABP_Character_C_SetDisableLeftHandIK) == 0x000002, "Wrong size on ABP_Character_C_SetDisableLeftHandIK");
static_assert(offsetof(ABP_Character_C_SetDisableLeftHandIK, ShouldDisable) == 0x000000, "Member 'ABP_Character_C_SetDisableLeftHandIK::ShouldDisable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetDisableLeftHandIK, Success) == 0x000001, "Member 'ABP_Character_C_SetDisableLeftHandIK::Success' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetDisabledAiming
// 0x0002 (0x0002 - 0x0000)
struct ABP_Character_C_SetDisabledAiming final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetDisabledAiming) == 0x000001, "Wrong alignment on ABP_Character_C_SetDisabledAiming");
static_assert(sizeof(ABP_Character_C_SetDisabledAiming) == 0x000002, "Wrong size on ABP_Character_C_SetDisabledAiming");
static_assert(offsetof(ABP_Character_C_SetDisabledAiming, bDisabled) == 0x000000, "Member 'ABP_Character_C_SetDisabledAiming::bDisabled' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetDisabledAiming, Success) == 0x000001, "Member 'ABP_Character_C_SetDisabledAiming::Success' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.SetActiveHardStanceTransition
// 0x0002 (0x0002 - 0x0000)
struct ABP_Character_C_SetActiveHardStanceTransition final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_SetActiveHardStanceTransition) == 0x000001, "Wrong alignment on ABP_Character_C_SetActiveHardStanceTransition");
static_assert(sizeof(ABP_Character_C_SetActiveHardStanceTransition) == 0x000002, "Wrong size on ABP_Character_C_SetActiveHardStanceTransition");
static_assert(offsetof(ABP_Character_C_SetActiveHardStanceTransition, bActive) == 0x000000, "Member 'ABP_Character_C_SetActiveHardStanceTransition::bActive' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_SetActiveHardStanceTransition, Success) == 0x000001, "Member 'ABP_Character_C_SetActiveHardStanceTransition::Success' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.CheckForJiggle
// 0x0700 (0x0700 - 0x0000)
struct ABP_Character_C_CheckForJiggle final
{
public:
	class USkeletalMeshComponent*                 UniformMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BackpackMesh;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BottomHeadwear;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Processed;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          BottomHeadwearType;                                // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BottomHeadwearSocketFound;                         // 0x001A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     BottomHeadwearSocketTransforms;                    // 0x0020(0x0010)(Edit, BlueprintVisible)
	struct FS_JiggleSettings                      BottomHeadwearJiggleSettings;                      // 0x0030(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          UniformType;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UniformSocketFound;                                // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     UniformSocketTransforms;                           // 0x0050(0x0010)(Edit, BlueprintVisible)
	E_MeshSpecificJiggle                          BackpackType;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      BackpackJiggleSettings;                            // 0x0068(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_JiggleSettings                      UniformJiggleSettings;                             // 0x0080(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FTransform>                     BackpackSocketTransforms;                          // 0x0098(0x0010)(Edit, BlueprintVisible)
	TMap<TSoftObjectPtr<class USkeletalMesh>, E_MeshSpecificJiggle> SkelMeshToJiggleTypes;                             // 0x00A8(0x0050)(Edit, BlueprintVisible)
	bool                                          BackpackSocketFound;                               // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             DT_JiggleDefinitions;                              // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_1;        // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0128(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0180(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue;            // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x01AC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B5[0x3];                                      // 0x01B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01C0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0200(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0210(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_211[0x7];                                      // 0x0211(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0218(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_1;          // 0x0230(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_1;          // 0x0244(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0258(0x0040)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x02A0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x02B0(0x0018)()
	class FString                                 CallFunc_Conv_TextToString_ReturnValue_2;          // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue_2;          // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings;                // 0x02F0(0x0018)(HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable_2;        // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys;                            // 0x0310(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0330(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue;              // 0x0364(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_365[0x3];                                      // 0x0365(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0368(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x0378(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0388(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_389[0x7];                                      // 0x0389(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0390(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue_1;             // 0x03A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x03B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x03C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x03D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue_1;            // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3E1[0x7];                                      // 0x03E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x03E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x03F8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0408(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0418(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesSocketExist_ReturnValue_2;            // 0x0428(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_1;         // 0x0430(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue_2;         // 0x0460(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49A[0x2];                                      // 0x049A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_HumanAnimInstance_C> CallFunc_SetJiggleTypes_self_CastInput;            // 0x04A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetJiggleTypes_bSuccess;                  // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings_1;              // 0x04C0(0x0018)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys_1;                          // 0x04D8(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item;                           // 0x04F0(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh;                // 0x0530(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0539(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x053A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x053B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value;                           // 0x053C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x053D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_53E[0x2];                                      // 0x053E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      K2Node_MakeStruct_S_JiggleSettings_2;              // 0x0540(0x0018)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   CallFunc_Map_Keys_Keys_2;                          // 0x0558(0x0010)(ReferenceParm)
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item_1;                         // 0x0568(0x0028)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0590(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1; // 0x0598(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value_1;                         // 0x05A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_1;                   // 0x05A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh_1;              // 0x05A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x05B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x05B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5B3[0x1];                                      // 0x05B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x05B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x05B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x05BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5BD[0x3];                                      // 0x05BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           CallFunc_Array_Get_Item_2;                         // 0x05C0(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x05E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2; // 0x05F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMesh*                          K2Node_DynamicCast_AsSkeletal_Mesh_2;              // 0x05F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0600(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	E_MeshSpecificJiggle                          CallFunc_Map_Find_Value_2;                         // 0x0601(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue_2;                   // 0x0602(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x0603(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0604(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_605[0x3];                                      // 0x0605(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0608(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item_3;                         // 0x0618(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_624[0x4];                                      // 0x0624(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleDefinition                    CallFunc_GetDataTableRowFromName_OutRow;           // 0x0628(0x00D0)(HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x06F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x06F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_CheckForJiggle) == 0x000010, "Wrong alignment on ABP_Character_C_CheckForJiggle");
static_assert(sizeof(ABP_Character_C_CheckForJiggle) == 0x000700, "Wrong size on ABP_Character_C_CheckForJiggle");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, UniformMesh) == 0x000000, "Member 'ABP_Character_C_CheckForJiggle::UniformMesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BackpackMesh) == 0x000008, "Member 'ABP_Character_C_CheckForJiggle::BackpackMesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BottomHeadwear) == 0x000010, "Member 'ABP_Character_C_CheckForJiggle::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Processed) == 0x000018, "Member 'ABP_Character_C_CheckForJiggle::Processed' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BottomHeadwearType) == 0x000019, "Member 'ABP_Character_C_CheckForJiggle::BottomHeadwearType' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BottomHeadwearSocketFound) == 0x00001A, "Member 'ABP_Character_C_CheckForJiggle::BottomHeadwearSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BottomHeadwearSocketTransforms) == 0x000020, "Member 'ABP_Character_C_CheckForJiggle::BottomHeadwearSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BottomHeadwearJiggleSettings) == 0x000030, "Member 'ABP_Character_C_CheckForJiggle::BottomHeadwearJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, UniformType) == 0x000048, "Member 'ABP_Character_C_CheckForJiggle::UniformType' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, UniformSocketFound) == 0x000049, "Member 'ABP_Character_C_CheckForJiggle::UniformSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, UniformSocketTransforms) == 0x000050, "Member 'ABP_Character_C_CheckForJiggle::UniformSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BackpackType) == 0x000060, "Member 'ABP_Character_C_CheckForJiggle::BackpackType' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BackpackJiggleSettings) == 0x000068, "Member 'ABP_Character_C_CheckForJiggle::BackpackJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, UniformJiggleSettings) == 0x000080, "Member 'ABP_Character_C_CheckForJiggle::UniformJiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BackpackSocketTransforms) == 0x000098, "Member 'ABP_Character_C_CheckForJiggle::BackpackSocketTransforms' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, SkelMeshToJiggleTypes) == 0x0000A8, "Member 'ABP_Character_C_CheckForJiggle::SkelMeshToJiggleTypes' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, BackpackSocketFound) == 0x0000F8, "Member 'ABP_Character_C_CheckForJiggle::BackpackSocketFound' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, DT_JiggleDefinitions) == 0x000100, "Member 'ABP_Character_C_CheckForJiggle::DT_JiggleDefinitions' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Loop_Counter_Variable) == 0x000108, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue) == 0x00010C, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_1) == 0x000110, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_1) == 0x000114, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable) == 0x000118, "Member 'ABP_Character_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Array_Index_Variable) == 0x00011C, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue) == 0x000120, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable_1) == 0x000121, "Member 'ABP_Character_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Variable) == 0x000124, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData) == 0x000128, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeArray_Array) == 0x000168, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000178, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Format_ReturnValue) == 0x000180, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue) == 0x000198, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_2) == 0x0001A8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue) == 0x0001AC, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001B4, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Variable_1) == 0x0001B8, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001C0, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeArray_Array_1) == 0x000200, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000210, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Format_ReturnValue_1) == 0x000218, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue_1) == 0x000230, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_3) == 0x000240, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue_1) == 0x000244, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Variable_2) == 0x00024C, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_2) == 0x000250, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_FormatArgumentData_2) == 0x000258, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_4) == 0x000298, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeArray_Array_2) == 0x0002A0, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Format_ReturnValue_2) == 0x0002B0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_TextToString_ReturnValue_2) == 0x0002C8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_TextToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_StringToName_ReturnValue_2) == 0x0002D8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_StringToName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x0002E0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_5) == 0x0002E4, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Array_Index_Variable_1) == 0x0002E8, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings) == 0x0002F0, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Array_Index_Variable_2) == 0x000308, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_bool_True_if_break_was_hit_Variable_2) == 0x00030C, "Member 'ABP_Character_C_CheckForJiggle::Temp_bool_True_if_break_was_hit_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Keys_Keys) == 0x000310, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_2) == 0x000320, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue) == 0x000324, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue) == 0x000330, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue) == 0x000360, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue) == 0x000364, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000368, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x000378, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_IsVisible_ReturnValue) == 0x000388, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetDisplayName_ReturnValue) == 0x000390, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetDisplayName_ReturnValue_1) == 0x0003A0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetDisplayName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue) == 0x0003B0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0003C0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0003D0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue_1) == 0x0003E0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_3) == 0x0003E8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0003F8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000408, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000418, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_DoesSocketExist_ReturnValue_2) == 0x000428, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_DoesSocketExist_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue_1) == 0x000430, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetSocketTransform_ReturnValue_2) == 0x000460, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetSocketTransform_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_IsDedicatedServer_ReturnValue) == 0x000490, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Loop_Counter_Variable_3) == 0x000494, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Not_PreBool_ReturnValue_3) == 0x000498, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue) == 0x000499, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Add_IntInt_ReturnValue_6) == 0x00049C, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue) == 0x0004A0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_SetJiggleTypes_self_CastInput) == 0x0004A8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_SetJiggleTypes_self_CastInput' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_SetJiggleTypes_bSuccess) == 0x0004B8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_SetJiggleTypes_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings_1) == 0x0004C0, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Keys_Keys_1) == 0x0004D8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Keys_Keys_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue_1) == 0x0004E8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Get_Item) == 0x0004F0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_1) == 0x000518, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000520, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_1) == 0x000528, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh) == 0x000530, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_bSuccess) == 0x000538, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue_1) == 0x000539, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00053A, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_IsValid_ReturnValue) == 0x00053B, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_Value) == 0x00053C, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue) == 0x00053D, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_MakeStruct_S_JiggleSettings_2) == 0x000540, "Member 'ABP_Character_C_CheckForJiggle::K2Node_MakeStruct_S_JiggleSettings_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Keys_Keys_2) == 0x000558, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Keys_Keys_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Get_Item_1) == 0x000568, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Add_ReturnValue_2) == 0x000590, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1) == 0x000598, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_Value_1) == 0x0005A0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_Value_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue_1) == 0x0005A1, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh_1) == 0x0005A8, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_bSuccess_1) == 0x0005B0, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x0005B1, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_IsValid_ReturnValue_1) == 0x0005B2, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_2) == 0x0005B4, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, Temp_int_Array_Index_Variable_3) == 0x0005B8, "Member 'ABP_Character_C_CheckForJiggle::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_2) == 0x0005BC, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Get_Item_2) == 0x0005C0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_BooleanAND_ReturnValue_2) == 0x0005E8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2) == 0x0005F0, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_AsSkeletal_Mesh_2) == 0x0005F8, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_AsSkeletal_Mesh_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, K2Node_DynamicCast_bSuccess_2) == 0x000600, "Member 'ABP_Character_C_CheckForJiggle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_Value_2) == 0x000601, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_Value_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Map_Find_ReturnValue_2) == 0x000602, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Map_Find_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x000603, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_IsValid_ReturnValue_2) == 0x000604, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000608, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Get_Item_3) == 0x000618, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Array_Length_ReturnValue_3) == 0x000620, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetDataTableRowFromName_OutRow) == 0x000628, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x0006F8, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_CheckForJiggle, CallFunc_Less_IntInt_ReturnValue_3) == 0x0006F9, "Member 'ABP_Character_C_CheckForJiggle::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.GetIdleLayer
// 0x000E (0x000E - 0x0000)
struct ABP_Character_C_GetIdleLayer final
{
public:
	bool                                          IdleAction;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_GetIdleLayer) == 0x000001, "Wrong alignment on ABP_Character_C_GetIdleLayer");
static_assert(sizeof(ABP_Character_C_GetIdleLayer) == 0x00000E, "Wrong size on ABP_Character_C_GetIdleLayer");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, IdleAction) == 0x000000, "Member 'ABP_Character_C_GetIdleLayer::IdleAction' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue_2) == 0x000004, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue_3) == 0x000005, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue_4) == 0x000006, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_Not_PreBool_ReturnValue_5) == 0x000007, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000009, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue_2) == 0x00000A, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue_3) == 0x00000B, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue_4) == 0x00000C, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_GetIdleLayer, CallFunc_BooleanAND_ReturnValue_5) == 0x00000D, "Member 'ABP_Character_C_GetIdleLayer::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_FPV_LookRotation
// 0x0058 (0x0058 - 0x0000)
struct ABP_Character_C_Get_FPV_LookRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_FPV_LookRotation) == 0x000004, "Wrong alignment on ABP_Character_C_Get_FPV_LookRotation");
static_assert(sizeof(ABP_Character_C_Get_FPV_LookRotation) == 0x000058, "Wrong size on ABP_Character_C_Get_FPV_LookRotation");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_FPV_LookRotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_IsValid_ReturnValue) == 0x00000C, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000028, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Roll) == 0x000034, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Pitch) == 0x000038, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Yaw) == 0x00003C, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Roll_1) == 0x000040, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Pitch_1) == 0x000044, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_BreakRotator_Yaw_1) == 0x000048, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_FPV_LookRotation, CallFunc_MakeRotator_ReturnValue_1) == 0x00004C, "Member 'ABP_Character_C_Get_FPV_LookRotation::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_MeleeAim_Alpha
// 0x0020 (0x0020 - 0x0000)
struct ABP_Character_C_Get_MeleeAim_Alpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue;  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_MeleeAim_Alpha) == 0x000008, "Wrong alignment on ABP_Character_C_Get_MeleeAim_Alpha");
static_assert(sizeof(ABP_Character_C_Get_MeleeAim_Alpha) == 0x000020, "Wrong size on ABP_Character_C_Get_MeleeAim_Alpha");
static_assert(offsetof(ABP_Character_C_Get_MeleeAim_Alpha, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_MeleeAim_Alpha::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_MeleeAim_Alpha, CallFunc_GetOwningComponent_ReturnValue) == 0x000008, "Member 'ABP_Character_C_Get_MeleeAim_Alpha::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_MeleeAim_Alpha, CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_MeleeAim_Alpha::CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_MeleeAim_Alpha, CallFunc_GetCurveValue_ReturnValue) == 0x000014, "Member 'ABP_Character_C_Get_MeleeAim_Alpha::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_MeleeAim_Alpha, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'ABP_Character_C_Get_MeleeAim_Alpha::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_SkipStart_Bool
// 0x0008 (0x0008 - 0x0000)
struct ABP_Character_C_Get_SkipStart_Bool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_SkipStart_Bool) == 0x000001, "Wrong alignment on ABP_Character_C_Get_SkipStart_Bool");
static_assert(sizeof(ABP_Character_C_Get_SkipStart_Bool) == 0x000008, "Wrong size on ABP_Character_C_Get_SkipStart_Bool");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_SkipStart_Bool::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_BooleanOR_ReturnValue_2) == 0x000006, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_SkipStart_Bool, CallFunc_BooleanOR_ReturnValue_3) == 0x000007, "Member 'ABP_Character_C_Get_SkipStart_Bool::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_ToLoop_Bool
// 0x000D (0x000D - 0x0000)
struct ABP_Character_C_Get_ToLoop_Bool final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_2;                  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_3;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_4;                  // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_5;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_ToLoop_Bool) == 0x000001, "Wrong alignment on ABP_Character_C_Get_ToLoop_Bool");
static_assert(sizeof(ABP_Character_C_Get_ToLoop_Bool) == 0x00000D, "Wrong size on ABP_Character_C_Get_ToLoop_Bool");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_ToLoop_Bool::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanAND_ReturnValue_1) == 0x000002, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000003, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue_1) == 0x000007, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue_2) == 0x000008, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue_3) == 0x000009, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanAND_ReturnValue_2) == 0x00000A, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue_4) == 0x00000B, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ToLoop_Bool, CallFunc_BooleanOR_ReturnValue_5) == 0x00000C, "Member 'ABP_Character_C_Get_ToLoop_Bool::CallFunc_BooleanOR_ReturnValue_5' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_Prone_UpperBody_Rotation
// 0x001C (0x001C - 0x0000)
struct ABP_Character_C_Get_Prone_UpperBody_Rotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_Prone_UpperBody_Rotation) == 0x000004, "Wrong alignment on ABP_Character_C_Get_Prone_UpperBody_Rotation");
static_assert(sizeof(ABP_Character_C_Get_Prone_UpperBody_Rotation) == 0x00001C, "Wrong size on ABP_Character_C_Get_Prone_UpperBody_Rotation");
static_assert(offsetof(ABP_Character_C_Get_Prone_UpperBody_Rotation, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_Prone_UpperBody_Rotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_UpperBody_Rotation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00000C, "Member 'ABP_Character_C_Get_Prone_UpperBody_Rotation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_UpperBody_Rotation, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_Prone_UpperBody_Rotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_Prone_Hips_Rotation
// 0x001C (0x001C - 0x0000)
struct ABP_Character_C_Get_Prone_Hips_Rotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_Prone_Hips_Rotation) == 0x000004, "Wrong alignment on ABP_Character_C_Get_Prone_Hips_Rotation");
static_assert(sizeof(ABP_Character_C_Get_Prone_Hips_Rotation) == 0x00001C, "Wrong size on ABP_Character_C_Get_Prone_Hips_Rotation");
static_assert(offsetof(ABP_Character_C_Get_Prone_Hips_Rotation, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_Prone_Hips_Rotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_Hips_Rotation, CallFunc_MakeRotator_ReturnValue) == 0x00000C, "Member 'ABP_Character_C_Get_Prone_Hips_Rotation::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Prone_Hips_Rotation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'ABP_Character_C_Get_Prone_Hips_Rotation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_Jump_HipsPull_Offset
// 0x0050 (0x0050 - 0x0000)
struct ABP_Character_C_Get_Jump_HipsPull_Offset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue;  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMin_ReturnValue_1;                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_Jump_HipsPull_Offset) == 0x000008, "Wrong alignment on ABP_Character_C_Get_Jump_HipsPull_Offset");
static_assert(sizeof(ABP_Character_C_Get_Jump_HipsPull_Offset) == 0x000050, "Wrong size on ABP_Character_C_Get_Jump_HipsPull_Offset");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_GetOwningComponent_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue) == 0x000018, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_GetAllowedAnimCurveEvaluate_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_GetCurveValue_ReturnValue) == 0x00001C, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x000020, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000024, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_GetCurveValue_ReturnValue_1) == 0x000028, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_FMin_ReturnValue) == 0x00002C, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_FMin_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000030, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_FMin_ReturnValue_1) == 0x000040, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_FMin_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Jump_HipsPull_Offset, CallFunc_MakeVector_ReturnValue_1) == 0x000044, "Member 'ABP_Character_C_Get_Jump_HipsPull_Offset::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_BackSocketLock_PrimaryA_Location
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Character_C_Get_BackSocketLock_PrimaryA_Location final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location) == 0x000010, "Wrong alignment on ABP_Character_C_Get_BackSocketLock_PrimaryA_Location");
static_assert(sizeof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location) == 0x0000C0, "Wrong size on ABP_Character_C_Get_BackSocketLock_PrimaryA_Location");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_GetOwningComponent_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, K2Node_Select_Default) == 0x000020, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_ComposeTransforms_ReturnValue) == 0x000060, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_BreakTransform_Location) == 0x000090, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Location, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Location::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_BackSocketLock_PrimaryA_Rotation
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation) == 0x000010, "Wrong alignment on ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation");
static_assert(sizeof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation) == 0x0000C0, "Wrong size on ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_GetOwningComponent_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, K2Node_Select_Default) == 0x000020, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_ComposeTransforms_ReturnValue) == 0x000060, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_BreakTransform_Location) == 0x000090, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryA_Rotation::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_BackSocketLock_PrimaryB_Location
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Character_C_Get_BackSocketLock_PrimaryB_Location final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location) == 0x000010, "Wrong alignment on ABP_Character_C_Get_BackSocketLock_PrimaryB_Location");
static_assert(sizeof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location) == 0x0000C0, "Wrong size on ABP_Character_C_Get_BackSocketLock_PrimaryB_Location");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_GetOwningComponent_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, K2Node_Select_Default) == 0x000020, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_ComposeTransforms_ReturnValue) == 0x000060, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_BreakTransform_Location) == 0x000090, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Location, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Location::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_BackSocketLock_PrimaryB_Rotation
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetOwningComponent_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_ComposeTransforms_ReturnValue;            // 0x0060(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation) == 0x000010, "Wrong alignment on ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation");
static_assert(sizeof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation) == 0x0000C0, "Wrong size on ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_IsValid_ReturnValue) == 0x00000D, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_GetOwningComponent_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_GetOwningComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, K2Node_Select_Default) == 0x000020, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_GetSocketTransform_ReturnValue) == 0x000030, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_ComposeTransforms_ReturnValue) == 0x000060, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_ComposeTransforms_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_BreakTransform_Location) == 0x000090, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_BreakTransform_Rotation) == 0x00009C, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation, CallFunc_BreakTransform_Scale) == 0x0000A8, "Member 'ABP_Character_C_Get_BackSocketLock_PrimaryB_Rotation::CallFunc_BreakTransform_Scale' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_ShouldLeftIK_CopyGunIK
// 0x000B (0x000B - 0x0000)
struct ABP_Character_C_Get_ShouldLeftIK_CopyGunIK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsClimbing_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVaulting_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK) == 0x000001, "Wrong alignment on ABP_Character_C_Get_ShouldLeftIK_CopyGunIK");
static_assert(sizeof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK) == 0x00000B, "Wrong size on ABP_Character_C_Get_ShouldLeftIK_CopyGunIK");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_IsClimbing_ReturnValue) == 0x000002, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_IsClimbing_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_IsVaulting_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_IsVaulting_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_Not_PreBool_ReturnValue_1) == 0x000005, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000006, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_BooleanAND_ReturnValue) == 0x000007, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_BooleanOR_ReturnValue) == 0x000009, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldLeftIK_CopyGunIK, CallFunc_BooleanAND_ReturnValue_1) == 0x00000A, "Member 'ABP_Character_C_Get_ShouldLeftIK_CopyGunIK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_ShouldConsiderGunLeftHand_IK
// 0x0009 (0x0009 - 0x0000)
struct ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK) == 0x000001, "Wrong alignment on ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK");
static_assert(sizeof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK) == 0x000009, "Wrong size on ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_BooleanAND_ReturnValue_2) == 0x000007, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK, CallFunc_Not_PreBool_ReturnValue_2) == 0x000008, "Member 'ABP_Character_C_Get_ShouldConsiderGunLeftHand_IK::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_ShouldAdjustPronePST_LeftHand
// 0x000C (0x000C - 0x0000)
struct ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_VectorVector_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand) == 0x000001, "Wrong alignment on ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand");
static_assert(sizeof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand) == 0x00000C, "Wrong size on ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_Not_PreBool_ReturnValue_1) == 0x000003, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000004, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue) == 0x000005, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue_2) == 0x000007, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_NotEqual_VectorVector_ReturnValue) == 0x000008, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_NotEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue_3) == 0x000009, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue_4) == 0x00000A, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand, CallFunc_BooleanAND_ReturnValue_5) == 0x00000B, "Member 'ABP_Character_C_Get_ShouldAdjustPronePST_LeftHand::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_UseGunLeftHandIK
// 0x0007 (0x0007 - 0x0000)
struct ABP_Character_C_Get_UseGunLeftHandIK final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_ShouldConsiderGunLeftHand_IK_ReturnValue; // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_UseGunLeftHandIK) == 0x000001, "Wrong alignment on ABP_Character_C_Get_UseGunLeftHandIK");
static_assert(sizeof(ABP_Character_C_Get_UseGunLeftHandIK) == 0x000007, "Wrong size on ABP_Character_C_Get_UseGunLeftHandIK");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_Get_ShouldConsiderGunLeftHand_IK_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_Get_ShouldConsiderGunLeftHand_IK_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000002, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseGunLeftHandIK, CallFunc_BooleanOR_ReturnValue_1) == 0x000006, "Member 'ABP_Character_C_Get_UseGunLeftHandIK::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_RightArmJoint_Offset
// 0x0034 (0x0034 - 0x0000)
struct ABP_Character_C_Get_RightArmJoint_Offset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_struct_Variable_1;                            // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                K2Node_Select_Default;                             // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_RightArmJoint_Offset) == 0x000004, "Wrong alignment on ABP_Character_C_Get_RightArmJoint_Offset");
static_assert(sizeof(ABP_Character_C_Get_RightArmJoint_Offset) == 0x000034, "Wrong size on ABP_Character_C_Get_RightArmJoint_Offset");
static_assert(offsetof(ABP_Character_C_Get_RightArmJoint_Offset, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_RightArmJoint_Offset::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightArmJoint_Offset, Temp_bool_Variable) == 0x00000C, "Member 'ABP_Character_C_Get_RightArmJoint_Offset::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightArmJoint_Offset, Temp_struct_Variable) == 0x000010, "Member 'ABP_Character_C_Get_RightArmJoint_Offset::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightArmJoint_Offset, Temp_struct_Variable_1) == 0x00001C, "Member 'ABP_Character_C_Get_RightArmJoint_Offset::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_RightArmJoint_Offset, K2Node_Select_Default) == 0x000028, "Member 'ABP_Character_C_Get_RightArmJoint_Offset::K2Node_Select_Default' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_DoJiggleBone
// 0x0002 (0x0002 - 0x0000)
struct ABP_Character_C_Get_DoJiggleBone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_DoJiggleBone) == 0x000001, "Wrong alignment on ABP_Character_C_Get_DoJiggleBone");
static_assert(sizeof(ABP_Character_C_Get_DoJiggleBone) == 0x000002, "Wrong size on ABP_Character_C_Get_DoJiggleBone");
static_assert(offsetof(ABP_Character_C_Get_DoJiggleBone, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_DoJiggleBone::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_DoJiggleBone, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_DoJiggleBone::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_Mirrored_RightHand_PullBack_Pistol
// 0x001C (0x001C - 0x0000)
struct ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0010(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol) == 0x000004, "Wrong alignment on ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol");
static_assert(sizeof(ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol) == 0x00001C, "Wrong size on ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol");
static_assert(offsetof(ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol, CallFunc_GetCurveValue_ReturnValue) == 0x00000C, "Member 'ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol, CallFunc_MakeVector_ReturnValue) == 0x000010, "Member 'ABP_Character_C_Get_Mirrored_RightHand_PullBack_Pistol::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function ABP_Character.ABP_Character_C.Get_UseLocomotionSlotsUpperBody
// 0x0002 (0x0002 - 0x0000)
struct ABP_Character_C_Get_UseLocomotionSlotsUpperBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Character_C_Get_UseLocomotionSlotsUpperBody) == 0x000001, "Wrong alignment on ABP_Character_C_Get_UseLocomotionSlotsUpperBody");
static_assert(sizeof(ABP_Character_C_Get_UseLocomotionSlotsUpperBody) == 0x000002, "Wrong size on ABP_Character_C_Get_UseLocomotionSlotsUpperBody");
static_assert(offsetof(ABP_Character_C_Get_UseLocomotionSlotsUpperBody, ReturnValue) == 0x000000, "Member 'ABP_Character_C_Get_UseLocomotionSlotsUpperBody::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Character_C_Get_UseLocomotionSlotsUpperBody, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'ABP_Character_C_Get_UseLocomotionSlotsUpperBody::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

}

