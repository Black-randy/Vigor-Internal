#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameState_Script

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Engine_structs.hpp"
#include "S_GameModeRewardsData_structs.hpp"
#include "BP_GameState_classes.hpp"
#include "FlameUI_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameState_Script.BP_GameState_Script_C
// 0x00C0 (0x0458 - 0x0398)
class ABP_GameState_Script_C : public ABP_GameState_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GS_SubLevelManager_C*               BP_GS_SubLevelManager;                             // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         RemainingTime;                                     // 0x03A8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TimerPaused;                                       // 0x03AC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Broadcast_Cheating_to_Screens;                     // 0x03AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Log_Cheating_to_Logs;                              // 0x03AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AF[0x1];                                      // 0x03AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Wind_Direction;                                    // 0x03B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	bool                                          Wind_Data_Valid;                                   // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Radiation_Present;                                 // 0x03B5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3B6[0x2];                                      // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Match_Start_Time;                                  // 0x03B8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinScreenPercentage;                               // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Player_Has_Map_Tool;                               // 0x03C0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FUniqueNetIdRepl>          All_Players_Unique_IDs;                            // 0x03C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          OverrideWeather;                                   // 0x0418(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_419[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnThemeLoaded;                                     // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ESublevelTheme                                Theme;                                             // 0x0430(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ThemeLoaded;                                       // 0x0431(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_432[0x6];                                      // 0x0432(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ScoreboardTabs;                                    // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FS_GameModeRewardsData                 DataTableScoreboardTabs;                           // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void OnThemeLoaded__DelegateSignature(ESublevelTheme Theme_0);
	void ExecuteUbergraph_BP_GameState_Script(int32 EntryPoint);
	void Save_all_players_to_last_played_array();
	void MulticastSetTheme();
	void SetupTheme();
	void SetupThemeServer(ESublevelTheme Theme_0);
	void Save_All_Players_Unique_IDs();
	void Check_If_Match_Has_Started();
	void Broadcast_Print_String(const class FString& InString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void ReceiveBeginPlay();
	void Broadcast_Cheating(const class FString& Message);
	void OnRep_Wind_Direction();
	void OnRep_Radiation_Present();
	void GetScoreboardTabs(TArray<struct FStruct_ScoreboardTab>* Tabs);
	void IsLocalPlayerWinning(bool* IsWinning);
	void SetDynamicRes(float InFloat);
	void Get_Player_Has_Map_Tool(bool* Player_Has_Map_Tool_0);
	void Check_Player_Has_Map_Tool();
	void OnRep_Theme();
	void IsChristmasTheme(bool* ChristmasOn);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameState_Script_C">();
	}
	static class ABP_GameState_Script_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameState_Script_C>();
	}
};
static_assert(alignof(ABP_GameState_Script_C) == 0x000008, "Wrong alignment on ABP_GameState_Script_C");
static_assert(sizeof(ABP_GameState_Script_C) == 0x000458, "Wrong size on ABP_GameState_Script_C");
static_assert(offsetof(ABP_GameState_Script_C, UberGraphFrame) == 0x000398, "Member 'ABP_GameState_Script_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, BP_GS_SubLevelManager) == 0x0003A0, "Member 'ABP_GameState_Script_C::BP_GS_SubLevelManager' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, RemainingTime) == 0x0003A8, "Member 'ABP_GameState_Script_C::RemainingTime' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, TimerPaused) == 0x0003AC, "Member 'ABP_GameState_Script_C::TimerPaused' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Broadcast_Cheating_to_Screens) == 0x0003AD, "Member 'ABP_GameState_Script_C::Broadcast_Cheating_to_Screens' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Log_Cheating_to_Logs) == 0x0003AE, "Member 'ABP_GameState_Script_C::Log_Cheating_to_Logs' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Wind_Direction) == 0x0003B0, "Member 'ABP_GameState_Script_C::Wind_Direction' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Wind_Data_Valid) == 0x0003B4, "Member 'ABP_GameState_Script_C::Wind_Data_Valid' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Radiation_Present) == 0x0003B5, "Member 'ABP_GameState_Script_C::Radiation_Present' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Match_Start_Time) == 0x0003B8, "Member 'ABP_GameState_Script_C::Match_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, MinScreenPercentage) == 0x0003BC, "Member 'ABP_GameState_Script_C::MinScreenPercentage' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Player_Has_Map_Tool) == 0x0003C0, "Member 'ABP_GameState_Script_C::Player_Has_Map_Tool' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, All_Players_Unique_IDs) == 0x0003C8, "Member 'ABP_GameState_Script_C::All_Players_Unique_IDs' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, OverrideWeather) == 0x000418, "Member 'ABP_GameState_Script_C::OverrideWeather' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, OnThemeLoaded) == 0x000420, "Member 'ABP_GameState_Script_C::OnThemeLoaded' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, Theme) == 0x000430, "Member 'ABP_GameState_Script_C::Theme' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, ThemeLoaded) == 0x000431, "Member 'ABP_GameState_Script_C::ThemeLoaded' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, ScoreboardTabs) == 0x000438, "Member 'ABP_GameState_Script_C::ScoreboardTabs' has a wrong offset!");
static_assert(offsetof(ABP_GameState_Script_C, DataTableScoreboardTabs) == 0x000448, "Member 'ABP_GameState_Script_C::DataTableScoreboardTabs' has a wrong offset!");

}

