#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeManager

#include "Basic.hpp"

#include "BP_ChallengeManager_classes.hpp"
#include "BP_ChallengeManager_parameters.hpp"


namespace SDK
{

// Function BP_ChallengeManager.BP_ChallengeManager_C.Challenge Manager Initialized__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Challenge_Manager_Initialized__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Challenge Manager Initialized__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.ChallengeManagerDailyReseted__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDateTime                        Next_Reset_Timestamp                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::ChallengeManagerDailyReseted__DelegateSignature(const struct FDateTime& Next_Reset_Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "ChallengeManagerDailyReseted__DelegateSignature");

	Params::BP_ChallengeManager_C_ChallengeManagerDailyReseted__DelegateSignature Parms{};

	Parms.Next_Reset_Timestamp = std::move(Next_Reset_Timestamp);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.NewChallengeSlotInitialized__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              ChallengeSlot                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::NewChallengeSlotInitialized__DelegateSignature(class ABP_ChallengeSlot_C* ChallengeSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "NewChallengeSlotInitialized__DelegateSignature");

	Params::BP_ChallengeManager_C_NewChallengeSlotInitialized__DelegateSignature Parms{};

	Parms.ChallengeSlot = ChallengeSlot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Challenge Manager Pending__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Challenge_Manager_Pending__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Challenge Manager Pending__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.ExecuteUbergraph_BP_ChallengeManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::ExecuteUbergraph_BP_ChallengeManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "ExecuteUbergraph_BP_ChallengeManager");

	Params::BP_ChallengeManager_C_ExecuteUbergraph_BP_ChallengeManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.OnChallengeProgressUpdated
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::OnChallengeProgressUpdated(class ABP_ChallengeSlot_C* Slot, int32 New_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "OnChallengeProgressUpdated");

	Params::BP_ChallengeManager_C_OnChallengeProgressUpdated Parms{};

	Parms.Slot = Slot;
	Parms.New_Progress = New_Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudSeasonChallengeClaimResult ClaimResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeClaimResult& ClaimResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_5_ClaimUserSeasonChallengeDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.ClaimResult = std::move(ClaimResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudSeasonChallengeRewardsResultResponse                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeRewardsResult& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_1_GetUserSeasonChallengeRewardsDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudSeasonChallengeProgressResultResponse                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudSeasonChallengeProgressResult& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_0_GetUserSeasonChallengeProgressDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeClaimResult       ClaimResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeClaimResult& ClaimResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ClaimUserChallengeDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.ClaimResult = std::move(ClaimResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeSlotInfo          ProgressResult                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeSlotInfo& ProgressResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_3_SetUserChallengeProgressDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.ProgressResult = std::move(ProgressResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeClaimResult       Response                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudChallengeClaimResult& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_4_ReRollUserChallengeDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudGetChallengeResponse       Response                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature(const struct FCloudRequestResult& RequestResult, const struct FCloudGetChallengeResponse& Response)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature");

	Params::BP_ChallengeManager_C_BndEvt__BP_OnlineChallengesComponent_K2Node_ComponentBoundEvent_2_GetUserChallengeSlotsDelegate__DelegateSignature Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Response = std::move(Response);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.RetryChallengeRequest
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::RetryChallengeRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "RetryChallengeRequest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Initialize Reset Timer
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Initialize_Reset_Timer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Initialize Reset Timer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Daily Reset
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Daily_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Daily Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "ReceiveEndPlay");

	Params::BP_ChallengeManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Wait for Controller
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Wait_for_Controller()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Wait for Controller");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Wait for Cloud ID
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Userid                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Wait_for_Cloud_ID(const class FString& Userid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Wait for Cloud ID");

	Params::BP_ChallengeManager_C_Wait_for_Cloud_ID Parms{};

	Parms.Userid = std::move(Userid);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Load Prerequisite Objects
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Load_Prerequisite_Objects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Load Prerequisite Objects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Slot Initialized
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Slot_Initialized(class ABP_ChallengeSlot_C* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Slot Initialized");

	Params::BP_ChallengeManager_C_Slot_Initialized Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Load Stats From Cloud
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Load_Stats_From_Cloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Load Stats From Cloud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Load Slots From Cloud
// (BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Load_Slots_From_Cloud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Load Slots From Cloud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Wait for Data Tables
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EDataProviderState                      OldState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDataProviderState                      NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Wait_for_Data_Tables(EDataProviderState OldState, EDataProviderState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Wait for Data Tables");

	Params::BP_ChallengeManager_C_Wait_for_Data_Tables Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.BlueprintInit
// (Event, Public, BlueprintEvent)

void ABP_ChallengeManager_C::BlueprintInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "BlueprintInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.OnLoaded_B08996E843B69641864BC48B08A89CC2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_ChallengeManager_C::OnLoaded_B08996E843B69641864BC48B08A89CC2(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "OnLoaded_B08996E843B69641864BC48B08A89CC2");

	Params::BP_ChallengeManager_C_OnLoaded_B08996E843B69641864BC48B08A89CC2 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Check Prerequisite
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengePrerequisiteInfo       Prerequisite                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Passed                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Check_Prerequisite(const struct FChallengePrerequisiteInfo& Prerequisite, bool* Passed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Check Prerequisite");

	Params::BP_ChallengeManager_C_Check_Prerequisite Parms{};

	Parms.Prerequisite = std::move(Prerequisite);

	UObject::ProcessEvent(Func, &Parms);

	if (Passed != nullptr)
		*Passed = Parms.Passed;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Validate Challenge Name
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Input_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Output_Name                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Input_Was_Valid                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Input_Enabled                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Input_Condition_Valid                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Validate_Challenge_Name(class FName Input_Name, class FName* Output_Name, bool* Input_Was_Valid, bool* Input_Enabled, bool* Input_Condition_Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Validate Challenge Name");

	Params::BP_ChallengeManager_C_Validate_Challenge_Name Parms{};

	Parms.Input_Name = Input_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Output_Name != nullptr)
		*Output_Name = Parms.Output_Name;

	if (Input_Was_Valid != nullptr)
		*Input_Was_Valid = Parms.Input_Was_Valid;

	if (Input_Enabled != nullptr)
		*Input_Enabled = Parms.Input_Enabled;

	if (Input_Condition_Valid != nullptr)
		*Input_Condition_Valid = Parms.Input_Condition_Valid;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Initialize Slots
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Initialize_Slots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Initialize Slots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Story Challenge Active
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_ChallengeManager_C::Is_Story_Challenge_Active()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Is Story Challenge Active");

	Params::BP_ChallengeManager_C_Is_Story_Challenge_Active Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Any Slot Empty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_ChallengeManager_C::Is_Any_Slot_Empty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Is Any Slot Empty");

	Params::BP_ChallengeManager_C_Is_Any_Slot_Empty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Validate Cloud Data
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Validate_Cloud_Data()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Validate Cloud Data");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Update Slot Content
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Update_Slot_Content()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Update Slot Content");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Find Next Story Challenge
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Challenge_Name                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Find_Next_Story_Challenge(class FName* Challenge_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Find Next Story Challenge");

	Params::BP_ChallengeManager_C_Find_Next_Story_Challenge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Name != nullptr)
		*Challenge_Name = Parms.Challenge_Name;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Choose Daily Challenge
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Log_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FName                             Challenge_Name                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Choose_Daily_Challenge(bool Log_Progress, class FName* Challenge_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Choose Daily Challenge");

	Params::BP_ChallengeManager_C_Choose_Daily_Challenge Parms{};

	Parms.Log_Progress = Log_Progress;

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Name != nullptr)
		*Challenge_Name = Parms.Challenge_Name;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Is Slot Past Daily Reset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_ChallengeManager_C::Is_Slot_Past_Daily_Reset(class ABP_ChallengeSlot_C* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Is Slot Past Daily Reset");

	Params::BP_ChallengeManager_C_Is_Slot_Past_Daily_Reset Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Cloud Stats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<class FName, struct FDateTime>     Cloud_Stats_Data_0                                     (Parm, OutParm)

void ABP_ChallengeManager_C::Get_Cloud_Stats(TMap<class FName, struct FDateTime>* Cloud_Stats_Data_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Cloud Stats");

	Params::BP_ChallengeManager_C_Get_Cloud_Stats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cloud_Stats_Data_0 != nullptr)
		*Cloud_Stats_Data_0 = std::move(Parms.Cloud_Stats_Data_0);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Are Cloud Stats Loaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Stats_Loaded_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Are_Cloud_Stats_Loaded(bool* Stats_Loaded_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Are Cloud Stats Loaded");

	Params::BP_ChallengeManager_C_Are_Cloud_Stats_Loaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stats_Loaded_0 != nullptr)
		*Stats_Loaded_0 = Parms.Stats_Loaded_0;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Assign Slot IDs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Assign_Slot_IDs(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Assign Slot IDs");

	Params::BP_ChallengeManager_C_Assign_Slot_IDs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Find Slot by ID
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Slot_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ChallengeSlot_C*              Slot                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Find_Slot_by_ID(int32 Slot_ID, class ABP_ChallengeSlot_C** Slot, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Find Slot by ID");

	Params::BP_ChallengeManager_C_Find_Slot_by_ID Parms{};

	Parms.Slot_ID = Slot_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Slot != nullptr)
		*Slot = Parms.Slot;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Status
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeManager_C::Print_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Slots Received Result
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Slots_Received_Result(const struct FCloudRequestResult& CloudRequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Slots Received Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Slots_Received_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Stats Received Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Stats_Received_Result(const struct FCloudRequestResult& CloudRequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Stats Received Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Stats_Received_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Assigned Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeSlotInfo          CloudChallengeSlotInfo                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Assigned_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeSlotInfo& CloudChallengeSlotInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Assigned Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Assigned_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);
	Parms.CloudChallengeSlotInfo = std::move(CloudChallengeSlotInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Progress Set Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeSlotInfo          CloudChallengeSlotInfo                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Progress_Set_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeSlotInfo& CloudChallengeSlotInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Progress Set Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Progress_Set_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);
	Parms.CloudChallengeSlotInfo = std::move(CloudChallengeSlotInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Rewards Claimed Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudChallengeClaimResult       CloudChallengeClaimResult                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Rewards_Claimed_Result(const struct FCloudRequestResult& CloudRequestResult, const struct FCloudChallengeClaimResult& CloudChallengeClaimResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Rewards Claimed Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Rewards_Claimed_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);
	Parms.CloudChallengeClaimResult = std::move(CloudChallengeClaimResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Print Challenge Cancelled Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              CloudRequestResult                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeManager_C::Print_Challenge_Cancelled_Result(const struct FCloudRequestResult& CloudRequestResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Print Challenge Cancelled Result");

	Params::BP_ChallengeManager_C_Print_Challenge_Cancelled_Result Parms{};

	Parms.CloudRequestResult = std::move(CloudRequestResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Next Reset Timestamp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Next_Reset_Timestamp                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Get_Next_Reset_Timestamp(struct FDateTime* Next_Reset_Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Next Reset Timestamp");

	Params::BP_ChallengeManager_C_Get_Next_Reset_Timestamp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Next_Reset_Timestamp != nullptr)
		*Next_Reset_Timestamp = std::move(Parms.Next_Reset_Timestamp);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Time to Next Reset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FTimespan ABP_ChallengeManager_C::Get_Time_to_Next_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Time to Next Reset");

	Params::BP_ChallengeManager_C_Get_Time_to_Next_Reset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Last Reset Timestamp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Last_Reset_Timestamp                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Get_Last_Reset_Timestamp(struct FDateTime* Last_Reset_Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Last Reset Timestamp");

	Params::BP_ChallengeManager_C_Get_Last_Reset_Timestamp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Last_Reset_Timestamp != nullptr)
		*Last_Reset_Timestamp = std::move(Parms.Last_Reset_Timestamp);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Time since Last Reset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FTimespan ABP_ChallengeManager_C::Get_Time_since_Last_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Time since Last Reset");

	Params::BP_ChallengeManager_C_Get_Time_since_Last_Reset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Get Challenge Manager State
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ChallengeManagerState                 State_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeManager_C::Get_Challenge_Manager_State(E_ChallengeManagerState* State_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Get Challenge Manager State");

	Params::BP_ChallengeManager_C_Get_Challenge_Manager_State Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (State_0 != nullptr)
		*State_0 = Parms.State_0;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.Toggle Daily Reset Constraint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore_Limit                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::Toggle_Daily_Reset_Constraint(bool Ignore_Limit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "Toggle Daily Reset Constraint");

	Params::BP_ChallengeManager_C_Toggle_Daily_Reset_Constraint Parms{};

	Parms.Ignore_Limit = Ignore_Limit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.CheckCategoryAgainstCandidates
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EChallengeCategory                      Challenge_Category                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>                     CandidateArray                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::CheckCategoryAgainstCandidates(EChallengeCategory Challenge_Category, TArray<class FName>& CandidateArray, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "CheckCategoryAgainstCandidates");

	Params::BP_ChallengeManager_C_CheckCategoryAgainstCandidates Parms{};

	Parms.Challenge_Category = Challenge_Category;
	Parms.CandidateArray = std::move(CandidateArray);

	UObject::ProcessEvent(Func, &Parms);

	CandidateArray = std::move(Parms.CandidateArray);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.InitializeChallengesFromCloud
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudChallengeCategorySlots     Challenges_Category                                    (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class ABP_ChallengeSlot_C*>      ChallengeCategorySlots                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_ChallengeSlot_C*>      Challenge_Slots                                        (Parm, OutParm)

void ABP_ChallengeManager_C::InitializeChallengesFromCloud(const struct FCloudChallengeCategorySlots& Challenges_Category, TArray<class ABP_ChallengeSlot_C*>& ChallengeCategorySlots, TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "InitializeChallengesFromCloud");

	Params::BP_ChallengeManager_C_InitializeChallengesFromCloud Parms{};

	Parms.Challenges_Category = std::move(Challenges_Category);
	Parms.ChallengeCategorySlots = std::move(ChallengeCategorySlots);

	UObject::ProcessEvent(Func, &Parms);

	ChallengeCategorySlots = std::move(Parms.ChallengeCategorySlots);

	if (Challenge_Slots != nullptr)
		*Challenge_Slots = std::move(Parms.Challenge_Slots);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByProgress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_ChallengeSlot_C*>      Challenge_Slots                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_ChallengeSlot_C*>      Sorted_Challenge_Slots                                 (Parm, OutParm)

void ABP_ChallengeManager_C::GetChallengeSlotsByProgress(TArray<class ABP_ChallengeSlot_C*>& Challenge_Slots, TArray<class ABP_ChallengeSlot_C*>* Sorted_Challenge_Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "GetChallengeSlotsByProgress");

	Params::BP_ChallengeManager_C_GetChallengeSlotsByProgress Parms{};

	Parms.Challenge_Slots = std::move(Challenge_Slots);

	UObject::ProcessEvent(Func, &Parms);

	Challenge_Slots = std::move(Parms.Challenge_Slots);

	if (Sorted_Challenge_Slots != nullptr)
		*Sorted_Challenge_Slots = std::move(Parms.Sorted_Challenge_Slots);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.ChallengeSlotComparatorByProgress
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          ObjectA                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          ObjectB                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeManager_C::ChallengeSlotComparatorByProgress(class UObject* ObjectA, class UObject* ObjectB, bool* Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "ChallengeSlotComparatorByProgress");

	Params::BP_ChallengeManager_C_ChallengeSlotComparatorByProgress Parms{};

	Parms.ObjectA = ObjectA;
	Parms.ObjectB = ObjectB;

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByCategory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Slot_Category                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<class ABP_ChallengeSlot_C*>      ChallengeSlots_0                                       (Parm, OutParm)

void ABP_ChallengeManager_C::GetChallengeSlotsByCategory(const class FString& Slot_Category, TArray<class ABP_ChallengeSlot_C*>* ChallengeSlots_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "GetChallengeSlotsByCategory");

	Params::BP_ChallengeManager_C_GetChallengeSlotsByCategory Parms{};

	Parms.Slot_Category = std::move(Slot_Category);

	UObject::ProcessEvent(Func, &Parms);

	if (ChallengeSlots_0 != nullptr)
		*ChallengeSlots_0 = std::move(Parms.ChallengeSlots_0);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.GetChallengeSlotsByMultipleCategories
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSet<class FString>                     Slot_Categories                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// TArray<class ABP_ChallengeSlot_C*>      Challenge_Slots                                        (Parm, OutParm)

void ABP_ChallengeManager_C::GetChallengeSlotsByMultipleCategories(const TSet<class FString>& Slot_Categories, TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "GetChallengeSlotsByMultipleCategories");

	Params::BP_ChallengeManager_C_GetChallengeSlotsByMultipleCategories Parms{};

	Parms.Slot_Categories = std::move(Slot_Categories);

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Slots != nullptr)
		*Challenge_Slots = std::move(Parms.Challenge_Slots);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.GetAllChallengeSlots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_ChallengeSlot_C*>      Challenge_Slots                                        (Parm, OutParm)

void ABP_ChallengeManager_C::GetAllChallengeSlots(TArray<class ABP_ChallengeSlot_C*>* Challenge_Slots)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "GetAllChallengeSlots");

	Params::BP_ChallengeManager_C_GetAllChallengeSlots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Slots != nullptr)
		*Challenge_Slots = std::move(Parms.Challenge_Slots);
}


// Function BP_ChallengeManager.BP_ChallengeManager_C.GetAllChallengeSlotsSorted
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_ChallengeSlot_C*>      ChallengeSlotsSorted_0                                 (Parm, OutParm)

void ABP_ChallengeManager_C::GetAllChallengeSlotsSorted(TArray<class ABP_ChallengeSlot_C*>* ChallengeSlotsSorted_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeManager_C", "GetAllChallengeSlotsSorted");

	Params::BP_ChallengeManager_C_GetAllChallengeSlotsSorted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ChallengeSlotsSorted_0 != nullptr)
		*ChallengeSlotsSorted_0 = std::move(Parms.ChallengeSlotsSorted_0);
}

}

