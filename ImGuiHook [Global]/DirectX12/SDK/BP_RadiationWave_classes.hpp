#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RadiationWave

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RadiationWave.BP_RadiationWave_C
// 0x0050 (0x0270 - 0x0220)
class ABP_RadiationWave_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         WaveSpeed;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x023C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveDistance;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_wave_exposure;                                 // 0x0244(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Wavelength;                                        // 0x0248(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowDebugWaveLocation;                            // 0x024C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24D[0x3];                                      // 0x024D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        RadiationSound;                                    // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             Radiation_Wave_Activated;                          // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FixedRadiationOverride;                            // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedRadiationOverrideLevel;                       // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Radiation_Wave_Activated__DelegateSignature();
	void ExecuteUbergraph_BP_RadiationWave(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Set_New_Transform(const struct FTransform& New_Transform);
	void ReceiveTick(float DeltaSeconds);
	void GetRadiationGradient(struct FVector* Gradient);
	void GetWaveLocation(struct FVector* Location);
	void BeginRadiationWave();
	void GetRadiationAtLocation(const struct FVector& Location, float* RadsPerSecond);
	void GetStartLocation(struct FVector* Location);
	void OnRep_bActive();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RadiationWave_C">();
	}
	static class ABP_RadiationWave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RadiationWave_C>();
	}
};
static_assert(alignof(ABP_RadiationWave_C) == 0x000008, "Wrong alignment on ABP_RadiationWave_C");
static_assert(sizeof(ABP_RadiationWave_C) == 0x000270, "Wrong size on ABP_RadiationWave_C");
static_assert(offsetof(ABP_RadiationWave_C, UberGraphFrame) == 0x000220, "Member 'ABP_RadiationWave_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, Arrow) == 0x000228, "Member 'ABP_RadiationWave_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_RadiationWave_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, WaveSpeed) == 0x000238, "Member 'ABP_RadiationWave_C::WaveSpeed' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, bActive) == 0x00023C, "Member 'ABP_RadiationWave_C::bActive' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, WaveDistance) == 0x000240, "Member 'ABP_RadiationWave_C::WaveDistance' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, Max_wave_exposure) == 0x000244, "Member 'ABP_RadiationWave_C::Max_wave_exposure' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, Wavelength) == 0x000248, "Member 'ABP_RadiationWave_C::Wavelength' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, bShowDebugWaveLocation) == 0x00024C, "Member 'ABP_RadiationWave_C::bShowDebugWaveLocation' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, RadiationSound) == 0x000250, "Member 'ABP_RadiationWave_C::RadiationSound' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, Radiation_Wave_Activated) == 0x000258, "Member 'ABP_RadiationWave_C::Radiation_Wave_Activated' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, FixedRadiationOverride) == 0x000268, "Member 'ABP_RadiationWave_C::FixedRadiationOverride' has a wrong offset!");
static_assert(offsetof(ABP_RadiationWave_C, FixedRadiationOverrideLevel) == 0x00026C, "Member 'ABP_RadiationWave_C::FixedRadiationOverrideLevel' has a wrong offset!");

}

