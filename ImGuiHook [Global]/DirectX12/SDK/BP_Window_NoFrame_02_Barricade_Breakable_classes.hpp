#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Window_NoFrame_02_Barricade_Breakable

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ADM_BarredWindow_Breakable_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Window_NoFrame_02_Barricade_Breakable.BP_Window_NoFrame_02_Barricade_Breakable_C
// 0x0020 (0x0440 - 0x0420)
class ABP_Window_NoFrame_02_Barricade_Breakable_C final : public ABP_ADM_BarredWindow_Breakable_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Window_NoFrame_02_Barricade_Breakable_C; // 0x0420(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Plank_03;                                          // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plank_02;                                          // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Plank_01;                                          // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Window_NoFrame_02_Barricade_Breakable(int32 EntryPoint);
	void InitBarricades();
	void SetupMainBarricades();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Window_NoFrame_02_Barricade_Breakable_C">();
	}
	static class ABP_Window_NoFrame_02_Barricade_Breakable_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Window_NoFrame_02_Barricade_Breakable_C>();
	}
};
static_assert(alignof(ABP_Window_NoFrame_02_Barricade_Breakable_C) == 0x000008, "Wrong alignment on ABP_Window_NoFrame_02_Barricade_Breakable_C");
static_assert(sizeof(ABP_Window_NoFrame_02_Barricade_Breakable_C) == 0x000440, "Wrong size on ABP_Window_NoFrame_02_Barricade_Breakable_C");
static_assert(offsetof(ABP_Window_NoFrame_02_Barricade_Breakable_C, UberGraphFrame_BP_Window_NoFrame_02_Barricade_Breakable_C) == 0x000420, "Member 'ABP_Window_NoFrame_02_Barricade_Breakable_C::UberGraphFrame_BP_Window_NoFrame_02_Barricade_Breakable_C' has a wrong offset!");
static_assert(offsetof(ABP_Window_NoFrame_02_Barricade_Breakable_C, Plank_03) == 0x000428, "Member 'ABP_Window_NoFrame_02_Barricade_Breakable_C::Plank_03' has a wrong offset!");
static_assert(offsetof(ABP_Window_NoFrame_02_Barricade_Breakable_C, Plank_02) == 0x000430, "Member 'ABP_Window_NoFrame_02_Barricade_Breakable_C::Plank_02' has a wrong offset!");
static_assert(offsetof(ABP_Window_NoFrame_02_Barricade_Breakable_C, Plank_01) == 0x000438, "Member 'ABP_Window_NoFrame_02_Barricade_Breakable_C::Plank_01' has a wrong offset!");

}

