#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_TicTacToe

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_TTT_SquareStates_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_TicTacToe.UI_TicTacToe_C
// 0x01C0 (0x0498 - 0x02D8)
class UUI_TicTacToe_C final : public UMenuWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02D8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BackgroundImage;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BackgroundImage_1;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameTextBlock*                        FlameTextBlock_Looses;                             // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameTextBlock*                        FlameTextBlock_Wins;                               // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HBoxMakeMove;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HBoxThinking;                                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                TipClose;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_InputActionWidget_C*                TipPlay;                                           // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUniformGridPanel*                      TTTGrid;                                           // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_FlameSafezone_C*                    UI_FlameSafezone;                                  // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         SizeX;                                             // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         SizeY;                                             // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<E_TTT_SquareStates>                    GameState;                                         // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UUI_TTT_Slot_C*>                 Board;                                             // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsPlayersTurn;                                     // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GameFinished;                                      // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35A[0x2];                                      // 0x035A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SearchDepth;                                       // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         Randomization;                                     // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ScoreTable_Config;                                 // 0x0368(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TMap<class FString, float>                    ScoreTable_AutoGenerated;                          // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AIScoreFactor;                                     // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, int32>                    ScoreTable_Config_Backup;                          // 0x0410(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int32                                         Wins;                                              // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Looses;                                            // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Log;                                               // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          JuiceInProgress;                                   // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_479[0x7];                                      // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_TTT_SquareStates>                    JuiceState;                                        // 0x0480(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         JuiceDelay;                                        // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Juice_Count;                                       // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_TicTacToe(int32 EntryPoint);
	void BndEvt__TipPlay_K2Node_ComponentBoundEvent_0_OnActionPressedEvent__DelegateSignature();
	void BndEvt__TipClose_K2Node_ComponentBoundEvent_5_OnActionPressedEvent__DelegateSignature();
	void OnPlayerMove();
	void Construct();
	void Juice_Rand();
	void Juice_O();
	void Juice_X();
	void Juice_1();
	void Juice_0();
	void IndexToCoords(int32 Index_0, int32* Row, int32* Col);
	void CoordsToIndex(int32 Row, int32 Col, int32* Index_0);
	void MakeMoveAt(int32 LastMove);
	void UpdateBoard();
	void RunAI(TArray<E_TTT_SquareStates>& CurrentState, int32 LastMove, E_TTT_SquareStates CPUtype, int32 RecursionDepth, int32* SelectedMove, float* Score);
	void FindEmptySquaresNear(TArray<E_TTT_SquareStates>& CurrentState, TArray<int32>* EmptyIndices);
	void EvaluateBoard(TArray<E_TTT_SquareStates>& Board_0, float* Score);
	void CountInDir(TArray<E_TTT_SquareStates>& Board_0, int32 Index_0, int32 DirX, int32 DirY, int32* Count, bool* bLocked);
	void CountInRow(TArray<E_TTT_SquareStates>& Board_0, int32 Index_0, int32* Hori, bool* Blocked1H, bool* Blocked2H, int32* Vert, bool* Blocked1V, bool* Blocked2v, int32* DiagA, bool* Blocked1A, bool* Blocked2A, int32* DiagB, bool* Blocked1B, bool* Blocked2B);
	void TestAndMarkWinner(TArray<E_TTT_SquareStates>& GameState_0, E_TTT_SquareStates Player, int32 LastMove, bool* IsWinner, bool* IsDraw);
	void MarkWinnerInDir(TArray<E_TTT_SquareStates>& Board_0, int32 Index_0, int32 DirX, int32 DirY, E_TTT_SquareStates OldType, E_TTT_SquareStates WinningType);
	void EvaluateBoardBySearching(TArray<E_TTT_SquareStates>& Board_0, int32 Depth, int32 LastMove, E_TTT_SquareStates Type, float* Score);
	void FillBoard(int32 SizeX_0, int32 SizeY_0);
	void ResizeBoard(int32 SizeX_0, int32 SizeY_0);
	void UpdateIndicators();
	void ConvertBoardToStrings(TArray<E_TTT_SquareStates>& Array, int32 SizeX_0, int32 SizeY_0, TArray<class FString>* All);
	int32 CountOfSubstrings(const class FString& SourceString, const class FString& SearchText);
	void PregenerateScoreTable();
	void FinishLog(bool PlayerWin, bool AIWin);
	void FinishGame(bool PlayerWin, bool AIWin);
	void PlayJuice(int32 Variant);
	void StopJuice();
	void UpdateBoard_Juice();
	void Test4InRow(TArray<E_TTT_SquareStates>& GameState_0, int32 LastMove);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_TicTacToe_C">();
	}
	static class UUI_TicTacToe_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_TicTacToe_C>();
	}
};
static_assert(alignof(UUI_TicTacToe_C) == 0x000008, "Wrong alignment on UUI_TicTacToe_C");
static_assert(sizeof(UUI_TicTacToe_C) == 0x000498, "Wrong size on UUI_TicTacToe_C");
static_assert(offsetof(UUI_TicTacToe_C, UberGraphFrame) == 0x0002D8, "Member 'UUI_TicTacToe_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, BackgroundImage) == 0x0002E0, "Member 'UUI_TicTacToe_C::BackgroundImage' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, BackgroundImage_1) == 0x0002E8, "Member 'UUI_TicTacToe_C::BackgroundImage_1' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, FlameTextBlock_Looses) == 0x0002F0, "Member 'UUI_TicTacToe_C::FlameTextBlock_Looses' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, FlameTextBlock_Wins) == 0x0002F8, "Member 'UUI_TicTacToe_C::FlameTextBlock_Wins' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, HBoxMakeMove) == 0x000300, "Member 'UUI_TicTacToe_C::HBoxMakeMove' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, HBoxThinking) == 0x000308, "Member 'UUI_TicTacToe_C::HBoxThinking' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, TipClose) == 0x000310, "Member 'UUI_TicTacToe_C::TipClose' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, TipPlay) == 0x000318, "Member 'UUI_TicTacToe_C::TipPlay' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, TTTGrid) == 0x000320, "Member 'UUI_TicTacToe_C::TTTGrid' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, UI_FlameSafezone) == 0x000328, "Member 'UUI_TicTacToe_C::UI_FlameSafezone' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, SizeX) == 0x000330, "Member 'UUI_TicTacToe_C::SizeX' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, SizeY) == 0x000334, "Member 'UUI_TicTacToe_C::SizeY' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, GameState) == 0x000338, "Member 'UUI_TicTacToe_C::GameState' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Board) == 0x000348, "Member 'UUI_TicTacToe_C::Board' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, IsPlayersTurn) == 0x000358, "Member 'UUI_TicTacToe_C::IsPlayersTurn' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, GameFinished) == 0x000359, "Member 'UUI_TicTacToe_C::GameFinished' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, SearchDepth) == 0x00035C, "Member 'UUI_TicTacToe_C::SearchDepth' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Randomization) == 0x000360, "Member 'UUI_TicTacToe_C::Randomization' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, ScoreTable_Config) == 0x000368, "Member 'UUI_TicTacToe_C::ScoreTable_Config' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, ScoreTable_AutoGenerated) == 0x0003B8, "Member 'UUI_TicTacToe_C::ScoreTable_AutoGenerated' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, AIScoreFactor) == 0x000408, "Member 'UUI_TicTacToe_C::AIScoreFactor' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, ScoreTable_Config_Backup) == 0x000410, "Member 'UUI_TicTacToe_C::ScoreTable_Config_Backup' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Wins) == 0x000460, "Member 'UUI_TicTacToe_C::Wins' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Looses) == 0x000464, "Member 'UUI_TicTacToe_C::Looses' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Log) == 0x000468, "Member 'UUI_TicTacToe_C::Log' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, JuiceInProgress) == 0x000478, "Member 'UUI_TicTacToe_C::JuiceInProgress' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, JuiceState) == 0x000480, "Member 'UUI_TicTacToe_C::JuiceState' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, JuiceDelay) == 0x000490, "Member 'UUI_TicTacToe_C::JuiceDelay' has a wrong offset!");
static_assert(offsetof(UUI_TicTacToe_C, Juice_Count) == 0x000494, "Member 'UUI_TicTacToe_C::Juice_Count' has a wrong offset!");

}

