#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Crosshair

#include "Basic.hpp"

#include "Flame_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_Crosshair.UI_Crosshair_C
// 0x00B8 (0x0370 - 0x02B8)
class UUI_Crosshair_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas;                                            // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairDot;                                      // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairLineDown;                                 // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairLineLeft;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairLineRight;                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairLineUp;                                   // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairTargetHit_BottomLeft;                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairTargetHit_BottomRight;                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairTargetHit_TopLeft;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 CrosshairTargetHit_TopRight;                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overlay_Reload;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_CircularProgress_C*                 UI_CircularProgress_Reload;                        // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UUI_StopFireCrosshair_C*                UI_StopFireCrosshair;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         TargetDispersion;                                  // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentDispersion;                                 // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairDispersionInterpSpeed;                    // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairDispersionScale;                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CrosshairColor;                                    // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ReloadTimer;                                       // 0x0348(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Aggregated_Hit_Damage;                             // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hit_Indicator_Threshold;                           // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentOpacity;                                    // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Character_C*                        Character;                                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CrosshairOpacity;                                  // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_Crosshair(int32 EntryPoint);
	void HideHitIndication();
	void Destruct();
	void OnReloadtimerElapsed();
	void ResetReloadTimer();
	void StartReloadTimer();
	void PreConstruct(bool IsDesignTime);
	void Construct();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	float GetCurrentDispersion();
	void SetDispersionRenderTransform(float Dispersion, class UWidget* Widget, const struct FVector2D& Mask);
	void GetOwningCharacter(class ABP_Character_C** BP_Character);
	void ComputeCrosshairTargetDispersion();
	float InterpolateCrosshairDispersion(float DeltaTime);
	void UpdateCrosshairRenderTransform();
	void SetCrosshairColor(const struct FLinearColor& Color);
	void UpdateCrosshair();
	void SetDefaultCrosshairSettings();
	ESlateVisibility ComputeCrosshairVisibility();
	void UpdateCrosshairVisibility();
	void UpdateBlockedCrosshairLocation();
	void SetHitIndicationVisibility(ESlateVisibility InVisibility);
	void SetHitIndicationColor(const struct FLinearColor& InColorAndOpacity);
	void OnGameSettingsChanged(struct FGameSaveSettings& InGameSettings);
	void SetHitIndicatorScale(float Damage_Dealt);
	void ClearAggregated_Damage();
	void SetCrosshairLength(int32 Length);
	void SetCrosshairOpacity(float Opacity);
	void SetCrosshairThickness(int32 Thickness);
	void ShowHitIndicationForTime(float Time);
	void UpdateCrosshairOpacity();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Crosshair_C">();
	}
	static class UUI_Crosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Crosshair_C>();
	}
};
static_assert(alignof(UUI_Crosshair_C) == 0x000008, "Wrong alignment on UUI_Crosshair_C");
static_assert(sizeof(UUI_Crosshair_C) == 0x000370, "Wrong size on UUI_Crosshair_C");
static_assert(offsetof(UUI_Crosshair_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_Crosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, Canvas) == 0x0002C0, "Member 'UUI_Crosshair_C::Canvas' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairDot) == 0x0002C8, "Member 'UUI_Crosshair_C::CrosshairDot' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairLineDown) == 0x0002D0, "Member 'UUI_Crosshair_C::CrosshairLineDown' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairLineLeft) == 0x0002D8, "Member 'UUI_Crosshair_C::CrosshairLineLeft' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairLineRight) == 0x0002E0, "Member 'UUI_Crosshair_C::CrosshairLineRight' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairLineUp) == 0x0002E8, "Member 'UUI_Crosshair_C::CrosshairLineUp' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairTargetHit_BottomLeft) == 0x0002F0, "Member 'UUI_Crosshair_C::CrosshairTargetHit_BottomLeft' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairTargetHit_BottomRight) == 0x0002F8, "Member 'UUI_Crosshair_C::CrosshairTargetHit_BottomRight' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairTargetHit_TopLeft) == 0x000300, "Member 'UUI_Crosshair_C::CrosshairTargetHit_TopLeft' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairTargetHit_TopRight) == 0x000308, "Member 'UUI_Crosshair_C::CrosshairTargetHit_TopRight' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, Overlay_Reload) == 0x000310, "Member 'UUI_Crosshair_C::Overlay_Reload' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, UI_CircularProgress_Reload) == 0x000318, "Member 'UUI_Crosshair_C::UI_CircularProgress_Reload' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, UI_StopFireCrosshair) == 0x000320, "Member 'UUI_Crosshair_C::UI_StopFireCrosshair' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, TargetDispersion) == 0x000328, "Member 'UUI_Crosshair_C::TargetDispersion' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CurrentDispersion) == 0x00032C, "Member 'UUI_Crosshair_C::CurrentDispersion' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairDispersionInterpSpeed) == 0x000330, "Member 'UUI_Crosshair_C::CrosshairDispersionInterpSpeed' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairDispersionScale) == 0x000334, "Member 'UUI_Crosshair_C::CrosshairDispersionScale' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairColor) == 0x000338, "Member 'UUI_Crosshair_C::CrosshairColor' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, ReloadTimer) == 0x000348, "Member 'UUI_Crosshair_C::ReloadTimer' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, Aggregated_Hit_Damage) == 0x000350, "Member 'UUI_Crosshair_C::Aggregated_Hit_Damage' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, Hit_Indicator_Threshold) == 0x000354, "Member 'UUI_Crosshair_C::Hit_Indicator_Threshold' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CurrentOpacity) == 0x000358, "Member 'UUI_Crosshair_C::CurrentOpacity' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, Character) == 0x000360, "Member 'UUI_Crosshair_C::Character' has a wrong offset!");
static_assert(offsetof(UUI_Crosshair_C, CrosshairOpacity) == 0x000368, "Member 'UUI_Crosshair_C::CrosshairOpacity' has a wrong offset!");

}

