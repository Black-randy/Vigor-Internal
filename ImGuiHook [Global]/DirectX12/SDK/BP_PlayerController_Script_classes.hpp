#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerController_Script

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_structs.hpp"
#include "S_CustomMapMarker_ContextStorage_structs.hpp"
#include "Engine_structs.hpp"
#include "EnumStaticMapMarkers_structs.hpp"
#include "S_CustomMapMarker_Fade_structs.hpp"
#include "BP_PlayerController_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerController_Script.BP_PlayerController_Script_C
// 0x02C8 (0x0D00 - 0x0A38)
class ABP_PlayerController_Script_C : public ABP_PlayerController_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerController_Script_C;       // 0x0A38(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UOnlineBoostersComponent*               OnlineBoostersComponent;                           // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_OnlineMapRewardsComponent_C*        BP_OnlineMapRewardsComponent;                      // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CarryingComponent_C*                BP_CarryingComponent;                              // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Widget;                                            // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Stats_Interval;                                    // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Stats_Collecting_Period;                           // 0x0A64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Last_Periodic_Stats_Sent_Timestamp;                // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance_Traveled;                                 // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Last_Tracked_Position;                             // 0x0A70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Position_at_Interval_Start;                        // 0x0A7C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Used_Ammo;                                         // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Used_Explosives;                                   // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Used_Healing_Consumables;                          // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Firemodes_Switched;                                // 0x0A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Ladder_Used;                                       // 0x0A98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ADS_Used;                                          // 0x0A99(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9A[0x2];                                      // 0x0A9A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time_in_UI;                                        // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Advanced_Options_Accessed;                         // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AA1[0x7];                                      // 0x0AA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Stats_Collecting_Timer;                            // 0x0AA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Stats_Sending_Timer;                               // 0x0AB0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   MapToReturnTo;                                     // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Exit_Used;                                         // 0x0AC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         Total_Distance_Traveled;                           // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shots_Fired;                                       // 0x0AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shots_Hit;                                         // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Headshots_Scored;                                  // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Kills_Scored;                                      // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Match_End_Processed;                               // 0x0AE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_AE5[0x3];                                      // 0x0AE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_Cheat_CoreMenu_C*                   Cheat_UI;                                          // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Allowed_To_Cheat;                               // 0x0AF0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Infinite_Ammo;                                     // 0x0AF1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Hide_HUD;                                          // 0x0AF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleHealthDebug;                                 // 0x0AF3(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleShowPlayerLocation;                          // 0x0AF4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleShowPlayersInSession;                        // 0x0AF5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebug;                                     // 0x0AF6(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleConsumableHud;                               // 0x0AF7(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleMachineHud;                                  // 0x0AF8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugResourceItems;                        // 0x0AF9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugObjectiveItems;                       // 0x0AFA(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugObjectiveSpawns;                      // 0x0AFB(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugSpawnedLoot;                          // 0x0AFC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugLootSpawns;                           // 0x0AFD(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugPlayerStarts;                         // 0x0AFE(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugPlayer;                               // 0x0AFF(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Toggle3dDebugBlockingVolumes;                      // 0x0B00(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleHitInfo;                                     // 0x0B01(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Infinite_Bullets;                                  // 0x0B02(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleShowTracedActorDisplayName;                  // 0x0B03(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B04[0x4];                                      // 0x0B04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AConsumableItem*                        ConsumablePreviewMesh;                             // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleShowPlayerCount;                             // 0x0B10(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleBulletImpactMaterial;                        // 0x0B11(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B12[0x6];                                      // 0x0B12(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FS_CustomMapMarker_ContextStorage> StoredMarkers;                                     // 0x0B18(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ConsumableKillsScored;                             // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillsThreatScored;                                 // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Deaths;                                            // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Run_Analytics;                                     // 0x0B74(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B75[0x3];                                      // 0x0B75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Lootables_Accessed;                                // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Leaving_Match_Intentionally;                       // 0x0B7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_B7D[0x3];                                      // 0x0B7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillerUserInfo                        Killer_Info;                                       // 0x0B80(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWidgetComponent*                       TesterMarker;                                      // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 VoiceOverManagerClass;                             // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_VoiceoverManager_C*                 VoiceOverManager;                                  // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Analytics_Running;                                 // 0x0BD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BD9[0x7];                                      // 0x0BD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Last_Respawn_Time;                                 // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Character_C*                        Character_Before_Camera_Free_Look;                 // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UUserWidget*>                    Cheat_Previously_Visible_Widgets;                  // 0x0BF0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Waiting_For_Spawn;                                 // 0x0C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IodineInEffect;                                    // 0x0C01(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Exit_Prevented_Radiation_Kill;                     // 0x0C02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C03[0x1];                                      // 0x0C03(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Last_Meaningful_Tracked_Position;                  // 0x0C04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Meaningful_Distance_Traveled;                      // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Total_Meaningful_Distance_Traveled;                // 0x0C14(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Meaningful_Distance_Threshold;                     // 0x0C18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleCampingDetection;                            // 0x0C1C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheatMachineModeToggled;                           // 0x0C1D(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1E[0x2];                                      // 0x0C1E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UTexture*>                       IconMap;                                           // 0x0C20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EnumStaticMapMarkers, struct FS_CustomMapMarker_Fade> MapMarkerPresets;                                  // 0x0C30(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FVector                                StatsLastRecordedPosition;                         // 0x0C80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StatsDistanceTraveled;                             // 0x0C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalLootablesAmount;                              // 0x0C90(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NonemptyLootablesAmount;                           // 0x0C94(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLootVisualizationOn;                             // 0x0C98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C99[0x7];                                      // 0x0C99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUI_ItemTransfer_C*                     UI_ItemTransferWidget;                             // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_EventSystem_C*                      EventSystem;                                       // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SpawnPointTag;                                     // 0x0CB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HpHealed;                                          // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CBC[0x4];                                      // 0x0CBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Match_ID_to_Save;                                  // 0x0CC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Last_Match_ID_Reset;                               // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_CD1[0x3];                                      // 0x0CD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DataRetrievalAttemptsMade;                         // 0x0CD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FBannedPlayerDetail>            Blocklist;                                         // 0x0CD8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             BlocklistUpdated;                                  // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         BlocklistSize;                                     // 0x0CF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BlocklistUpdated__DelegateSignature(const class FString& Reason_For_Update);
	void ExecuteUbergraph_BP_PlayerController_Script(int32 EntryPoint);
	void OnUnbanPlayerReceived(const struct FCloudRequestResult& RequestResult, const class FString& Userid, const struct FCloudBannedPlayersResult& Result);
	void OnBanPlayerReceived(const struct FCloudRequestResult& RequestResult, const class FString& Userid, const struct FCloudBannedPlayersResult& Result);
	void InitializeBlocklist();
	void OnGetPlayerBansReceived(const struct FCloudRequestResult& RequestResult, const struct FCloudBannedPlayersResult& Result);
	void Event_OpenLevel(const struct FCloudRequestResult& RequestResult, const class FString& MatchCloudId, const struct FUserMatchResult& MatchResult);
	void Replicate_Client_CarAlarmTriggered();
	void AnalyticsLogHealedHP(float Healed);
	void RemoveCustomMapMarkerByTag_FromCompass(class FName Tag);
	void RemoveCustomMapMarkerByTag_FromMap(class FName Tag);
	void ResetDistanceTraveledInfo();
	void IncrementUsedAmmo();
	void IncrementShotsFired();
	void UpdateDistanceTraveled();
	void AddOrModifyMapMarkerStatic(EnumStaticMapMarkers MapMarker, class FName Tag, bool Auto_Generate_Tag, bool Add_To_Map, bool Add_To_Compass, const struct FVector_NetQuantize& Location);
	void Send_Player_To_Shelter();
	void Send_Player_To_Shelter_With_Delay();
	void ReceiveUnPossess(class APawn* UnpossessedPawn);
	void CallMatchFinishedForPlayer();
	void Try_Send_Spawned_Anylitics();
	void Player_Respawned();
	void CloseUIForSpectator(class UClass* WidgetClass);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void AddFadedMarker(class FName Tag, const struct FS_CustomMapMarker_Fade& Marker, bool AutoGenerateTag, bool AddToMap, bool AddToCompass);
	void Set_Killer_Info_on_Client(const struct FS_MatchPlayerInfo& Killer_Match_Player_Info);
	void Create_UI_Widget(class UClass* Widget_Class, int32 ZOrder);
	void Close_UI_Widget(class UClass* WidgetClass);
	void LootNotification(class UClass* ItemClass, int32 NumItems);
	void RemoveCustomMapMarkers();
	void AddOrModifyMapMarkerDynamic(class FName Tag, const struct FS_CustomMapMarker_Optimized& Marker, bool AutoGenerateTag, bool AddToMap, bool AddToCompass);
	void RemoveCustomMapMarkerByTag(class FName Tag);
	void ReceiveBeginPlay();
	void ExitSessionOnClient(class FName OverrideReturnMap);
	void LeaveSession(class FName MapToReturnTo_0);
	void DEBUG_OverrideClientAnalyticsTime(int32 PeriodTime);
	void DEBUG_Server_SetClientAnalyticsTime(int32 PeriodTime);
	void DEBUG_SetClientAnalyticsTime(int32 PeriodTime);
	void SetClientSidePeriodicStatsTimer(int32 StatsInterval);
	void Send_ServerMinusSide_Network_Stability_Analytics();
	void Send_ServerMinusSide_Hit_Registration_Analytics();
	void Send_ServerMinusSide_Connection_Analytics();
	void Finish_ServerMinusSide_Periodic_Stats();
	void Check_Player_Readiness_for_Analytics();
	void Collect_ServerMinusSide_Stats();
	void Initialize_ServerMinusSide_Analytics();
	void Send_Player_Results_Event(class AHumanCharacter* Character_0, bool Player_Escaped, bool Player_Won, const class FString& Exit_Name, bool Exit_Prevented_Radiation_Kill_0, TArray<class FString>& Rewards, int32 Accuracy, const TArray<struct FCloudBattlePassMatchEventInfo>& Events, int32 Distance_Traveled_0, int32 Meaningful_Distance_Traveled_0, int32 TotalTeamScore, float Average_Ping);
	void Send_Death_Event(class AHumanCharacter* Victim, class AHumanCharacter* Killer, ECloudDeathCauseType Cause_of_Death, class UClass* Instigating_Item);
	void Send_Kill_Scored_Event(class AHumanCharacter* Killer, class AHumanCharacter* Victim, class UClass* Instigating_Item, bool Headshot, bool Teamkill);
	void Set_Ladder_Used_for_Analytics();
	void Finish_ClientMinusSide_Periodic_Stats();
	void Collect_ClientMinusSide_Periodic_Stats();
	void Set_Weapon_Fired_for_Analytics();
	void Send_ClientMinusSide_Periodic_Stats();
	void Initialize_ClientMinusSide_Analytics();
	void CheatToggleDebugCamera(bool Enable);
	void CheatHideUI(bool Hide);
	void Cheat_Toggle_Onboarding_UI_Locks(bool Is_UI_Locked);
	void Cheat_toggle_machine_mode(bool Toggle_machine_mode);
	void Cheat_execute_command_line(const class FString& Command);
	void OpenAllExits();
	void Set_Camping_Detection_Active(bool Active);
	void CheatSpawnAllMementos();
	void CheatShowSpawnedMementosMarkers();
	void CheatShowSpawnedMementos();
	void CheatShowMementoSpawnPointMarkers();
	void CheatShowMementoSpawnPoints();
	void Cheat_Switch_Fog_of_War();
	void Cheat_Free_Camera_Switch_Visible_UI(bool Visible);
	void Cheat_Switch_Player_Free_Look_Camera();
	void CheatStartSpectating();
	void OpenCheatWidget(class UClass* CheatWidget);
	void CanCheat_PC(const class UClass* CheatWidget);
	void CheatSkipTutorial();
	void CheatBigJumps(float NewJumpZVelocity);
	void CheatSetDevMode();
	void CheatFastMovement(float MaxWalkSpeed);
	void CheatInfiniteSprint();
	void CheatMarkPlayer(class APawn* MarkedCharacter, const struct FLinearColor& Specified_Color);
	void CheatMarkSelfAsTester();
	void CheatSkipLobby(int32 TimeToEncounter, int32 TimeToLock);
	void Cheat_Change_Weather();
	void Cheat_Create_Testing_Pawns();
	void Cheat_Toggle_Bullet_Impact_Material(bool ToggleBulletMaterialImpact);
	void Cheat_Show_Player_Count(bool Draw_Player_Count_Widget);
	void Cheat_Show_Traced_Actor_Display_Name(bool Show_Traced_Actor_Display_Name);
	void Cheat_Infinite_Bullets(bool NewInfiniteBulletState);
	void Cheat_3D_Debug_Blocking_Volumes(bool Threed_Debug_Blocking_Volumes);
	void Cheat_Victory_Add_Lootbox(class UClass* Class_0, int32 InInt);
	void Cheat_Retreat_Add_Resources(class UClass* Resource, int32 Count);
	void Cheat_Trade_In_Resources();
	void CheatToggleHitInfo(bool ToggleHitInfo_0);
	void Cheat_3D_Debug_Player(bool ThreedDebugPlayer);
	void Cheat_3D_Debug_Player_Starts(bool ThreedDebugPlayerStarts);
	void Cheat_3D_Debug_Objective_Item_Spawns(bool ThreedDebugLootSpawns);
	void Cheat_3D_Spawned_Objective_Items(bool ThreedDebugSpawnedLoot);
	void Cheat_3D_Debug_Objective_Spawns(bool ThreedDebugObjectiveSpawnsState);
	void Cheat_3D_Debug_Active_Objectives(bool ThreedDebugObjectiveItemsState);
	void Cheat_3D_Debug_Resource_Items(bool ThreedDebugResourceItemsState);
	void Cheat_Machine_Hud(bool Machine_Hud_State);
	void Cheat_Consumable_Hud(bool Consumable_Hud_State);
	void Cheat_3D_Debug(bool ThreedDebugState);
	void Cheat_Game_Mode_Debug();
	void Cheat_Add_Shelter_Resource_Elapsed_Time(int32 TimeToElapse);
	void Cheat_Teleport_To_Start();
	void Cheat_Show_Players_In_Session(bool DrawPlayersInSessionWidget);
	void Cheat_Show_Player_Location(bool DrawPlayerLocationState);
	void Cheat_Set_Player_Transform(const struct FTransform& Transform);
	void Cheat_Set_FOV();
	void Cheat_Definable_Damage();
	void Cheat_Toggle_Health_Debug(bool Draw_Health_Debug_Widget);
	void Cheat_Infinite_Ammo(bool New_Infinite_Ammo_State);
	void Cheat_Damage_Character(float Damage_Amount);
	void Cheat_Heal_Character(float Heal_Amount);
	void Cheat_Set_Invincibility(bool New_Invincibility_State);
	void Cheat_Set_Max_Health(float New_Max_Health);
	void Cheat_Set_Health(float New_Health);
	void Cheat_Kill_Character();
	void Cheat_Clear_Objective_Items_From_Backpack();
	void Cheat_Clear_Backpack();
	void Cheat_Add_Weapon(class UClass* Weapon_Type);
	void Cheat_Add_Item_For_Backpack(class UClass* Item_Type, int32 Item_Amount);
	void SpawnControlledPawn(const struct FVector& Spawn_Transform_Location);
	void Cheat_Equip_Consumable(class UClass* Consumable, bool UnEquip);
	void Add_Consumable_To_Hand(class UClass* Consumable, bool UnEquip);
	void Forward_Whether_I_Can_Cheat_to_Local_Cheat_UI(bool Can_Cheat);
	void Check_Whether_I_Can_Cheat();
	void Broadcast_Cheating(const class FString& Message);
	void Initialize_Cheat_Manager();
	void Spawn_SM_Asset_on_All_Machines(const class FString& Object_Name, class UStaticMesh* Class_Name);
	void OnSpawnSMActorFromConsole(const class FString& ObjectName, const class UStaticMesh* StaticMeshObject);
	void OnSpawnBPActorFromConsole(const class FString& ObjectName, const class UClass* ObjectClass);
	void Spawn_BP_Asset_on_All_Machines(const class FString& Object_Name, class UClass* Class_Name);
	void Player_destroyed_trap(class UClass* Destroyed_trap);
	void Player_stayed_in_radiation(bool Radiation_cloud, bool Radiation_wave, bool Radioactive_airdrop, float Time_stayed);
	void PlayerWonPhoneDuel();
	void PlayerAnsweredPhoneDuel();
	void PlayerInitiatedPhoneDuel();
	void Character_stepped_into_alarm_trap(class ABP_Character_Script_C* Character_that_stepped_into_alarm_trap, class ABP_TC_AlarmTrap_Object_C* Triggered_alarm_trap);
	void Player_jammed_new_uniquie_nonMinusfriendly_character(class ABP_Character_Script_C* Jammed_character);
	void Jammer_blocked_non_friendly_Signal_detection();
	void Own_transmitter_got_detected_by_other_player();
	void Player_detected_nonMinusfriendly_character_signal(class AActor* Detected_actor);
	void Store_Match_ID_to_Game_Instance(const class FString& Match_ID);
	void StoreMatchMakingMatchID(const class FString& MAtchMakingMatchID);
	void Reset_Match_ID_in_Game_Instance();
	void OnSuccess_4BBAC5424C22E3B5DDE130AB889CA1C4();
	void OnFailure_4BBAC5424C22E3B5DDE130AB889CA1C4();
	void InpActEvt_ChangeFireMode_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ADS_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_G_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void UserConstructionScript();
	void Reset_Periodic_Stats_Variables();
	void AttachConsumableToHand(class UClass* InputPin, bool UnEquip);
	void RemoveObjectiveItems();
	void GetNewRandomUnusedMapMarkerTag(class FName* UnusedTag);
	void RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, class FName* UsedTag);
	void UnregisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent);
	void Is_Player_Ready_for_Analytics(bool* Is_Client_Ready);
	void EarlyClientTravel(float TimeToTravel);
	void MarkPlayerAsTester(class AActor* CharacterToMark, const struct FLinearColor& Specified_Color);
	void VisualizeLoot(const struct FLinearColor& Color, float Duration, TArray<struct FF_Cheat_VisualizeLoot>& Struct, bool ShowPillars, bool ChangeMaterials);
	void GetLootData(class AController* CheatingController, float Range, const struct FLinearColor& Color, float Duration, bool ShowPillars, bool ChangeMaterials, bool ShowWeapons, bool ShowItems, bool ListContents, bool IgnoreEmptyStorages, class UClass* FilterByItemClass, struct FLinearColor* LineColor_out, float* Duration_out, TArray<struct FF_Cheat_VisualizeLoot>* Structs_out, bool* ShowPillars_out, bool* ChangeMaterials_out);
	void Save_Analytics_ID_to_Player_State();
	void EncodeMapMarker(const struct FS_CustomMapMarker& Map_Marker, struct FS_CustomMapMarker_Optimized* Map_Marker_Optimized);
	void BPI_RegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* bValid, class FName* UsedTag);
	void BPI_UnRegisterMapMarkedActor(class UBP_MapMarkerComponent_C* MarkerComponent, bool* Success);
	void StoreMarkerWithDisplayCheck(const class FName& Tag, const struct FS_CustomMapMarker_ContextStorage& MarkerContext, bool* Should_Remove_Map_Marker, bool* Should_Remove_Compass_Marker);
	void GetLastRespawnTime(bool* Valid, struct FDateTime* LastRespawnTime);
	void GetLastMatchID_Info(bool* Valid, bool* LastMatchIDReset, class FString* MatchID_ToSave);
	void Get_BP_UserInfoComponent(class UBP_UserInfoComponent_C** UserInfoComponent, bool* Success);
	void Is_Player_Blocked(const class FString& Player_Tracking_ID, bool* Is_blocked);
	void Is_Blocklist_full(bool* Is_Full);
	void BlockPlayer(const class FString& BlockedPlayerTrackingID);
	void UnblockPlayer(const class FString& Unblocked_Player_Tracking_ID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerController_Script_C">();
	}
	static class ABP_PlayerController_Script_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerController_Script_C>();
	}
};
static_assert(alignof(ABP_PlayerController_Script_C) == 0x000008, "Wrong alignment on ABP_PlayerController_Script_C");
static_assert(sizeof(ABP_PlayerController_Script_C) == 0x000D00, "Wrong size on ABP_PlayerController_Script_C");
static_assert(offsetof(ABP_PlayerController_Script_C, UberGraphFrame_BP_PlayerController_Script_C) == 0x000A38, "Member 'ABP_PlayerController_Script_C::UberGraphFrame_BP_PlayerController_Script_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, OnlineBoostersComponent) == 0x000A40, "Member 'ABP_PlayerController_Script_C::OnlineBoostersComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, BP_OnlineMapRewardsComponent) == 0x000A48, "Member 'ABP_PlayerController_Script_C::BP_OnlineMapRewardsComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, BP_CarryingComponent) == 0x000A50, "Member 'ABP_PlayerController_Script_C::BP_CarryingComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Widget) == 0x000A58, "Member 'ABP_PlayerController_Script_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Stats_Interval) == 0x000A60, "Member 'ABP_PlayerController_Script_C::Stats_Interval' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Stats_Collecting_Period) == 0x000A64, "Member 'ABP_PlayerController_Script_C::Stats_Collecting_Period' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Last_Periodic_Stats_Sent_Timestamp) == 0x000A68, "Member 'ABP_PlayerController_Script_C::Last_Periodic_Stats_Sent_Timestamp' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Distance_Traveled) == 0x000A6C, "Member 'ABP_PlayerController_Script_C::Distance_Traveled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Last_Tracked_Position) == 0x000A70, "Member 'ABP_PlayerController_Script_C::Last_Tracked_Position' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Position_at_Interval_Start) == 0x000A7C, "Member 'ABP_PlayerController_Script_C::Position_at_Interval_Start' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Used_Ammo) == 0x000A88, "Member 'ABP_PlayerController_Script_C::Used_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Used_Explosives) == 0x000A8C, "Member 'ABP_PlayerController_Script_C::Used_Explosives' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Used_Healing_Consumables) == 0x000A90, "Member 'ABP_PlayerController_Script_C::Used_Healing_Consumables' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Firemodes_Switched) == 0x000A94, "Member 'ABP_PlayerController_Script_C::Firemodes_Switched' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Ladder_Used) == 0x000A98, "Member 'ABP_PlayerController_Script_C::Ladder_Used' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ADS_Used) == 0x000A99, "Member 'ABP_PlayerController_Script_C::ADS_Used' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Time_in_UI) == 0x000A9C, "Member 'ABP_PlayerController_Script_C::Time_in_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Advanced_Options_Accessed) == 0x000AA0, "Member 'ABP_PlayerController_Script_C::Advanced_Options_Accessed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Stats_Collecting_Timer) == 0x000AA8, "Member 'ABP_PlayerController_Script_C::Stats_Collecting_Timer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Stats_Sending_Timer) == 0x000AB0, "Member 'ABP_PlayerController_Script_C::Stats_Sending_Timer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, MapToReturnTo) == 0x000AB8, "Member 'ABP_PlayerController_Script_C::MapToReturnTo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Exit_Used) == 0x000AC0, "Member 'ABP_PlayerController_Script_C::Exit_Used' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Total_Distance_Traveled) == 0x000AD0, "Member 'ABP_PlayerController_Script_C::Total_Distance_Traveled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Shots_Fired) == 0x000AD4, "Member 'ABP_PlayerController_Script_C::Shots_Fired' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Shots_Hit) == 0x000AD8, "Member 'ABP_PlayerController_Script_C::Shots_Hit' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Headshots_Scored) == 0x000ADC, "Member 'ABP_PlayerController_Script_C::Headshots_Scored' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Kills_Scored) == 0x000AE0, "Member 'ABP_PlayerController_Script_C::Kills_Scored' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Match_End_Processed) == 0x000AE4, "Member 'ABP_PlayerController_Script_C::Match_End_Processed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Cheat_UI) == 0x000AE8, "Member 'ABP_PlayerController_Script_C::Cheat_UI' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Is_Allowed_To_Cheat) == 0x000AF0, "Member 'ABP_PlayerController_Script_C::Is_Allowed_To_Cheat' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Infinite_Ammo) == 0x000AF1, "Member 'ABP_PlayerController_Script_C::Infinite_Ammo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Hide_HUD) == 0x000AF2, "Member 'ABP_PlayerController_Script_C::Hide_HUD' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleHealthDebug) == 0x000AF3, "Member 'ABP_PlayerController_Script_C::ToggleHealthDebug' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleShowPlayerLocation) == 0x000AF4, "Member 'ABP_PlayerController_Script_C::ToggleShowPlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleShowPlayersInSession) == 0x000AF5, "Member 'ABP_PlayerController_Script_C::ToggleShowPlayersInSession' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebug) == 0x000AF6, "Member 'ABP_PlayerController_Script_C::Toggle3dDebug' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleConsumableHud) == 0x000AF7, "Member 'ABP_PlayerController_Script_C::ToggleConsumableHud' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleMachineHud) == 0x000AF8, "Member 'ABP_PlayerController_Script_C::ToggleMachineHud' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugResourceItems) == 0x000AF9, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugResourceItems' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugObjectiveItems) == 0x000AFA, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugObjectiveItems' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugObjectiveSpawns) == 0x000AFB, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugObjectiveSpawns' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugSpawnedLoot) == 0x000AFC, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugSpawnedLoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugLootSpawns) == 0x000AFD, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugLootSpawns' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugPlayerStarts) == 0x000AFE, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugPlayerStarts' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugPlayer) == 0x000AFF, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugPlayer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Toggle3dDebugBlockingVolumes) == 0x000B00, "Member 'ABP_PlayerController_Script_C::Toggle3dDebugBlockingVolumes' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleHitInfo) == 0x000B01, "Member 'ABP_PlayerController_Script_C::ToggleHitInfo' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Infinite_Bullets) == 0x000B02, "Member 'ABP_PlayerController_Script_C::Infinite_Bullets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleShowTracedActorDisplayName) == 0x000B03, "Member 'ABP_PlayerController_Script_C::ToggleShowTracedActorDisplayName' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ConsumablePreviewMesh) == 0x000B08, "Member 'ABP_PlayerController_Script_C::ConsumablePreviewMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleShowPlayerCount) == 0x000B10, "Member 'ABP_PlayerController_Script_C::ToggleShowPlayerCount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleBulletImpactMaterial) == 0x000B11, "Member 'ABP_PlayerController_Script_C::ToggleBulletImpactMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, StoredMarkers) == 0x000B18, "Member 'ABP_PlayerController_Script_C::StoredMarkers' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ConsumableKillsScored) == 0x000B68, "Member 'ABP_PlayerController_Script_C::ConsumableKillsScored' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, KillsThreatScored) == 0x000B6C, "Member 'ABP_PlayerController_Script_C::KillsThreatScored' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Deaths) == 0x000B70, "Member 'ABP_PlayerController_Script_C::Deaths' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Run_Analytics) == 0x000B74, "Member 'ABP_PlayerController_Script_C::Run_Analytics' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Lootables_Accessed) == 0x000B78, "Member 'ABP_PlayerController_Script_C::Lootables_Accessed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Leaving_Match_Intentionally) == 0x000B7C, "Member 'ABP_PlayerController_Script_C::Leaving_Match_Intentionally' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Killer_Info) == 0x000B80, "Member 'ABP_PlayerController_Script_C::Killer_Info' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, TesterMarker) == 0x000BC0, "Member 'ABP_PlayerController_Script_C::TesterMarker' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, VoiceOverManagerClass) == 0x000BC8, "Member 'ABP_PlayerController_Script_C::VoiceOverManagerClass' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, VoiceOverManager) == 0x000BD0, "Member 'ABP_PlayerController_Script_C::VoiceOverManager' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Analytics_Running) == 0x000BD8, "Member 'ABP_PlayerController_Script_C::Analytics_Running' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Last_Respawn_Time) == 0x000BE0, "Member 'ABP_PlayerController_Script_C::Last_Respawn_Time' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Character_Before_Camera_Free_Look) == 0x000BE8, "Member 'ABP_PlayerController_Script_C::Character_Before_Camera_Free_Look' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Cheat_Previously_Visible_Widgets) == 0x000BF0, "Member 'ABP_PlayerController_Script_C::Cheat_Previously_Visible_Widgets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Waiting_For_Spawn) == 0x000C00, "Member 'ABP_PlayerController_Script_C::Waiting_For_Spawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, IodineInEffect) == 0x000C01, "Member 'ABP_PlayerController_Script_C::IodineInEffect' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Exit_Prevented_Radiation_Kill) == 0x000C02, "Member 'ABP_PlayerController_Script_C::Exit_Prevented_Radiation_Kill' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Last_Meaningful_Tracked_Position) == 0x000C04, "Member 'ABP_PlayerController_Script_C::Last_Meaningful_Tracked_Position' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Meaningful_Distance_Traveled) == 0x000C10, "Member 'ABP_PlayerController_Script_C::Meaningful_Distance_Traveled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Total_Meaningful_Distance_Traveled) == 0x000C14, "Member 'ABP_PlayerController_Script_C::Total_Meaningful_Distance_Traveled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Meaningful_Distance_Threshold) == 0x000C18, "Member 'ABP_PlayerController_Script_C::Meaningful_Distance_Threshold' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, ToggleCampingDetection) == 0x000C1C, "Member 'ABP_PlayerController_Script_C::ToggleCampingDetection' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, CheatMachineModeToggled) == 0x000C1D, "Member 'ABP_PlayerController_Script_C::CheatMachineModeToggled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, IconMap) == 0x000C20, "Member 'ABP_PlayerController_Script_C::IconMap' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, MapMarkerPresets) == 0x000C30, "Member 'ABP_PlayerController_Script_C::MapMarkerPresets' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, StatsLastRecordedPosition) == 0x000C80, "Member 'ABP_PlayerController_Script_C::StatsLastRecordedPosition' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, StatsDistanceTraveled) == 0x000C8C, "Member 'ABP_PlayerController_Script_C::StatsDistanceTraveled' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, TotalLootablesAmount) == 0x000C90, "Member 'ABP_PlayerController_Script_C::TotalLootablesAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, NonemptyLootablesAmount) == 0x000C94, "Member 'ABP_PlayerController_Script_C::NonemptyLootablesAmount' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, IsLootVisualizationOn) == 0x000C98, "Member 'ABP_PlayerController_Script_C::IsLootVisualizationOn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, UI_ItemTransferWidget) == 0x000CA0, "Member 'ABP_PlayerController_Script_C::UI_ItemTransferWidget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, EventSystem) == 0x000CA8, "Member 'ABP_PlayerController_Script_C::EventSystem' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, SpawnPointTag) == 0x000CB0, "Member 'ABP_PlayerController_Script_C::SpawnPointTag' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, HpHealed) == 0x000CB8, "Member 'ABP_PlayerController_Script_C::HpHealed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Match_ID_to_Save) == 0x000CC0, "Member 'ABP_PlayerController_Script_C::Match_ID_to_Save' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Last_Match_ID_Reset) == 0x000CD0, "Member 'ABP_PlayerController_Script_C::Last_Match_ID_Reset' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, DataRetrievalAttemptsMade) == 0x000CD4, "Member 'ABP_PlayerController_Script_C::DataRetrievalAttemptsMade' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, Blocklist) == 0x000CD8, "Member 'ABP_PlayerController_Script_C::Blocklist' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, BlocklistUpdated) == 0x000CE8, "Member 'ABP_PlayerController_Script_C::BlocklistUpdated' has a wrong offset!");
static_assert(offsetof(ABP_PlayerController_Script_C, BlocklistSize) == 0x000CF8, "Member 'ABP_PlayerController_Script_C::BlocklistSize' has a wrong offset!");

}

