#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_HumanAnimInstance

#include "Basic.hpp"

#include "S_JiggleSettings_structs.hpp"


namespace SDK::Params
{

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CassettesRotationChanged
// 0x0004 (0x0004 - 0x0000)
struct BPI_HumanAnimInstance_C_CassettesRotationChanged final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HumanAnimInstance_C_CassettesRotationChanged) == 0x000004, "Wrong alignment on BPI_HumanAnimInstance_C_CassettesRotationChanged");
static_assert(sizeof(BPI_HumanAnimInstance_C_CassettesRotationChanged) == 0x000004, "Wrong size on BPI_HumanAnimInstance_C_CassettesRotationChanged");
static_assert(offsetof(BPI_HumanAnimInstance_C_CassettesRotationChanged, Angle) == 0x000000, "Member 'BPI_HumanAnimInstance_C_CassettesRotationChanged::Angle' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetJiggleTypes
// 0x0058 (0x0058 - 0x0000)
struct BPI_HumanAnimInstance_C_SetJiggleTypes final
{
public:
	bool                                          bShouldSimJiggle;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_JiggleSettings                      Uniform;                                           // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      Backpack;                                          // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FS_JiggleSettings                      BottomHeadwear;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	bool                                          bSuccess;                                          // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetJiggleTypes) == 0x000008, "Wrong alignment on BPI_HumanAnimInstance_C_SetJiggleTypes");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetJiggleTypes) == 0x000058, "Wrong size on BPI_HumanAnimInstance_C_SetJiggleTypes");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetJiggleTypes, bShouldSimJiggle) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetJiggleTypes::bShouldSimJiggle' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetJiggleTypes, Uniform) == 0x000008, "Member 'BPI_HumanAnimInstance_C_SetJiggleTypes::Uniform' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetJiggleTypes, Backpack) == 0x000020, "Member 'BPI_HumanAnimInstance_C_SetJiggleTypes::Backpack' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetJiggleTypes, BottomHeadwear) == 0x000038, "Member 'BPI_HumanAnimInstance_C_SetJiggleTypes::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetJiggleTypes, bSuccess) == 0x000050, "Member 'BPI_HumanAnimInstance_C_SetJiggleTypes::bSuccess' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetPrimaryHolsterLock
// 0x0003 (0x0003 - 0x0000)
struct BPI_HumanAnimInstance_C_SetPrimaryHolsterLock final
{
public:
	bool                                          ShouldLock;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          bRightSide_;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetPrimaryHolsterLock) == 0x000001, "Wrong alignment on BPI_HumanAnimInstance_C_SetPrimaryHolsterLock");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetPrimaryHolsterLock) == 0x000003, "Wrong size on BPI_HumanAnimInstance_C_SetPrimaryHolsterLock");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetPrimaryHolsterLock, ShouldLock) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetPrimaryHolsterLock::ShouldLock' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetPrimaryHolsterLock, bRightSide_) == 0x000001, "Member 'BPI_HumanAnimInstance_C_SetPrimaryHolsterLock::bRightSide_' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetPrimaryHolsterLock, Success) == 0x000002, "Member 'BPI_HumanAnimInstance_C_SetPrimaryHolsterLock::Success' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetDisableLeftHandIK
// 0x0002 (0x0002 - 0x0000)
struct BPI_HumanAnimInstance_C_SetDisableLeftHandIK final
{
public:
	bool                                          ShouldDisable;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetDisableLeftHandIK) == 0x000001, "Wrong alignment on BPI_HumanAnimInstance_C_SetDisableLeftHandIK");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetDisableLeftHandIK) == 0x000002, "Wrong size on BPI_HumanAnimInstance_C_SetDisableLeftHandIK");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetDisableLeftHandIK, ShouldDisable) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetDisableLeftHandIK::ShouldDisable' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetDisableLeftHandIK, Success) == 0x000001, "Member 'BPI_HumanAnimInstance_C_SetDisableLeftHandIK::Success' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetDisabledAiming
// 0x0002 (0x0002 - 0x0000)
struct BPI_HumanAnimInstance_C_SetDisabledAiming final
{
public:
	bool                                          bDisabled;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetDisabledAiming) == 0x000001, "Wrong alignment on BPI_HumanAnimInstance_C_SetDisabledAiming");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetDisabledAiming) == 0x000002, "Wrong size on BPI_HumanAnimInstance_C_SetDisabledAiming");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetDisabledAiming, bDisabled) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetDisabledAiming::bDisabled' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetDisabledAiming, Success) == 0x000001, "Member 'BPI_HumanAnimInstance_C_SetDisabledAiming::Success' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetActiveHardStanceTransition
// 0x0002 (0x0002 - 0x0000)
struct BPI_HumanAnimInstance_C_SetActiveHardStanceTransition final
{
public:
	bool                                          bActive;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetActiveHardStanceTransition) == 0x000001, "Wrong alignment on BPI_HumanAnimInstance_C_SetActiveHardStanceTransition");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetActiveHardStanceTransition) == 0x000002, "Wrong size on BPI_HumanAnimInstance_C_SetActiveHardStanceTransition");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetActiveHardStanceTransition, bActive) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetActiveHardStanceTransition::bActive' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetActiveHardStanceTransition, Success) == 0x000001, "Member 'BPI_HumanAnimInstance_C_SetActiveHardStanceTransition::Success' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.SetShelterPreviewIdleAnim
// 0x0008 (0x0008 - 0x0000)
struct BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong alignment on BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim");
static_assert(sizeof(BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim) == 0x000008, "Wrong size on BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim");
static_assert(offsetof(BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim, Anim) == 0x000000, "Member 'BPI_HumanAnimInstance_C_SetShelterPreviewIdleAnim::Anim' has a wrong offset!");

// Function BPI_HumanAnimInstance.BPI_HumanAnimInstance_C.CheckForJiggle
// 0x0020 (0x0020 - 0x0000)
struct BPI_HumanAnimInstance_C_CheckForJiggle final
{
public:
	class USkeletalMeshComponent*                 UniformMesh;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BackpackMesh;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 BottomHeadwear;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Processed;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_HumanAnimInstance_C_CheckForJiggle) == 0x000008, "Wrong alignment on BPI_HumanAnimInstance_C_CheckForJiggle");
static_assert(sizeof(BPI_HumanAnimInstance_C_CheckForJiggle) == 0x000020, "Wrong size on BPI_HumanAnimInstance_C_CheckForJiggle");
static_assert(offsetof(BPI_HumanAnimInstance_C_CheckForJiggle, UniformMesh) == 0x000000, "Member 'BPI_HumanAnimInstance_C_CheckForJiggle::UniformMesh' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_CheckForJiggle, BackpackMesh) == 0x000008, "Member 'BPI_HumanAnimInstance_C_CheckForJiggle::BackpackMesh' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_CheckForJiggle, BottomHeadwear) == 0x000010, "Member 'BPI_HumanAnimInstance_C_CheckForJiggle::BottomHeadwear' has a wrong offset!");
static_assert(offsetof(BPI_HumanAnimInstance_C_CheckForJiggle, Processed) == 0x000018, "Member 'BPI_HumanAnimInstance_C_CheckForJiggle::Processed' has a wrong offset!");

}

