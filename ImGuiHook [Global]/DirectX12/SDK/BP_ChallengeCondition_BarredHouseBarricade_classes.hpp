#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeCondition_BarredHouseBarricade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_ChallengeCondition_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ChallengeCondition_BarredHouseBarricade.BP_ChallengeCondition_BarredHouseBarricade_C
// 0x0038 (0x03B8 - 0x0380)
class ABP_ChallengeCondition_BarredHouseBarricade_C final : public ABP_ChallengeCondition_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ChallengeCondition_BarredHouseBarricade_C; // 0x0380(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UClass*                                 Crate_Type;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Locked_Exits_To_Open;                              // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Crate_Name;                                        // 0x0398(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Any_Crate;                                         // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_ChallengeCondition_BarredHouseBarricade(int32 EntryPoint);
	void Destroy_Barricade();
	void ReceiveBeginPlay();
	void Get_Condition_Text(class FText* Condition_Text);
	void Get_Maximum_Progress(int32* Maximum_Progress);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ChallengeCondition_BarredHouseBarricade_C">();
	}
	static class ABP_ChallengeCondition_BarredHouseBarricade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ChallengeCondition_BarredHouseBarricade_C>();
	}
};
static_assert(alignof(ABP_ChallengeCondition_BarredHouseBarricade_C) == 0x000008, "Wrong alignment on ABP_ChallengeCondition_BarredHouseBarricade_C");
static_assert(sizeof(ABP_ChallengeCondition_BarredHouseBarricade_C) == 0x0003B8, "Wrong size on ABP_ChallengeCondition_BarredHouseBarricade_C");
static_assert(offsetof(ABP_ChallengeCondition_BarredHouseBarricade_C, UberGraphFrame_BP_ChallengeCondition_BarredHouseBarricade_C) == 0x000380, "Member 'ABP_ChallengeCondition_BarredHouseBarricade_C::UberGraphFrame_BP_ChallengeCondition_BarredHouseBarricade_C' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_BarredHouseBarricade_C, Crate_Type) == 0x000388, "Member 'ABP_ChallengeCondition_BarredHouseBarricade_C::Crate_Type' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_BarredHouseBarricade_C, Locked_Exits_To_Open) == 0x000390, "Member 'ABP_ChallengeCondition_BarredHouseBarricade_C::Locked_Exits_To_Open' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_BarredHouseBarricade_C, Crate_Name) == 0x000398, "Member 'ABP_ChallengeCondition_BarredHouseBarricade_C::Crate_Name' has a wrong offset!");
static_assert(offsetof(ABP_ChallengeCondition_BarredHouseBarricade_C, Any_Crate) == 0x0003B0, "Member 'ABP_ChallengeCondition_BarredHouseBarricade_C::Any_Crate' has a wrong offset!");

}

