#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TitlesManager

#include "Basic.hpp"

#include "BP_TitlesManager_classes.hpp"
#include "BP_TitlesManager_parameters.hpp"


namespace SDK
{

// Function BP_TitlesManager.BP_TitlesManager_C.Finished Loading Classes__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::Finished_Loading_Classes__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Finished Loading Classes__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Title Pool Ready__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::Title_Pool_Ready__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Title Pool Ready__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.ExecuteUbergraph_BP_TitlesManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::ExecuteUbergraph_BP_TitlesManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "ExecuteUbergraph_BP_TitlesManager");

	Params::BP_TitlesManager_C_ExecuteUbergraph_BP_TitlesManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.UpdateOwnedTitlesNotification
// (BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::UpdateOwnedTitlesNotification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "UpdateOwnedTitlesNotification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnImprovementUpgradeFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UShelterCraftingList*             ParentShelter                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSubclassOf<class AShelterImprovement>  FinishedImprovementClass                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FCloudImprovementInfo            AdditionalInfo                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_TitlesManager_C::OnImprovementUpgradeFinished(const class UShelterCraftingList* ParentShelter, TSubclassOf<class AShelterImprovement> FinishedImprovementClass, const struct FCloudImprovementInfo& AdditionalInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnImprovementUpgradeFinished");

	Params::BP_TitlesManager_C_OnImprovementUpgradeFinished Parms{};

	Parms.ParentShelter = ParentShelter;
	Parms.FinishedImprovementClass = FinishedImprovementClass;
	Parms.AdditionalInfo = std::move(AdditionalInfo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnClaimBattlePassRewardsFinished
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCloudRequestResult              RequestResult                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FCloudBattlePassRewardsClaim     Data                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_TitlesManager_C::OnClaimBattlePassRewardsFinished(const struct FCloudRequestResult& RequestResult, const struct FCloudBattlePassRewardsClaim& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnClaimBattlePassRewardsFinished");

	Params::BP_TitlesManager_C_OnClaimBattlePassRewardsFinished Parms{};

	Parms.RequestResult = std::move(RequestResult);
	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "ReceiveEndPlay");

	Params::BP_TitlesManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "ReceiveTick");

	Params::BP_TitlesManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Create Title Objects
// (BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::Create_Title_Objects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Create Title Objects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_TitlesManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnSaveSucceed_11D6EB484BEAB541DF45789686DEF195
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::OnSaveSucceed_11D6EB484BEAB541DF45789686DEF195(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnSaveSucceed_11D6EB484BEAB541DF45789686DEF195");

	Params::BP_TitlesManager_C_OnSaveSucceed_11D6EB484BEAB541DF45789686DEF195 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnSaveFailed_11D6EB484BEAB541DF45789686DEF195
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   UserIndex                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::OnSaveFailed_11D6EB484BEAB541DF45789686DEF195(const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnSaveFailed_11D6EB484BEAB541DF45789686DEF195");

	Params::BP_TitlesManager_C_OnSaveFailed_11D6EB484BEAB541DF45789686DEF195 Parms{};

	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnLoadSucceed_C219B3C74773CC67852B9A9D7888BED7
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::OnLoadSucceed_C219B3C74773CC67852B9A9D7888BED7(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnLoadSucceed_C219B3C74773CC67852B9A9D7888BED7");

	Params::BP_TitlesManager_C_OnLoadSucceed_C219B3C74773CC67852B9A9D7888BED7 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnLoadFailed_C219B3C74773CC67852B9A9D7888BED7
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USaveGame*                        SaveGame                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::OnLoadFailed_C219B3C74773CC67852B9A9D7888BED7(class USaveGame* SaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnLoadFailed_C219B3C74773CC67852B9A9D7888BED7");

	Params::BP_TitlesManager_C_OnLoadFailed_C219B3C74773CC67852B9A9D7888BED7 Parms{};

	Parms.SaveGame = SaveGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.OnLoaded_B08996E843B69641864BC48B95DB3098
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_TitlesManager_C::OnLoaded_B08996E843B69641864BC48B95DB3098(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "OnLoaded_B08996E843B69641864BC48B95DB3098");

	Params::BP_TitlesManager_C_OnLoaded_B08996E843B69641864BC48B95DB3098 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Is Title Row Setup Correctly for Use
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FF_TitleList                     Title_Info                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    Correct                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitlesManager_C::Is_Title_Row_Setup_Correctly_for_Use(struct FF_TitleList& Title_Info, bool* Correct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Is Title Row Setup Correctly for Use");

	Params::BP_TitlesManager_C_Is_Title_Row_Setup_Correctly_for_Use Parms{};

	Parms.Title_Info = std::move(Title_Info);

	UObject::ProcessEvent(Func, &Parms);

	Title_Info = std::move(Parms.Title_Info);

	if (Correct != nullptr)
		*Correct = Parms.Correct;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Is Title Pool Ready
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Title_Pool_Loaded                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitlesManager_C::Is_Title_Pool_Ready(bool* Title_Pool_Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Is Title Pool Ready");

	Params::BP_TitlesManager_C_Is_Title_Pool_Ready Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Title_Pool_Loaded != nullptr)
		*Title_Pool_Loaded = Parms.Title_Pool_Loaded;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Check Title Object Readiness
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::Check_Title_Object_Readiness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Check Title Object Readiness");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Row Name from Title ID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Title_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Row_Name                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::Get_Row_Name_from_Title_ID(int32 Title_ID, class FName* Row_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Row Name from Title ID");

	Params::BP_TitlesManager_C_Get_Row_Name_from_Title_ID Parms{};

	Parms.Title_ID = Title_ID;

	UObject::ProcessEvent(Func, &Parms);

	if (Row_Name != nullptr)
		*Row_Name = Parms.Row_Name;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Title ID from Row Name
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Row_Name                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Title_ID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::Get_Title_ID_from_Row_Name(class FName Row_Name, int32* Title_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Title ID from Row Name");

	Params::BP_TitlesManager_C_Get_Title_ID_from_Row_Name Parms{};

	Parms.Row_Name = Row_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Title_ID != nullptr)
		*Title_ID = Parms.Title_ID;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Titles Manager Status Log
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Log                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ABP_TitlesManager_C::Get_Titles_Manager_Status_Log(class FString* Log)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Titles Manager Status Log");

	Params::BP_TitlesManager_C_Get_Titles_Manager_Status_Log Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Log != nullptr)
		*Log = std::move(Parms.Log);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Titles in Pool
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, int32>                Owned_Titles                                           (Parm, OutParm)
// TArray<class FName>                     Not_Owned_Titles                                       (Parm, OutParm)
// TMap<class FName, int32>                Selected_Titles                                        (Parm, OutParm)

void ABP_TitlesManager_C::Get_Titles_in_Pool(TMap<class FName, int32>* Owned_Titles, TArray<class FName>* Not_Owned_Titles, TMap<class FName, int32>* Selected_Titles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Titles in Pool");

	Params::BP_TitlesManager_C_Get_Titles_in_Pool Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Owned_Titles != nullptr)
		*Owned_Titles = std::move(Parms.Owned_Titles);

	if (Not_Owned_Titles != nullptr)
		*Not_Owned_Titles = std::move(Parms.Not_Owned_Titles);

	if (Selected_Titles != nullptr)
		*Selected_Titles = std::move(Parms.Selected_Titles);
}


// Function BP_TitlesManager.BP_TitlesManager_C.Set Title to Slot
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Title_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   RankIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitlesManager_C::Set_Title_to_Slot(class FName Title_Name, int32 RankIndex, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Set Title to Slot");

	Params::BP_TitlesManager_C_Set_Title_to_Slot Parms{};

	Parms.Title_Name = Title_Name;
	Parms.RankIndex = RankIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Title Info from Row Name
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Row_Name                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FF_TitleList                     Title_Info                                             (Parm, OutParm, HasGetValueTypeHash)
// bool                                    Valid_Output                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitlesManager_C::Get_Title_Info_from_Row_Name(class FName Row_Name, struct FF_TitleList* Title_Info, bool* Valid_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Title Info from Row Name");

	Params::BP_TitlesManager_C_Get_Title_Info_from_Row_Name Parms{};

	Parms.Row_Name = Row_Name;

	UObject::ProcessEvent(Func, &Parms);

	if (Title_Info != nullptr)
		*Title_Info = std::move(Parms.Title_Info);

	if (Valid_Output != nullptr)
		*Valid_Output = Parms.Valid_Output;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Get Title Item for Title Rank
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Title_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Title_Rank                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Item                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Valid_Output                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_TitlesManager_C::Get_Title_Item_for_Title_Rank(class FName Title_Name, int32 Title_Rank, class UClass** Item, bool* Valid_Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Get Title Item for Title Rank");

	Params::BP_TitlesManager_C_Get_Title_Item_for_Title_Rank Parms{};

	Parms.Title_Name = Title_Name;
	Parms.Title_Rank = Title_Rank;

	UObject::ProcessEvent(Func, &Parms);

	if (Item != nullptr)
		*Item = Parms.Item;

	if (Valid_Output != nullptr)
		*Valid_Output = Parms.Valid_Output;
}


// Function BP_TitlesManager.BP_TitlesManager_C.Refresh Current Titles
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_TitlesManager_C::Refresh_Current_Titles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_TitlesManager_C", "Refresh Current Titles");

	UObject::ProcessEvent(Func, nullptr);
}

}

