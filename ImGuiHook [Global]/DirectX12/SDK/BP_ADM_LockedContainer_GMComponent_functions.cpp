#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ADM_LockedContainer_GMComponent

#include "Basic.hpp"

#include "BP_ADM_LockedContainer_GMComponent_classes.hpp"
#include "BP_ADM_LockedContainer_GMComponent_parameters.hpp"


namespace SDK
{

// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.ExecuteUbergraph_BP_ADM_LockedContainer_GMComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::ExecuteUbergraph_BP_ADM_LockedContainer_GMComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "ExecuteUbergraph_BP_ADM_LockedContainer_GMComponent");

	Params::BP_ADM_LockedContainer_GMComponent_C_ExecuteUbergraph_BP_ADM_LockedContainer_GMComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Match Has Started
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Match_Has_Started()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Match Has Started");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Enable interaction on convoy
// (Net, NetReliable, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ADM_LockedContainer_GMComponent_C::Enable_interaction_on_convoy(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Enable interaction on convoy");

	Params::BP_ADM_LockedContainer_GMComponent_C_Enable_interaction_on_convoy Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Try to open vault
// (BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Try_to_open_vault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Try to open vault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Start spawning loot manager
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Start_spawning_loot_manager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Start spawning loot manager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Verify that everything spawned properly
// (BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Verify_that_everything_spawned_properly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Verify that everything spawned properly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Start spawning convoy
// (BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Start_spawning_convoy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Start spawning convoy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Start spawning locks
// (BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Start_spawning_locks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Start spawning locks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Player solved the combination
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_CombinationLock_PCComponent_C*Player_that_opened_lock                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_CombinationLock_Component_C*  Unlocked_Combination_lock                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Player_solved_the_combination(class UBP_CombinationLock_PCComponent_C* Player_that_opened_lock, class UBP_CombinationLock_Component_C* Unlocked_Combination_lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Player solved the combination");

	Params::BP_ADM_LockedContainer_GMComponent_C_Player_solved_the_combination Parms{};

	Parms.Player_that_opened_lock = Player_that_opened_lock;
	Parms.Unlocked_Combination_lock = Unlocked_Combination_lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Destroy loot manager
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ADM_LockedContainer_GMComponent_C::Destroy_loot_manager(bool Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Destroy loot manager");

	Params::BP_ADM_LockedContainer_GMComponent_C_Destroy_loot_manager Parms{};

	Parms.Result = Result;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Character interacted with convoy
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Character_Script_C*           Character_that_interacted                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Character_interacted_with_convoy(class ABP_Character_Script_C* Character_that_interacted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Character interacted with convoy");

	Params::BP_ADM_LockedContainer_GMComponent_C_Character_interacted_with_convoy Parms{};

	Parms.Character_that_interacted = Character_that_interacted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Erase Player Markers
// (BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Erase_Player_Markers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Erase Player Markers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Mark Container Alarm On Map
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Shooting_character                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Mark_Container_Alarm_On_Map(class APawn* Shooting_character, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Mark Container Alarm On Map");

	Params::BP_ADM_LockedContainer_GMComponent_C_Mark_Container_Alarm_On_Map Parms{};

	Parms.Shooting_character = Shooting_character;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Player shot the lock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Shooting_character                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ADM_LockedContainer_Lock_C*   Shooted_lock                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Player_shot_the_lock(class APawn* Shooting_character, class ABP_ADM_LockedContainer_Lock_C* Shooted_lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Player shot the lock");

	Params::BP_ADM_LockedContainer_GMComponent_C_Player_shot_the_lock Parms{};

	Parms.Shooting_character = Shooting_character;
	Parms.Shooted_lock = Shooted_lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Player interacted with lock
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            Interacting_Character                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_ADM_LockedContainer_Lock_C*   Interacted_lock                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Player_interacted_with_lock(class APawn* Interacting_Character, class ABP_ADM_LockedContainer_Lock_C* Interacted_lock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Player interacted with lock");

	Params::BP_ADM_LockedContainer_GMComponent_C_Player_interacted_with_lock Parms{};

	Parms.Interacting_Character = Interacting_Character;
	Parms.Interacted_lock = Interacted_lock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Initialize Component
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Initialize_Component()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Initialize Component");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Debug unlock convoy
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Debug_unlock_convoy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Debug unlock convoy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Debug Spawn all Convoys
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Debug_Spawn_all_Convoys()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Debug Spawn all Convoys");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Spawn Container
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ADM_LockedContainer_GMComponent_C::Spawn_Container(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Spawn Container");

	Params::BP_ADM_LockedContainer_GMComponent_C_Spawn_Container Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Spawn Lock
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Lcok_Class                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// int32                                   Ammount_of_digits_in_lock_0                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Spawn_Lock(class UClass* Lcok_Class, const struct FTransform& SpawnTransform, int32 Ammount_of_digits_in_lock_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Spawn Lock");

	Params::BP_ADM_LockedContainer_GMComponent_C_Spawn_Lock Parms{};

	Parms.Lcok_Class = Lcok_Class;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Ammount_of_digits_in_lock_0 = Ammount_of_digits_in_lock_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Spawn Loot manager
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ADM_LockedContainer_LootManager_C*Loot_manager                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Spawn_Loot_manager(class ABP_ADM_LockedContainer_LootManager_C** Loot_manager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Spawn Loot manager");

	Params::BP_ADM_LockedContainer_GMComponent_C_Spawn_Loot_manager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Loot_manager != nullptr)
		*Loot_manager = Parms.Loot_manager;
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Check status of all locks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    All_locks_down                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    RightLockOpened                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    LeftLockOpened                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    TopLockOpened                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ADM_LockedContainer_GMComponent_C::Check_status_of_all_locks(bool* All_locks_down, bool* RightLockOpened, bool* LeftLockOpened, bool* TopLockOpened)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Check status of all locks");

	Params::BP_ADM_LockedContainer_GMComponent_C_Check_status_of_all_locks Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (All_locks_down != nullptr)
		*All_locks_down = Parms.All_locks_down;

	if (RightLockOpened != nullptr)
		*RightLockOpened = Parms.RightLockOpened;

	if (LeftLockOpened != nullptr)
		*LeftLockOpened = Parms.LeftLockOpened;

	if (TopLockOpened != nullptr)
		*TopLockOpened = Parms.TopLockOpened;
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Unlock convoy
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Unlock_convoy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Unlock convoy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Deactivate lock
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ADM_LockedContainer_Lock_C*   Lock_to_deactivate                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Lock_deactivated                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ADM_LockedContainer_GMComponent_C::Deactivate_lock(class ABP_ADM_LockedContainer_Lock_C* Lock_to_deactivate, bool* Lock_deactivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Deactivate lock");

	Params::BP_ADM_LockedContainer_GMComponent_C_Deactivate_lock Parms{};

	Parms.Lock_to_deactivate = Lock_to_deactivate;

	UObject::ProcessEvent(Func, &Parms);

	if (Lock_deactivated != nullptr)
		*Lock_deactivated = Parms.Lock_deactivated;
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Randomly select available convoy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Randomly_selected_available_convoy                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ADM_LockedContainer_GMComponent_C::Randomly_select_available_convoy(class UClass** Randomly_selected_available_convoy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Randomly select available convoy");

	Params::BP_ADM_LockedContainer_GMComponent_C_Randomly_select_available_convoy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Randomly_selected_available_convoy != nullptr)
		*Randomly_selected_available_convoy = Parms.Randomly_selected_available_convoy;
}


// Function BP_ADM_LockedContainer_GMComponent.BP_ADM_LockedContainer_GMComponent_C.Start bombardment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ADM_LockedContainer_GMComponent_C::Start_bombardment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ADM_LockedContainer_GMComponent_C", "Start bombardment");

	UObject::ProcessEvent(Func, nullptr);
}

}

