#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_SRChallenge_Slot

#include "Basic.hpp"

#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "E_ShootingChallengeResult_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UI_SRChallenge_Slot.UI_SRChallenge_Slot_C
// 0x0040 (0x02F8 - 0x02B8)
class UUI_SRChallenge_Slot_C final : public UFlameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Image_Rank;                                        // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_RankShadow;                                  // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotBackground;                                    // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFlameButton*                           SlotButton;                                        // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotFocus;                                         // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SlotIcon;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         Name_0;                                            // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_ShootingChallengeResult                     Rank;                                              // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UI_SRChallenge_Slot(int32 EntryPoint);
	void BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_3_OnButtonHoverEvent__DelegateSignature(class UButton* Sender);
	void BndEvt__UI_SRChallenge_Slot_SlotButton_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature(class UButton* Sender);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__SlotButton_K2Node_ComponentBoundEvent_1_OnButtonFocusEvent__DelegateSignature(class UButton* Sender);
	void FillRank(E_ShootingChallengeResult Rank_0);
	void FillName(int32 Name_0);
	void ShowFocus(bool Show);
	void SlotEnabled(bool Enabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_SRChallenge_Slot_C">();
	}
	static class UUI_SRChallenge_Slot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_SRChallenge_Slot_C>();
	}
};
static_assert(alignof(UUI_SRChallenge_Slot_C) == 0x000008, "Wrong alignment on UUI_SRChallenge_Slot_C");
static_assert(sizeof(UUI_SRChallenge_Slot_C) == 0x0002F8, "Wrong size on UUI_SRChallenge_Slot_C");
static_assert(offsetof(UUI_SRChallenge_Slot_C, UberGraphFrame) == 0x0002B8, "Member 'UUI_SRChallenge_Slot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, Image_Rank) == 0x0002C0, "Member 'UUI_SRChallenge_Slot_C::Image_Rank' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, Image_RankShadow) == 0x0002C8, "Member 'UUI_SRChallenge_Slot_C::Image_RankShadow' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, SlotBackground) == 0x0002D0, "Member 'UUI_SRChallenge_Slot_C::SlotBackground' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, SlotButton) == 0x0002D8, "Member 'UUI_SRChallenge_Slot_C::SlotButton' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, SlotFocus) == 0x0002E0, "Member 'UUI_SRChallenge_Slot_C::SlotFocus' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, SlotIcon) == 0x0002E8, "Member 'UUI_SRChallenge_Slot_C::SlotIcon' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, Name_0) == 0x0002F0, "Member 'UUI_SRChallenge_Slot_C::Name_0' has a wrong offset!");
static_assert(offsetof(UUI_SRChallenge_Slot_C, Rank) == 0x0002F4, "Member 'UUI_SRChallenge_Slot_C::Rank' has a wrong offset!");

}

