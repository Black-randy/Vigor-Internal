#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ChallengeSlot

#include "Basic.hpp"

#include "BP_ChallengeSlot_classes.hpp"
#include "BP_ChallengeSlot_parameters.hpp"


namespace SDK
{

// Function BP_ChallengeSlot.BP_ChallengeSlot_C.State Has Changed__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::State_Has_Changed__DelegateSignature(class ABP_ChallengeSlot_C* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "State Has Changed__DelegateSignature");

	Params::BP_ChallengeSlot_C_State_Has_Changed__DelegateSignature Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Initialization Is Complete__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Initialization_Is_Complete__DelegateSignature(class ABP_ChallengeSlot_C* Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Initialization Is Complete__DelegateSignature");

	Params::BP_ChallengeSlot_C_Initialization_Is_Complete__DelegateSignature Parms{};

	Parms.Slot = Slot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Rewards Claim Reply__DelegateSignature
// (Public, Delegate, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FCloudItemInfo>           Rewards                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeSlot_C::Rewards_Claim_Reply__DelegateSignature(bool Success, TArray<struct FCloudItemInfo>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Rewards Claim Reply__DelegateSignature");

	Params::BP_ChallengeSlot_C_Rewards_Claim_Reply__DelegateSignature Parms{};

	Parms.Success = Success;
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Challenge Cancellation Reply__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_ChallengeSlot_C::Challenge_Cancellation_Reply__DelegateSignature(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Challenge Cancellation Reply__DelegateSignature");

	Params::BP_ChallengeSlot_C_Challenge_Cancellation_Reply__DelegateSignature Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Challenge Progress Updated__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_ChallengeSlot_C*              Slot                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   New_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Challenge_Progress_Updated__DelegateSignature(class ABP_ChallengeSlot_C* Slot, int32 New_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Challenge Progress Updated__DelegateSignature");

	Params::BP_ChallengeSlot_C_Challenge_Progress_Updated__DelegateSignature Parms{};

	Parms.Slot = Slot;
	Parms.New_Progress = New_Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ExecuteUbergraph_BP_ChallengeSlot
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::ExecuteUbergraph_BP_ChallengeSlot(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "ExecuteUbergraph_BP_ChallengeSlot");

	Params::BP_ChallengeSlot_C_ExecuteUbergraph_BP_ChallengeSlot Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "ReceiveEndPlay");

	Params::BP_ChallengeSlot_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Initialize Slot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SlotId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SlotCategory_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FName                             Challenge_Name_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        Timestamp_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDateTime                        Time_Completed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReRollPrice_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Initialize_Slot(int32 SlotId, const class FString& SlotCategory_0, class FName Challenge_Name_0, const struct FDateTime& Timestamp_0, const struct FDateTime& Time_Completed, int32 Progress, int32 ReRollPrice_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Initialize Slot");

	Params::BP_ChallengeSlot_C_Initialize_Slot Parms{};

	Parms.SlotId = SlotId;
	Parms.SlotCategory_0 = std::move(SlotCategory_0);
	Parms.Challenge_Name_0 = Challenge_Name_0;
	Parms.Timestamp_0 = std::move(Timestamp_0);
	Parms.Time_Completed = std::move(Time_Completed);
	Parms.Progress = Progress;
	Parms.ReRollPrice_0 = ReRollPrice_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.OnLoaded_303A9E7341428F48F05BE78A27BD16A5
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::OnLoaded_303A9E7341428F48F05BE78A27BD16A5(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "OnLoaded_303A9E7341428F48F05BE78A27BD16A5");

	Params::BP_ChallengeSlot_C_OnLoaded_303A9E7341428F48F05BE78A27BD16A5 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.OnLoaded_B08996E843B69641864BC48BCA5FB88E
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UObject>              Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::OnLoaded_B08996E843B69641864BC48BCA5FB88E(TSubclassOf<class UObject> Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "OnLoaded_B08996E843B69641864BC48BCA5FB88E");

	Params::BP_ChallengeSlot_C_OnLoaded_B08996E843B69641864BC48BCA5FB88E Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Slot ID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Slot_ID_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Slot_ID(int32* Slot_ID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Slot ID");

	Params::BP_ChallengeSlot_C_Get_Slot_ID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Slot_ID_0 != nullptr)
		*Slot_ID_0 = Parms.Slot_ID_0;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Slot State
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ChallengeSlotState                    Slot_State                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Slot_State(E_ChallengeSlotState* Slot_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Slot State");

	Params::BP_ChallengeSlot_C_Get_Slot_State Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Slot_State != nullptr)
		*Slot_State = Parms.Slot_State;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Category
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EChallengeCategory                      Category                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Challenge_Category(EChallengeCategory* Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Challenge Category");

	Params::BP_ChallengeSlot_C_Get_Challenge_Category Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Category != nullptr)
		*Category = Parms.Category;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Current Progress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Current_Progress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Current_Progress(int32* Current_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Current Progress");

	Params::BP_ChallengeSlot_C_Get_Current_Progress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Current_Progress != nullptr)
		*Current_Progress = Parms.Current_Progress;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Maximum Progress
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Maximum_Progress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Maximum_Progress(int32* Maximum_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Maximum Progress");

	Params::BP_ChallengeSlot_C_Get_Maximum_Progress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Maximum_Progress != nullptr)
		*Maximum_Progress = Parms.Maximum_Progress;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Title Text
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Title_Text                                             (Parm, OutParm)

void ABP_ChallengeSlot_C::Get_Title_Text(class FText* Title_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Title Text");

	Params::BP_ChallengeSlot_C_Get_Title_Text Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Title_Text != nullptr)
		*Title_Text = std::move(Parms.Title_Text);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Condition Text
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Condition_Text                                         (Parm, OutParm)

void ABP_ChallengeSlot_C::Get_Condition_Text(class FText* Condition_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Condition Text");

	Params::BP_ChallengeSlot_C_Get_Condition_Text Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Condition_Text != nullptr)
		*Condition_Text = std::move(Parms.Condition_Text);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Description Text
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Description_Text                                       (Parm, OutParm)

void ABP_ChallengeSlot_C::Get_Description_Text(class FText* Description_Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Description Text");

	Params::BP_ChallengeSlot_C_Get_Description_Text Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Description_Text != nullptr)
		*Description_Text = std::move(Parms.Description_Text);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Rewards List
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FChallengeReward>         Rewards                                                (Parm, OutParm)

void ABP_ChallengeSlot_C::Get_Rewards_List(TArray<struct FChallengeReward>* Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Rewards List");

	Params::BP_ChallengeSlot_C_Get_Rewards_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rewards != nullptr)
		*Rewards = std::move(Parms.Rewards);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Request Rewards Claim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeSlot_C::Request_Rewards_Claim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Request Rewards Claim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Request Challenge Cancellation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeSlot_C::Request_Challenge_Cancellation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Request Challenge Cancellation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Claim Rewards
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FDateTime                        Timestamp_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FChallengeReward>         Rewards                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_ChallengeSlot_C::Claim_Rewards(bool Success, const struct FDateTime& Timestamp_0, TArray<struct FChallengeReward>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Claim Rewards");

	Params::BP_ChallengeSlot_C_Claim_Rewards Parms{};

	Parms.Success = Success;
	Parms.Timestamp_0 = std::move(Timestamp_0);
	Parms.Rewards = std::move(Rewards);

	UObject::ProcessEvent(Func, &Parms);

	Rewards = std::move(Parms.Rewards);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Cancel Challenge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FDateTime                        Timestamp_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Cancel_Challenge(bool Success, const struct FDateTime& Timestamp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Cancel Challenge");

	Params::BP_ChallengeSlot_C_Cancel_Challenge Parms{};

	Parms.Success = Success;
	Parms.Timestamp_0 = std::move(Timestamp_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Timestamp
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FDateTime                        Timestamp_0                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Timestamp(struct FDateTime* Timestamp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Timestamp");

	Params::BP_ChallengeSlot_C_Get_Timestamp Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Timestamp_0 != nullptr)
		*Timestamp_0 = std::move(Parms.Timestamp_0);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Update Progress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// int32                                   New_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Update_Progress(bool Success, int32 New_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Update Progress");

	Params::BP_ChallengeSlot_C_Update_Progress Parms{};

	Parms.Success = Success;
	Parms.New_Progress = New_Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Name
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Challenge_Name_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Challenge_Name(class FName* Challenge_Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Challenge Name");

	Params::BP_ChallengeSlot_C_Get_Challenge_Name Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Name_0 != nullptr)
		*Challenge_Name_0 = Parms.Challenge_Name_0;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Condition Progress Updated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   New_Progress                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Condition_Progress_Updated(int32 New_Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Condition Progress Updated");

	Params::BP_ChallengeSlot_C_Condition_Progress_Updated Parms{};

	Parms.New_Progress = New_Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Assign Slot ID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Slot_ID_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Assign_Slot_ID(int32 Slot_ID_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Assign Slot ID");

	Params::BP_ChallengeSlot_C_Assign_Slot_ID Parms{};

	Parms.Slot_ID_0 = Slot_ID_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Print Status
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeSlot_C::Print_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Print Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Condition Type
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Challenge_Name_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Challenge_Condition_Type(class UClass** Challenge_Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Challenge Condition Type");

	Params::BP_ChallengeSlot_C_Get_Challenge_Condition_Type Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Name_0 != nullptr)
		*Challenge_Name_0 = Parms.Challenge_Name_0;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Settings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FChallengeList                   Challenge_Settings_0                                   (Parm, OutParm)

void ABP_ChallengeSlot_C::Get_Challenge_Settings(struct FChallengeList* Challenge_Settings_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Challenge Settings");

	Params::BP_ChallengeSlot_C_Get_Challenge_Settings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Challenge_Settings_0 != nullptr)
		*Challenge_Settings_0 = std::move(Parms.Challenge_Settings_0);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.Get Challenge Voice Line
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USoundWave*                       Voice_Line_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::Get_Challenge_Voice_Line(class USoundWave** Voice_Line_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "Get Challenge Voice Line");

	Params::BP_ChallengeSlot_C_Get_Challenge_Voice_Line Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Voice_Line_0 != nullptr)
		*Voice_Line_0 = Parms.Voice_Line_0;
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.ResetAfterRerollFailed
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ChallengeSlot_C::ResetAfterRerollFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "ResetAfterRerollFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ChallengeSlot.BP_ChallengeSlot_C.GetRelativeProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   RelativeProgress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ChallengeSlot_C::GetRelativeProgress(float* RelativeProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ChallengeSlot_C", "GetRelativeProgress");

	Params::BP_ChallengeSlot_C_GetRelativeProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RelativeProgress != nullptr)
		*RelativeProgress = Parms.RelativeProgress;
}

}

