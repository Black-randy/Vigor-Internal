#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlacableTrap_Base

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Flame_classes.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlacableTrap_Base.BP_PlacableTrap_Base_C
// 0x02D8 (0x06F0 - 0x0418)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_PlacableTrap_Base_C : public AConsumableItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0418(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ConsumableBasis_C*                  BP_ConsumableBasis;                                // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CommonConsumableHUD_C*              BP_CommonConsumableHUD;                            // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      OwningPlayerController;                            // 0x0438(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Hologram_PlacementTransform;                       // 0x0440(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 Trap_Class_Object;                                 // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_PlacableTrap_Hologram_Base_C*       Hologram_Actor;                                    // 0x0478(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Trap_IsInHand;                                     // 0x0480(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_481[0x3];                                      // 0x0481(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Trap_HealthPoints;                                 // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Range_Trigger;                                // 0x0488(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_AutoSelfDestroy;                        // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_Despawn;                                // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Timer_Activation;                             // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Placement_MinRange;                           // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Placement_MaxRange;                           // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_Placement_MaxHeight;                          // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Trap_MaxZAxisNormal;                               // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftClassPtr<class UClass>>           Trap_Placement_InvalidActors;                      // 0x04A8(0x0010)(Edit, BlueprintVisible)
	TArray<EPhysicalSurface>                      Trap_Placement_InvalidSurfaces;                    // 0x04B8(0x0010)(Edit, BlueprintVisible)
	bool                                          Trap_Placement_InWater;                            // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Trap_Placement_ValidLocation;                      // 0x04C9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Tool_Placement_Debug;                              // 0x04CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CB[0x5];                                      // 0x04CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Trap_Class_Hologram;                               // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ToolIcon;                                          // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Placed;                                  // 0x04E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Active;                                  // 0x0508(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Triggered;                               // 0x0530(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             Trap_Mesh_Broken;                                  // 0x0558(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Placement;                              // 0x0580(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_TrapActivated;                          // 0x05A8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_TrapTriggered;                          // 0x05D0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Break;                                  // 0x05F8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Hologram_DisplayRangeDecal;                        // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             Hologram_Mesh;                                     // 0x0628(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UMaterialInterface*                     Hologram_Material_InvalidPlacement;                // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Hologram_Material_ValidPlacement;                  // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Despawn;                                // 0x0660(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Trap_Placement_Vertical;                           // 0x0688(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USoundBase>              Trap_Sound_Ambient;                                // 0x0690(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UAnimSequence>           CustomGripAnimPose;                                // 0x06B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Trap_Placement_RotateToNormal;                     // 0x06E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_PlacableTrap_Base(int32 EntryPoint);
	void ReceiveDestroyed();
	void OnUngotFromHandsImplementable(class AHumanCharacter* ParentCharacter);
	void OnGotIntoHandsImplementable(class AHumanCharacter* ParentCharacter);
	void Trap_Set_Variables(class ABP_PlacableTrap_Object_Base_C* PlacedTrap);
	void ReplicateTrapCanBePlaced(bool TrapCanBePlaced);
	void ReceiveTick(float DeltaSeconds);
	void Trap_Hologram_Move();
	void HideHologram();
	void ShowHologram();
	void Trap_Object_Spawn(class APlayerController* PlayerController);
	void BndEvt__Usable_K2Node_ComponentBoundEvent_0_Used__DelegateSignature(class AItem* Item, class AHumanCharacter* ItemOwner, class AActor* TargetActor);
	void PlayUsageAnimation();
	void Trap_Placement_CanBePlaced(const struct FHitResult& Hit, float MaxZNormal, TArray<TSoftClassPtr<class UClass>>& ActorsThatBlocksThePlacement, TArray<EPhysicalSurface>& SurfacesThatBlocksThePlacement, bool Trap_CanBePlacedInWater, bool Trap_CanBePlacedVertically, bool* CanBePlaced);
	void ChangeHologramVisuals(class ABP_PlacableTrap_Hologram_Base_C* Target, bool CanBePlaced);
	struct FHitResult Trap_Placement_Calculate(bool* WasHit);
	void Trap_Hologram_SetAndReplicateTransform(const struct FHitResult& Hit);
	void Trap_Placement_Debug(const struct FHitResult& Hit, bool CanBePlaced);
	void Trap_Hologram_ReplicateAndChangeVisuals(bool CanBePlaced, const struct FHitResult& Hit);
	void Trap_Hologram_Show();
	void Trap_Hologram_Hide();
	void Trap_Placement_SpawnObject();
	struct FRotator Trap_Placement_Calculate_Rotation(const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ActorLocation);
	void Trap_Placement_SetValidLocation(bool CanBePlaced);
	void GetCustomGripAnimation(class UAnimSequence** HandAnim, bool* Valid);

	bool CanBeUsedImpl() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlacableTrap_Base_C">();
	}
	static class ABP_PlacableTrap_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlacableTrap_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_PlacableTrap_Base_C) == 0x000010, "Wrong alignment on ABP_PlacableTrap_Base_C");
static_assert(sizeof(ABP_PlacableTrap_Base_C) == 0x0006F0, "Wrong size on ABP_PlacableTrap_Base_C");
static_assert(offsetof(ABP_PlacableTrap_Base_C, UberGraphFrame) == 0x000418, "Member 'ABP_PlacableTrap_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, BP_ConsumableBasis) == 0x000420, "Member 'ABP_PlacableTrap_Base_C::BP_ConsumableBasis' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, BP_CommonConsumableHUD) == 0x000428, "Member 'ABP_PlacableTrap_Base_C::BP_CommonConsumableHUD' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, SkeletalMesh) == 0x000430, "Member 'ABP_PlacableTrap_Base_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, OwningPlayerController) == 0x000438, "Member 'ABP_PlacableTrap_Base_C::OwningPlayerController' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_PlacementTransform) == 0x000440, "Member 'ABP_PlacableTrap_Base_C::Hologram_PlacementTransform' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Class_Object) == 0x000470, "Member 'ABP_PlacableTrap_Base_C::Trap_Class_Object' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_Actor) == 0x000478, "Member 'ABP_PlacableTrap_Base_C::Hologram_Actor' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_IsInHand) == 0x000480, "Member 'ABP_PlacableTrap_Base_C::Trap_IsInHand' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_HealthPoints) == 0x000484, "Member 'ABP_PlacableTrap_Base_C::Trap_HealthPoints' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Range_Trigger) == 0x000488, "Member 'ABP_PlacableTrap_Base_C::Trap_Range_Trigger' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Timer_AutoSelfDestroy) == 0x00048C, "Member 'ABP_PlacableTrap_Base_C::Trap_Timer_AutoSelfDestroy' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Timer_Despawn) == 0x000490, "Member 'ABP_PlacableTrap_Base_C::Trap_Timer_Despawn' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Timer_Activation) == 0x000494, "Member 'ABP_PlacableTrap_Base_C::Trap_Timer_Activation' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_MinRange) == 0x000498, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_MinRange' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_MaxRange) == 0x00049C, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_MaxRange' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_MaxHeight) == 0x0004A0, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_MaxHeight' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_MaxZAxisNormal) == 0x0004A4, "Member 'ABP_PlacableTrap_Base_C::Trap_MaxZAxisNormal' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_InvalidActors) == 0x0004A8, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_InvalidActors' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_InvalidSurfaces) == 0x0004B8, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_InvalidSurfaces' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_InWater) == 0x0004C8, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_InWater' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_ValidLocation) == 0x0004C9, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_ValidLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Tool_Placement_Debug) == 0x0004CA, "Member 'ABP_PlacableTrap_Base_C::Tool_Placement_Debug' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Class_Hologram) == 0x0004D0, "Member 'ABP_PlacableTrap_Base_C::Trap_Class_Hologram' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, ToolIcon) == 0x0004D8, "Member 'ABP_PlacableTrap_Base_C::ToolIcon' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Mesh_Placed) == 0x0004E0, "Member 'ABP_PlacableTrap_Base_C::Trap_Mesh_Placed' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Mesh_Active) == 0x000508, "Member 'ABP_PlacableTrap_Base_C::Trap_Mesh_Active' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Mesh_Triggered) == 0x000530, "Member 'ABP_PlacableTrap_Base_C::Trap_Mesh_Triggered' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Mesh_Broken) == 0x000558, "Member 'ABP_PlacableTrap_Base_C::Trap_Mesh_Broken' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_Placement) == 0x000580, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_Placement' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_TrapActivated) == 0x0005A8, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_TrapActivated' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_TrapTriggered) == 0x0005D0, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_TrapTriggered' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_Break) == 0x0005F8, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_Break' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_DisplayRangeDecal) == 0x000620, "Member 'ABP_PlacableTrap_Base_C::Hologram_DisplayRangeDecal' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_Mesh) == 0x000628, "Member 'ABP_PlacableTrap_Base_C::Hologram_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_Material_InvalidPlacement) == 0x000650, "Member 'ABP_PlacableTrap_Base_C::Hologram_Material_InvalidPlacement' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Hologram_Material_ValidPlacement) == 0x000658, "Member 'ABP_PlacableTrap_Base_C::Hologram_Material_ValidPlacement' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_Despawn) == 0x000660, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_Despawn' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_Vertical) == 0x000688, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_Vertical' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Sound_Ambient) == 0x000690, "Member 'ABP_PlacableTrap_Base_C::Trap_Sound_Ambient' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, CustomGripAnimPose) == 0x0006B8, "Member 'ABP_PlacableTrap_Base_C::CustomGripAnimPose' has a wrong offset!");
static_assert(offsetof(ABP_PlacableTrap_Base_C, Trap_Placement_RotateToNormal) == 0x0006E0, "Member 'ABP_PlacableTrap_Base_C::Trap_Placement_RotateToNormal' has a wrong offset!");

}

