#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Car_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "S_Car_Colours_structs.hpp"
#include "E_Car_Extension_structs.hpp"
#include "E_AxisSelection_structs.hpp"
#include "BP_Lootable_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Car_Base.BP_Car_Base_C
// 0x01F8 (0x05A0 - 0x03A8)
class ABP_Car_Base_C final : public ABP_Lootable_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Car_Base_C;                      // 0x03A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AlarmAudio;                                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassRightMiddle_SM;                               // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassLeftMiddle_SM;                                // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassLeftBack_SM;                                  // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassBack_SM;                                      // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassRightBack_SM;                                 // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   GlassFront_SM;                                     // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ADM_BuriedCache_PolaroidSpawnPoint_C* BuriedCache_PolaroidSpawnPoint;                    // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        RainAudio;                                         // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Base;                                              // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel4;                                            // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel2;                                            // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel3;                                            // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Wheel1;                                            // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AxleMesh;                                          // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TrunkMesh;                                         // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Trunk;                                             // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Extension;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<int32, class UStaticMesh*>               Wheels;                                            // 0x0440(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_Car_Extension                               Versions;                                          // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_Car_Extension, class UStaticMesh*>     BodyMesh;                                          // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         WheelType;                                         // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FS_Car_Colours>            Colours;                                           // 0x04F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Colour;                                            // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Door_Rotation;                                     // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Two_Colours;                                   // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Trailer;                                        // 0x0549(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_54A[0x2];                                      // 0x054A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Axle_Rotation;                                     // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Steering_Rotation;                                 // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Axle;                                          // 0x0554(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	E_AxisSelection                               Door_Axis;                                         // 0x0555(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreRain;                                        // 0x0556(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_557[0x1];                                      // 0x0557(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RainAudioParameterCurve;                           // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LightsOnMaterial;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     LightsDefaultMaterial;                             // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AlarmSound;                                        // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             AlarmSoundTail;                                    // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AlarmTriggered;                                    // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x3];                                      // 0x0581(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerShootPropability;                           // 0x0584(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LightsMaterialIndex;                               // 0x0588(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCarAlarm;                                       // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_58D[0x3];                                      // 0x058D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TriggerLootPropability;                            // 0x0590(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   MarkerName;                                        // 0x0594(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Car_Base(int32 EntryPoint);
	void StopStuckMaterialCheck();
	void MaterialCheckLoop();
	void StartStuckMaterialsFailsafe();
	void StopAlarmDelegate();
	void Access_Loot(class ABP_Character_C* Looting_character);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void Start_Alarm(class AController* Instigating_Controller);
	void AdjustWeather(float CurrentRainAmount, float CurrentWindIntensity, const struct FVector& CurrentWindDirection, float CurrentWetnessAmount);
	void AdjustRainIntensity(float CurrentRainAmount, float CurrentWetnessAmount);
	void SetHeavyRain(bool HeavyRain);
	void AdjustWindDirection(const struct FVector& CurrentWindDirection);
	void AdjustWindIntensity(float CurrentWindIntensity);
	void UserConstructionScript();
	void SetColours();
	void SetMeches();
	void SetWheels();
	void Set_Lights_Material(class UMaterialInterface* Material);
	void Backup_Lights_Material();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Car_Base_C">();
	}
	static class ABP_Car_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Car_Base_C>();
	}
};
static_assert(alignof(ABP_Car_Base_C) == 0x000008, "Wrong alignment on ABP_Car_Base_C");
static_assert(sizeof(ABP_Car_Base_C) == 0x0005A0, "Wrong size on ABP_Car_Base_C");
static_assert(offsetof(ABP_Car_Base_C, UberGraphFrame_BP_Car_Base_C) == 0x0003A8, "Member 'ABP_Car_Base_C::UberGraphFrame_BP_Car_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, AlarmAudio) == 0x0003B0, "Member 'ABP_Car_Base_C::AlarmAudio' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassRightMiddle_SM) == 0x0003B8, "Member 'ABP_Car_Base_C::GlassRightMiddle_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassLeftMiddle_SM) == 0x0003C0, "Member 'ABP_Car_Base_C::GlassLeftMiddle_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassLeftBack_SM) == 0x0003C8, "Member 'ABP_Car_Base_C::GlassLeftBack_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassBack_SM) == 0x0003D0, "Member 'ABP_Car_Base_C::GlassBack_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassRightBack_SM) == 0x0003D8, "Member 'ABP_Car_Base_C::GlassRightBack_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, GlassFront_SM) == 0x0003E0, "Member 'ABP_Car_Base_C::GlassFront_SM' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, BuriedCache_PolaroidSpawnPoint) == 0x0003E8, "Member 'ABP_Car_Base_C::BuriedCache_PolaroidSpawnPoint' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, RainAudio) == 0x0003F0, "Member 'ABP_Car_Base_C::RainAudio' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Base) == 0x0003F8, "Member 'ABP_Car_Base_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Wheel4) == 0x000400, "Member 'ABP_Car_Base_C::Wheel4' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Wheel2) == 0x000408, "Member 'ABP_Car_Base_C::Wheel2' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Wheel3) == 0x000410, "Member 'ABP_Car_Base_C::Wheel3' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Wheel1) == 0x000418, "Member 'ABP_Car_Base_C::Wheel1' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, AxleMesh) == 0x000420, "Member 'ABP_Car_Base_C::AxleMesh' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, TrunkMesh) == 0x000428, "Member 'ABP_Car_Base_C::TrunkMesh' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Trunk) == 0x000430, "Member 'ABP_Car_Base_C::Trunk' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Extension) == 0x000438, "Member 'ABP_Car_Base_C::Extension' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Wheels) == 0x000440, "Member 'ABP_Car_Base_C::Wheels' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Versions) == 0x000490, "Member 'ABP_Car_Base_C::Versions' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, BodyMesh) == 0x000498, "Member 'ABP_Car_Base_C::BodyMesh' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, WheelType) == 0x0004E8, "Member 'ABP_Car_Base_C::WheelType' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Colours) == 0x0004F0, "Member 'ABP_Car_Base_C::Colours' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Colour) == 0x000540, "Member 'ABP_Car_Base_C::Colour' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Door_Rotation) == 0x000544, "Member 'ABP_Car_Base_C::Door_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Has_Two_Colours) == 0x000548, "Member 'ABP_Car_Base_C::Has_Two_Colours' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Is_Trailer) == 0x000549, "Member 'ABP_Car_Base_C::Is_Trailer' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Axle_Rotation) == 0x00054C, "Member 'ABP_Car_Base_C::Axle_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Steering_Rotation) == 0x000550, "Member 'ABP_Car_Base_C::Steering_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Has_Axle) == 0x000554, "Member 'ABP_Car_Base_C::Has_Axle' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, Door_Axis) == 0x000555, "Member 'ABP_Car_Base_C::Door_Axis' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, IgnoreRain) == 0x000556, "Member 'ABP_Car_Base_C::IgnoreRain' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, RainAudioParameterCurve) == 0x000558, "Member 'ABP_Car_Base_C::RainAudioParameterCurve' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, LightsOnMaterial) == 0x000560, "Member 'ABP_Car_Base_C::LightsOnMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, LightsDefaultMaterial) == 0x000568, "Member 'ABP_Car_Base_C::LightsDefaultMaterial' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, AlarmSound) == 0x000570, "Member 'ABP_Car_Base_C::AlarmSound' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, AlarmSoundTail) == 0x000578, "Member 'ABP_Car_Base_C::AlarmSoundTail' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, AlarmTriggered) == 0x000580, "Member 'ABP_Car_Base_C::AlarmTriggered' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, TriggerShootPropability) == 0x000584, "Member 'ABP_Car_Base_C::TriggerShootPropability' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, LightsMaterialIndex) == 0x000588, "Member 'ABP_Car_Base_C::LightsMaterialIndex' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, HasCarAlarm) == 0x00058C, "Member 'ABP_Car_Base_C::HasCarAlarm' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, TriggerLootPropability) == 0x000590, "Member 'ABP_Car_Base_C::TriggerLootPropability' has a wrong offset!");
static_assert(offsetof(ABP_Car_Base_C, MarkerName) == 0x000594, "Member 'ABP_Car_Base_C::MarkerName' has a wrong offset!");

}

