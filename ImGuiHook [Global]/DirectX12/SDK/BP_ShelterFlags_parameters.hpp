#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShelterFlags

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_ShelterFlags.BP_ShelterFlags_C.UserConstructionScript
// 0x0048 (0x0048 - 0x0000)
struct BP_ShelterFlags_C_UserConstructionScript final
{
public:
	TSoftObjectPtr<class UObject>                 CallFunc_GetSoftReference_ReturnValue;             // 0x0000(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadSoftReference_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            K2Node_DynamicCast_AsStatic_Mesh;                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShelterFlags_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_ShelterFlags_C_UserConstructionScript");
static_assert(sizeof(BP_ShelterFlags_C_UserConstructionScript) == 0x000048, "Wrong size on BP_ShelterFlags_C_UserConstructionScript");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, CallFunc_GetSoftReference_ReturnValue) == 0x000000, "Member 'BP_ShelterFlags_C_UserConstructionScript::CallFunc_GetSoftReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, CallFunc_LoadSoftReference_ReturnValue) == 0x000028, "Member 'BP_ShelterFlags_C_UserConstructionScript::CallFunc_LoadSoftReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000030, "Member 'BP_ShelterFlags_C_UserConstructionScript::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_ShelterFlags_C_UserConstructionScript::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, K2Node_DynamicCast_AsStatic_Mesh) == 0x000038, "Member 'BP_ShelterFlags_C_UserConstructionScript::K2Node_DynamicCast_AsStatic_Mesh' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_ShelterFlags_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_UserConstructionScript, CallFunc_SetStaticMesh_ReturnValue) == 0x000041, "Member 'BP_ShelterFlags_C_UserConstructionScript::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_ShelterFlags.BP_ShelterFlags_C.SetFlagType
// 0x0038 (0x0038 - 0x0000)
struct BP_ShelterFlags_C_SetFlagType final
{
public:
	int32                                         FlagType;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_LoadAsset_Blocking_ReturnValue_1;         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      K2Node_DynamicCast_AsMaterial_Instance_1;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShelterFlags_C_SetFlagType) == 0x000008, "Wrong alignment on BP_ShelterFlags_C_SetFlagType");
static_assert(sizeof(BP_ShelterFlags_C_SetFlagType) == 0x000038, "Wrong size on BP_ShelterFlags_C_SetFlagType");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, FlagType) == 0x000000, "Member 'BP_ShelterFlags_C_SetFlagType::FlagType' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_ShelterFlags_C_SetFlagType::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, CallFunc_LoadAsset_Blocking_ReturnValue) == 0x000008, "Member 'BP_ShelterFlags_C_SetFlagType::CallFunc_LoadAsset_Blocking_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, CallFunc_LoadAsset_Blocking_ReturnValue_1) == 0x000010, "Member 'BP_ShelterFlags_C_SetFlagType::CallFunc_LoadAsset_Blocking_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, K2Node_DynamicCast_AsMaterial_Instance) == 0x000018, "Member 'BP_ShelterFlags_C_SetFlagType::K2Node_DynamicCast_AsMaterial_Instance' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_ShelterFlags_C_SetFlagType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, K2Node_DynamicCast_AsMaterial_Instance_1) == 0x000028, "Member 'BP_ShelterFlags_C_SetFlagType::K2Node_DynamicCast_AsMaterial_Instance_1' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_ShelterFlags_C_SetFlagType::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000031, "Member 'BP_ShelterFlags_C_SetFlagType::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_SetFlagType, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000032, "Member 'BP_ShelterFlags_C_SetFlagType::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");

// Function BP_ShelterFlags.BP_ShelterFlags_C.CheckForDayZ_Event
// 0x0048 (0x0048 - 0x0000)
struct BP_ShelterFlags_C_CheckForDayZ_Event final
{
public:
	struct FDateTime                              CallFunc_UtcNow_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Year;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Month;                      // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Day;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Hour;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Minute;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Second;                     // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakDateTime_Millisecond;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue_1;               // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              CallFunc_MakeDateTime_ReturnValue_2;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue; // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_DateTimeDateTime_ReturnValue;   // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ShelterFlags_C_CheckForDayZ_Event) == 0x000008, "Wrong alignment on BP_ShelterFlags_C_CheckForDayZ_Event");
static_assert(sizeof(BP_ShelterFlags_C_CheckForDayZ_Event) == 0x000048, "Wrong size on BP_ShelterFlags_C_CheckForDayZ_Event");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_UtcNow_ReturnValue) == 0x000000, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_UtcNow_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_MakeDateTime_ReturnValue) == 0x000008, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_MakeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Year) == 0x000010, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Year' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Month) == 0x000014, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Month' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Day) == 0x000018, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Day' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Hour) == 0x00001C, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Hour' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Minute) == 0x000020, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Minute' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Second) == 0x000024, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Second' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BreakDateTime_Millisecond) == 0x000028, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BreakDateTime_Millisecond' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_MakeDateTime_ReturnValue_1) == 0x000030, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_MakeDateTime_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_MakeDateTime_ReturnValue_2) == 0x000038, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_MakeDateTime_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue) == 0x000040, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_GreaterEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_LessEqual_DateTimeDateTime_ReturnValue) == 0x000041, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_LessEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ShelterFlags_C_CheckForDayZ_Event, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_ShelterFlags_C_CheckForDayZ_Event::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

}

