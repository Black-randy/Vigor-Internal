#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameModeComponent_AirDrop

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GameModeComponent_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameModeComponent_AirDrop.BP_GameModeComponent_AirDrop_C
// 0x0038 (0x00F0 - 0x00B8)
class UBP_GameModeComponent_AirDrop_C final : public UBP_GameModeComponent_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GameModeComponent_AirDrop_C;     // 0x00B8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	FMulticastInlineDelegateProperty_             Air_Drop_Dropped;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Air_Drop_Touched_Down;                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             Air_Drop_Looted;                                   // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Air_Drop_Dropped__DelegateSignature(class ABP_AirDropContainer_Base_C* Dropped_Container);
	void Air_Drop_Touched_Down__DelegateSignature(class ABP_AirDropContainer_Base_C* Container);
	void Air_Drop_Looted__DelegateSignature(class ABP_AirDropContainer_Base_C* Looted_Container, class UClass* Item_Taken);
	void ExecuteUbergraph_BP_GameModeComponent_AirDrop(int32 EntryPoint);
	void Container_Touched_Down(class ABP_AirDropContainer_Base_C* Container);
	void Drop_a_Container(class UClass* Container_Type, TArray<class UClass*>& Loot, const struct FVector& Location, float Altitude, const struct FRotator& Rotation_On_Land, class ABP_AirDropContainer_Base_C** New_Container);
	void Compute_Drop_Zone_Area_Marker_Location(class AActor* Drop_Zone_Actor, float Marker_Draw_Radius, float Marker_Error_Radius, struct FVector* Marker_Location);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameModeComponent_AirDrop_C">();
	}
	static class UBP_GameModeComponent_AirDrop_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameModeComponent_AirDrop_C>();
	}
};
static_assert(alignof(UBP_GameModeComponent_AirDrop_C) == 0x000008, "Wrong alignment on UBP_GameModeComponent_AirDrop_C");
static_assert(sizeof(UBP_GameModeComponent_AirDrop_C) == 0x0000F0, "Wrong size on UBP_GameModeComponent_AirDrop_C");
static_assert(offsetof(UBP_GameModeComponent_AirDrop_C, UberGraphFrame_BP_GameModeComponent_AirDrop_C) == 0x0000B8, "Member 'UBP_GameModeComponent_AirDrop_C::UberGraphFrame_BP_GameModeComponent_AirDrop_C' has a wrong offset!");
static_assert(offsetof(UBP_GameModeComponent_AirDrop_C, Air_Drop_Dropped) == 0x0000C0, "Member 'UBP_GameModeComponent_AirDrop_C::Air_Drop_Dropped' has a wrong offset!");
static_assert(offsetof(UBP_GameModeComponent_AirDrop_C, Air_Drop_Touched_Down) == 0x0000D0, "Member 'UBP_GameModeComponent_AirDrop_C::Air_Drop_Touched_Down' has a wrong offset!");
static_assert(offsetof(UBP_GameModeComponent_AirDrop_C, Air_Drop_Looted) == 0x0000E0, "Member 'UBP_GameModeComponent_AirDrop_C::Air_Drop_Looted' has a wrong offset!");

}

