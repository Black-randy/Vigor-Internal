#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SI_WindTurbine

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_SI_BaseImprovement_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SI_WindTurbine.BP_SI_WindTurbine_C
// 0x00C0 (0x0580 - 0x04C0)
class ABP_SI_WindTurbine_C final : public ABP_SI_BaseImprovement_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SI_WindTurbine_C;                // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          InteractionMarkerCollisionVolume;                  // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_03_Prop;                            // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_03_top;                             // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_03;                                 // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Stage_3;                                           // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_02_Prop;                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_02_top;                             // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_02;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Stage_2;                                           // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_01_Prop;                            // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_01_top;                             // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WindTurbine_01;                                 // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Stage_1;                                           // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mess;                                              // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Stage_0;                                           // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_PropellerRotation_Start_NewTrack_3_BC59B2314B02D61A15D3118EFE4E3E8F; // 0x0540(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_PropellerRotation_Start__Direction_BC59B2314B02D61A15D3118EFE4E3E8F; // 0x0544(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_545[0x3];                                      // 0x0545(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_PropellerRotation_Start;                  // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_PropellerRotation_Continuous_NewTrack_0_CC5462BC41208EC96CD82DB97F00CDA5; // 0x0550(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_PropellerRotation_Continuous__Direction_CC5462BC41208EC96CD82DB97F00CDA5; // 0x0554(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_555[0x3];                                      // 0x0555(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_PropellerRotation_Continuous;             // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_TopRotation_NewTrack_4_F51AC75B46D57FFE1941509C00B09A10; // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_TopRotation__Direction_F51AC75B46D57FFE1941509C00B09A10; // 0x0564(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_565[0x3];                                      // 0x0565(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_TopRotation;                              // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LevelSpeedMultiply;                                // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Top_speed;                                         // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetAnimDeltaTime;                               // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_SI_WindTurbine(int32 EntryPoint);
	void LoadAndShowVisualLevel(int32 NewVisualLevel);
	void ShowHologram(class UObject* Hologram);
	void Timeline_PropellerRotation_Continuous__UpdateFunc();
	void Timeline_PropellerRotation_Continuous__FinishedFunc();
	void Timeline_TopRotation__UpdateFunc();
	void Timeline_TopRotation__FinishedFunc();
	void Timeline_PropellerRotation_Start__UpdateFunc();
	void Timeline_PropellerRotation_Start__FinishedFunc();
	void PropellerRotation(float InputPin);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SI_WindTurbine_C">();
	}
	static class ABP_SI_WindTurbine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SI_WindTurbine_C>();
	}
};
static_assert(alignof(ABP_SI_WindTurbine_C) == 0x000008, "Wrong alignment on ABP_SI_WindTurbine_C");
static_assert(sizeof(ABP_SI_WindTurbine_C) == 0x000580, "Wrong size on ABP_SI_WindTurbine_C");
static_assert(offsetof(ABP_SI_WindTurbine_C, UberGraphFrame_BP_SI_WindTurbine_C) == 0x0004C0, "Member 'ABP_SI_WindTurbine_C::UberGraphFrame_BP_SI_WindTurbine_C' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, InteractionMarkerCollisionVolume) == 0x0004C8, "Member 'ABP_SI_WindTurbine_C::InteractionMarkerCollisionVolume' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_03_Prop) == 0x0004D0, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_03_Prop' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_03_top) == 0x0004D8, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_03_top' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_03) == 0x0004E0, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_03' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Stage_3) == 0x0004E8, "Member 'ABP_SI_WindTurbine_C::Stage_3' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_02_Prop) == 0x0004F0, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_02_Prop' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_02_top) == 0x0004F8, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_02_top' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_02) == 0x000500, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_02' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Stage_2) == 0x000508, "Member 'ABP_SI_WindTurbine_C::Stage_2' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_01_Prop) == 0x000510, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_01_Prop' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_01_top) == 0x000518, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_01_top' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, SM_WindTurbine_01) == 0x000520, "Member 'ABP_SI_WindTurbine_C::SM_WindTurbine_01' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Stage_1) == 0x000528, "Member 'ABP_SI_WindTurbine_C::Stage_1' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Mess) == 0x000530, "Member 'ABP_SI_WindTurbine_C::Mess' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Stage_0) == 0x000538, "Member 'ABP_SI_WindTurbine_C::Stage_0' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Start_NewTrack_3_BC59B2314B02D61A15D3118EFE4E3E8F) == 0x000540, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Start_NewTrack_3_BC59B2314B02D61A15D3118EFE4E3E8F' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Start__Direction_BC59B2314B02D61A15D3118EFE4E3E8F) == 0x000544, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Start__Direction_BC59B2314B02D61A15D3118EFE4E3E8F' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Start) == 0x000548, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Start' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Continuous_NewTrack_0_CC5462BC41208EC96CD82DB97F00CDA5) == 0x000550, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Continuous_NewTrack_0_CC5462BC41208EC96CD82DB97F00CDA5' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Continuous__Direction_CC5462BC41208EC96CD82DB97F00CDA5) == 0x000554, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Continuous__Direction_CC5462BC41208EC96CD82DB97F00CDA5' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_PropellerRotation_Continuous) == 0x000558, "Member 'ABP_SI_WindTurbine_C::Timeline_PropellerRotation_Continuous' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_TopRotation_NewTrack_4_F51AC75B46D57FFE1941509C00B09A10) == 0x000560, "Member 'ABP_SI_WindTurbine_C::Timeline_TopRotation_NewTrack_4_F51AC75B46D57FFE1941509C00B09A10' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_TopRotation__Direction_F51AC75B46D57FFE1941509C00B09A10) == 0x000564, "Member 'ABP_SI_WindTurbine_C::Timeline_TopRotation__Direction_F51AC75B46D57FFE1941509C00B09A10' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Timeline_TopRotation) == 0x000568, "Member 'ABP_SI_WindTurbine_C::Timeline_TopRotation' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, LevelSpeedMultiply) == 0x000570, "Member 'ABP_SI_WindTurbine_C::LevelSpeedMultiply' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, Top_speed) == 0x000574, "Member 'ABP_SI_WindTurbine_C::Top_speed' has a wrong offset!");
static_assert(offsetof(ABP_SI_WindTurbine_C, TargetAnimDeltaTime) == 0x000578, "Member 'ABP_SI_WindTurbine_C::TargetAnimDeltaTime' has a wrong offset!");

}

