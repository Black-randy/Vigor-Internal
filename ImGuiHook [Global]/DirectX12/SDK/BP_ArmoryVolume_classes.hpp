#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ArmoryVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ArmoryVolume.BP_ArmoryVolume_C
// 0x0028 (0x0248 - 0x0220)
class ABP_ArmoryVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          AnalyticsVolume;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          OnboardingVolume;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDateTime                              ArmoryEnteredTimeSpan;                             // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ArmoryVolume(int32 EntryPoint);
	void BndEvt__AnalyticsVolume_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__AnalyticsVolume_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveActorBeginOverlap(class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ArmoryVolume_C">();
	}
	static class ABP_ArmoryVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ArmoryVolume_C>();
	}
};
static_assert(alignof(ABP_ArmoryVolume_C) == 0x000008, "Wrong alignment on ABP_ArmoryVolume_C");
static_assert(sizeof(ABP_ArmoryVolume_C) == 0x000248, "Wrong size on ABP_ArmoryVolume_C");
static_assert(offsetof(ABP_ArmoryVolume_C, UberGraphFrame) == 0x000220, "Member 'ABP_ArmoryVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ArmoryVolume_C, AnalyticsVolume) == 0x000228, "Member 'ABP_ArmoryVolume_C::AnalyticsVolume' has a wrong offset!");
static_assert(offsetof(ABP_ArmoryVolume_C, OnboardingVolume) == 0x000230, "Member 'ABP_ArmoryVolume_C::OnboardingVolume' has a wrong offset!");
static_assert(offsetof(ABP_ArmoryVolume_C, DefaultSceneRoot) == 0x000238, "Member 'ABP_ArmoryVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ArmoryVolume_C, ArmoryEnteredTimeSpan) == 0x000240, "Member 'ABP_ArmoryVolume_C::ArmoryEnteredTimeSpan' has a wrong offset!");

}

